{"task_id": 0, "completion_id": 0, "completion": "To implement Ridge Regression using the closed-form solution, we need to follow these steps:\n\n1. **Add a Bias Term**: We need to augment the feature matrix \\(\\mathbf{X}\\) with a column of ones to account for the intercept term.\n\n2. **Compute the Regularized Matrix**: Calculate \\((\\mathbf{X}^\\top \\mathbf{X} + \\alpha \\mathbf{I})\\), where \\(\\mathbf{I}\\) is the identity matrix.\n\n3. **Check Invertibility**: Ensure that the matrix is invertible by checking if its determinant is non-zero. If it is zero, return -1.\n\n4. **Compute the Weight Vector**: Use the closed-form solution to compute the weight vector \\(\\hat{\\mathbf{w}}\\).\n\n5. **Round and Return**: Round the coefficients to 4 decimal places and return them as a list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"Perform Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    data (np.ndarray): The input data where the last column is the target variable.\n    alpha (float): The regularization strength (non-negative).\n    \n    Returns:\n    list[float]: The weight vector rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add bias term (column of ones)\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    # Compute X^T * X\n    XtX = X.T @ X\n    \n    # Add regularization term (alpha * I)\n    I = np.eye(X.shape[1])\n    XtX_alpha_I = XtX + alpha * I\n    \n    # Check if the matrix is invertible\n    if np.linalg.det(XtX_alpha_I) == 0:\n        return -1\n    \n    # Compute the weight vector using the closed-form solution\n    XtX_alpha_I_inv = np.linalg.inv(XtX_alpha_I)\n    XtY = X.T @ y\n    w = XtX_alpha_I_inv @ XtY\n    \n    # Round the weights to 4 decimal places and return as a list\n    return list(np.round(w, 4))\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# alpha = 0.1\n# print(ridge_regression(data, alpha))\n```\n\n### Explanation:\n- **Bias Term**: We add a column of ones to \\(\\mathbf{X}\\) to account for the intercept.\n- **Regularization**: The term \\(\\alpha \\mathbf{I}\\) is added to \\(\\mathbf{X}^\\top \\mathbf{X}\\) to prevent overfitting and handle multicollinearity.\n- **Invertibility Check**: We use the determinant to check if the matrix is invertible. If the determinant is zero, the matrix is singular, and we return -1.\n- **Weight Calculation**: The closed-form solution is used to compute the weights, which are then rounded and returned."}
{"task_id": 1, "completion_id": 0, "completion": "To implement the dual-form perceptron learning algorithm, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    gram_matrix = np.dot(X_train, X_train.T)\n    \n    updates = 0\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * gram_matrix[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n                break  # Restart the scan from i = 0\n        if not updated:\n            break  # No update in the entire pass, stop training\n    \n    # Compute the primal weight vector w\n    w = np.sum((alpha * y_train)[:, np.newaxis] * X_train, axis=0)\n    \n    # Round w and b to 4 decimal places\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n    \n    return w, b\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing the dual parameters `alpha` to zero and the bias `b` to zero. We also compute the Gram matrix, which is the inner product of the training samples.\n\n2. **Training Loop**: We iterate over the samples, computing the activation for each sample using the current `alpha` values and the Gram matrix. If a sample is misclassified (i.e., the margin is \u2264 0), we update `alpha` and `b` and restart the scan from the beginning.\n\n3. **Stopping Criteria**: The loop stops when either a full pass over the data results in no updates (indicating convergence) or when the maximum number of updates (`n_iter`) is reached.\n\n4. **Compute Primal Weights**: After training, we compute the primal weight vector `w` using the final `alpha` values.\n\n5. **Output**: The weight vector `w` and bias `b` are rounded to four decimal places before returning.\n\nThis implementation ensures that the perceptron learning algorithm is executed in its dual form, leveraging the Gram matrix for efficient computation."}
{"task_id": 2, "completion_id": 0, "completion": "To implement the standard GLM link functions, we need to define the link function, its inverse, and its derivative for each of the three common GLM instances: identity, log, and logit. Here's how you can implement this in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)\nmu2 = links[\"logit\"][\"inv_link\"](eta)\n\n# Print rounded results for demonstration\nprint(\"eta:\", np.round(eta, 4))  # \u2192 [-1.3863, 1.3863]\nprint(\"mu2:\", np.round(mu2, 4))  # \u2192 [0.2, 0.8]\n```\n\n### Explanation:\n- **Identity Link**: The identity link function is straightforward, as it returns the input value directly. Its inverse is also the same, and the derivative is a constant 1.\n- **Log Link**: The log link function applies the natural logarithm to the input. Its inverse is the exponential function, and the derivative is the reciprocal of the input.\n- **Logit Link**: The logit link function is used for probabilities, transforming them using the log-odds. Its inverse is the logistic function, and the derivative is calculated based on the formula for the derivative of the logit function.\n\nThese functions are designed to work with NumPy arrays, allowing for efficient element-wise operations."}
{"task_id": 3, "completion_id": 0, "completion": "To implement the `isolation_tree_path_length` function, we need to simulate the process of building an isolation tree and then traverse it to determine the depth of each sample. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)  # Set the random seed for reproducibility\n    \n    def build_tree(indices, depth):\n        if len(indices) < 3:\n            # If fewer than three samples reach the node, it becomes a leaf\n            for idx in indices:\n                depths[idx] = depth\n            return\n        \n        # Choose a feature index uniformly at random\n        f = np.random.choice(data.shape[1])\n        \n        # Determine the range [down, up] for the chosen feature\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        \n        # Draw a real number v uniformly from [down, up]\n        v = np.random.uniform(down, up)\n        \n        # Split the indices into left and right children\n        left_indices = [idx for idx in indices if data[idx, f] <= v]\n        right_indices = [idx for idx in indices if data[idx, f] > v]\n        \n        # Recursively build the tree for left and right children\n        build_tree(left_indices, depth + 1)\n        build_tree(right_indices, depth + 1)\n    \n    n_samples = data.shape[0]\n    depths = [0] * n_samples  # Initialize depths for each sample\n    \n    # Start building the tree from the root with all indices\n    build_tree(list(range(n_samples)), 0)\n    \n    return depths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```\n\n### Explanation:\n1. **Initialization**: We set the random seed to ensure reproducibility. We also initialize a list `depths` to store the depth of each sample.\n\n2. **Recursive Tree Building**:\n   - The `build_tree` function is a recursive function that constructs the isolation tree.\n   - If a node has fewer than three samples, it becomes a leaf, and we record the current depth for all samples reaching this node.\n   - Otherwise, we randomly select a feature and determine the range `[down, up]` for that feature among the samples reaching the node.\n   - We then split the samples into left and right children based on whether their feature value is less than or equal to `v` or greater than `v`.\n   - The function is called recursively for both children, increasing the depth by 1 each time.\n\n3. **Result**: After the tree is built, the `depths` list contains the depth of the leaf reached by each sample, which is returned as the result."}
{"task_id": 4, "completion_id": 0, "completion": "To solve this problem, we need to compute the pair-wise squared Euclidean distance matrix for a given set of samples in a fully vectorized manner. We'll use the identity:\n\n\\[ \\|x - y\\|^2 = \\|x\\|^2 + \\|y\\|^2 - 2 \\cdot x^T y \\]\n\nThis allows us to avoid explicit loops and compute the distance matrix efficiently using matrix operations. Here's how we can implement this in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    # Compute the squared norms of each row (sample)\n    squared_norms = np.sum(X**2, axis=1)\n\n    # Compute the distance matrix using the identity\n    D = squared_norms[:, np.newaxis] + squared_norms[np.newaxis, :] - 2 * np.dot(X, X.T)\n\n    # Ensure all distances are non-negative (numerical stability)\n    D = np.maximum(D, 0)\n\n    # Round the result to 4 decimal places\n    D = np.round(D, 4)\n\n    # Convert the result to a list of lists\n    return D.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# print(l2_distance(X))\n```\n\n### Explanation:\n\n1. **Squared Norms Calculation**: We first calculate the squared norm of each sample (row) in `X` using `np.sum(X**2, axis=1)`. This gives us a 1D array where each element is the squared norm of the corresponding sample.\n\n2. **Distance Matrix Calculation**: Using the identity, we compute the distance matrix `D`:\n   - `squared_norms[:, np.newaxis]` reshapes the squared norms to a column vector.\n   - `squared_norms[np.newaxis, :]` reshapes the squared norms to a row vector.\n   - The expression `squared_norms[:, np.newaxis] + squared_norms[np.newaxis, :]` computes the sum of squared norms for each pair of samples.\n   - `2 * np.dot(X, X.T)` computes the dot product of `X` with its transpose, which is subtracted from the sum of squared norms to get the squared distances.\n\n3. **Numerical Stability**: We use `np.maximum(D, 0)` to ensure that all distances are non-negative, which can be important due to potential floating-point arithmetic issues.\n\n4. **Rounding and Conversion**: We round the distances to 4 decimal places and convert the NumPy array to a standard Python list of lists using `tolist()`.\n\nThis implementation is efficient and leverages NumPy's capabilities to perform operations on entire arrays at once, avoiding explicit loops over samples."}
{"task_id": 6, "completion_id": 0, "completion": "To implement the function `xgboost_predict`, we need to follow these steps:\n\n1. **Aggregate the Tree Outputs**: For each sample, compute the aggregated score using the formula provided: `score = 0 - learning_rate * \u03a3 tree_prediction`.\n\n2. **Apply Softmax**: Convert the aggregated scores into probabilities using the softmax function. This is done row-wise for each sample.\n\n3. **Determine Predicted Class**: For each sample, find the index of the maximum probability, which corresponds to the predicted class.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    # Convert predictions to numpy arrays if they are not already\n    predictions = [np.array(tree_pred) for tree_pred in predictions]\n    \n    # Aggregate the tree outputs\n    aggregated_scores = np.sum(predictions, axis=0) * learning_rate\n    aggregated_scores = 0 - aggregated_scores\n    \n    # Apply softmax row-wise\n    exp_scores = np.exp(aggregated_scores - np.max(aggregated_scores, axis=1, keepdims=True))\n    probabilities = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    \n    # Determine predicted class for each sample\n    predicted_classes = np.argmax(probabilities, axis=1)\n    \n    # Return as a plain Python list\n    return predicted_classes.tolist()\n\n```\n\n### Explanation:\n\n- **Aggregation**: We sum the predictions from all trees for each sample and class, scale by the learning rate, and subtract from zero to get the aggregated score.\n\n- **Softmax**: The softmax function is applied to each row (sample) to convert scores into probabilities. We subtract the maximum score in each row before exponentiation for numerical stability.\n\n- **Prediction**: We use `np.argmax` to find the index of the maximum probability for each sample, which gives us the predicted class.\n\nThis function efficiently handles the aggregation and prediction process for XGBoost tree outputs."}
{"task_id": 7, "completion_id": 0, "completion": "To solve the problem of frequent itemset mining, we can use a straightforward approach that involves generating all possible itemsets and counting their occurrences across the transactions. Here's how you can implement the function:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Initialize a counter to count the support of itemsets\n    itemset_support = Counter()\n    \n    # Iterate over each transaction\n    for transaction in transactions:\n        # Remove duplicates and sort the transaction\n        transaction = sorted(set(transaction))\n        \n        # Generate all possible itemsets for the current transaction\n        for size in range(1, len(transaction) + 1):\n            for itemset in combinations(transaction, size):\n                itemset_support[itemset] += 1\n    \n    # Filter itemsets based on the minimum support count\n    frequent_itemsets = {\n        itemset: count for itemset, count in itemset_support.items() if count >= min_support_count\n    }\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\n### Explanation:\n1. **Calculate Minimum Support Count**: We first calculate the minimum support count using the formula `math.ceil(minsup * N)`, where `N` is the number of transactions.\n\n2. **Count Itemset Support**: We use a `Counter` to keep track of how many transactions contain each itemset. For each transaction, we remove duplicates and sort the items, then generate all possible itemsets using `combinations`.\n\n3. **Filter Frequent Itemsets**: After counting the support for all itemsets, we filter out those that do not meet the minimum support count.\n\n4. **Return Result**: The function returns a dictionary of frequent itemsets with their support counts.\n\nThis approach is simple and works well for small datasets. For larger datasets, more efficient algorithms like Apriori or FP-Growth would be preferable."}
{"task_id": 8, "completion_id": 0, "completion": "To implement binary logistic regression from scratch, we need to follow the steps outlined in the task description. We'll use batch gradient descent to optimize the model parameters. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-z))\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        n_iterations: int = 4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    # Initialize parameters\n    n_samples, n_features = X_train.shape\n    weights = np.zeros(n_features)\n    bias = 0\n\n    # Gradient descent\n    for _ in range(n_iterations):\n        # Compute the linear score\n        linear_model = np.dot(X_train, weights) + bias\n        # Apply the sigmoid function\n        y_predicted = sigmoid(linear_model)\n\n        # Compute the gradients\n        dw = (1 / n_samples) * np.dot(X_train.T, (y_predicted - y_train))\n        db = (1 / n_samples) * np.sum(y_predicted - y_train)\n\n        # Update the parameters\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n\n    # Predict on the test set\n    linear_model_test = np.dot(X_test, weights) + bias\n    y_predicted_test = sigmoid(linear_model_test)\n    y_predicted_labels = [int(round(prob)) for prob in y_predicted_test]\n\n    return y_predicted_labels\n\n# Example usage:\n# X_train = np.array([[...], [...], ...])\n# y_train = np.array([...])\n# X_test = np.array([[...], [...], ...])\n# predictions = logistic_regression_predict(X_train, y_train, X_test)\n# print(predictions)\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the weights and bias to zero.\n\n2. **Gradient Descent**: For each iteration, we:\n   - Compute the linear score using the current weights and bias.\n   - Apply the sigmoid function to get the predicted probabilities.\n   - Calculate the gradients of the loss with respect to the weights and bias.\n   - Update the weights and bias using the gradients and the learning rate.\n\n3. **Prediction**: After training, we use the learned weights and bias to predict the class labels for the test set. We apply the sigmoid function to the linear scores and round the probabilities to get binary class predictions.\n\nThis implementation should work for binary classification tasks where the labels are 0 and 1."}
{"task_id": 10, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\(\\tilde{X}_{t-1}\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\(X_t\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\(\\varepsilon\\), 0 <= weight <= 1. Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places. A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    # Convert inputs to numpy arrays for broadcasting\n    prev = np.asarray(prev, dtype=float)\n    cur = np.asarray(cur, dtype=float)\n    weight = np.asarray(weight, dtype=float)\n    \n    # Perform the smoothing calculation\n    smoothed = weight * prev + (1 - weight) * cur\n    \n    # Round the result to four decimal places\n    smoothed_rounded = np.round(smoothed, 4)\n    \n    # Determine if the result should be a scalar or a list\n    if np.isscalar(prev) and np.isscalar(cur) and np.isscalar(weight):\n        return float(smoothed_rounded)\n    else:\n        return smoothed_rounded.tolist()\n\n# Example usage:\n# prev = 10.0\n# cur = 12.0\n# weight = 0.8\n# print(smooth(prev, cur, weight))  # Output: 10.4\n```\n\n### Explanation:\n1. **Input Handling**: The function first converts all inputs (`prev`, `cur`, `weight`) to numpy arrays. This allows for easy broadcasting and element-wise operations.\n\n2. **Smoothing Calculation**: The formula for exponential smoothing is applied using numpy's broadcasting capabilities, which handle both scalar and vector inputs seamlessly.\n\n3. **Rounding**: The result is rounded to four decimal places using `np.round`.\n\n4. **Output Type**: The function checks if all inputs are scalars. If they are, it returns a single float. Otherwise, it returns a list using `tolist()` method on the numpy array.\n\nThis implementation efficiently handles both scalar and vector inputs, ensuring the correct application of the smoothing formula and output format."}
{"task_id": 11, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm from scratch, we'll follow the steps outlined in your task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Initialize centres as the first k samples\n    centres = data[:k].copy()\n    n_samples = data.shape[0]\n    labels = np.zeros(n_samples, dtype=int)\n\n    for iteration in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre\n        for i in range(n_samples):\n            distances = np.sum((data[i] - centres) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Step 3: Recompute centres\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n\n        for i in range(n_samples):\n            new_centres[labels[i]] += data[i]\n            counts[labels[i]] += 1\n\n        for j in range(k):\n            if counts[j] == 0:\n                # Re-initialize empty cluster with a random sample\n                new_centres[j] = data[np.random.randint(0, n_samples)]\n            else:\n                new_centres[j] /= counts[j]\n\n        # Step 4: Check for convergence\n        max_change = np.max(np.sqrt(np.sum((new_centres - centres) ** 2, axis=1)))\n        centres = new_centres\n\n        if max_change < epsilon:\n            break\n\n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n\n    return centres, labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# centres, labels = kmeans(data, k)\n# print(\"Centres:\", centres)\n# print(\"Labels:\", labels)\n```\n\n### Explanation:\n1. **Initialization**: The initial cluster centers are chosen as the first `k` samples from the dataset.\n2. **Assignment Step**: Each sample is assigned to the nearest cluster center based on the squared Euclidean distance.\n3. **Update Step**: The cluster centers are updated as the mean of all samples assigned to that cluster. If a cluster becomes empty, it is re-initialized with a random sample from the dataset.\n4. **Convergence Check**: The algorithm stops if the maximum change in any center is less than `epsilon` or if the maximum number of iterations (`max_iter`) is reached.\n5. **Output**: The final cluster centers are rounded to 4 decimal places, and the cluster labels for each sample are returned.\n\nThis implementation adheres to the constraints and requirements specified in your task description."}
{"task_id": 12, "completion_id": 0, "completion": "To compute the power spectrum of audio frames using the real-valued FFT (`numpy.fft.rfft`), we need to follow these steps:\n\n1. Compute the real FFT for each frame.\n2. Calculate the squared magnitude of the FFT results to obtain the power spectrum.\n3. Optionally scale the power spectrum by dividing each value by the number of DFT bins (`N/2 + 1`) if the `scale` argument is `True`.\n4. Round each value to the 4th decimal place.\n5. Convert the result to a regular Python list using `.tolist()`.\n\nHere's the implementation of the `power_spectrum` function:\n\n```python\nimport numpy as np\n\ndef power_spectrum(frames: np.ndarray, scale: bool = False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True the resulting power spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        The power spectrum of each frame (only positive frequencies), rounded\n        to four decimal places and returned as a regular Python list.\n    \"\"\"\n    # Number of frames (M) and number of samples per frame (N)\n    M, N = frames.shape\n    \n    # Number of DFT bins\n    num_bins = N // 2 + 1\n    \n    # Initialize a list to store the power spectrum of each frame\n    power_spectra = []\n    \n    for frame in frames:\n        # Compute the real FFT of the frame\n        fft_result = np.fft.rfft(frame)\n        \n        # Compute the power spectrum (squared magnitude)\n        power_spectrum = np.abs(fft_result) ** 2\n        \n        # Optionally scale the power spectrum\n        if scale:\n            power_spectrum /= num_bins\n        \n        # Round to 4 decimal places\n        power_spectrum = np.round(power_spectrum, 4)\n        \n        # Append the result to the list\n        power_spectra.append(power_spectrum.tolist())\n    \n    return power_spectra\n```\n\nThis function processes each frame individually, computes its power spectrum, optionally scales it, rounds the values, and returns the results as a list of lists."}
{"task_id": 13, "completion_id": 0, "completion": "To implement the item-based k-NN collaborative filtering recommender, we need to follow the algorithm steps provided. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    S = np.zeros((n_items, n_items))\n\n    # Build item-item similarity matrix\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            # Collect users who rated both items\n            users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_rated_both) == 0:\n                continue\n\n            v1 = data[users_rated_both, i]\n            v2 = data[users_rated_both, j]\n\n            if criterion == 'cosine':\n                # Mean center if standard deviation is larger than 1e-3\n                if np.std(v1) > 1e-3:\n                    v1 = v1 - np.mean(v1)\n                if np.std(v2) > 1e-3:\n                    v2 = v2 - np.mean(v2)\n                # Compute cosine similarity\n                norm_v1 = np.linalg.norm(v1)\n                norm_v2 = np.linalg.norm(v2)\n                if norm_v1 > 0 and norm_v2 > 0:\n                    similarity = np.dot(v1, v2) / (norm_v1 * norm_v2)\n                else:\n                    similarity = 0\n            elif criterion == 'pearson':\n                # Compute Pearson correlation\n                similarity = np.corrcoef(v1, v2)[0, 1]\n\n            S[i, j] = similarity\n            S[j, i] = similarity\n\n    # Collect indices of items already rated by the active user\n    rated_items = np.where(data[user_ind] > 0)[0]\n    if len(rated_items) == n_items:\n        return []\n\n    # Compute predicted attractiveness scores for unrated items\n    scores = {}\n    for t in range(n_items):\n        if data[user_ind, t] > 0:\n            continue\n\n        numerator = 0\n        denominator = 0\n        for i in rated_items:\n            numerator += data[user_ind, i] * S[t, i]\n            denominator += abs(S[t, i])\n\n        score = numerator / denominator if denominator != 0 else 0\n        scores[t] = score\n\n    # Sort items by score in descending order, using item index for tie-breaking\n    recommended_items = sorted(scores, key=lambda x: (-scores[x], x))\n\n    # Return at most k items\n    return recommended_items[:k]\n```\n\n### Explanation:\n1. **Item-Item Similarity Matrix**: We iterate over pairs of items and compute the similarity based on the specified criterion (cosine or Pearson). For cosine similarity, we mean-center the vectors if their standard deviation is above a threshold. For Pearson correlation, we use `np.corrcoef`.\n\n2. **Rated Items**: We collect the indices of items that the active user has already rated.\n\n3. **Predicted Scores**: For each unrated item, we compute the predicted attractiveness score using the formula provided. If the denominator is zero, the score is set to zero.\n\n4. **Sorting and Returning**: We sort the items by their scores in descending order, using the item index for tie-breaking. We return at most `k` items.\n\nThis implementation follows the algorithm steps and constraints provided in the task description."}
{"task_id": 14, "completion_id": 0, "completion": "To implement the binary logistic loss along with its gradient and Hessian, we need to follow the mathematical definitions provided. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    # Sigmoid function to convert logits to probabilities\n    p = 1 / (1 + np.exp(-y_pred))\n    \n    # Avoid log(0) by clipping probabilities\n    epsilon = 1e-15\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute individual losses\n    losses = - (y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute gradient (first derivative)\n    gradient = p - y\n    \n    # Compute Hessian diagonal (second derivative)\n    hessian = p * (1 - p)\n    \n    # Calculate mean loss\n    mean_loss = np.mean(losses)\n    \n    # Round results to 4 decimal places\n    mean_loss = round(mean_loss, 4)\n    gradient = [round(g, 4) for g in gradient]\n    hessian = [round(h, 4) for h in hessian]\n    \n    return mean_loss, gradient, hessian\n\n# Example usage:\n# y = np.array([0, 1, 0, 1])\n# y_pred = np.array([0.2, 0.8, -0.5, 1.0])\n# print(logistic_loss_metrics(y, y_pred))\n```\n\n### Explanation:\n1. **Sigmoid Function**: Converts logits to probabilities using the sigmoid function.\n2. **Clipping**: Ensures probabilities are within a safe range to avoid issues with `log(0)`.\n3. **Loss Calculation**: Computes the binary cross-entropy loss for each sample.\n4. **Gradient Calculation**: Computes the gradient as the difference between predicted probabilities and actual labels.\n5. **Hessian Calculation**: Computes the diagonal of the Hessian matrix, which is the second derivative of the loss with respect to the logits.\n6. **Mean Loss**: Computes the mean of the individual losses.\n7. **Rounding**: Rounds all results to 4 decimal places for consistency.\n\nThis function will return the mean logistic loss, the gradient, and the Hessian diagonal for each sample, all rounded to 4 decimal places."}
{"task_id": 16, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `ngrams` function that generates contiguous N-grams from a given sequence:\n\n```python\nfrom typing import Any, Iterable, List, Tuple\n\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    # Check if N is larger than the sequence length\n    if N > len(sequence):\n        return []\n\n    # Generate the N-grams using a list comprehension\n    return [tuple(sequence[i:i + N]) for i in range(len(sequence) - N + 1)]\n\n# Example usage:\nprint(ngrams([1, 2, 3, 4], 2))  # Output: [(1, 2), (2, 3), (3, 4)]\nprint(ngrams(\"hello\", 3))       # Output: [('h', 'e', 'l'), ('e', 'l', 'l'), ('l', 'l', 'o')]\nprint(ngrams((1, 2, 3), 4))     # Output: []\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `N` is larger than the length of the sequence. If it is, it returns an empty list, as no N-grams can be formed.\n\n2. **N-gram Generation**: The function uses a list comprehension to generate the N-grams. It iterates over the sequence using a range that ensures the sliding window of length `N` does not exceed the sequence bounds.\n\n3. **Tuple Conversion**: Each slice of the sequence is converted into a tuple, ensuring the result is a list of tuples as required.\n\nThis implementation efficiently handles any ordered sequence that supports slicing, including lists, tuples, and strings."}
{"task_id": 17, "completion_id": 0, "completion": "To solve this problem, we need to construct a tree from the given lists: `items`, `counts`, and `parents`. The tree will be represented as a nested dictionary structure. Here's how we can implement the `build_tree` function:\n\n1. **Identify the Root Node**: The root node is the one with a parent index of `-1`.\n\n2. **Initialize Nodes**: Create a dictionary to store each node's data, including its children. Each node will be represented as a dictionary with keys `'item'`, `'count'`, and `'children'`.\n\n3. **Build the Tree**: Iterate through the `parents` list to build the tree structure. For each node, if it has a parent (i.e., its parent index is not `-1`), add it to the parent's `'children'` list.\n\n4. **Return the Root Node**: Once the tree is constructed, return the root node's dictionary.\n\nHere's the implementation of the `build_tree` function:\n\n```python\ndef build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    if not items or not counts or not parents:\n        return {}\n\n    # Initialize a list to store all nodes as dictionaries\n    nodes = [{'item': item, 'count': count, 'children': []} for item, count in zip(items, counts)]\n\n    # Identify the root node\n    root = None\n\n    # Build the tree structure\n    for i, parent_index in enumerate(parents):\n        if parent_index == -1:\n            root = nodes[i]\n        else:\n            nodes[parent_index]['children'].append(nodes[i])\n\n    return root\n\n# Example usage:\nitems = [\"root\", \"child1\", \"child2\", \"child3\"]\ncounts = [10, 20, 30, 40]\nparents = [-1, 0, 0, 1]\n\ntree = build_tree(items, counts, parents)\nprint(tree)\n```\n\n### Explanation:\n\n- **Initialization**: We create a list of dictionaries, `nodes`, where each dictionary represents a node with its `item`, `count`, and an empty list for `children`.\n\n- **Tree Construction**: We iterate over the `parents` list. If a node has a parent (i.e., `parent_index` is not `-1`), we append it to the `children` list of its parent node. If `parent_index` is `-1`, we identify that node as the root.\n\n- **Return**: Finally, we return the root node's dictionary, which now contains the entire tree structure.\n\nThis solution ensures that the children of each node appear in the order they are listed in the input, as required."}
{"task_id": 18, "completion_id": 0, "completion": "To implement the `zero` function as described, we can utilize NumPy's `np.zeros` function, which efficiently creates arrays filled with zeros. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    # Extract dtype from kwargs, defaulting to float if not provided\n    dtype = kwargs.get('dtype', float)\n    \n    # Use np.zeros to create the array with the specified shape and dtype\n    return np.zeros(shape, dtype=dtype)\n```\n\n### Explanation:\n1. **Importing NumPy**: We start by importing the NumPy library, which is essential for creating and manipulating arrays.\n\n2. **Function Definition**: The function `zero` takes a `shape` argument and optional keyword arguments (`kwargs`).\n\n3. **Handling `dtype`**: We extract the `dtype` from `kwargs` using `kwargs.get('dtype', float)`. This ensures that if `dtype` is not provided, it defaults to Python's built-in `float`, which corresponds to `np.float64`.\n\n4. **Creating the Array**: We use `np.zeros(shape, dtype=dtype)` to create an array filled with zeros. The `shape` parameter specifies the dimensions, and `dtype` specifies the data type.\n\n5. **Return Value**: The function returns a NumPy ndarray filled with zeros, matching the requested shape and dtype.\n\nThis implementation efficiently leverages NumPy's capabilities while adhering to the task requirements."}
{"task_id": 19, "completion_id": 0, "completion": "To solve the problem of finding the best split for a gradient-boosting tree node, we need to evaluate all possible splits across all features and their unique values. The goal is to maximize the gain, which is the reduction in the regularized loss function. Here's how you can implement the `best_split` function:\n\n```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    \n    # Calculate the loss of the current node\n    G = np.sum(g)\n    H = np.sum(h)\n    current_loss = -0.5 * (G ** 2) / (H + lam) + gamma\n    \n    best_gain = 0\n    best_split = None\n    \n    # Iterate over each feature\n    for feature_index in range(n_features):\n        # Get unique values of the feature\n        unique_values = np.unique(X[:, feature_index])\n        \n        # Try each unique value as a potential threshold\n        for threshold in unique_values:\n            # Split the data into left and right based on the threshold\n            left_indices = X[:, feature_index] < threshold\n            right_indices = ~left_indices\n            \n            # Ensure valid splits (at least two instances on each side)\n            if np.sum(left_indices) < 2 or np.sum(right_indices) < 2:\n                continue\n            \n            # Calculate gradients and Hessians for left and right splits\n            G_L = np.sum(g[left_indices])\n            H_L = np.sum(h[left_indices])\n            G_R = np.sum(g[right_indices])\n            H_R = np.sum(h[right_indices])\n            \n            # Calculate the loss for left and right children\n            loss_L = -0.5 * (G_L ** 2) / (H_L + lam) + gamma\n            loss_R = -0.5 * (G_R ** 2) / (H_R + lam) + gamma\n            \n            # Calculate the gain from the split\n            gain = current_loss - (loss_L + loss_R)\n            \n            # Update the best split if the gain is positive and greater than the current best gain\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, threshold)\n    \n    return best_split if best_gain > 0 else None\n```\n\n### Explanation:\n1. **Initial Setup**: We start by calculating the loss of the current node using the provided gradients and Hessians.\n\n2. **Iterate Over Features and Thresholds**: For each feature, we consider every unique value as a potential threshold for splitting the data.\n\n3. **Valid Splits**: We ensure that each split leaves at least two instances on each side.\n\n4. **Calculate Gains**: For each valid split, we compute the loss for the left and right children and calculate the gain.\n\n5. **Track Best Split**: We keep track of the split that provides the highest positive gain.\n\n6. **Return Result**: If a positive gain is found, we return the corresponding feature index and threshold; otherwise, we return `None`.\n\nThis approach ensures that we evaluate all possible splits and select the one that maximizes the reduction in the regularized loss function."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute the sigmoid function\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute the gradient of the sigmoid function\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    \n    # Check if the input was a scalar\n    if np.isscalar(x):\n        return float(sigmoid_x), float(gradient_x)\n    else:\n        # Convert the results to Python lists if the input was array-like\n        return sigmoid_x.tolist(), gradient_x.tolist()\n\n# Example usage:\n# scalar_input = 0.5\n# list_input = [0.5, -1.0, 2.0]\n# array_input = np.array([[0.5, -1.0], [2.0, 3.0]])\n# print(sigmoid_activation(scalar_input))\n# print(sigmoid_activation(list_input))\n# print(sigmoid_activation(array_input))\n```\n\nThis implementation handles different types of inputs, computes the sigmoid and its gradient, rounds the results to 4 decimal places, and returns them in the appropriate format based on the input type."}
{"task_id": 21, "completion_id": 0, "completion": "To implement AdaBoost with one-dimensional decision stumps, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Initialize weights\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    \n    # Sort training data\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n    \n    # Initialize variables\n    stumps = []\n    alphas = []\n    \n    def calculate_error(d, theta):\n        predictions = np.ones(n_samples)\n        if d == 0:\n            predictions[x_train_sorted <= theta] = 1\n            predictions[x_train_sorted > theta] = -1\n        else:\n            predictions[x_train_sorted > theta] = 1\n            predictions[x_train_sorted <= theta] = -1\n        return np.sum(weights * (predictions != y_train_sorted))\n    \n    def predict_stump(d, theta, x):\n        if d == 0:\n            return 1 if x <= theta else -1\n        else:\n            return 1 if x > theta else -1\n    \n    # Training loop\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        \n        # Enumerate possible stumps\n        for i in range(n_samples - 1):\n            theta = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for d in [0, 1]:\n                error = calculate_error(d, theta)\n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n        \n        # Calculate alpha\n        err = min_error\n        alpha = 0.5 * math.log((1 - err) / err)\n        \n        # Update weights\n        d, theta = best_stump\n        predictions = np.array([predict_stump(d, theta, x) for x in x_train_sorted])\n        weights *= np.exp(-alpha * y_train_sorted * predictions)\n        weights /= np.sum(weights)\n        \n        # Store the stump and its coefficient\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        \n        # Check training error\n        ensemble_predictions = np.sign(np.sum([alpha * np.array([predict_stump(d, theta, x) for x in x_train_sorted]) \n                                               for alpha, (d, theta) in zip(alphas, stumps)], axis=0))\n        training_error = np.mean(ensemble_predictions != y_train_sorted)\n        \n        if training_error <= epsilon:\n            break\n    \n    # Predict on test set\n    test_predictions = np.sign(np.sum([alpha * np.array([predict_stump(d, theta, x) for x in x_test]) \n                                       for alpha, (d, theta) in zip(alphas, stumps)], axis=0))\n    \n    return test_predictions.tolist()\n\n# Example usage:\n# x_train = [1.0, 2.0, 3.0, 4.0, 5.0]\n# y_train = [1, -1, 1, -1, 1]\n# x_test = [1.5, 3.5, 4.5]\n# epsilon = 0.0\n# print(adaboost_1d_predict(x_train, y_train, x_test, epsilon))\n```\n\nThis code implements the AdaBoost algorithm using one-dimensional decision stumps as weak learners. It trains the ensemble until the training error is less than or equal to the specified `epsilon` and then uses the trained ensemble to predict labels for the test set."}
{"task_id": 22, "completion_id": 0, "completion": "To implement the `random_tensor` function as described, we need to follow these steps:\n\n1. Generate the random tensor with the specified shape.\n2. For each element, compute the value as `offset + u`, where `offset` is drawn from a discrete uniform distribution and `u` is drawn from a continuous uniform distribution.\n3. If the `standardize` flag is set to `True`, standardize each column of the tensor.\n4. Return the resulting tensor.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef random_tensor(shape: tuple[int, ...], standardize: bool = False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each column is shifted to mean 0 and scaled to\n            unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    # Generate the offset part from a discrete uniform distribution\n    offset = np.random.randint(-300, 300, size=shape)\n    \n    # Generate the u part from a continuous uniform distribution\n    u = np.random.uniform(0, 1, size=shape)\n    \n    # Combine offset and u to form the tensor\n    tensor = offset + u\n    \n    if standardize:\n        # Standardize each column\n        # Reshape the tensor to 2D if it has more than 2 dimensions\n        tensor_2d = tensor.reshape(-1, shape[-1])\n        \n        # Calculate mean and standard deviation for each column\n        mean = np.mean(tensor_2d, axis=0)\n        std = np.std(tensor_2d, axis=0)\n        \n        # Add a small constant to std to avoid division by zero\n        epsilon = np.finfo(float).eps\n        std_adjusted = std + epsilon\n        \n        # Standardize the tensor\n        tensor_2d = (tensor_2d - mean) / std_adjusted\n        \n        # Reshape back to the original shape\n        tensor = tensor_2d.reshape(shape)\n    \n    return tensor\n\n# Example usage:\n# tensor = random_tensor((100, 5), standardize=True)\n# print(tensor)\n```\n\n### Explanation:\n\n- **Random Generation**: We use `np.random.randint` to generate the `offset` and `np.random.uniform` to generate `u`. These are combined to form the tensor.\n- **Standardization**: If `standardize` is `True`, we reshape the tensor to 2D to standardize each column independently. We compute the mean and standard deviation for each column, adjust the standard deviation with a small constant `epsilon` to prevent division by zero, and then standardize the data.\n- **Reshape**: If the input tensor has more than two dimensions, we temporarily reshape it to 2D for standardization and then reshape it back to its original shape.\n\nThis implementation ensures that the tensor is generated and standardized correctly according to the given specifications."}
{"task_id": 24, "completion_id": 0, "completion": "To implement the Nesterov Accelerated Gradient (NAG) optimizer, we need to follow the steps outlined in the task description. Here's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    w = np.array(w, dtype=np.float64)\n    if len(velocity) == 0:\n        velocity = np.zeros_like(w)\n    else:\n        velocity = np.array(velocity, dtype=np.float64)\n    \n    # Step 1: Look-ahead point\n    w_lookahead = w - momentum * velocity\n    \n    # Step 2: Gradient evaluation with clipping\n    gradient = grad_func(w_lookahead)\n    gradient_clipped = np.clip(gradient, -1, 1)\n    \n    # Step 3: Velocity update\n    new_velocity = momentum * velocity + learning_rate * gradient_clipped\n    \n    # Step 4: Parameter update\n    new_w = w - new_velocity\n    \n    # Convert results to lists and round to 4 decimal places\n    new_w_rounded = np.round(new_w, 4).tolist()\n    new_velocity_rounded = np.round(new_velocity, 4).tolist()\n    \n    return new_w_rounded, new_velocity_rounded\n```\n\n### Explanation:\n\n1. **Input Conversion**: Convert the input parameter vector `w` and velocity `velocity` to numpy arrays for easier mathematical operations. If `velocity` is an empty list, initialize it as a zero vector of the same shape as `w`.\n\n2. **Look-ahead Point**: Compute the look-ahead point `w_lookahead` using the formula \\(\\tilde w = w - \\mu \\, v\\).\n\n3. **Gradient Evaluation**: Evaluate the gradient at the look-ahead point using the provided `grad_func`. Clip the gradient values element-wise to the range \\([-1, 1]\\).\n\n4. **Velocity Update**: Update the velocity using the formula \\(v' = \\mu \\, v + \\eta \\, g\\).\n\n5. **Parameter Update**: Update the parameters using the formula \\(w' = w - v'\\).\n\n6. **Output Conversion**: Convert the updated parameters and velocity to Python lists and round each element to 4 decimal places before returning them as a tuple.\n\nThis implementation follows the NAG update rules and ensures that the output meets the specified constraints."}
{"task_id": 25, "completion_id": 0, "completion": "To implement the Gaussian Kernel SVM prediction function, we need to compute the decision function for each test sample using the given formula. We'll use NumPy for efficient computation, especially for handling matrix operations and broadcasting. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the squared Euclidean distance between each test sample and each training sample\n    # This results in an (m, n) matrix where each element (i, j) is ||x_train[j] - x_test[i]||^2\n    sq_dists = np.sum((X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]) ** 2, axis=2)\n    \n    # Compute the kernel matrix using the Gaussian kernel\n    kernel_matrix = np.exp(-gamma * sq_dists)\n    \n    # Compute the decision function for each test sample\n    decision_values = np.dot(kernel_matrix.T, alpha * y_train) + b\n    \n    # Determine the predicted class labels\n    predicted_labels = np.sign(decision_values).astype(int)\n    \n    # Convert the numpy array to a list and return\n    return predicted_labels.tolist()\n```\n\n### Explanation:\n\n1. **Squared Euclidean Distance Calculation**:\n   - We calculate the squared Euclidean distance between each test sample and each training sample using broadcasting. This results in an `(m, n)` matrix `sq_dists` where each element `(i, j)` is the squared distance between `X_test[i]` and `X_train[j]`.\n\n2. **Kernel Matrix Calculation**:\n   - We apply the Gaussian kernel function to the squared distances to get the kernel matrix. This is done using `np.exp(-gamma * sq_dists)`.\n\n3. **Decision Function Calculation**:\n   - We compute the decision function for each test sample by taking the dot product of the transposed kernel matrix with the product of `alpha` and `y_train`, and then adding the bias term `b`.\n\n4. **Prediction**:\n   - We use `np.sign` to determine the predicted class labels from the decision values. The result is converted to integers and returned as a list.\n\nThis implementation efficiently handles the prediction process using vectorized operations, making it suitable for large datasets."}
{"task_id": 26, "completion_id": 0, "completion": "To implement the ReLU activation function and its gradient, we can leverage NumPy for efficient element-wise operations. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    # Convert the input list to a NumPy array for efficient computation\n    x_array = np.array(x)\n    \n    # Compute the ReLU activation using np.maximum\n    activation = np.maximum(0, x_array)\n    \n    # Compute the gradient using np.where\n    gradient = np.where(x_array >= 0, 1, 0)\n    \n    # Convert the results back to Python lists\n    activation_list = activation.tolist()\n    gradient_list = gradient.tolist()\n    \n    return activation_list, gradient_list\n\n# Example usage:\ninput_data = [[-1, 2, -3], [4, -5, 6]]\nactivation, gradient = relu(input_data)\nprint(\"Activation:\", activation)\nprint(\"Gradient:\", gradient)\n```\n\n### Explanation:\n1. **Input Conversion**: The input list is converted to a NumPy array to facilitate element-wise operations.\n2. **ReLU Activation**: The `np.maximum` function is used to apply the ReLU operation, which replaces negative values with zero.\n3. **Gradient Calculation**: The `np.where` function is used to create a mask that is `1` where the input is greater than or equal to zero, and `0` otherwise.\n4. **Output Conversion**: The results are converted back to Python lists using the `tolist()` method to ensure the output matches the input's shape and type.\n\nThis implementation efficiently handles arbitrary-shaped input lists and returns the desired ReLU activation and gradient in the same shape."}
{"task_id": 28, "completion_id": 0, "completion": "To solve this task, we need to implement a function that performs a truncated Singular Value Decomposition (SVD) on a given matrix and reconstructs it using only the top `k` singular values and vectors. This approach is equivalent to using a linear autoencoder with `k` latent dimensions. Let's break down the steps required to achieve this:\n\n1. **Input Validation**: Check if `k` is within the valid range. If not, return `-1`.\n\n2. **Convert Input to NumPy Array**: Since the input is a list of lists, we need to convert it to a NumPy array for easier manipulation and computation.\n\n3. **Perform SVD**: Use NumPy's `np.linalg.svd` function to perform the singular value decomposition of the matrix `X`. This will decompose `X` into three matrices: `U`, `S`, and `Vt`.\n\n4. **Truncate SVD**: Keep only the top `k` singular values and corresponding vectors. This involves slicing the matrices `U`, `S`, and `Vt`.\n\n5. **Reconstruct the Matrix**: Use the truncated matrices to reconstruct the matrix `X_hat`.\n\n6. **Compute Mean Squared Error (MSE)**: Calculate the mean squared error between the original matrix `X` and the reconstructed matrix `X_hat`.\n\n7. **Round the Results**: Round the elements of `X_hat` and the MSE to four decimal places.\n\n8. **Return the Results**: Convert `X_hat` back to a list of lists and return it along with the MSE.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert X to a NumPy array\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Validate k\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform SVD\n    U, S, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate SVD to rank k\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = U_k @ S_k @ Vt_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and mse\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return X_hat, mse\n```\n\nThis function will correctly compute the rank-`k` reconstruction of the input matrix using truncated SVD and return the reconstructed matrix along with the mean squared error, both rounded to four decimal places."}
{"task_id": 29, "completion_id": 0, "completion": "To implement the one-dimensional gradient boosting regressor using decision stumps, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                          y_train: list[float] | np.ndarray,\n                          x_query: float,\n                          epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by the feature values\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    # Initialize residuals as the target values\n    residuals = y_train.copy()\n    \n    # Calculate candidate split points (mid-points between consecutive x_train values)\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n    \n    # Initialize the ensemble prediction\n    ensemble_prediction = np.zeros_like(y_train)\n    \n    # Iteratively add stumps until RSS is below epsilon\n    while np.sum(residuals**2) > epsilon:\n        best_rss = np.inf\n        best_stump = None\n        \n        # Evaluate each candidate split point\n        for s in split_points:\n            # Calculate means for the two regions\n            left_mask = x_train <= s\n            right_mask = x_train > s\n            \n            c1 = np.mean(residuals[left_mask]) if np.any(left_mask) else 0\n            c2 = np.mean(residuals[right_mask]) if np.any(right_mask) else 0\n            \n            # Calculate RSS for this stump\n            stump_prediction = np.where(left_mask, c1, c2)\n            rss = np.sum((residuals - stump_prediction)**2)\n            \n            # Update best stump if this one is better\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (s, c1, c2)\n        \n        # Add the best stump to the ensemble\n        s, c1, c2 = best_stump\n        ensemble_prediction += np.where(x_train <= s, c1, c2)\n        \n        # Update residuals\n        residuals = y_train - ensemble_prediction\n    \n    # Predict for x_query using the learned stumps\n    prediction = 0.0\n    for s, c1, c2 in [best_stump]:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    \n    return round(prediction, 4)\n\n# Example usage:\nx_train = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_train = [1.5, 2.5, 3.5, 4.5, 5.5]\nx_query = 3.5\nprint(predict_boosting_tree(x_train, y_train, x_query))  # Output should be rounded to 4 decimal places\n```\n\nThis code implements the gradient boosting regressor using decision stumps for one-dimensional data. It iteratively adds stumps to the ensemble until the residual sum of squares is below the specified tolerance, and then it predicts the target value for the given query point."}
{"task_id": 32, "completion_id": 0, "completion": "To accomplish the task, we need to implement the `check_data` function, which will handle the conversion and validation of the inputs. The function will ensure that both inputs are either integers, floats, or numeric strings that can be converted to floats. After conversion, the function will return the cleaned values as a tuple.\n\nHere's the complete implementation:\n\n```python\ndef check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair `(a, b)` must then be returned.\n    \"\"\"\n    # Convert a to float if it's a string\n    if isinstance(a, str):\n        a = float(a)\n    # Convert b to float if it's a string\n    if isinstance(b, str):\n        b = float(b)\n    \n    # Return the cleaned values as a tuple\n    return a, b\n\n# Do NOT change this decorator \u2013 it is required by the grader.\ndef validate_input(function):\n    def wrapper(a, b):\n        a, b = check_data(a, b)\n        return function(a, b)\n\n    return wrapper\n\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    result = a + b\n    # Return an int if the result is an integer, otherwise return a float\n    return int(result) if result.is_integer() else result\n```\n\n### Explanation:\n\n1. **`check_data` Function**:\n   - It checks if each input (`a` and `b`) is a string. If so, it attempts to convert it to a float using `float()`.\n   - If the input is already a numeric type (`int` or `float`), it remains unchanged.\n   - The function returns the two values as a tuple.\n\n2. **`validate_input` Decorator**:\n   - This decorator wraps the `sum_numbers` function, ensuring that the inputs are validated and converted before the function is executed.\n\n3. **`sum_numbers` Function**:\n   - It calculates the sum of the two validated inputs.\n   - It checks if the result is an integer using `result.is_integer()`. If true, it returns the result as an `int`; otherwise, it returns a `float`.\n\nThis implementation ensures that the inputs are properly sanitized and that the output is returned in the correct numeric type."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified sparsity.\n    \n    Parameters:\n    - shape: A tuple specifying the shape of the tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of an entry being 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape and dtype float, filled with 0.0s and 1.0s.\n    - Returns -1 if the sparsity is outside the range [0, 1].\n    \"\"\"\n    # Check if sparsity is within the valid range\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    # Set the random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate random values and apply the sparsity threshold\n    random_values = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    binary_tensor = (random_values >= threshold).astype(float)\n    \n    return binary_tensor\n\n# Example usage:\n# shape = (2, 3), sparsity = 0.3, seed = 42\n# Output should be:\n# [[0.0, 1.0, 1.0],\n#  [0.0, 0.0, 0.0]]\ntensor = random_binary_tensor((2, 3), 0.3, 42)\nprint(tensor)\n```\n\nThis function generates a random binary tensor based on the specified shape and sparsity. It uses the `np.random.rand` function to create random values and applies a threshold to determine whether each entry should be 0.0 or 1.0. The function also handles the optional seed for reproducibility and checks the validity of the sparsity value."}
{"task_id": 35, "completion_id": 0, "completion": "To implement the `classify` function, we need to traverse the decision tree starting from the root node and follow the rules provided. Here's the complete implementation:\n\n```python\nfrom typing import Any\n\nclass node:  # noqa: N801 \u2013 keep the original name used by the problem description\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int = -1, res: Any | None = None, child: dict | None = None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\n\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n    \"\"\"\n    current = root\n    while current.fea != -1:\n        # Check if the feature index is within the bounds of the sample list\n        if current.fea >= len(sample):\n            return -1\n        \n        # Get the feature value from the sample\n        feature_value = sample[current.fea]\n        \n        # Check if the feature value exists in the current node's children\n        if feature_value not in current.child:\n            return -1\n        \n        # Move to the child node corresponding to the feature value\n        current = current.child[feature_value]\n    \n    # Return the result stored in the leaf node\n    return current.res\n```\n\n### Explanation:\n1. **Initialization**: Start at the root node.\n2. **Traversal**: While the current node is not a leaf (`fea != -1`), perform the following checks:\n   - **Feature Index Check**: If the feature index (`current.fea`) is outside the bounds of the sample list, return `-1`.\n   - **Feature Value Check**: Retrieve the feature value from the sample using the feature index. If this value is not present in the `child` dictionary of the current node, return `-1`.\n   - **Move to Child Node**: If the feature value is valid, move to the corresponding child node.\n3. **Leaf Node**: Once a leaf node is reached (`fea == -1`), return the result stored in the `res` field of the node.\n\nThis implementation ensures that any invalid path or missing feature value results in a return value of `-1`, indicating that the sample cannot be classified."}
{"task_id": 36, "completion_id": 0, "completion": "To solve the task of predicting outcomes using a binary decision tree, we need to implement the `predict_tree` function. This function will traverse the tree for each sample in the input list `X` and return the predictions in the same order. Let's go through the implementation step-by-step.\n\nHere's the complete implementation:\n\n```python\nfrom typing import List, Optional\n\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\n\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"Predicts outcomes for a batch of samples using a binary decision tree.\"\"\"\n    \n    def predict_single(node: Node, sample: List[float]) -> float:\n        \"\"\"Helper function to predict the outcome for a single sample.\"\"\"\n        while node.left is not None and node.right is not None:\n            if sample[node.feature] <= node.threshold:\n                node = node.left\n            else:\n                node = node.right\n        return node.threshold\n\n    if root is None:\n        return []\n\n    predictions = [predict_single(root, sample) for sample in X]\n    return predictions\n```\n\n### Explanation:\n\n1. **Node Class**: This class is already provided and represents a node in the binary decision tree. Each node can either be a leaf node or a non-leaf node. A leaf node contains a prediction value, while a non-leaf node contains a feature index and a threshold for decision making.\n\n2. **predict_tree Function**:\n   - **Input**: The function takes a root node of the tree and a list of samples `X`.\n   - **Output**: It returns a list of predictions corresponding to each sample.\n\n3. **predict_single Function**:\n   - This is a helper function that traverses the tree for a single sample.\n   - It starts at the root and follows the decision rules until it reaches a leaf node.\n   - If the current node is a leaf (both `left` and `right` are `None`), it returns the prediction stored in `node.threshold`.\n   - If not, it checks the feature value of the sample against the node's threshold to decide whether to move to the left or right child.\n\n4. **Main Logic**:\n   - If the tree is empty (`root is None`), the function returns an empty list.\n   - Otherwise, it iterates over each sample in `X`, uses `predict_single` to get the prediction, and collects all predictions in a list.\n\nThis implementation efficiently handles the prediction task for a batch of samples using the given decision tree structure."}
{"task_id": 37, "completion_id": 0, "completion": "To implement the KD-Tree construction, we need to recursively partition the data based on the median of the current splitting dimension. Here's how you can implement the `build_kd_tree` function:\n\n```python\nimport numpy as np\nfrom itertools import cycle\n\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1).  The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n\n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty.  Each dictionary has the keys 'point', 'label', 'left',\n        and 'right' as explained in the task description.\n    \"\"\"\n    if data.shape[0] == 0:\n        return None\n\n    n_features = data.shape[1] - 1\n    splitting_dimensions = cycle(range(n_features))\n\n    def build_tree(subset: np.ndarray, depth: int) -> dict | None:\n        if subset.shape[0] == 0:\n            return None\n\n        # Determine the current splitting dimension\n        current_dim = next(splitting_dimensions)\n\n        # Sort the subset by the current dimension\n        subset = subset[subset[:, current_dim].argsort()]\n\n        # Find the median index\n        median_index = len(subset) // 2\n\n        # Create the current node\n        node = {\n            \"point\": subset[median_index, :-1].tolist(),\n            \"label\": subset[median_index, -1],\n            \"left\": build_tree(subset[:median_index], depth + 1),\n            \"right\": build_tree(subset[median_index + 1:], depth + 1)\n        }\n\n        return node\n\n    return build_tree(data, 0)\n\n# Example usage:\ndata = np.array([\n    [2.0, 3.0, 'A'],\n    [5.0, 4.0, 'B'],\n    [9.0, 6.0, 'C'],\n    [4.0, 7.0, 'D'],\n    [8.0, 1.0, 'E'],\n    [7.0, 2.0, 'F']\n])\n\nkd_tree = build_kd_tree(data)\nprint(kd_tree)\n```\n\n### Explanation:\n1. **Cycle through dimensions**: We use `itertools.cycle` to cycle through the dimensions continuously. This ensures that the splitting dimension cycles through `0, 1, ..., m-1` repeatedly.\n\n2. **Recursive tree building**: The `build_tree` function is a recursive function that constructs the KD-Tree. It sorts the data based on the current dimension, finds the median, and creates a node with the median point. It then recursively builds the left and right subtrees.\n\n3. **Base case**: If the subset is empty, the function returns `None`, indicating no further nodes in that branch.\n\n4. **Median selection**: The median is selected using integer division, which ensures that the median is the middle element in the sorted list.\n\nThis implementation efficiently constructs a KD-Tree from the given data, allowing for efficient nearest-neighbor and range searches."}
{"task_id": 38, "completion_id": 0, "completion": "To implement the arm-selection phase of the LinUCB algorithm for a disjoint contextual linear bandit, we need to compute the upper confidence bound for each arm and select the arm with the highest score. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\n\n    Parameters\n    ----------\n    context : np.ndarray\n        Matrix of shape (D, n_arms) containing the D-dimensional feature\n        vectors of every arm for the current round.\n    A : list\n        List where ``A[a]`` is the (D\u00d7D) Gram matrix of arm *a*.\n    b : list\n        List where ``b[a]`` is the length-D accumulated reward-context vector\n        of arm *a*.\n    alpha : float\n        Exploration coefficient (> 0).\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest LinUCB score.\n    \"\"\"\n    n_arms = context.shape[1]\n    p_values = np.zeros(n_arms)\n\n    for a in range(n_arms):\n        # Convert A[a] and b[a] to numpy arrays for matrix operations\n        A_a = np.array(A[a])\n        b_a = np.array(b[a])\n        \n        # Calculate A_a inverse\n        A_a_inv = np.linalg.inv(A_a)\n        \n        # Calculate theta_hat_a\n        theta_hat_a = A_a_inv @ b_a\n        \n        # Get the context vector for arm a\n        c_a = context[:, a]\n        \n        # Calculate the LinUCB score for arm a\n        p_a = theta_hat_a.T @ c_a + alpha * np.sqrt(c_a.T @ A_a_inv @ c_a)\n        \n        # Store the score\n        p_values[a] = p_a\n\n    # Return the index of the arm with the highest score\n    return np.argmax(p_values)\n\n```\n\n### Explanation:\n1. **Inputs**:\n   - `context`: A matrix where each column represents the feature vector of an arm.\n   - `A`: A list of Gram matrices, one for each arm.\n   - `b`: A list of accumulated reward-context vectors, one for each arm.\n   - `alpha`: The exploration coefficient.\n\n2. **Process**:\n   - For each arm, compute the inverse of its Gram matrix `A_a`.\n   - Calculate the estimated parameter vector `theta_hat_a` using `A_a_inv @ b_a`.\n   - Compute the LinUCB score `p_a` using the formula provided.\n   - Store the score in `p_values`.\n\n3. **Output**:\n   - Use `np.argmax` to find the index of the arm with the highest score. In case of ties, `np.argmax` returns the smallest index.\n\nThis implementation efficiently computes the LinUCB score for each arm and selects the arm with the highest score, adhering to the constraints and requirements specified."}
{"task_id": 39, "completion_id": 0, "completion": "To implement the median split for KD-Tree construction using NumPy, we can utilize the `numpy.argpartition` function to efficiently find the median without sorting the entire column. Here's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n\n    # Use argpartition to find the index of the median value\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # Get the index of the median value in the original array\n    pivot_index = partitioned_indices[median_index]\n\n    # Determine the indices of elements strictly less than and greater than the median\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n\n    # Sort the indices to make the output deterministic\n    left_indices_sorted = sorted(left_indices)\n    right_indices_sorted = sorted(right_indices)\n\n    return pivot_index, left_indices_sorted, right_indices_sorted\n\n# Example usage:\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\nd = 0\npivot, left, right = get_split(data, d)\nprint(f\"Pivot: {pivot}, Left: {left}, Right: {right}\")\n```\n\n### Explanation:\n1. **Finding the Median Index**: We calculate the median index as `n_samples // 2`. This index represents the position of the median in a zero-indexed array.\n\n2. **Using `argpartition`**: The `numpy.argpartition` function rearranges the indices such that the element at the median index is in its sorted position, and all elements before it are less than or equal to it, while all elements after it are greater than or equal to it.\n\n3. **Extracting Indices**: We extract the indices of elements strictly less than the median (`left_indices`) and strictly greater than the median (`right_indices`).\n\n4. **Sorting Indices**: We sort the `left_indices` and `right_indices` to ensure the output is deterministic.\n\nThis approach ensures that the median split is performed in O(n) time complexity, as required."}
{"task_id": 40, "completion_id": 0, "completion": "To implement the `to_frames` function, we need to use `numpy.lib.stride_tricks.as_strided` to create a view on the original array with the desired shape and strides. Let's go through the implementation step-by-step:\n\n1. **Assertions**: We need to ensure the input conditions are met using assertions.\n2. **Calculate the number of frames**: Use the formula provided to determine how many frames can be created.\n3. **Calculate strides**: Use the strides of the original array to determine how to step through the array.\n4. **Create the view**: Use `as_strided` to create the view with the calculated shape and strides.\n5. **Set writability**: Adjust the writability of the view based on the `writeable` parameter.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions to check pre-conditions\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Signal length must be at least as long as the frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Calculate the strides\n    itemsize = x.strides[0]\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride * itemsize, itemsize)\n\n    # Create the view using as_strided\n    frames = as_strided(x, shape=new_shape, strides=new_strides)\n\n    # Set writability\n    frames.setflags(write=writeable)\n\n    return frames\n```\n\n### Explanation:\n- **Assertions**: Ensure the input array is 1-D, the stride is positive, and the signal length is sufficient to form at least one frame.\n- **Strides Calculation**: The stride for the first dimension is `stride * itemsize`, and for the second dimension, it's `itemsize`, which allows us to step through the array correctly.\n- **`as_strided`**: This function creates a view with the specified shape and strides, allowing us to efficiently create overlapping frames without copying data.\n- **Writability**: The `setflags` method is used to set the writability of the view based on the `writeable` parameter."}
{"task_id": 41, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (k-NN) classifier, we need to follow these steps:\n\n1. Calculate the Euclidean distance between each query sample and all training samples.\n2. Identify the `k` nearest neighbours based on these distances.\n3. Perform majority voting among the labels of these `k` nearest neighbours.\n4. Return the predicted label for each query sample.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int = 5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    \n    predictions = []\n    \n    for query in X:\n        # Calculate distances from the query to all training samples\n        distances = [euclidean_distance(query, x_train) for x_train in X_data]\n        \n        # Get the indices of the k nearest neighbours\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbours\n        k_nearest_labels = [y_data[i] for i in k_nearest_indices]\n        \n        # Count the occurrences of each label\n        label_count = Counter(k_nearest_labels)\n        \n        # Find the label with the maximum count (and lexicographically smallest in case of tie)\n        predicted_label = min(label_count, key=lambda label: (-label_count[label], label))\n        \n        # Append the predicted label to the results\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n### Explanation:\n\n- **Euclidean Distance Calculation**: We define a helper function `euclidean_distance` to compute the distance between two points.\n- **Distance Calculation**: For each query sample, we calculate the distance to all training samples.\n- **Nearest Neighbours**: We use `np.argsort` to get the indices of the `k` smallest distances, which correspond to the `k` nearest neighbours.\n- **Majority Voting**: We use `Counter` to count the occurrences of each label among the `k` nearest neighbours. The `min` function with a custom key is used to handle ties by selecting the lexicographically smallest label.\n- **Return Predictions**: We collect the predicted labels for each query sample and return them as a list.\n\nThis implementation ensures that the classifier works for any numeric feature dimension and for labels of any sortable type."}
{"task_id": 42, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    # Validate input\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n\n    # Convert lists to numpy arrays for efficient computation\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    # Compute the logarithmic differences\n    log_actual = np.log(actual + 1)\n    log_predicted = np.log(predicted + 1)\n    log_diff = log_predicted - log_actual\n\n    # Compute the RMSLE\n    rmsle_value = np.sqrt(np.mean(log_diff ** 2))\n\n    # Round the result to 4 decimal places\n    return round(rmsle_value, 4)\n```\n\nThis function first checks if the input lists are valid by ensuring they have the same non-zero length and contain only non-negative values. If the validation fails, it returns `-1`. Otherwise, it computes the RMSLE using numpy for efficient array operations, and returns the result rounded to four decimal places."}
{"task_id": 44, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_activation(x, derivative: bool = False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x, dtype=np.float64)\n    \n    if derivative:\n        # Calculate tanh using the formula\n        tanh_x = (2 / (1 + np.exp(-2 * x))) - 1\n        # Calculate the derivative of tanh\n        gradient = 1 - tanh_x**2\n        # Round the result to 4 decimal places and convert to a list\n        return np.round(gradient, 4).tolist()\n    else:\n        # Calculate tanh using the formula\n        tanh_x = (2 / (1 + np.exp(-2 * x))) - 1\n        # Round the result to 4 decimal places and convert to a list\n        return np.round(tanh_x, 4).tolist()\n\n# Example usage:\n# x = [0, 1, -1, 0.5]\n# print(tanh_activation(x, derivative=False))  # Output: [0.0, 0.7616, -0.7616, 0.4621]\n# print(tanh_activation(x, derivative=True))   # Output: [1.0, 0.4199, 0.4199, 0.7864]\n```\n\nThis implementation uses NumPy for efficient vectorized operations. The `tanh_activation` function computes the hyperbolic tangent or its derivative based on the `derivative` flag, using the specified formula. The results are rounded to four decimal places and returned as a Python list."}
{"task_id": 46, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length *N* (N \u2265 0).\n\n    Returns:\n        A list of length *N* where the *k*-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    # Convert input to a NumPy array if it's a list for easier manipulation\n    x = np.array(x)\n    N = len(x)\n    \n    # Handle the corner case where N = 0\n    if N == 0:\n        return []\n    \n    # Initialize the list to store autocorrelation coefficients\n    autocorrelation = []\n    \n    # Compute the autocorrelation for each lag k\n    for k in range(N):\n        a_k = 0\n        for n in range(N - k):\n            a_k += x[n + k] * x[n]\n        autocorrelation.append(a_k)\n    \n    return autocorrelation\n\n# Example usage\nx = np.array([1, 2, 3])\nprint(autocorrelate_1d(x))  # Output: [14, 8, 3]\n```\n\nThis implementation follows the direct double-sum formulation to compute the autocorrelation coefficients for non-negative lags. It handles the input as either a Python list or a NumPy array and returns the result as a Python list. The function efficiently computes the autocorrelation in \\(O(N^2)\\) time, as required."}
{"task_id": 48, "completion_id": 0, "completion": "To solve the problem of validating whether a given matrix is row-stochastic, we need to ensure that the matrix meets the following criteria:\n\n1. The matrix is two-dimensional.\n2. Every element in the matrix is a valid probability, i.e., it lies within the interval [0, 1].\n3. Each row of the matrix sums to 1, with a tolerance for numerical precision errors.\n\nHere's how you can implement the function using Python and NumPy:\n\n```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a NumPy array if it is not already\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-8):\n        return False\n    \n    return True\n```\n\n### Explanation:\n\n1. **Conversion to NumPy Array**: We first convert the input to a NumPy array to leverage NumPy's efficient operations for checking conditions and summing rows.\n\n2. **Dimensionality Check**: We ensure the matrix is two-dimensional using `X.ndim != 2`.\n\n3. **Element Range Check**: We use `np.all((X >= 0) & (X <= 1))` to verify that all elements are within the range [0, 1].\n\n4. **Row Sum Check**: We calculate the sum of each row using `np.sum(X, axis=1)` and then use `np.allclose` to check if these sums are approximately 1, allowing for a small numerical tolerance (`atol=1e-8`).\n\nThis function will return `True` if the matrix is row-stochastic and `False` otherwise, without raising any exceptions."}
{"task_id": 49, "completion_id": 0, "completion": "To solve this problem, we need to implement a max-heap manually using a Python list. The max-heap will help us efficiently keep track of the k smallest elements as we iterate through the list. Here's how we can implement the solution:\n\n```python\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef _move_up(heap: List[Number], index: int) -> None:\n    \"\"\"Move the element at index up to restore the heap property.\"\"\"\n    parent_index = (index - 1) // 2\n    while index > 0 and heap[index] > heap[parent_index]:\n        heap[index], heap[parent_index] = heap[parent_index], heap[index]\n        index = parent_index\n        parent_index = (index - 1) // 2\n\ndef _move_down(heap: List[Number], index: int) -> None:\n    \"\"\"Move the element at index down to restore the heap property.\"\"\"\n    size = len(heap)\n    while True:\n        left_child = 2 * index + 1\n        right_child = 2 * index + 2\n        largest = index\n\n        if left_child < size and heap[left_child] > heap[largest]:\n            largest = left_child\n        if right_child < size and heap[right_child] > heap[largest]:\n            largest = right_child\n\n        if largest == index:\n            break\n\n        heap[index], heap[largest] = heap[largest], heap[index]\n        index = largest\n\ndef k_smallest(nums: List[Number], k: int) -> Union[List[Number], int]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\"\"\"\n    if k <= 0 or k > len(nums):\n        return -1\n\n    # Initialize an empty heap\n    heap = []\n\n    for num in nums:\n        if len(heap) < k:\n            # If the heap has fewer than k elements, add the new number\n            heap.append(num)\n            _move_up(heap, len(heap) - 1)\n        elif num < heap[0]:\n            # If the new number is smaller than the largest in the heap, replace and move down\n            heap[0] = num\n            _move_down(heap, 0)\n\n    # Sort the heap to return the k smallest elements in ascending order\n    heap.sort()\n    return heap\n\n# Example usage:\nnums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nk = 4\nprint(k_smallest(nums, k))  # Output: [1, 1, 2, 3]\n```\n\n### Explanation:\n1. **Heap Operations**:\n   - `_move_up`: This function ensures the heap property is maintained when a new element is added. It moves the element up the heap until the parent is larger or the root is reached.\n   - `_move_down`: This function ensures the heap property is maintained when the root element is replaced. It moves the element down the heap until both children are smaller or the end of the heap is reached.\n\n2. **Main Function**:\n   - We first check if `k` is valid. If not, return `-1`.\n   - We iterate through each number in the list:\n     - If the heap has fewer than `k` elements, we add the number and move it up to maintain the heap property.\n     - If the heap is full and the current number is smaller than the root (largest element in the heap), we replace the root with the current number and move it down to maintain the heap property.\n   - After processing all numbers, the heap contains the k smallest elements. We sort the heap to return the elements in ascending order.\n\nThis approach ensures that we only scan the list once and efficiently maintain the k smallest elements using a max-heap."}
{"task_id": 51, "completion_id": 0, "completion": "To implement Newton's method for solving a two-variable linear least-squares problem, we need to iteratively update the weight vector `w` using the gradient and Hessian of the mean-squared error (MSE). Here's how you can complete the function:\n\n```python\nimport numpy as np\n\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float = 1e-6, max_iter: int = 1000) -> list[list[float]]:\n    \"\"\"Newton's method for 2-D linear regression.\"\"\"\n    n = X.shape[0]  # number of samples\n    w = np.array([[1.0], [1.0]])  # initial weights\n    \n    for _ in range(max_iter):\n        # Compute the gradient\n        gradient = (2/n) * X.T @ (X @ w - y)\n        \n        # Compute the Hessian\n        hessian = (2/n) * X.T @ X\n        \n        # Check if Hessian is singular and use pseudo-inverse if necessary\n        if np.linalg.matrix_rank(hessian) < hessian.shape[0]:\n            hessian_inv = np.linalg.pinv(hessian)\n        else:\n            hessian_inv = np.linalg.inv(hessian)\n        \n        # Update weights using Newton's method\n        w = w - hessian_inv @ gradient\n        \n        # Check for convergence\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    # Round the final weights to 4 decimal places and return as a list of lists\n    return [[round(w[0, 0], 4)], [round(w[1, 0], 4)]]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([[1], [2], [3]])\n# print(newton(X, y))\n```\n\n### Explanation:\n1. **Initialization**: Start with the weight vector `w` initialized to `[1, 1]\u1d40`.\n\n2. **Gradient Calculation**: Compute the gradient of the MSE using the formula `\u2207 = 2/n \u00b7 X\u1d40(Xw \u2212 y)`.\n\n3. **Hessian Calculation**: Compute the Hessian using the formula `H = 2/n \u00b7 X\u1d40X`.\n\n4. **Singular Hessian Handling**: Check if the Hessian is singular (rank-deficient). If it is, use the Moore-Penrose pseudo-inverse to ensure the algorithm can proceed.\n\n5. **Weight Update**: Update the weight vector using Newton's method: `w \u2190 w \u2212 H^{-1}\u2207`.\n\n6. **Convergence Check**: Stop iterating if the Euclidean norm of the gradient is below `epsilon`.\n\n7. **Return**: After convergence or reaching the maximum number of iterations, return the final weight vector rounded to 4 decimal places as a list of lists.\n\nThis implementation ensures that the algorithm works even for rank-deficient matrices by using the pseudo-inverse when necessary."}
{"task_id": 54, "completion_id": 0, "completion": "To implement the whitespace tokenizer with the specified features, we need to follow these steps:\n\n1. Convert the text to lowercase if the `lowercase` flag is set to `True`.\n2. Split the text into tokens based on whitespace.\n3. Strip punctuation from each token if the `filter_punctuation` flag is set to `True`.\n4. Remove stop-words if the `filter_stopwords` flag is set to `True`.\n5. Discard any empty tokens.\n6. Return the list of processed tokens.\n\nHere's the implementation:\n\n```python\nimport string\n\ndef tokenize_whitespace(line: str, lowercase: bool = True, filter_stopwords: bool = True, filter_punctuation: bool = True, **kwargs) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n    # Predefined list of common English stop-words\n    stop_words = {\n        'a', 'about', 'above', 'after', 'again', 'against', 'all', 'am', 'an', 'and', 'any', 'are', 'aren\\'t', 'as', 'at',\n        'be', 'because', 'been', 'before', 'being', 'below', 'between', 'both', 'but', 'by', 'can\\'t', 'cannot', 'could',\n        'couldn\\'t', 'did', 'didn\\'t', 'do', 'does', 'doesn\\'t', 'doing', 'don\\'t', 'down', 'during', 'each', 'few', 'for',\n        'from', 'further', 'had', 'hadn\\'t', 'has', 'hasn\\'t', 'have', 'haven\\'t', 'having', 'he', 'he\\'d', 'he\\'ll', 'he\\'s',\n        'her', 'here', 'here\\'s', 'hers', 'herself', 'him', 'himself', 'his', 'how', 'how\\'s', 'i', 'i\\'d', 'i\\'ll', 'i\\'m',\n        'i\\'ve', 'if', 'in', 'into', 'is', 'isn\\'t', 'it', 'it\\'s', 'its', 'itself', 'let\\'s', 'me', 'more', 'most', 'mustn\\'t',\n        'my', 'myself', 'no', 'nor', 'not', 'of', 'off', 'on', 'once', 'only', 'or', 'other', 'ought', 'our', 'ours', 'ourselves',\n        'out', 'over', 'own', 'same', 'shan\\'t', 'she', 'she\\'d', 'she\\'ll', 'she\\'s', 'should', 'shouldn\\'t', 'so', 'some',\n        'such', 'than', 'that', 'that\\'s', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', 'there\\'s', 'these',\n        'they', 'they\\'d', 'they\\'ll', 'they\\'re', 'they\\'ve', 'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up',\n        'very', 'was', 'wasn\\'t', 'we', 'we\\'d', 'we\\'ll', 'we\\'re', 'we\\'ve', 'were', 'weren\\'t', 'what', 'what\\'s', 'when',\n        'when\\'s', 'where', 'where\\'s', 'which', 'while', 'who', 'who\\'s', 'whom', 'why', 'why\\'s', 'with', 'won\\'t', 'would',\n        'wouldn\\'t', 'you', 'you\\'d', 'you\\'ll', 'you\\'re', 'you\\'ve', 'your', 'yours', 'yourself', 'yourselves'\n    }\n\n    # Convert to lowercase if required\n    if lowercase:\n        line = line.lower()\n\n    # Split the line into tokens based on whitespace\n    tokens = line.split()\n\n    # Process tokens\n    processed_tokens = []\n    for token in tokens:\n        # Strip punctuation if required\n        if filter_punctuation:\n            token = token.strip(string.punctuation)\n\n        # Discard empty tokens\n        if not token:\n            continue\n\n        # Filter stop-words if required\n        if filter_stopwords and token in stop_words:\n            continue\n\n        # Add the processed token to the list\n        processed_tokens.append(token)\n\n    return processed_tokens\n```\n\nThis function will tokenize the input string based on whitespace and apply the specified filters, returning a list of processed tokens."}
{"task_id": 55, "completion_id": 0, "completion": "To implement the RMSprop optimization algorithm for linear regression, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to 4 decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Shuffle the data indices for mini-batch processing\n        indices = np.arange(n)\n        np.random.shuffle(indices)\n        \n        for start in range(0, n, batch_size):\n            end = start + batch_size\n            if end > n:\n                end = n\n            batch_indices = indices[start:end]\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n            \n            # Compute the gradient\n            error = X_batch @ w - y_batch\n            g = (1 / len(y_batch)) * (X_batch.T @ error)\n            \n            # Update the running average of squared gradients\n            s = rho * s + (1 - rho) * g**2\n            \n            # Update the weights\n            w -= eta * g / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(g) < epsilon:\n            break\n    \n    return list(np.round(w, 4))\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# weights = rms_prop(X, y)\n# print(weights)\n```\n\n### Explanation:\n\n1. **Initialization**: \n   - We initialize the weight vector `w` and the running average of squared gradients `s` to zero vectors of the same dimension as the number of features `d`.\n\n2. **Mini-batch Processing**:\n   - We shuffle the indices of the data to ensure randomness in mini-batch selection.\n   - We iterate over the data in mini-batches. If the dataset is smaller than the batch size, we use the full dataset.\n\n3. **Gradient Calculation**:\n   - For each mini-batch, we compute the error and the gradient `g` of the loss function.\n\n4. **RMSprop Update**:\n   - We update the running average of squared gradients `s` using the decay rate `rho`.\n   - We update the weights `w` using the RMSprop update rule.\n\n5. **Early Stopping**:\n   - We check the \u2113\u2082-norm of the gradient `g` and stop if it falls below the threshold `epsilon`.\n\n6. **Return**:\n   - The final weight vector is rounded to four decimal places and returned as a list.\n\nThis implementation should efficiently train a linear regression model using the RMSprop optimization algorithm."}
{"task_id": 56, "completion_id": 0, "completion": "To implement the SoftPlus activation function and its gradient, we need to handle both scalar and array inputs, and ensure numerical stability for large values. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    # Convert input to a NumPy array for easier manipulation\n    x_array = np.array(x, dtype=np.float64)\n    \n    if deriv:\n        # Calculate the sigmoid function\n        result = 1 / (1 + np.exp(-x_array))\n    else:\n        # Calculate the SoftPlus function using a numerically stable approach\n        # Use np.log1p for stability with large values\n        result = np.where(x_array > 0, \n                          np.log1p(np.exp(-x_array)) + x_array, \n                          np.log1p(np.exp(x_array)))\n    \n    # Round the result to 4 decimal places\n    rounded_result = np.round(result, 4)\n    \n    # If the input was a scalar, return a scalar float\n    if np.isscalar(x):\n        return float(rounded_result)\n    \n    # Otherwise, return a Python list\n    return rounded_result.tolist()\n\n# Example usage:\n# print(softplus(1))  # Should return the SoftPlus of 1\n# print(softplus([1, 2, 3], deriv=True))  # Should return the sigmoid of [1, 2, 3]\n```\n\n### Explanation:\n1. **Numerical Stability**: \n   - For positive values of `x`, `np.log1p(np.exp(-x)) + x` is used to avoid overflow when `x` is large.\n   - For non-positive values, `np.log1p(np.exp(x))` is used directly, which is stable for large negative `x`.\n\n2. **Sigmoid Calculation**: \n   - The derivative of SoftPlus is the sigmoid function, which is calculated as `1 / (1 + np.exp(-x))`.\n\n3. **Handling Different Input Types**: \n   - The input is converted to a NumPy array to handle both scalars and arrays uniformly.\n   - The output is rounded to 4 decimal places and returned as a list or a scalar float, depending on the input type.\n\nThis implementation ensures that the function is robust and handles edge cases effectively, such as very large or very small input values."}
{"task_id": 58, "completion_id": 0, "completion": "To implement the unsmoothed Maximum-Likelihood Estimation (MLE) N-gram language model, we need to follow these steps:\n\n1. **Count N-grams and (N-1)-grams**: We will use the `Counter` from the `collections` module to count occurrences of N-grams and (N-1)-grams in the corpus.\n\n2. **Calculate Probabilities**: For each N-gram in the sequence, calculate its probability using the counts from the corpus.\n\n3. **Compute Log-Probability**: Sum the log-probabilities of each N-gram in the sequence.\n\n4. **Handle Zero Counts**: If any required count is zero, return `float('-inf')`.\n\nHere's the implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Count N-grams in the corpus\n    ngram_counts = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus) - N + 1))\n    \n    # Count (N-1)-grams in the corpus\n    if N > 1:\n        n_minus_1_gram_counts = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus) - N + 2))\n    else:\n        n_minus_1_gram_counts = Counter(corpus)  # Unigram case\n    \n    # Calculate log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        \n        # Get counts for the current N-gram and its prefix\n        ngram_count = ngram_counts[ngram]\n        if N > 1:\n            prefix_count = n_minus_1_gram_counts[ngram[:-1]]\n        else:\n            prefix_count = len(corpus)  # Total number of unigrams\n        \n        # If any count is zero, return negative infinity\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        \n        # Calculate probability and add log-probability\n        prob = ngram_count / prefix_count\n        log_prob += np.log(prob)\n    \n    # Return the log-probability rounded to 4 decimal places\n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\nsequence = [\"the\", \"quick\", \"brown\", \"fox\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Example output\n```\n\n### Explanation:\n- **N-gram Counting**: We use a sliding window approach to count N-grams and (N-1)-grams in the corpus.\n- **Probability Calculation**: For each N-gram in the sequence, we calculate its probability using the counts from the corpus.\n- **Log-Probability**: We sum the log-probabilities of each N-gram in the sequence.\n- **Zero Counts**: If any required count is zero, we return `float('-inf')` immediately."}
{"task_id": 60, "completion_id": 0, "completion": "To implement the `compute_impurity` function, we need to calculate the impurity based on the specified criterion: entropy, Gini index, or mean-squared error (MSE). Let's go through each of these metrics:\n\n1. **Entropy**: This measures the impurity of a node in terms of information gain. It is calculated as:\n   \\[\n   \\text{Entropy} = -\\sum (p_i \\cdot \\log_2(p_i))\n   \\]\n   where \\( p_i \\) is the proportion of class \\( i \\) in the node.\n\n2. **Gini Index**: This measures the impurity of a node based on the probability of misclassification:\n   \\[\n   \\text{Gini} = 1 - \\sum (p_i^2)\n   \\]\n   where \\( p_i \\) is the proportion of class \\( i \\) in the node.\n\n3. **Mean-Squared Error (MSE)**: This is used for regression and measures the variance of the target values:\n   \\[\n   \\text{MSE} = \\frac{1}{n} \\sum (y_i - \\bar{y})^2\n   \\]\n   where \\( y_i \\) are the target values and \\( \\bar{y} \\) is the mean of these values.\n\nHere's the implementation of the `compute_impurity` function:\n\n```python\nimport numpy as np\n\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    if criterion == \"entropy\":\n        # Calculate entropy\n        _, counts = np.unique(y, return_counts=True)\n        probabilities = counts / counts.sum()\n        entropy = -np.sum(probabilities * np.log2(probabilities))\n        return round(entropy, 4)\n    \n    elif criterion == \"gini\":\n        # Calculate Gini index\n        _, counts = np.unique(y, return_counts=True)\n        probabilities = counts / counts.sum()\n        gini = 1 - np.sum(probabilities ** 2)\n        return round(gini, 4)\n    \n    elif criterion == \"mse\":\n        # Calculate mean-squared error\n        mean_y = np.mean(y)\n        mse = np.mean((y - mean_y) ** 2)\n        return round(mse, 4)\n    \n    else:\n        raise ValueError(\"Criterion must be one of {'entropy', 'gini', 'mse'}\")\n\n# Example usage:\n# y = np.array([1, 1, 0, 0, 1])\n# print(compute_impurity(y, \"entropy\"))\n# print(compute_impurity(y, \"gini\"))\n# print(compute_impurity(y, \"mse\"))\n```\n\nThis function first checks if the input array `y` is empty, returning 0.0 if it is. It then calculates the impurity based on the specified criterion and returns the result rounded to four decimal places. If an invalid criterion is provided, it raises a `ValueError`."}
{"task_id": 61, "completion_id": 0, "completion": "To implement the function `grad` that calculates the gradient of the mean squared error for linear regression, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    W = np.array(W)\n\n    # Reshape y and W to column vectors if they are 1-D\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    if W.ndim == 1:\n        W = W.reshape(-1, 1)\n\n    # Validate dimensions\n    n_samples, n_features = X.shape\n    if y.shape[0] != n_samples or W.shape[0] != n_features:\n        return -1\n\n    # Compute the gradient using vectorized operations\n    error = X @ W - y\n    gradient = (X.T @ error) / n_samples\n\n    # Round the gradient to 4 decimal places\n    gradient_rounded = np.round(gradient, 4)\n\n    # Convert the result to a nested list of shape (d, 1)\n    return gradient_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# y = [5, 6]\n# W = [0.1, 0.2]\n# print(grad(X, y, W))\n```\n\n### Explanation:\n1. **Input Conversion**: Convert the input lists to NumPy arrays for efficient computation.\n2. **Reshape**: Ensure `y` and `W` are column vectors if they are initially 1-D arrays.\n3. **Dimension Validation**: Check that the dimensions of `X`, `y`, and `W` are compatible. If not, return `-1`.\n4. **Gradient Calculation**: Use vectorized operations to compute the gradient of the MSE cost function.\n5. **Rounding**: Round each element of the gradient to 4 decimal places.\n6. **Output Format**: Convert the rounded gradient to a nested list format with shape `(d, 1)`.\n\nThis implementation efficiently computes the gradient using NumPy's capabilities and adheres to the constraints specified in the task."}
{"task_id": 62, "completion_id": 0, "completion": "To implement the univariate Lasso regression with polynomial features using coordinate descent, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Number of samples\n    m = len(X)\n    \n    # Build the design matrix with polynomial features\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    # Coordinate descent\n    for iteration in range(n_iterations):\n        w_old = w.copy()\n        \n        # Update bias (w0)\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        \n        # Update other coefficients (w1 to wd)\n        for j in range(1, degree + 1):\n            # Compute rho\n            rho = X_poly[:, j].T @ (y - (X_poly @ w) + w[j] * X_poly[:, j])\n            \n            # Update w[j] using soft thresholding\n            w[j] = soft_threshold(rho, reg_factor) / (X_poly[:, j].T @ X_poly[:, j])\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_old)) < tol:\n            break\n    \n    # Round the coefficients to 4 decimal places\n    return list(np.round(w, 4))\n\ndef soft_threshold(rho: float, lambda_: float) -> float:\n    \"\"\"Apply the soft thresholding operator.\"\"\"\n    return np.sign(rho) * max(abs(rho) - lambda_, 0)\n\n```\n\n### Explanation:\n\n1. **Design Matrix Construction**: We use `np.vander` to create a Vandermonde matrix, which is a matrix of polynomial features. The `increasing=True` parameter ensures that the columns are ordered from x\u2070 to x\u1d48.\n\n2. **Coordinate Descent**: We iterate over the weights, updating each one using the specified formulas. The bias term `w\u2080` is updated using the mean of the residuals, while other weights are updated using the soft thresholding technique.\n\n3. **Soft Thresholding**: This function applies the soft thresholding operator, which is crucial for Lasso regression to perform feature selection and regularization.\n\n4. **Convergence Check**: The algorithm stops early if the maximum change in any weight is less than the specified tolerance `tol`.\n\n5. **Return**: The learned coefficients are rounded to four decimal places and returned as a list.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n    \n    Returns:\n    list[float]: A list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n    \n    # Initialize beta vectors\n    beta = np.zeros((T, N))\n    \n    # Base case: \u03b2_{T-1}(i) = 1 for all states i\n    beta[T-1] = np.ones(N)\n    \n    # Recursive case: calculate \u03b2_t(i) for t = T-2, T-3, ..., 0\n    for time in range(T-2, t-1, -1):\n        for i in range(N):\n            beta[time][i] = sum(A[i][j] * B[j][obs[time+1]] * beta[time+1][j] for j in range(N))\n    \n    # Round the results to 4 decimal places\n    beta_t_rounded = [round(prob, 4) for prob in beta[t]]\n    \n    return beta_t_rounded\n```\n\n### Explanation:\n\n1. **Initialization**: \n   - We initialize a `beta` matrix with zeros, where `beta[t][i]` will store the backward probability for state `i` at time `t`.\n   - The base case is set for the last time step `T-1`, where `beta[T-1][i] = 1` for all states `i`.\n\n2. **Recursive Calculation**:\n   - We iterate backward from `T-2` to `t`, calculating the backward probabilities using the formula provided.\n   - For each state `i` at time `time`, we compute `beta[time][i]` using the sum of products of transition probabilities, emission probabilities, and the backward probabilities from the next time step.\n\n3. **Rounding**:\n   - The final backward probabilities for the given time index `t` are rounded to 4 decimal places before returning.\n\nThis function efficiently computes the backward probabilities for a given time index in a Hidden Markov Model using dynamic programming."}
{"task_id": 64, "completion_id": 0, "completion": "To implement the naive Discrete Fourier Transform (DFT) as described, we need to compute the DFT coefficients using nested loops, without relying on any FFT helper functions. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef dft(frame: np.ndarray, positive_only: bool = True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency\n            terms (first *N//2+1* coefficients).  Defaults to ``True``.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        *N//2+1* when *positive_only* is ``True`` and *N* otherwise.\n    \"\"\"\n    N = len(frame)\n    # Initialize the list to store DFT coefficients\n    c = []\n    \n    # Compute DFT coefficients using nested loops\n    for k in range(N):\n        # Initialize the k-th coefficient\n        c_k = 0\n        for n in range(N):\n            # Calculate the complex exponential term\n            exp_term = np.exp(-2j * np.pi * k * n / N)\n            # Accumulate the sum for the k-th coefficient\n            c_k += frame[n] * exp_term\n        \n        # Round the real and imaginary parts to 4 decimals\n        c_k_rounded = complex(round(c_k.real, 4), round(c_k.imag, 4))\n        c.append(c_k_rounded)\n    \n    # If positive_only is True, return only the first N//2+1 coefficients\n    if positive_only:\n        return c[:N//2+1]\n    else:\n        return c\n\n# Example usage:\n# frame = np.array([0, 1, 2, 3])\n# print(dft(frame, positive_only=True))\n```\n\n### Explanation:\n1. **Initialization**: We start by determining the length `N` of the input signal `frame`.\n\n2. **Nested Loops**: We use two nested loops to compute the DFT coefficients:\n   - The outer loop iterates over each frequency index `k` from `0` to `N-1`.\n   - The inner loop iterates over each time index `n` from `0` to `N-1`, computing the sum for the `k-th` DFT coefficient.\n\n3. **Complex Exponential Calculation**: For each pair `(k, n)`, we compute the complex exponential term `exp_term` using `np.exp(-2j * np.pi * k * n / N)`.\n\n4. **Coefficient Accumulation**: We accumulate the product of the signal value `frame[n]` and the complex exponential term into `c_k`.\n\n5. **Rounding**: After computing each coefficient `c_k`, we round its real and imaginary parts to four decimal places.\n\n6. **Return Value**: Depending on the `positive_only` flag, we return either the first `N//2+1` coefficients or the full list of `N` coefficients.\n\nThis implementation provides a straightforward way to compute the DFT using basic operations, adhering to the \\(O(N^2)\\) complexity requirement."}
{"task_id": 65, "completion_id": 0, "completion": "To implement the backward algorithm for a Hidden Markov Model (HMM), we need to follow the recursive procedure described in the task. Let's break down the steps and write the function `backward_prob`:\n\n1. **Initialization**: Start by checking if any of the input lists are empty. If so, return `0.0` as no valid probability can be computed.\n\n2. **Backward Variable Initialization**: Initialize the backward variables for the last time step `T-1` as `1` for all states.\n\n3. **Recursive Calculation**: Compute the backward variables for each time step `t` from `T-2` down to `0` using the recursive formula provided.\n\n4. **Sequence Probability Calculation**: Finally, compute the probability of the observation sequence given the model using the initial state probabilities, emission probabilities for the first observation, and the backward variables at time `0`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty input lists\n    if not A or not B or not pi or not obs:\n        return 0.0\n    \n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n    \n    # Initialize backward variables\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1  # Base case for backward variables\n    \n    # Recursive calculation of backward variables\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = sum(A[i][j] * B[j][obs[t+1]] * beta[t+1, j] for j in range(N))\n    \n    # Calculate the probability of the observation sequence\n    prob = sum(pi[i] * B[i][obs[0]] * beta[0, i] for i in range(N))\n    \n    return round(prob, 6)\n\n# Example usage:\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.5, 0.5], [0.1, 0.9]]\n# pi = [0.6, 0.4]\n# obs = [0, 1]\n# print(backward_prob(A, B, pi, obs))  # Output should be the probability rounded to 6 decimals\n```\n\nThis function uses numpy arrays for efficient computation and follows the recursive backward algorithm to compute the probability of the observation sequence given the HMM parameters. The result is rounded to six decimal places as required."}
{"task_id": 67, "completion_id": 0, "completion": "To implement the function `gen_hmm_data`, we need to follow the steps outlined in the task description. Here's how you can achieve this:\n\n1. **Validate Probability Distributions**: Ensure that the initial state distribution `S`, each row of the state-transition matrix `A`, and each row of the emission matrix `B` sum to 1 within a tolerance of \\(1 \\times 10^{-8}\\).\n\n2. **Set Random Seed**: If a seed is provided, use it to seed the random number generator for reproducibility.\n\n3. **Simulate the HMM**: Start by sampling the initial hidden state from `S`. Then, for each subsequent step, sample the next hidden state using the current state's transition probabilities from `A`, and sample the observation using the current state's emission probabilities from `B`.\n\n4. **Return the Results**: Return the sequence of hidden states and observations as lists.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom itertools import accumulate\n\ndef gen_hmm_data(\n    S: list[float],\n    A: list[list[float]],\n    B: list[list[float]],\n    n_sample: int,\n    seed: int | None = None,\n) -> tuple[list[int], list[int]]:\n    \"\"\"Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers of\n        length *n_sample*. If any probability distribution is invalid the\n        function must return **-1**.\n    \"\"\"\n    # Validate probability distributions\n    def is_valid_distribution(dist):\n        return abs(sum(dist) - 1.0) <= 1e-8\n\n    if not is_valid_distribution(S):\n        return -1\n    for row in A:\n        if not is_valid_distribution(row):\n            return -1\n    for row in B:\n        if not is_valid_distribution(row):\n            return -1\n\n    # Set random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Initialize lists for states and observations\n    states = []\n    observations = []\n\n    # Sample the initial state\n    current_state = np.random.choice(len(S), p=S)\n    states.append(current_state)\n\n    # Sample the observation for the initial state\n    current_observation = np.random.choice(len(B[current_state]), p=B[current_state])\n    observations.append(current_observation)\n\n    # Generate the sequence\n    for _ in range(1, n_sample):\n        # Sample the next state\n        current_state = np.random.choice(len(A[current_state]), p=A[current_state])\n        states.append(current_state)\n\n        # Sample the observation for the current state\n        current_observation = np.random.choice(len(B[current_state]), p=B[current_state])\n        observations.append(current_observation)\n\n    return states, observations\n```\n\n### Explanation:\n\n- **Validation**: The function `is_valid_distribution` checks if a given probability distribution sums to 1 within the specified tolerance. This is used to validate `S`, each row of `A`, and each row of `B`.\n\n- **Random Seed**: If a seed is provided, `np.random.seed(seed)` is called to ensure reproducibility.\n\n- **Sampling**: The initial state is sampled from `S`, and for each subsequent step, the next state is sampled from the current state's row in `A`, and the observation is sampled from the current state's row in `B`.\n\n- **Return**: The function returns the lists of states and observations. If any distribution is invalid, it returns `-1`."}
{"task_id": 68, "completion_id": 0, "completion": "To implement the Stochastic Gradient Descent (SGD) with momentum update, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float = 0.01, momentum: float = 0.0, prev_update: np.ndarray | None = None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    # Initialize prev_update to zeros if it's None\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    \n    # Compute the new velocity (momentum update)\n    new_update = momentum * prev_update + (1 - momentum) * grad\n    \n    # Update the parameters\n    updated_w = w - learning_rate * new_update\n    \n    # Round the results to 4 decimal places and convert to lists\n    updated_w_list = np.round(updated_w, 4).tolist()\n    new_update_list = np.round(new_update, 4).tolist()\n    \n    return updated_w_list, new_update_list\n```\n\n### Explanation:\n1. **Initialization**: If `prev_update` is `None`, we initialize it as a zero tensor with the same shape as `w`.\n\n2. **Momentum Update**: The new velocity `new_update` is calculated using the formula:\n   \\[\n   u_t = \\text{momentum} \\times u_{t-1} + (1-\\text{momentum}) \\times \\nabla_w\n   \\]\n\n3. **Parameter Update**: The parameters `w` are updated using the formula:\n   \\[\n   w_{t+1} = w_t - \\text{learning\\_rate} \\times u_t\n   \\]\n\n4. **Output Formatting**: Both the updated parameters and the new velocity are rounded to 4 decimal places and converted to Python lists before returning.\n\nThis implementation ensures that the function adheres to the task requirements and constraints."}
{"task_id": 69, "completion_id": 0, "completion": "To implement the forward algorithm for Hidden Markov Models, we need to follow these steps:\n\n1. **Validate Input Dimensions**: Ensure that the dimensions of the initial state probability vector, state-transition matrix, and emission matrix are consistent. Also, check that the observation indices are within the valid range.\n\n2. **Initialize Forward Probabilities**: Compute the initial forward probabilities using the initial state probabilities and the emission probabilities for the first observation.\n\n3. **Iterate Over Observations**: For each subsequent observation, update the forward probabilities using the state-transition matrix and the emission matrix.\n\n4. **Compute Total Probability**: Sum the forward probabilities for the final observation to get the likelihood of the observation sequence.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Validate input dimensions\n    n = len(S)\n    if len(A) != n or any(len(row) != n for row in A):\n        return -1\n    if len(B) != n or any(len(row) != len(B[0]) for row in B):\n        return -1\n    m = len(B[0])\n    \n    # Validate observations\n    if not observations or any(obs < 0 or obs >= m for obs in observations):\n        return -1\n    \n    # Initialize forward probabilities\n    alpha = np.zeros((len(observations), n))\n    for i in range(n):\n        alpha[0][i] = S[i] * B[i][observations[0]]\n    \n    # Iterate over observations\n    for t in range(1, len(observations)):\n        for j in range(n):\n            alpha[t][j] = sum(alpha[t-1][i] * A[i][j] for i in range(n)) * B[j][observations[t]]\n    \n    # Compute total probability\n    likelihood = sum(alpha[-1][i] for i in range(n))\n    \n    return round(likelihood, 4)\n\n# Example usage:\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.1, 0.9]]\nobservations = [0, 1, 0]\nprint(forward_algorithm(S, A, B, observations))  # Output should be the likelihood rounded to 4 decimals\n```\n\nThis code performs the forward algorithm, checking for input validity and calculating the likelihood of the observation sequence. It returns the likelihood rounded to four decimal places or `-1` if the input is invalid."}
{"task_id": 70, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow the steps outlined in the task description. Here's a detailed implementation:\n\n```python\nfrom collections import Counter, defaultdict\nfrom typing import List, Dict, Optional\n\nclass FPTreeNode:\n    def __init__(self, item: Optional[str], count: int, parent: Optional['FPTreeNode']):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\n    def increment(self, count: int):\n        self.count += count\n\ndef build_fp_tree(transactions: List[List[str]], min_support: int) -> (FPTreeNode, Dict[str, FPTreeNode]):\n    # First pass: count item frequencies\n    item_counter = Counter()\n    for transaction in transactions:\n        item_counter.update(transaction)\n\n    # Remove infrequent items\n    frequent_items = {item for item, count in item_counter.items() if count >= min_support}\n    if not frequent_items:\n        return None, {}\n\n    # Second pass: build the FP-tree\n    root = FPTreeNode(None, 0, None)\n    header_table = defaultdict(lambda: None)\n\n    for transaction in transactions:\n        # Filter and sort transaction by frequency and lexicographically\n        sorted_items = sorted(\n            [item for item in transaction if item in frequent_items],\n            key=lambda item: (-item_counter[item], item)\n        )\n        # Insert transaction into the FP-tree\n        current_node = root\n        for item in sorted_items:\n            if item in current_node.children:\n                current_node.children[item].increment(1)\n            else:\n                new_node = FPTreeNode(item, 1, current_node)\n                current_node.children[item] = new_node\n                # Update header table\n                if header_table[item] is None:\n                    header_table[item] = new_node\n                else:\n                    # Link the new node to the existing node in the header table\n                    current_link = header_table[item]\n                    while current_link.link is not None:\n                        current_link = current_link.link\n                    current_link.link = new_node\n            current_node = current_node.children[item]\n\n    return root, header_table\n\ndef mine_fp_tree(header_table: Dict[str, FPTreeNode], min_support: int, prefix: List[str], frequent_itemsets: List[List[str]]):\n    # Sort items in header table by frequency and lexicographically\n    sorted_items = sorted(header_table.keys(), key=lambda item: item)\n\n    for item in sorted_items:\n        new_prefix = prefix + [item]\n        frequent_itemsets.append(new_prefix)\n\n        # Build conditional pattern base\n        conditional_pattern_base = []\n        node = header_table[item]\n        while node is not None:\n            path = []\n            parent = node.parent\n            while parent is not None and parent.item is not None:\n                path.append(parent.item)\n                parent = parent.parent\n            path.reverse()\n            for _ in range(node.count):\n                conditional_pattern_base.append(path)\n            node = node.link\n\n        # Build conditional FP-tree\n        conditional_tree, conditional_header = build_fp_tree(conditional_pattern_base, min_support)\n        if conditional_header:\n            mine_fp_tree(conditional_header, min_support, new_prefix, frequent_itemsets)\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n\n    # Build the FP-tree\n    fp_tree, header_table = build_fp_tree(transactions, min_support)\n    if not header_table:\n        return []\n\n    # Mine the FP-tree\n    frequent_itemsets = []\n    mine_fp_tree(header_table, min_support, [], frequent_itemsets)\n\n    # Sort the frequent itemsets\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n```\n\n### Explanation:\n\n1. **FP-Tree Construction**:\n   - We first count the frequency of each item across all transactions.\n   - We filter out infrequent items based on the `min_support`.\n   - We then build the FP-tree by inserting each transaction, sorted by item frequency and lexicographically.\n\n2. **Mining the FP-Tree**:\n   - We recursively mine the FP-tree by creating conditional pattern bases and conditional FP-trees for each item in the header table.\n   - We collect all frequent itemsets by appending the current prefix with the item being processed.\n\n3. **Sorting**:\n   - Finally, we sort the frequent itemsets by length and lexicographically to ensure deterministic output.\n\nThis implementation should efficiently find all frequent itemsets using the FP-Growth algorithm."}
{"task_id": 71, "completion_id": 0, "completion": "To implement the function `label_uniq_cnt`, we need to iterate over the list of samples, extract the label from each sample, and count the occurrences of each label. We can use a dictionary to store these counts, where the keys are the labels and the values are the counts. Here's how you can implement this:\n\n```python\ndef label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    label_counts = {}\n    \n    for sample in data:\n        if sample:  # Ensure the sample is not empty\n            label = sample[-1]  # Get the last element as the label\n            if label in label_counts:\n                label_counts[label] += 1\n            else:\n                label_counts[label] = 1\n    \n    return label_counts\n```\n\n### Explanation:\n- **Initialization**: We start by initializing an empty dictionary `label_counts` to store the counts of each label.\n- **Iteration**: We iterate over each sample in the `data` list.\n- **Label Extraction**: For each sample, we extract the last element, which is the label.\n- **Counting**: We check if the label is already a key in the dictionary. If it is, we increment its count. If not, we add it to the dictionary with a count of 1.\n- **Return**: Finally, we return the `label_counts` dictionary.\n\nThis function efficiently counts the occurrences of each label in a single pass over the data, adhering to the constraints and requirements specified in the task description."}
{"task_id": 72, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"\n    Calculate the variance reduction for a split in a regression tree.\n    \n    Parameters:\n    y (np.ndarray): Target values for the parent node.\n    y_left (np.ndarray): Target values for the left child node after the split.\n    y_right (np.ndarray): Target values for the right child node after the split.\n    \n    Returns:\n    float: The variance reduction obtained by the split, rounded to the nearest 4th decimal.\n    \"\"\"\n    # Number of samples in parent and child nodes\n    n = y.shape[0]\n    n_left = y_left.shape[0]\n    n_right = y_right.shape[0]\n    \n    # Calculate variance for each column and sum them up\n    var_y = np.sum(np.var(y, axis=0, ddof=0))\n    var_y_left = np.sum(np.var(y_left, axis=0, ddof=0))\n    var_y_right = np.sum(np.var(y_right, axis=0, ddof=0))\n    \n    # Calculate variance reduction\n    variance_reduction_value = var_y - (n_left / n) * var_y_left - (n_right / n) * var_y_right\n    \n    # Return the result rounded to the nearest 4th decimal\n    return round(variance_reduction_value, 4)\n```\n\n### Explanation:\n1. **Variance Calculation**: The variance is calculated using `np.var` with `ddof=0` to ensure population variance is computed. This is done for each column and summed to get the total variance for multi-dimensional targets.\n\n2. **Variance Reduction Formula**: The formula for variance reduction is applied directly using the calculated variances and the proportions of samples in the left and right child nodes.\n\n3. **Rounding**: The result is rounded to the nearest 4th decimal using Python's `round` function."}
{"task_id": 74, "completion_id": 0, "completion": "To solve this task, we need to compute the magnitude spectrum of each frame using the real-valued Fast Fourier Transform (FFT) provided by NumPy. The `numpy.fft.rfft` function is particularly useful here because it computes the FFT for real input data and returns only the non-redundant positive-frequency terms.\n\nHere's a step-by-step breakdown of the solution:\n\n1. **Input Handling**: The function should handle both 1-D and 2-D NumPy arrays. If the input is 1-D, it should be treated as a single frame.\n\n2. **Compute the FFT**: Use `numpy.fft.rfft` to compute the FFT for each frame. This function returns the positive-frequency terms, which is exactly what we need.\n\n3. **Magnitude Calculation**: Compute the magnitude of the FFT coefficients using `numpy.abs`.\n\n4. **Rounding**: Round the magnitude values to four decimal places.\n\n5. **Output**: Convert the result to a list of lists using the `tolist()` method.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef magnitude_spectrum(frames: \"np.ndarray\") -> \"list[list[float]]\":\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    # Ensure frames is a 2-D array for consistent processing\n    if frames.ndim == 1:\n        frames = frames[np.newaxis, :]  # Convert to 2-D with one row\n\n    # Compute the magnitude spectrum for each frame\n    magnitude_spectra = []\n    for frame in frames:\n        # Compute the real FFT\n        fft_result = np.fft.rfft(frame)\n        # Compute the magnitude\n        magnitude = np.abs(fft_result)\n        # Round to four decimal places\n        rounded_magnitude = np.round(magnitude, 4)\n        # Append to the list\n        magnitude_spectra.append(rounded_magnitude.tolist())\n\n    return magnitude_spectra\n```\n\n### Explanation:\n\n- **Input Conversion**: If the input is a 1-D array, it is reshaped to a 2-D array with one row using `np.newaxis`. This ensures that the rest of the code can uniformly handle the input as a 2-D array.\n\n- **FFT and Magnitude**: For each frame, `np.fft.rfft` computes the FFT, and `np.abs` calculates the magnitude of the complex numbers returned by the FFT.\n\n- **Rounding**: The magnitudes are rounded to four decimal places using `np.round`.\n\n- **Output Format**: The final result is converted to a list of lists using `tolist()` to meet the output requirements.\n\nThis implementation efficiently computes the desired magnitude spectrum for each frame, handling both single and multiple frames seamlessly."}
{"task_id": 75, "completion_id": 0, "completion": "To implement the k-Nearest Neighbour (k-NN) classifier, we need to follow the rules and constraints provided. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if k <= 0 or k > len(X_train):\n        return -1\n    \n    def euclidean_distance_squared(x1, x2):\n        \"\"\"Compute the squared Euclidean distance between two points.\"\"\"\n        return sum((a - b) ** 2 for a, b in zip(x1, x2))\n    \n    predictions = []\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [(euclidean_distance_squared(test_point, train_point), y_train[i]) \n                     for i, train_point in enumerate(X_train)]\n        \n        # Sort distances and get the k nearest neighbors\n        distances.sort(key=lambda x: x[0])\n        k_nearest_neighbors = distances[:k]\n        \n        # Count the votes for each class\n        class_votes = {}\n        for _, class_label in k_nearest_neighbors:\n            if class_label in class_votes:\n                class_votes[class_label] += 1\n            else:\n                class_votes[class_label] = 1\n        \n        # Determine the class with the highest vote\n        max_votes = max(class_votes.values())\n        candidates = [class_label for class_label, votes in class_votes.items() if votes == max_votes]\n        \n        # Choose the smallest class label among the tied ones\n        predicted_class = min(candidates)\n        predictions.append(predicted_class)\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if `k` is a valid integer within the range `[1, len(X_train)]`. If not, it returns `-1`.\n\n2. **Distance Calculation**: For each test sample, the squared Euclidean distance is calculated between the test sample and each training sample. The square root is omitted as it is monotonic.\n\n3. **Sorting and Selection**: The distances are sorted, and the `k` nearest neighbors are selected.\n\n4. **Voting**: A dictionary is used to count votes for each class label among the `k` nearest neighbors.\n\n5. **Tie-breaking**: If there is a tie in the number of votes, the smallest class label is chosen.\n\n6. **Return**: The function returns a list of predicted class labels for each test sample."}
{"task_id": 76, "completion_id": 0, "completion": "To implement the categorical cross-entropy loss function, we need to iterate over each sample and each class, compute the log of the predicted probabilities, multiply by the true labels, and sum these values. We'll add a small epsilon value to the predicted probabilities to ensure numerical stability. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Machine epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Compute the categorical cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n# y_pred = [[0.7, 0.2, 0.1], [0.1, 0.8, 0.1], [0.2, 0.2, 0.6]]\n# print(cross_entropy_loss(y, y_pred))  # Output: 0.3640\n```\n\n### Explanation:\n1. **Input Conversion**: We convert the input lists to NumPy arrays for easier manipulation and computation.\n2. **Machine Epsilon**: We use `np.finfo(float).eps` to get the smallest representable positive number for a float, which helps prevent `log(0)` errors.\n3. **Loss Calculation**: We compute the loss using the formula provided, iterating over each sample and class, and summing the results.\n4. **Rounding**: Finally, we round the computed loss to four decimal places before returning it."}
{"task_id": 77, "completion_id": 0, "completion": "To implement the forward propagation for an L-layer neural network, we need to iterate through each layer, perform the linear and non-linear steps, and store the necessary information for each layer in a cache. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # Number of layers\n\n    # Iterate through layers 1 to L-1\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        \n        # Linear step\n        Z = np.dot(W, A_prev) + b\n        \n        # Non-linear step (ReLU)\n        A = relu(Z)\n        \n        # Cache the values for backward pass\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n\n    # Output layer L\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    \n    # Linear step\n    ZL = np.dot(WL, A) + bL\n    \n    # Non-linear step (Sigmoid)\n    AL = sigmoid(ZL)\n    \n    # Cache the values for backward pass\n    cache = (A, WL, bL, ZL)\n    caches.append(cache)\n\n    # Round AL to 4 decimals and convert to a plain Python list\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n\n# Example usage:\n# X = np.random.randn(4, 2)  # Example input\n# parameters = {\n#     'W1': np.random.randn(3, 4),\n#     'b1': np.random.randn(3, 1),\n#     'W2': np.random.randn(1, 3),\n#     'b2': np.random.randn(1, 1)\n# }\n# AL, caches = L_model_forward(X, parameters)\n# print(AL)\n```\n\n### Explanation:\n1. **ReLU and Sigmoid Functions**: We define helper functions for the ReLU and Sigmoid activations.\n2. **Forward Propagation**: We iterate through each layer, performing the linear step followed by the appropriate activation function (ReLU for hidden layers and Sigmoid for the output layer).\n3. **Caching**: We store the necessary values for each layer in a cache, which includes the previous activation, weights, biases, and the linear output `Z`.\n4. **Output**: The final activation `AL` is rounded to 4 decimal places and converted to a plain Python list before returning, along with the caches."}
{"task_id": 78, "completion_id": 0, "completion": "To implement the Adamax optimizer step, we need to follow the update equations provided in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adamax_step(params: list[float],\n                grads:  list[float],\n                m:      list[float],\n                u:      list[float],\n                t:      int,\n                learning_rate: float = 0.002,\n                beta1:         float = 0.9,\n                beta2:         float = 0.999,\n                epsilon:       float = 1e-8) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n    \n    # Update the first moment estimate\n    m_t = [beta1 * m_i + (1 - beta1) * grad_i for m_i, grad_i in zip(m, grads)]\n    \n    # Update the exponentially weighted infinity-norm\n    u_t = [max(beta2 * u_i, abs(grad_i)) for u_i, grad_i in zip(u, grads)]\n    \n    # Compute the step size\n    step = [(learning_rate / (1 - beta1**t)) * m_i / (u_i + epsilon) for m_i, u_i in zip(m_t, u_t)]\n    \n    # Update the parameters\n    updated_params = [param_i - step_i for param_i, step_i in zip(params, step)]\n    \n    # Increment the time step\n    updated_t = t + 1\n    \n    # Round all values to 6 decimal places\n    updated_params = [round(p, 6) for p in updated_params]\n    updated_m = [round(m_i, 6) for m_i in m_t]\n    updated_u = [round(u_i, 6) for u_i in u_t]\n    \n    return updated_params, updated_m, updated_u, updated_t\n```\n\n### Explanation:\n1. **First Moment Update (`m_t`)**: This is calculated using the exponential decay rate `beta1` and the current gradients.\n2. **Infinity Norm Update (`u_t`)**: This uses the exponential decay rate `beta2` and takes the maximum between the scaled previous `u` and the absolute value of the current gradients.\n3. **Step Calculation**: The step size is computed using the learning rate, corrected first moment, and the updated infinity norm.\n4. **Parameter Update**: The parameters are updated by subtracting the computed step size.\n5. **Time Step Increment**: The time step counter `t` is incremented by 1.\n6. **Rounding**: All floating-point values are rounded to 6 decimal places before returning.\n\nThis function performs one update step of the Adamax optimizer, updating the parameters, first moment estimates, and infinity norms accordingly."}
{"task_id": 80, "completion_id": 0, "completion": "To implement the Adadelta update step, we need to follow the mathematical rules provided in the task description. Here's the complete implementation of the function:\n\n```python\nimport numpy as np\n\ndef adadelta_update(w: list[float] | np.ndarray,\n                    grad_w: list[float] | np.ndarray,\n                    rho: float = 0.95,\n                    eps: float = 1e-6) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros.  It must\n    therefore implement the mathematical rules of Adadelta and finally return\n    the updated weight vector rounded to 4 decimal places as a regular Python\n    list.\n\n    Args:\n        w:      Current weights (list or NumPy array of any shape).\n        grad_w: Corresponding gradient \u2013 same shape as *w*.\n        rho:    Decay coefficient used by Adadelta (default 0.95).\n        eps:    Small constant to avoid division by zero (default 1e-6).\n\n    Returns:\n        List[float]: weights after one Adadelta update (rounded to 4 decimals).\n    \"\"\"\n    # Convert inputs to numpy arrays for element-wise operations\n    w = np.array(w, dtype=float)\n    grad_w = np.array(grad_w, dtype=float)\n    \n    # Initialize running averages to zero\n    E_grad = np.zeros_like(w)\n    E_delta = np.zeros_like(w)\n    \n    # Update E_grad\n    E_grad = rho * E_grad + (1 - rho) * grad_w**2\n    \n    # Calculate RMS values\n    RMS_grad = np.sqrt(E_grad + eps)\n    RMS_delta = np.sqrt(E_delta + eps)\n    \n    # Calculate adaptive learning rate\n    adaptive_lr = RMS_delta / RMS_grad\n    \n    # Calculate parameter update \u0394w\n    delta_w = adaptive_lr * grad_w\n    \n    # Update E_delta\n    E_delta = rho * E_delta + (1 - rho) * delta_w**2\n    \n    # Update weights\n    w_new = w - delta_w\n    \n    # Round the updated weights to 4 decimal places and convert to list\n    w_new_rounded = np.round(w_new, 4).tolist()\n    \n    return w_new_rounded\n\n# Example usage:\nw = [0.5, -0.3, 0.8]\ngrad_w = [0.1, -0.2, 0.0]\nupdated_weights = adadelta_update(w, grad_w)\nprint(updated_weights)\n```\n\n### Explanation:\n1. **Initialization**: We start by converting the input weights and gradients to NumPy arrays for easy element-wise operations. We also initialize the running averages `E_grad` and `E_delta` to zero since this is the first update step.\n\n2. **Update `E_grad`**: We compute the running average of the squared gradients using the formula provided.\n\n3. **Calculate RMS values**: We compute `RMS_grad` and `RMS_delta` using the updated `E_grad` and the initial `E_delta`.\n\n4. **Adaptive Learning Rate**: We calculate the adaptive learning rate using the ratio of `RMS_delta` to `RMS_grad`.\n\n5. **Parameter Update `\u0394w`**: We compute the parameter update using the adaptive learning rate and the gradient.\n\n6. **Update `E_delta`**: We update the running average of the squared parameter updates.\n\n7. **Update Weights**: We update the weights using the computed `\u0394w`.\n\n8. **Rounding and Conversion**: Finally, we round the updated weights to 4 decimal places and convert them to a regular Python list before returning.\n\nThis implementation ensures that the weights are updated correctly according to the Adadelta algorithm, and the output is formatted as required."}
{"task_id": 81, "completion_id": 0, "completion": "To compute the binary cross-entropy cost, we need to follow the formula provided and ensure that the predicted probabilities are clipped to avoid undefined logarithmic operations. Here's the implementation of the `compute_cost` function:\n\n```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Number of samples\n    m = Y.shape[0]\n    \n    # Clip A2 to avoid log(0)\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n\n# Example usage:\n# A2 = np.array([0.9, 0.2, 0.8])\n# Y = np.array([1, 0, 1])\n# print(compute_cost(A2, Y))  # Output should be the cost rounded to 6 decimal places\n```\n\n### Explanation:\n1. **Clipping**: We clip the values of `A2` to the range `[\u03b5, 1-\u03b5]` to prevent taking the logarithm of 0, which is undefined. This is done using `np.clip`.\n\n2. **Cost Calculation**: We calculate the binary cross-entropy cost using the formula provided. The cost is averaged over all samples by dividing by `m`.\n\n3. **Rounding**: The final cost is rounded to six decimal places using Python's `round` function.\n\nThis function will correctly compute the binary cross-entropy cost for the given predicted probabilities and ground-truth labels."}
{"task_id": 82, "completion_id": 0, "completion": "To implement the \u03b5-soft exploration policy, we need to calculate the probabilities for each action based on the given Q-values and the exploration parameter \u03b5. Here's how you can implement the `epsilon_soft` function:\n\n```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state. epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    # Find the index of the greedy action (first occurrence in case of ties)\n    greedy_index = np.argmax(Q)\n    \n    # Calculate the base probability for non-greedy actions\n    base_prob = epsilon / n\n    \n    # Calculate the probability for the greedy action\n    greedy_prob = 1 - epsilon + base_prob\n    \n    # Initialize the probabilities list\n    probabilities = [base_prob] * n\n    probabilities[greedy_index] = greedy_prob\n    \n    # Round probabilities to 4 decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    \n    # Ensure the sum of probabilities is 1 (within tolerance)\n    assert abs(sum(probabilities) - 1) < 1e-12, \"Probabilities do not sum to 1\"\n    \n    return probabilities\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\n### Explanation:\n1. **Determine the Number of Actions (`n`)**: This is simply the length of the Q-values list.\n\n2. **Find the Greedy Action (`greedy_index`)**: Use `np.argmax` to find the index of the maximum Q-value. In case of ties, `np.argmax` returns the first occurrence.\n\n3. **Calculate Base Probability (`base_prob`)**: This is the probability assigned to non-greedy actions, calculated as `epsilon / n`.\n\n4. **Calculate Greedy Probability (`greedy_prob`)**: This is the probability assigned to the greedy action, calculated as `1 - epsilon + base_prob`.\n\n5. **Initialize Probabilities List**: Start with all actions having the base probability, then set the greedy action's probability to `greedy_prob`.\n\n6. **Round Probabilities**: Ensure all probabilities are rounded to 4 decimal places.\n\n7. **Check Sum of Probabilities**: Ensure the sum of probabilities is 1 within a numerical tolerance of `1e-12`.\n\nThis implementation ensures that the \u03b5-soft policy is correctly applied, with all probabilities summing to 1 and rounded to the specified precision."}
{"task_id": 84, "completion_id": 0, "completion": "To implement the function `mse_line_search`, we need to follow the mathematical derivation provided in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    # Calculate the residuals\n    residuals = y - y_pred\n    \n    # Calculate the numerator and denominator for gamma\n    numerator = np.sum(residuals * h_pred)\n    denominator = np.sum(h_pred ** 2)\n    \n    # If the denominator is zero, return 1.0\n    if denominator == 0:\n        return 1.0\n    \n    # Calculate gamma\n    gamma = numerator / denominator\n    \n    # Return gamma rounded to four decimal places\n    return round(gamma, 4)\n\n# Example usage:\n# y = np.array([3, 5, 2, 8])\n# y_pred = np.array([2.5, 4.5, 2.0, 7.5])\n# h_pred = np.array([0.5, 0.5, 0.0, 0.5])\n# print(mse_line_search(y, y_pred, h_pred))  # Output should be rounded to four decimal places\n```\n\n### Explanation:\n1. **Residual Calculation**: We first calculate the residuals, which are the differences between the true targets `y` and the current predictions `y_pred`.\n\n2. **Numerator and Denominator**: We compute the numerator as the sum of the product of residuals and the new learner's predictions `h_pred`. The denominator is the sum of the squares of `h_pred`.\n\n3. **Denominator Check**: If the denominator is zero, it indicates that `h_pred` perfectly fits the residuals, and we return a step size of 1.0.\n\n4. **Gamma Calculation**: If the denominator is not zero, we calculate `gamma` using the formula provided and round it to four decimal places before returning.\n\nThis function efficiently computes the optimal step size for gradient boosting with MSE loss, adhering to the mathematical derivation and constraints given in the task description."}
{"task_id": 85, "completion_id": 0, "completion": "To implement the one-step update for a multi-class Softmax regression model, we need to follow the steps outlined in the task description. Let's break down the implementation:\n\n1. **Compute the logits \\( Z \\):** This is done by multiplying the input matrix \\( X \\) with the weight matrix \\( W \\).\n\n2. **Apply the softmax transformation:** This will convert the logits into predicted probabilities \\( \\hat{Y} \\). The softmax function is applied row-wise.\n\n3. **Compute the gradient of the cross-entropy loss:** The gradient is calculated using the formula provided, which involves the difference between the predicted probabilities and the true labels, followed by a matrix multiplication with the transpose of \\( X \\).\n\n4. **Update the weights:** Using the gradient descent update rule, adjust the weights by subtracting the product of the learning rate and the gradient.\n\n5. **Return the updated weights:** The updated weights should be rounded to four decimal places and returned as a list of lists.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    \"\"\"One gradient-descent step for Softmax regression using cross-entropy loss.\"\"\"\n    \n    # Check if learning rate is zero or if X is all zeros\n    if lr == 0 or np.all(X == 0):\n        return W.tolist()\n    \n    # Compute logits Z\n    Z = np.dot(X, W)\n    \n    # Apply softmax to compute predicted probabilities \u0176\n    exp_Z = np.exp(Z - np.max(Z, axis=1, keepdims=True))  # for numerical stability\n    Y_hat = exp_Z / np.sum(exp_Z, axis=1, keepdims=True)\n    \n    # Compute the gradient of the cross-entropy loss\n    grad = np.dot(X.T, (Y_hat - Y)) / X.shape[0]\n    \n    # Update the weights\n    W_new = W - lr * grad\n    \n    # Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n\n# Example usage\nX = np.array([[1, 2],\n              [3, 4]])\nY = np.array([[1, 0],\n              [0, 1]])\nW = np.array([[0.1, 0.2],\n              [0.3, 0.4]])\nlr = 0.1\n\nupdated_weights = softmax_regression_step(X, Y, W, lr)\nprint(updated_weights)\n```\n\n### Explanation:\n- **Numerical Stability in Softmax:** The subtraction of `np.max(Z, axis=1, keepdims=True)` from `Z` before applying `np.exp` is a common technique to prevent overflow in the exponential function.\n- **Gradient Calculation:** The gradient is computed as the average over all samples, which is why we divide by `X.shape[0]`.\n- **Weight Update:** The weights are updated using the gradient descent rule, and the result is rounded to four decimal places before being returned."}
{"task_id": 86, "completion_id": 0, "completion": "To solve the problem of aggregating predictions from a Random Forest classifier using majority voting, we can iterate over each sample and count the votes for each class label. We will use the `Counter` class from the `collections` module to facilitate counting the votes. In case of a tie, we will select the smallest label based on the data type (numeric or lexicographic order for strings).\n\nHere's the implementation of the function:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Number of samples\n    num_samples = len(predictions[0])\n    \n    # Initialize the list to store the final predictions\n    final_predictions = []\n    \n    # Iterate over each sample\n    for sample_index in range(num_samples):\n        # Collect votes for the current sample from all trees\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        \n        # Count the votes using Counter\n        vote_count = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, min will return the smallest label\n        majority_vote = min(vote_count, key=lambda label: (-vote_count[label], label))\n        \n        # Append the majority vote to the final predictions\n        final_predictions.append(majority_vote)\n    \n    return final_predictions\n```\n\n### Explanation:\n\n1. **Initialization**: We determine the number of samples by checking the length of the first inner list (`predictions[0]`). We also initialize an empty list `final_predictions` to store the aggregated results.\n\n2. **Iterate Over Samples**: For each sample index, we collect the predictions from all trees for that specific sample.\n\n3. **Count Votes**: We use `Counter` to count how many times each class label appears in the votes for the current sample.\n\n4. **Determine Majority Vote**: We use the `min` function with a custom key to find the class label with the highest count. The key `(-vote_count[label], label)` ensures that we first sort by the negative count (to get the highest count) and then by the label itself to resolve ties by choosing the smallest label.\n\n5. **Store Result**: We append the determined majority vote to the `final_predictions` list.\n\n6. **Return**: Finally, we return the list of aggregated predictions."}
{"task_id": 87, "completion_id": 0, "completion": "To implement the `layer_sizes` function, we need to extract the number of rows from the input matrix `X` and the output matrix `Y`, which correspond to the number of input features and output units, respectively. The hidden layer size is fixed at 10. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]  # Number of input features\n    n_h = 10          # Fixed hidden layer size\n    n_y = Y.shape[0]  # Number of output units\n    \n    return (n_x, n_h, n_y)\n```\n\n### Explanation:\n- `X.shape[0]`: This gives the number of rows in `X`, which corresponds to the number of input features `n_x`.\n- `n_h`: This is set to 10 as per the task requirements.\n- `Y.shape[0]`: This gives the number of rows in `Y`, which corresponds to the number of output units `n_y`.\n\nThis function will return a tuple containing the sizes of the input layer, hidden layer, and output layer in the specified order."}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array for uniform processing\n    z_array = np.asarray(z)\n    \n    # Compute the softplus using the numerically stable method\n    softplus_values = np.logaddexp(0.0, z_array)\n    \n    # Round the results to 4 decimal places\n    rounded_values = np.round(softplus_values, 4)\n    \n    # Check if the input was a scalar\n    if np.isscalar(z):\n        return float(rounded_values)\n    else:\n        # Convert the result to a pure Python list\n        return rounded_values.tolist()\n\n# Example usage:\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```\n\n### Explanation:\n1. **Input Handling**: The function first converts the input `z` to a NumPy array using `np.asarray(z)`. This ensures that the input can be processed uniformly, whether it's a scalar, list, or NumPy array.\n\n2. **Numerically Stable Calculation**: The softplus values are computed using `np.logaddexp(0.0, z_array)`, which is a numerically stable way to calculate `ln(1 + e**z)`.\n\n3. **Rounding**: The computed values are rounded to 4 decimal places using `np.round(softplus_values, 4)`.\n\n4. **Output Handling**: \n   - If the input was a scalar, the function returns a single `float`.\n   - If the input was an array or list, the function converts the rounded NumPy array to a pure Python list using `tolist()` and returns it."}
{"task_id": 89, "completion_id": 0, "completion": "To implement the `linear_activation_forward` function, we need to perform the linear transformation followed by the specified non-linear activation function. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef linear_activation_forward(A_prev: np.ndarray,\n                              W: np.ndarray,\n                              b: np.ndarray,\n                              activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    # Linear step: compute Z\n    Z = np.dot(W, A_prev) + b\n    \n    # Activation step\n    if activation == \"relu\":\n        A = np.maximum(0, Z)\n    elif activation == \"sigmoid\":\n        A = 1 / (1 + np.exp(-Z))\n    else:\n        raise ValueError(\"Unsupported activation function. Use 'relu' or 'sigmoid'.\")\n    \n    # Ensure the output shape is correct\n    assert A.shape == (W.shape[0], A_prev.shape[1]), \"Shape of A is incorrect.\"\n    \n    # Round the activations to 4 decimal places and convert to a list\n    A_rounded = A.round(4).tolist()\n    \n    # Cache for back-propagation\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n    \n    return A_rounded, (linear_cache, activation_cache)\n\n# Example usage:\n# A_prev = np.array([[0.1, 0.2], [0.3, 0.4]])\n# W = np.array([[0.5, 0.6], [0.7, 0.8]])\n# b = np.array([[0.1], [0.2]])\n# activation = \"relu\"\n# A, cache = linear_activation_forward(A_prev, W, b, activation)\n# print(\"Activations:\", A)\n# print(\"Cache:\", cache)\n```\n\n### Explanation:\n1. **Linear Transformation**: We compute `Z` using the formula `Z = np.dot(W, A_prev) + b`. The bias `b` is automatically broadcasted across all columns of the result.\n\n2. **Activation Function**: Depending on the `activation` parameter, we apply either the ReLU or Sigmoid function element-wise to `Z`.\n\n3. **Shape Assertion**: We use an `assert` statement to ensure that the shape of the resulting activations `A` matches the expected dimensions `(n_l, m)`.\n\n4. **Rounding and Conversion**: The activations are rounded to 4 decimal places and converted to a plain Python list using `A.round(4).tolist()`.\n\n5. **Cache**: We store the necessary values for back-propagation in a tuple `cache`, which includes both `linear_cache` and `activation_cache`.\n\nThis function is now ready to be used in a neural network library for forward propagation in a single layer."}
{"task_id": 90, "completion_id": 0, "completion": "To solve the problem of calculating the mean-squared error (MSE) between the true expected payouts of each arm and the policy's estimates, we need to follow these steps:\n\n1. **Check for Missing Estimates**: If the policy does not contain any estimates (i.e., the `ev_estimates` attribute is missing or is an empty dictionary), return `numpy.nan`.\n\n2. **Sort and Compare**: Ensure that the estimates are compared in the correct order by sorting the arm indices.\n\n3. **Calculate Squared Errors**: For each arm, calculate the squared difference between the true expected value and the policy's estimate.\n\n4. **Compute the Mean**: Average these squared errors to get the mean-squared error.\n\n5. **Round the Result**: Round the final result to 4 decimal places.\n\nHere's the implementation of the `mse` function:\n\n```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy has estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    \n    # Sort the arm indices\n    sorted_indices = sorted(estimates.keys())\n    \n    # Calculate squared errors\n    squared_errors = [(estimates[i] - true_evs[i]) ** 2 for i in sorted_indices]\n    \n    # Calculate mean-squared error\n    mse_value = sum(squared_errors) / len(squared_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Output: 0.0075\n```\n\n### Explanation:\n- **Checking for Estimates**: We first check if the `ev_estimates` attribute exists and is not empty. If not, we return `numpy.nan`.\n- **Sorting and Calculation**: We sort the indices of the estimates to ensure they are compared correctly with the true expected values. We then compute the squared error for each arm.\n- **Mean and Rounding**: We compute the mean of these squared errors and round the result to 4 decimal places before returning it."}
{"task_id": 91, "completion_id": 0, "completion": "To implement the ReLU backward pass as described, we need to follow these steps:\n\n1. Convert the input lists `dA` and `activation_cache` to NumPy arrays.\n2. Check if the shapes of these arrays match. If not, return `-1`.\n3. Compute the gradient `dZ` using the element-wise multiplication of `dA` and the indicator function `1(Z > 0)`.\n4. Convert the resulting NumPy array back to a list of lists using the `tolist()` method.\n5. Return the resulting list of lists.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    dA_array = np.array(dA)\n    Z_array = np.array(activation_cache)\n    \n    # Check if the shapes match\n    if dA_array.shape != Z_array.shape:\n        return -1\n    \n    # Compute the gradient dZ\n    dZ_array = dA_array * (Z_array > 0)\n    \n    # Convert the result back to a list of lists\n    dZ = dZ_array.tolist()\n    \n    return dZ\n```\n\n### Explanation:\n\n- **Conversion to NumPy Arrays**: We first convert the input lists `dA` and `activation_cache` to NumPy arrays to leverage vectorized operations.\n- **Shape Check**: We ensure that both arrays have the same shape. If not, we return `-1` as specified.\n- **Gradient Calculation**: We compute `dZ` by multiplying `dA` with the indicator function `(Z > 0)`, which is a boolean array that NumPy automatically converts to integers (1 for `True`, 0 for `False`).\n- **Conversion Back to List**: Finally, we convert the NumPy array `dZ_array` back to a list of lists using the `tolist()` method and return it."}
{"task_id": 92, "completion_id": 0, "completion": "To implement the `is_number` function, we need to check if the input value is an instance of `numbers.Number` and ensure that it is not a boolean. The `numbers.Number` class is a base class for all numeric types in Python, including `int`, `float`, `complex`, `Fraction`, and `Decimal`. However, since `bool` is a subclass of `int`, we need to explicitly exclude boolean values.\n\nHere's how you can implement the function:\n\n```python\nimport numbers\n\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and not isinstance(a, bool)\n\n# Example usage:\nprint(is_number(10))        # True\nprint(is_number(10.5))      # True\nprint(is_number(3 + 4j))    # True\nprint(is_number(True))      # False\nprint(is_number(False))     # False\nprint(is_number(\"123\"))     # False\n```\n\n### Explanation:\n- `isinstance(a, numbers.Number)`: This checks if `a` is an instance of any numeric type.\n- `not isinstance(a, bool)`: This ensures that `a` is not a boolean value, as `bool` is a subclass of `int` and would otherwise be considered numeric.\n\nThis function will correctly identify numeric values while excluding boolean values, as required by the task."}
{"task_id": 93, "completion_id": 0, "completion": "To implement the ReLU activation function as described, we need to ensure that the function can handle various input types, including scalars, lists, and NumPy arrays, and return the results as Python lists. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    # Convert the input to a NumPy array\n    Z = np.array(Z)\n    \n    # Apply the ReLU function element-wise\n    A = np.maximum(0, Z)\n    \n    # Convert the results to Python lists\n    A_list = A.tolist()\n    cache_list = Z.tolist()\n    \n    return (A_list, cache_list)\n\n# Example usage:\n# relu([[-1, 2, -3], [4, -5, 6]])\n```\n\n### Explanation:\n1. **Input Conversion**: The input `Z` is converted to a NumPy array using `np.array(Z)`. This ensures that the function can handle scalars, lists, and arrays uniformly.\n\n2. **ReLU Computation**: The ReLU operation is performed using `np.maximum(0, Z)`, which efficiently applies the ReLU function element-wise across the array without explicit loops.\n\n3. **Output Conversion**: Both the result `A` and the original input `Z` are converted to Python lists using the `tolist()` method. This ensures the output is JSON-serialisable and meets the requirement to return Python lists.\n\n4. **Return**: The function returns a tuple `(A_list, cache_list)` where both elements are Python lists.\n\nThis implementation is efficient and leverages NumPy's vectorized operations to handle inputs of any shape and size."}
{"task_id": 94, "completion_id": 0, "completion": "To implement the `knn_majority_vote` function, we can utilize the `Counter` class from the `collections` module to count the occurrences of each label. Then, we can determine the label with the highest frequency, and in case of a tie, select the smallest label according to Python's default ordering. Here's how you can implement this:\n\n```python\nfrom collections import Counter\n\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    # Count the occurrences of each label\n    label_counts = Counter(neighbors_targets)\n    \n    # Find the maximum frequency\n    max_frequency = max(label_counts.values())\n    \n    # Filter labels that have the maximum frequency\n    most_frequent_labels = [label for label, count in label_counts.items() if count == max_frequency]\n    \n    # Return the smallest label among those with the maximum frequency\n    return min(most_frequent_labels)\n\n# Example usage:\n# neighbors_targets = [1, 2, 2, 3, 3, 3, 4, 4]\n# print(knn_majority_vote(neighbors_targets))  # Output: 3\n```\n\n### Explanation:\n1. **Counting Occurrences**: We use `Counter` to count how many times each label appears in the `neighbors_targets` list.\n2. **Finding Maximum Frequency**: We determine the maximum frequency of any label using `max(label_counts.values())`.\n3. **Handling Ties**: We create a list of labels that have this maximum frequency.\n4. **Selecting the Smallest Label**: We use `min()` to select the smallest label from the list of most frequent labels, ensuring that ties are resolved by choosing the smallest label according to Python's default ordering."}
{"task_id": 96, "completion_id": 0, "completion": "To implement the additive-smoothed N-gram log-probability function, we need to follow the steps outlined in the task description. Here's a step-by-step implementation:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Tokenize the corpus and build the vocabulary\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    vocabulary = set(word for sentence in tokenized_corpus for word in sentence)\n    \n    # Add the <UNK> token to the vocabulary\n    vocabulary.add(\"<UNK>\")\n    \n    # Create N-gram frequency tables\n    ngram_counts = defaultdict(Counter)\n    for sentence in tokenized_corpus:\n        for n in range(1, N + 1):\n            for i in range(len(sentence) - n + 1):\n                ngram = tuple(sentence[i:i + n])\n                ngram_counts[n][ngram] += 1\n    \n    # Tokenize the target sequence\n    sequence_tokens = sequence.split()\n    \n    # Handle the case where the sequence length is smaller than N\n    if len(sequence_tokens) < N:\n        return 0.0\n    \n    # Map unseen words in the sequence to <UNK>\n    sequence_tokens = [word if word in vocabulary else \"<UNK>\" for word in sequence_tokens]\n    \n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    V = len(vocabulary)\n    \n    for i in range(len(sequence_tokens) - N + 1):\n        ngram = tuple(sequence_tokens[i:i + N])\n        context = ngram[:-1]\n        word = ngram[-1]\n        \n        context_count = ngram_counts[N - 1][context] if N > 1 else len(corpus)\n        ngram_count = ngram_counts[N][ngram]\n        \n        # Apply additive smoothing\n        prob = (ngram_count + K) / (context_count + K * V)\n        \n        # Add the log-probability\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\n    \"the cat sat on the mat\",\n    \"the cat is on the mat\",\n    \"there is a cat\"\n]\nsequence = \"the cat on the mat\"\nN = 2\nprint(additive_ngram_log_prob(corpus, sequence, N))  # Example output\n```\n\n### Explanation:\n1. **Tokenization and Vocabulary Building**: We tokenize the corpus into words and build a vocabulary, adding an `<UNK>` token to handle unseen words.\n\n2. **N-gram Frequency Tables**: We create frequency tables for all 1- to N-grams using a `defaultdict` of `Counter`.\n\n3. **Sequence Tokenization and `<UNK>` Mapping**: We tokenize the target sequence and map any unseen words to `<UNK>`.\n\n4. **Log-Probability Calculation**: For each N-gram in the sequence, we calculate the smoothed probability using the formula provided, and accumulate the log-probabilities.\n\n5. **Return the Result**: The final log-probability is rounded to four decimal places and returned.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 97, "completion_id": 0, "completion": "To implement the derivative of the ReLU activation function, we need to handle various input types such as scalars, lists, and NumPy arrays. The function will compute the derivative element-wise, returning 1 for positive values and 0 for non-positive values. Let's implement the function:\n\n```python\nimport numpy as np\n\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    # Check if the input is a scalar\n    if isinstance(Z, (int, float)):\n        return 1.0 if Z > 0 else 0.0\n    \n    # Convert input to a NumPy array for easy manipulation\n    Z_array = np.array(Z)\n    \n    # Compute the derivative of ReLU\n    drelu_array = np.where(Z_array > 0, 1.0, 0.0)\n    \n    # Convert the result back to a list if the input was not a scalar\n    return drelu_array.tolist()\n\n# Example usage:\n# drelu(3) -> 1.0\n# drelu(-1) -> 0.0\n# drelu([1, -2, 0, 3]) -> [1.0, 0.0, 0.0, 1.0]\n# drelu(np.array([[1, -2], [0, 3]])) -> [[1.0, 0.0], [0.0, 1.0]]\n```\n\n### Explanation:\n- **Scalar Input**: If the input is a scalar (either `int` or `float`), the function directly returns `1.0` if the value is positive, otherwise `0.0`.\n- **Non-Scalar Input**: For lists or NumPy arrays, the input is first converted to a NumPy array to leverage vectorized operations. The `np.where` function is used to apply the derivative condition element-wise across the array.\n- **Output**: The result is converted back to a list using `tolist()` to ensure the output format matches the input format when the input is not a scalar."}
{"task_id": 99, "completion_id": 0, "completion": "To implement the ReLU activation function that handles different input types while maintaining the input container type, we can leverage NumPy's vectorized operations. Here's how you can implement the `relu_` function:\n\n```python\nimport numpy as np\n\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        # Scalar input\n        return max(0, Z)\n    elif isinstance(Z, list):\n        # List input\n        Z_array = np.array(Z)\n        relu_array = np.maximum(0, Z_array)\n        return relu_array.tolist()\n    elif isinstance(Z, np.ndarray):\n        # NumPy array input\n        return np.maximum(0, Z)\n    else:\n        raise TypeError(\"Input must be an int, float, list, or numpy.ndarray\")\n\n# Example usage:\n# Scalar\nprint(relu_(-5))  # Output: 0\nprint(relu_(3))   # Output: 3\n\n# List\nprint(relu_([-1, 2, -3, 4]))  # Output: [0, 2, 0, 4]\n\n# NumPy array\nprint(relu_(np.array([[-1, 2], [-3, 4]])))  # Output: array([[0, 2], [0, 4]])\n```\n\n### Explanation:\n- **Scalar Input**: If the input is a scalar (either `int` or `float`), the function directly applies the `max(0, x)` operation.\n- **List Input**: If the input is a list, it is first converted to a NumPy array to utilize the vectorized `np.maximum` function. After applying ReLU, the result is converted back to a list using `tolist()`.\n- **NumPy Array Input**: If the input is already a NumPy array, the `np.maximum` function is applied directly, which efficiently computes the ReLU transformation element-wise.\n- **Type Checking**: The function raises a `TypeError` if the input is not one of the expected types, ensuring robustness against invalid inputs."}
{"task_id": 100, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if the lengths are equal\n    if actual.shape[0] != predicted.shape[0]:\n        return -1\n    \n    # Calculate the number of mismatches\n    mismatches = np.sum(actual != predicted)\n    \n    # Calculate the error rate\n    error_rate = mismatches / actual.shape[0]\n    \n    # Return the error rate rounded to four decimal places\n    return round(error_rate, 4)\n\n# Example usage\nactual = np.array([0, 1, 2, 2, 1])\npredicted = np.array([0, 0, 2, 1, 1])\nprint(classification_error(actual, predicted))  # Output: 0.4\n```\n\nThis function first converts the input sequences to NumPy arrays to facilitate vectorized operations. It checks if the lengths of the two arrays are equal, returning `-1` if they are not. If the lengths are equal, it calculates the number of mismatches between the `actual` and `predicted` arrays, computes the error rate, and returns it rounded to four decimal places."}
{"task_id": 101, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(x: np.ndarray, axis: int = 1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    # ======= Write your code below =======\n    if x.ndim == 1:\n        raise ValueError(\"Cannot apply softmax to a tensor that is 1D\")\n    \n    # Compute the maximum value along the specified axis, keeping dimensions\n    max_x = np.max(x, axis=axis, keepdims=True)\n    \n    # Subtract the max value from x for numerical stability\n    exp_x = np.exp(x - max_x)\n    \n    # Compute the sum of the exponentials along the specified axis, keeping dimensions\n    sum_exp_x = np.sum(exp_x, axis=axis, keepdims=True)\n    \n    # Compute the softmax values\n    softmax_values = exp_x / sum_exp_x\n    \n    # Round the values to 4 decimal places\n    rounded_values = np.round(softmax_values, 4)\n    \n    # Convert the result to a Python list\n    return rounded_values.tolist()\n```\n\nThis implementation follows the requirements specified in the task. It checks if the input array `x` is 1-dimensional and raises a `ValueError` if so. It then computes the softmax using a numerically stable approach by subtracting the maximum value along the specified axis before applying the exponential function. The results are rounded to four decimal places and converted to a standard Python list using `tolist()`."}
{"task_id": 102, "completion_id": 0, "completion": "To implement the `polynomial_regression_predict` function, we need to follow these steps:\n\n1. **Validate Input**: Ensure that the input lists `x` and `y` are of the same length, the degree is non-negative, and there are enough data points to fit the polynomial (i.e., the number of data points should be at least `degree + 1`).\n\n2. **Build the Design Matrix**: Construct a matrix where each row corresponds to a data point and each column corresponds to a power of `x` from 0 up to the specified degree.\n\n3. **Fit the Model**: Use NumPy's least-squares method or the Moore-Penrose pseudo-inverse to find the coefficients of the polynomial that minimize the least-squares error.\n\n4. **Make Predictions**: Use the obtained coefficients to compute predictions for each value in `x_pred`.\n\n5. **Round and Return**: Round each prediction to 4 decimal places and return them as a list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if the\n        model cannot be fitted (e.g. not enough data, inconsistent input).\n    \"\"\"\n    # Validate inputs\n    if len(x) != len(y) or len(x) == 0 or degree < 0 or len(x) < degree + 1:\n        return -1\n    \n    # Build the design matrix for the training data\n    X = np.vander(x, degree + 1, increasing=True)\n    \n    # Convert y to a numpy array\n    y = np.array(y)\n    \n    # Compute the weights using the Moore-Penrose pseudo-inverse\n    try:\n        weights = np.linalg.pinv(X).dot(y)\n    except np.linalg.LinAlgError:\n        return -1\n    \n    # Build the design matrix for the prediction data\n    X_pred = np.vander(x_pred, degree + 1, increasing=True)\n    \n    # Compute predictions\n    predictions = X_pred.dot(weights)\n    \n    # Round predictions to 4 decimal places\n    rounded_predictions = [round(pred, 4) for pred in predictions]\n    \n    return rounded_predictions\n```\n\n### Explanation:\n\n- **Validation**: We check if the lengths of `x` and `y` are equal, if `degree` is non-negative, and if there are enough data points to fit the polynomial.\n  \n- **Design Matrix**: We use `np.vander` to create a Vandermonde matrix, which is a common way to represent polynomial features. The `increasing=True` parameter ensures that the columns are ordered from the 0th power to the `degree`th power.\n\n- **Fitting the Model**: We use the Moore-Penrose pseudo-inverse (`np.linalg.pinv`) to compute the least-squares solution for the polynomial coefficients.\n\n- **Predictions**: We apply the polynomial model to `x_pred` using the same design matrix approach and compute the dot product with the weights to get predictions.\n\n- **Rounding**: Finally, we round each prediction to 4 decimal places before returning the results."}
{"task_id": 104, "completion_id": 0, "completion": "To implement the `information_gain` function, we need to calculate the entropy of the parent node and the weighted entropy of the child nodes after the split. Here's how you can do it:\n\n```python\nimport numpy as np\nimport math\n\ndef entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculates the entropy of a label distribution.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Every array contains the labels that\n            fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n    \"\"\"\n    # Calculate entropy of the parent node\n    parent_entropy = entropy(y)\n    \n    # Calculate weighted entropy of the child nodes\n    weighted_entropy = 0.0\n    total_samples = len(y)\n    \n    for split in splits:\n        split_entropy = entropy(split)\n        weighted_entropy += (len(split) / total_samples) * split_entropy\n    \n    # Calculate information gain\n    info_gain = parent_entropy - weighted_entropy\n    \n    # Return the information gain rounded to 4 decimal places\n    return round(info_gain, 4)\n\n# Example usage:\ny = np.array([0, 0, 1, 1, 1, 0, 1, 0])\nsplits = [np.array([0, 0, 1]), np.array([1, 1, 0, 1, 0])]\nprint(information_gain(y, splits))  # Output should be the information gain rounded to 4 decimal places\n```\n\n### Explanation:\n1. **Entropy Calculation**: The `entropy` function calculates the entropy of a given label distribution using the formula \\( H(y) = -\\sum p_i \\log_2(p_i) \\), where \\( p_i \\) is the probability of class \\( i \\).\n\n2. **Parent Entropy**: We calculate the entropy of the parent node using the `entropy` function.\n\n3. **Weighted Entropy of Child Nodes**: For each split, we calculate its entropy and weight it by the proportion of samples in that split relative to the total number of samples.\n\n4. **Information Gain**: The information gain is the difference between the parent entropy and the weighted entropy of the child nodes.\n\n5. **Rounding**: The result is rounded to 4 decimal places as required."}
{"task_id": 105, "completion_id": 0, "completion": "To implement the Gaussian probability density function (PDF) as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    # Validate that sigma is strictly positive\n    if sigma <= 0:\n        return -1\n    \n    # Ensure x is a numpy array for easy manipulation\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    elif isinstance(x, (int, float)):\n        x = np.array([x])\n    \n    # Handle empty input\n    if x.size == 0:\n        return []\n    \n    # Compute the Gaussian PDF\n    coefficient = 1 / (np.sqrt(2 * np.pi) * sigma)\n    exponent = np.exp(-((x - mean) ** 2) / (2 * sigma ** 2))\n    pdf_values = coefficient * exponent\n    \n    # Round each result to five decimal places\n    rounded_values = np.round(pdf_values, 5)\n    \n    # Return as a list\n    return rounded_values.tolist()\n\n# Example usage:\n# print(gaussian_pdf([1, 2, 3], 0, 1))\n# print(gaussian_pdf([], 0, 1))\n# print(gaussian_pdf([1, 2, 3], 0, -1))\n```\n\n### Explanation:\n1. **Validation**: The function first checks if `sigma` is strictly positive. If not, it returns `-1` as specified.\n2. **Input Handling**: The function converts the input `x` into a NumPy array for easier mathematical operations. It also handles single integer or float inputs by converting them into a one-element array.\n3. **Empty Input**: If the input `x` is empty, the function returns an empty list.\n4. **PDF Calculation**: The Gaussian PDF is calculated using the provided formula. The coefficient and exponent are computed separately for clarity.\n5. **Rounding**: Each computed PDF value is rounded to five decimal places using `np.round`.\n6. **Output**: The rounded values are returned as a list.\n\nThis implementation should handle various input types and edge cases gracefully, adhering to the task requirements."}
{"task_id": 107, "completion_id": 0, "completion": "To implement a single optimization step of the Adam algorithm, we need to follow the update rules provided in the task description. Here's the complete implementation of the `adam_step` function:\n\n```python\nimport numpy as np\n\ndef adam_step(theta: np.ndarray,\n              grad: np.ndarray,\n              m_prev: np.ndarray,\n              v_prev: np.ndarray,\n              t: int,\n              alpha: float = 0.01,\n              beta1: float = 0.9,\n              beta2: float = 0.99,\n              epsilon: float = 1e-9) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    # Update biased first moment estimate\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n    \n    # Update biased second moment estimate\n    v_t = beta2 * v_prev + (1 - beta2) * grad**2\n    \n    # Compute bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - beta1**t)\n    \n    # Compute bias-corrected second moment estimate\n    v_hat_t = v_t / (1 - beta2**t)\n    \n    # Update parameters\n    theta_new = theta - alpha * m_hat_t / (np.sqrt(v_hat_t) + epsilon)\n    \n    # Increment time step\n    t_next = t + 1\n    \n    # Round values to 6 decimal places and convert to lists\n    theta_new = np.round(theta_new, 6).tolist()\n    m_t = np.round(m_t, 6).tolist()\n    v_t = np.round(v_t, 6).tolist()\n    \n    return theta_new, m_t, v_t, t_next\n```\n\n### Explanation:\n1. **Moment Updates**: We update the first (`m_t`) and second (`v_t`) moment estimates using the exponential decay rates `beta1` and `beta2`.\n2. **Bias Correction**: The bias-corrected estimates (`m_hat_t` and `v_hat_t`) are computed to adjust for the initial bias in the moment estimates.\n3. **Parameter Update**: The parameters are updated using the bias-corrected moment estimates, the learning rate `alpha`, and a small constant `epsilon` for numerical stability.\n4. **Return Values**: The updated parameters, new moment estimates, and incremented time step are returned, with all numerical values rounded to 6 decimal places and converted to Python lists for consistency with the output constraints."}
{"task_id": 108, "completion_id": 0, "completion": "To implement the regularized Alternating Least Squares (ALS) matrix factorization, we need to iteratively update the factor matrices \\( W \\) and \\( H \\) while minimizing the regularized Frobenius norm. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)  # Fixed random seed for reproducibility\n    N, M = X.shape\n    \n    # Initialize W and H with random values\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    for iteration in range(max_iter):\n        # Update W while keeping H fixed\n        for i in range(N):\n            HHT = H @ H.T\n            XHT = X[i, :] @ H.T\n            W[i, :] = np.linalg.solve(HHT + alpha * np.eye(K), XHT)\n        \n        # Update H while keeping W fixed\n        for j in range(M):\n            WTW = W.T @ W\n            XTW = X[:, j].T @ W\n            H[:, j] = np.linalg.solve(WTW + alpha * np.eye(K), XTW)\n        \n        # Compute the reconstruction loss\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        \n        # Check for convergence\n        if loss < tol:\n            break\n    \n    # Return the reconstructed matrix rounded to 4 decimal places\n    return X_hat.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# K = 2\n# reconstructed_matrix = als_factorization(X, K)\n# print(reconstructed_matrix)\n```\n\n### Explanation:\n1. **Initialization**: We initialize the factor matrices \\( W \\) and \\( H \\) with random values using a fixed seed for reproducibility.\n\n2. **ALS Iterations**: We alternate between updating \\( W \\) and \\( H \\):\n   - **Update \\( W \\)**: For each row \\( i \\) of \\( W \\), solve the regularized least squares problem using the current \\( H \\).\n   - **Update \\( H \\)**: For each column \\( j \\) of \\( H \\), solve the regularized least squares problem using the current \\( W \\).\n\n3. **Loss Calculation**: After each full iteration (updating both \\( W \\) and \\( H \\)), compute the regularized Frobenius loss.\n\n4. **Convergence Check**: If the loss drops below the specified tolerance `tol`, stop the iterations early.\n\n5. **Return**: The reconstructed matrix \\( X\u0302 = WH \\) is rounded to 4 decimal places and returned as a list of lists.\n\nThis implementation should efficiently factorize the input matrix using the ALS method with regularization."}
{"task_id": 109, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm with K-Means++ initialization, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    m, n = X.shape\n\n    # Step 1: K-Means++ initialization\n    centroids = [X[random.randint(0, m - 1)]]\n    for _ in range(1, K):\n        distances = np.array([min(np.linalg.norm(x - c)**2 for c in centroids) for x in X])\n        probabilities = distances / distances.sum()\n        cumulative_probabilities = np.cumsum(probabilities)\n        r = random.random()\n        for j, p in enumerate(cumulative_probabilities):\n            if r < p:\n                centroids.append(X[j])\n                break\n\n    centroids = np.array(centroids)\n\n    # Step 2: Lloyd's iterations\n    for _ in range(max_iter):\n        # Assign step\n        labels = np.array([np.argmin([np.linalg.norm(x - c) for c in centroids]) for x in X])\n\n        # Update step\n        new_centroids = []\n        for k in range(K):\n            cluster_points = X[labels == k]\n            if len(cluster_points) > 0:\n                new_centroids.append(cluster_points.mean(axis=0))\n            else:\n                new_centroids.append(centroids[k])  # Keep the centroid unchanged if the cluster is empty\n\n        new_centroids = np.array(new_centroids)\n\n        # Check for convergence\n        if np.array_equal(new_centroids, centroids):\n            break\n\n        centroids = new_centroids\n\n    # Round centroids to 4 decimal places and sort\n    centroids = np.round(centroids, 4)\n    centroids = sorted(centroids.tolist(), key=lambda x: (x[0], x))\n\n    return centroids\n```\n\n### Explanation:\n\n1. **Initialization with K-Means++**:\n   - Start by selecting the first centroid randomly from the dataset.\n   - For each subsequent centroid, calculate the squared distance from each point to its nearest existing centroid.\n   - Choose the next centroid with a probability proportional to the squared distance, ensuring diverse initial centroids.\n\n2. **Lloyd's Iterations**:\n   - **Assign Step**: Assign each point to the nearest centroid.\n   - **Update Step**: Calculate the new centroids as the mean of all points assigned to each cluster. If a cluster is empty, retain its previous centroid.\n   - Repeat until convergence (no change in centroids) or the maximum number of iterations is reached.\n\n3. **Output**:\n   - Round the final centroids to four decimal places.\n   - Sort the centroids by their first coordinate, using the entire tuple to break ties.\n\nThis implementation ensures reproducibility by setting the random seed and handles empty clusters gracefully by retaining their previous centroids."}
{"task_id": 111, "completion_id": 0, "completion": "To accomplish the task of character-level sequence encoding and decoding, we need to implement the three helper functions as described. Here's the complete implementation:\n\n```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]  # Encode using vocabulary, default to 0 for unknown chars\n    if len(encoded) < time_steps:\n        # Pad with 0s if the sequence is shorter than TIME_STEPS\n        encoded.extend([0] * (time_steps - len(encoded)))\n    else:\n        # Truncate if the sequence is longer than TIME_STEPS\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer ids back to a string, ignoring padding tokens.\"\"\"\n    decoded_chars = [inverse_vocab[idx] for idx in indices if idx != 0]  # Ignore padding tokens (0)\n    return ''.join(decoded_chars)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, predicts using the model, and decodes the prediction.\"\"\"\n    # Step 1: Encode the raw text\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    \n    # Step 2: Prepare the input for the model (batch size 1)\n    input_batch = np.array([encoded_text])\n    \n    # Step 3: Predict using the model\n    predictions = model.predict(input_batch)\n    \n    # Step 4: Apply argmax over the last axis to get predicted ids\n    predicted_ids = np.argmax(predictions, axis=-1).flatten()\n    \n    # Step 5: Decode the predicted ids\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    \n    return decoded_string\n```\n\n### Explanation:\n\n1. **`string_to_int` Function:**\n   - This function encodes each character of the input string using the provided vocabulary.\n   - If a character is not found in the vocabulary, it is encoded as the padding token `0`.\n   - The encoded list is adjusted to have a fixed length of `TIME_STEPS` by either padding with `0`s or truncating.\n\n2. **`int_to_string` Function:**\n   - This function decodes a list of integer ids back to a string using the inverse vocabulary.\n   - Padding tokens (`0`) are ignored during decoding.\n\n3. **`run_example` Function:**\n   - This function integrates the encoding and decoding process.\n   - It encodes the input text, feeds it to the model, applies `argmax` to get predicted ids, and decodes these ids to return the final string.\n   - The model is expected to have a `predict` method that takes a batch of inputs and returns predictions.\n\nThis implementation assumes that the `model` object has a `predict` method compatible with NumPy arrays, and that the input and output vocabularies are correctly defined."}
{"task_id": 112, "completion_id": 0, "completion": "To implement the `tokenize_and_count` function, we need to follow these steps:\n\n1. Extract words from the input text using a regular expression that matches sequences of alphabetic characters.\n2. Convert all words to lowercase to ensure case-insensitivity.\n3. Count the frequency of each word using the `Counter` class from the `collections` module.\n4. Create `Token` objects for each word with its frequency.\n5. Sort the list of `Token` objects first by descending frequency and then lexicographically by the word.\n6. Return the sorted list of `Token` objects.\n\nHere's the complete implementation:\n\n```python\nimport re\nfrom collections import Counter\n\nclass Token:\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\n\ndef tokenize_and_count(text: str) -> list[Token]:\n    \"\"\"Convert *text* into a list of Token objects with their frequencies.\n\n    Your task:\n      1. Treat only contiguous sequences of English letters (A\u2013Z, a\u2013z) as\n         words and ignore all other characters.\n      2. The comparison must be case-insensitive (e.g., \"Cat\" == \"cat\").\n      3. Return a list of Token instances where each instance's *word* field\n         is the lowercase word and *count* is its frequency in *text*.\n      4. Sort the list by descending frequency, then lexicographically.\n      5. Return an empty list when no words are present.\n\n    Args:\n        text: A raw input string.\n\n    Returns:\n        A list of sorted Token objects following the rules above.\n    \"\"\"\n    # Use regex to find all words (sequences of alphabetic characters)\n    words = re.findall(r'[a-zA-Z]+', text)\n    \n    # Convert words to lowercase for case-insensitive comparison\n    words = [word.lower() for word in words]\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Create Token objects for each word with its frequency\n    tokens = [Token(word) for word in word_counts]\n    for token in tokens:\n        token.count = word_counts[token.word]\n    \n    # Sort tokens by descending frequency and then lexicographically\n    tokens.sort(key=lambda token: (-token.count, token.word))\n    \n    return tokens\n\n# Example usage:\ntext = \"Cat cat dog Dog DOG\"\ntokens = tokenize_and_count(text)\nprint(tokens)  # Output: [Token(word='dog', count=3), Token(word='cat', count=2)]\n```\n\n### Explanation:\n\n- **Regex**: We use `re.findall(r'[a-zA-Z]+', text)` to extract all sequences of alphabetic characters from the input text.\n- **Lowercase Conversion**: We convert each word to lowercase to ensure case-insensitivity.\n- **Counter**: We use `Counter` to count the occurrences of each word.\n- **Token Creation**: We create a `Token` object for each unique word and set its `count` attribute.\n- **Sorting**: We sort the list of `Token` objects by descending frequency and lexicographically using a lambda function as the sorting key.\n- **Return**: The function returns the sorted list of `Token` objects. If no words are found, an empty list is returned."}
{"task_id": 113, "completion_id": 0, "completion": "To implement the `run_examples` function, we need to follow the task description closely. The function will rely on the `run_example` helper function to get the model's output for each input string. Here's how you can implement it:\n\n```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # Use the global EXAMPLES if examples is None\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n\n    for example in examples:\n        # Call the run_example function to get the model's output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        \n        # Concatenate the list of characters into a single string\n        predicted_string = ''.join(output_chars)\n        \n        # Print the input-output pair\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        \n        # Collect the predicted string\n        predictions.append(predicted_string)\n\n    return predictions\n```\n\n### Explanation:\n1. **Parameter Handling**: The function checks if `examples` is `None` and uses the global constant `EXAMPLES` if it is. This allows flexibility in how the function is called.\n\n2. **Iterating Over Examples**: For each example in the `examples` iterable, the function calls `run_example` to get the model's output as a list of characters.\n\n3. **Concatenation**: The list of characters returned by `run_example` is concatenated into a single string using `''.join(output_chars)`.\n\n4. **Printing**: The function prints the input and the predicted output in the specified format.\n\n5. **Collecting Predictions**: Each predicted string is appended to the `predictions` list, which is returned at the end.\n\nThis implementation assumes that `run_example` is defined elsewhere in the environment and works as described in the task."}
{"task_id": 114, "completion_id": 0, "completion": "To implement the SELU activation function and its derivative, we need to handle the input array element-wise based on the conditions specified for SELU and its derivative. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef selu(x: np.ndarray, derivative: bool = False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n    \"\"\"\n    # Constants for SELU\n    alpha = 1.6732632423543772848170429916717\n    lambda_ = 1.0507009873554804934193349852946\n    \n    # Apply SELU or its derivative based on the flag\n    if derivative:\n        # Compute the derivative of SELU\n        selu_prime = np.where(x >= 0, lambda_, lambda_ * alpha * np.exp(x))\n        # Round to 6 decimal places and convert to list\n        return np.round(selu_prime, 6).tolist()\n    else:\n        # Compute SELU activation\n        selu_activation = np.where(x >= 0, lambda_ * x, lambda_ * alpha * (np.exp(x) - 1))\n        # Round to 6 decimal places and convert to list\n        return np.round(selu_activation, 6).tolist()\n\n# Example usage:\n# x = np.array([-1.0, 0.0, 1.0])\n# print(selu(x))  # SELU activation\n# print(selu(x, derivative=True))  # SELU derivative\n```\n\n### Explanation:\n- **Constants**: We define `alpha` and `lambda_` as specified in the task.\n- **Element-wise Operations**: We use `np.where` to apply the SELU function or its derivative conditionally based on the value of each element in the array.\n- **Rounding and Conversion**: After computing the SELU values or derivatives, we round the results to 6 decimal places using `np.round` and convert the NumPy array to a nested list using `tolist()` to meet the output constraints.\n\nThis implementation ensures that the function works correctly for both SELU activation and its derivative, preserving the shape of the input array in the output."}
{"task_id": 115, "completion_id": 0, "completion": "To implement the `logistic_loss_and_gradient` function, we need to compute both the binary cross-entropy loss and its gradient for logistic regression. Let's break down the steps required to achieve this:\n\n1. **Compute the predicted probabilities** using the logistic function (sigmoid function).\n2. **Handle numerical stability** by ensuring probabilities are not exactly 0 or 1.\n3. **Calculate the binary cross-entropy loss** using the formula provided.\n4. **Compute the gradient** of the loss with respect to the weights.\n5. **Round the results** to 4 decimal places and format the gradient as a nested list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Number of samples\n    m = X.shape[0]\n    \n    # Compute the linear combination z = X \u00b7 w\n    z = X.dot(w)\n    \n    # Compute the predicted probabilities using the sigmoid function\n    p = 1 / (1 + np.exp(-z))\n    \n    # Handle numerical stability by ensuring probabilities are not exactly 0 or 1\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = (1 / m) * X.T.dot(p - y)\n    \n    # Round the loss to 4 decimal places\n    loss = round(loss, 4)\n    \n    # Round the gradient to 4 decimal places and convert to a nested list\n    gradient = np.round(gradient, 4).tolist()\n    \n    return loss, gradient\n\n# Example usage:\n# X = np.array([[0.1, 0.2], [0.3, 0.4]])\n# y = np.array([0, 1])\n# w = np.array([0.5, -0.5])\n# print(logistic_loss_and_gradient(X, y, w))\n```\n\n### Explanation:\n- **Sigmoid Function**: The sigmoid function is used to map the linear combination of features and weights (`z`) to a probability between 0 and 1.\n- **Numerical Stability**: We use `np.clip` to ensure that probabilities are not exactly 0 or 1, which would cause issues when taking the logarithm.\n- **Loss Calculation**: The average binary cross-entropy loss is computed using the formula provided, and we use `np.mean` to average over all samples.\n- **Gradient Calculation**: The gradient is computed using matrix operations, which efficiently handle the computation for all samples.\n- **Rounding and Formatting**: The results are rounded to 4 decimal places, and the gradient is converted to a nested list format as required."}
{"task_id": 116, "completion_id": 0, "completion": "To implement the function that calculates the reduction in mean-squared error (MSE) achieved by a split in a regression decision tree, we need to follow these steps:\n\n1. Calculate the MSE of the parent node.\n2. Calculate the weighted MSE of the child nodes after the split.\n3. Compute the difference between the parent MSE and the weighted child MSE.\n4. Return the result rounded to four decimal places.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places. A higher value indicates a better split.\n    \"\"\"\n    # Calculate the parent MSE\n    mean_y = np.mean(y)\n    mse_parent = np.mean((y - mean_y) ** 2)\n    \n    # Calculate the weighted child MSE\n    N = len(y)\n    mse_children = 0.0\n    for split in splits:\n        mean_split = np.mean(split)\n        mse_split = np.mean((split - mean_split) ** 2)\n        mse_children += (len(split) / N) * mse_split\n    \n    # Calculate the reduction in MSE\n    delta_mse = mse_parent - mse_children\n    \n    # Return the result rounded to four decimal places\n    return round(delta_mse, 4)\n\n# Example usage:\n# y = np.array([3, 5, 2, 8])\n# splits = [np.array([3, 5]), np.array([2, 8])]\n# print(mse_criterion(y, splits))  # Output: 1.25\n```\n\n### Explanation:\n\n- **Parent MSE Calculation**: We compute the mean of the parent target vector `y` and then calculate the mean squared error using the formula `mean((y - mean(y))\u00b2)`.\n\n- **Weighted Child MSE Calculation**: For each split, we compute the mean and MSE of the split, then weight it by the proportion of samples in the split relative to the total number of samples `N`.\n\n- **MSE Reduction**: The reduction in MSE is simply the difference between the parent MSE and the weighted child MSE.\n\n- **Rounding**: The result is rounded to four decimal places to meet the output constraints."}
{"task_id": 118, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps as weak learners, we need to follow these steps:\n\n1. Initialize weights for each training sample.\n2. For each classifier (decision stump), find the best threshold and feature that minimizes the weighted error.\n3. Calculate the weight of the classifier based on its error.\n4. Update the sample weights based on the classifier's performance.\n5. Aggregate the predictions from all classifiers to make the final prediction.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    classifiers = []\n    alphas = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        best_pred = None\n\n        for feature in range(n):\n            feature_values = X_train[:, feature]\n            thresholds = np.unique(feature_values)\n\n            for threshold in thresholds:\n                for inequality in ['lt', 'gt']:\n                    pred = np.ones(m)\n                    if inequality == 'lt':\n                        pred[feature_values <= threshold] = -1\n                    else:\n                        pred[feature_values > threshold] = -1\n\n                    error = np.sum(weights[pred != y_train])\n\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature, threshold, inequality)\n                        best_pred = pred\n\n        epsilon = best_error / np.sum(weights)\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        weights *= np.exp(-alpha * y_train * best_pred)\n        weights /= np.sum(weights)\n\n        classifiers.append(best_stump)\n        alphas.append(alpha)\n\n    def stump_predict(X, stump):\n        feature, threshold, inequality = stump\n        pred = np.ones(X.shape[0])\n        feature_values = X[:, feature]\n        if inequality == 'lt':\n            pred[feature_values <= threshold] = -1\n        else:\n            pred[feature_values > threshold] = -1\n        return pred\n\n    final_pred = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, classifiers):\n        final_pred += alpha * stump_predict(X_test, stump)\n\n    return [1 if p > 0 else -1 for p in final_pred]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1, 2], [3, 4]])\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=3))\n```\n\n### Explanation:\n- **Decision Stump**: A simple classifier that makes decisions based on a single feature threshold.\n- **Weighted Error**: Calculated using the current weights of the samples.\n- **Alpha Calculation**: Determines the influence of each classifier based on its error.\n- **Weight Update**: Adjusts the sample weights to focus more on misclassified samples.\n- **Final Prediction**: Aggregates the weighted votes from all classifiers to make the final decision."}
{"task_id": 119, "completion_id": 0, "completion": "To implement the Stochastic Gradient Descent (SGD) update function, we need to iterate over the list of parameters and their corresponding gradients, apply the SGD update rule, and return the updated parameters. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef sgd_update(params: list, grads: list, alpha: float = 0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    # Check if params and grads are non-empty and have the same length\n    if not params or not grads or len(params) != len(grads):\n        return []\n\n    # Perform SGD update\n    updated_params = []\n    for param, grad in zip(params, grads):\n        updated_param = param - alpha * grad\n        # Round to 4 decimal places and convert to Python list\n        updated_param_rounded = np.round(updated_param, 4).tolist()\n        updated_params.append(updated_param_rounded)\n\n    return updated_params\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `params` and `grads` are non-empty and have the same length. If not, it returns an empty list.\n\n2. **SGD Update**: For each parameter and its corresponding gradient, the function computes the updated parameter using the SGD rule: `updated_param = param - alpha * grad`.\n\n3. **Rounding and Conversion**: Each updated parameter is rounded to four decimal places using `np.round(updated_param, 4)` and then converted to a Python list using `.tolist()`.\n\n4. **Return**: The function returns a list of updated parameters.\n\nThis implementation ensures that the input arrays are not modified in-place and that the output meets the specified constraints."}
{"task_id": 120, "completion_id": 0, "completion": "To implement the gradient descent linear regression as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef linear_regression(X: list[list[int | float]],\n                      y: list[int | float],\n                      n_iterations: int,\n                      learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    # Convert X and y to numpy arrays for easier manipulation\n    X = np.array(X)\n    y = np.array(y)\n\n    # Check if the dimensions are compatible\n    if X.shape[0] != y.shape[0]:\n        return -1\n\n    # Number of samples and features\n    m, n_features = X.shape\n\n    # Insert a column of ones to X for the bias term\n    X_augmented = np.hstack((np.ones((m, 1)), X))\n\n    # Number of augmented features\n    N = n_features + 1\n\n    # Randomly initialize weights from the uniform interval [-1/\u221aN, 1/\u221aN]\n    limit = 1 / math.sqrt(N)\n    w = np.random.uniform(-limit, limit, N)\n\n    # Perform batch gradient descent\n    for _ in range(n_iterations):\n        # Compute the predictions\n        predictions = X_augmented @ w\n\n        # Compute the gradient\n        gradient = (1/m) * X_augmented.T @ (predictions - y)\n\n        # Update the weights\n        w -= learning_rate * gradient\n\n    # Round the weights to 4 decimal places and convert to a list\n    return list(np.round(w, 4))\n\n# Example usage:\n# X = [[1, 2], [3, 4], [5, 6]]\n# y = [1, 2, 3]\n# n_iterations = 1000\n# learning_rate = 0.01\n# weights = linear_regression(X, y, n_iterations, learning_rate)\n# print(weights)\n```\n\n### Explanation:\n1. **Input Validation**: We first check if the number of rows in `X` matches the length of `y`. If not, we return `-1`.\n\n2. **Augmenting the Design Matrix**: We add a column of ones to `X` to account for the bias term.\n\n3. **Weight Initialization**: We initialize the weights randomly within the specified range using `np.random.uniform`.\n\n4. **Gradient Descent**: We perform the specified number of iterations of gradient descent, updating the weights using the gradient of the mean squared error.\n\n5. **Return Weights**: Finally, we round the weights to four decimal places and return them as a list.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 122, "completion_id": 0, "completion": "To implement the ordinary least-squares linear regression solver using NumPy, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector `[w0, w1, ..., wd]` rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    # Convert lists to NumPy arrays\n    X_np = np.array(X)\n    y_np = np.array(y)\n    \n    # Augment X with a leading column of ones for the intercept term\n    ones = np.ones((X_np.shape[0], 1))\n    X_augmented = np.hstack((ones, X_np))\n    \n    # Compute the Moore-Penrose pseudo-inverse of the augmented matrix\n    X_pseudo_inverse = np.linalg.pinv(X_augmented)\n    \n    # Calculate the weight vector\n    w = X_pseudo_inverse @ y_np\n    \n    # Round each weight to the nearest 4th decimal place\n    w_rounded = np.round(w, 4)\n    \n    # Return the weights as a flat Python list\n    return w_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4], [5, 6]]\n# y = [1, 2, 3]\n# print(linear_regression_weights(X, y))\n```\n\n### Explanation:\n1. **Convert Lists to NumPy Arrays**: We first convert the input lists `X` and `y` into NumPy arrays for efficient numerical operations.\n\n2. **Augment the Design Matrix**: We create a column of ones and horizontally stack it with the original matrix `X` to form the augmented matrix `X_`. This column of ones accounts for the intercept term in the linear regression model.\n\n3. **Compute the Moore-Penrose Pseudo-Inverse**: Using `np.linalg.pinv`, we compute the pseudo-inverse of the augmented matrix. This method is robust and provides a solution even when the matrix `X\u1d40X` is not invertible.\n\n4. **Calculate the Weight Vector**: We multiply the pseudo-inverse of `X_` with the target vector `y` to obtain the weight vector `w`.\n\n5. **Round and Return**: Finally, we round each element of the weight vector to four decimal places and return it as a Python list.\n\nThis implementation efficiently computes the least-squares solution using NumPy, adhering to the constraints and requirements specified in the task."}
{"task_id": 123, "completion_id": 0, "completion": "To implement the one-hot encoding function without using any third-party machine-learning libraries, we can follow these steps:\n\n1. Identify the unique categories in the input array.\n2. Sort these categories in ascending or alphabetical order.\n3. Create a binary matrix where each row corresponds to an element of the input array and each column corresponds to one of the unique categories.\n4. Populate the matrix with 1s and 0s based on the presence of each category in the input array.\n\nHere's how you can implement this:\n\n```python\nimport numpy as np\n\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    # Convert input to a NumPy array if it isn't already\n    y = np.asarray(y)\n    \n    # Find unique categories and sort them\n    unique_categories = sorted(set(y))\n    \n    # Create a mapping from category to index\n    category_to_index = {category: index for index, category in enumerate(unique_categories)}\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = []\n    \n    # Populate the one-hot encoded matrix\n    for value in y:\n        # Create a row of zeros\n        row = [0] * len(unique_categories)\n        # Set the appropriate index to 1\n        row[category_to_index[value]] = 1\n        # Append the row to the matrix\n        one_hot_matrix.append(row)\n    \n    return one_hot_matrix\n\n# Example usage:\ny = np.array(['cat', 'dog', 'fish', 'cat', 'dog'])\nprint(one_hot_encoding(y))\n```\n\n### Explanation:\n- **Unique Categories**: We use `set(y)` to find unique categories and `sorted()` to sort them.\n- **Mapping**: We create a dictionary `category_to_index` to map each category to its index in the sorted list.\n- **Matrix Construction**: For each element in the input array, we create a row of zeros and set the index corresponding to the category to 1.\n- **Output**: The function returns a list of lists, where each inner list is a one-hot encoded representation of the corresponding element in the input array."}
{"task_id": 126, "completion_id": 0, "completion": "To implement the polynomial kernel Gram matrix, we will follow these steps:\n\n1. **Input Handling**: If `Y` is not provided, we will set `Y` to be the same as `X`. This allows us to compute the Gram matrix for a single dataset.\n2. **Gamma Calculation**: If `gamma` is not provided, we will set it to `1/C`, where `C` is the number of features (columns) in `X`.\n3. **Matrix Operations**: We will use NumPy to perform efficient matrix operations. Specifically, we will compute the dot product between `X` and the transpose of `Y`.\n4. **Kernel Calculation**: For each element in the resulting matrix, we will apply the polynomial kernel formula: `(gamma * dot_product + c0) ** d`.\n5. **Rounding and Conversion**: Finally, we will round the results to 4 decimal places and convert the NumPy array back to a nested Python list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef polynomial_kernel(X: list[list[int | float]],\n                      Y: list[list[int | float]] | None = None,\n                      d: int = 3,\n                      gamma: float | None = None,\n                      c0: float = 1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    # Convert input lists to NumPy arrays\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Set gamma if not provided\n    if gamma is None:\n        gamma = 1.0 / C\n    \n    # Compute the dot product between X and Y^T\n    dot_product = np.dot(X, Y.T)\n    \n    # Compute the polynomial kernel\n    K = (gamma * dot_product + c0) ** d\n    \n    # Round the results to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result to a nested Python list\n    return K_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(polynomial_kernel(X, Y, d=2, gamma=None, c0=1))\n```\n\nThis implementation efficiently computes the polynomial kernel Gram matrix using NumPy for matrix operations and handles the input constraints and defaults as specified."}
{"task_id": 127, "completion_id": 0, "completion": "To implement the confusion matrix from scratch, we need to follow these steps:\n\n1. **Check Input Lengths**: Ensure that `y_true` and `y_pred` have the same length. If not, return `-1`.\n\n2. **Identify Unique Classes**: Determine the unique classes present in both `y_true` and `y_pred`. These classes should be sorted to maintain a consistent order.\n\n3. **Initialize the Matrix**: Create a square matrix of size `C x C`, where `C` is the number of unique classes. Initialize all elements to zero.\n\n4. **Populate the Matrix**: Iterate over the pairs of true and predicted labels, and update the matrix by incrementing the appropriate cell.\n\n5. **Return the Matrix**: Once populated, return the matrix as a list of lists.\n\nHere's the implementation:\n\n```python\ndef confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    # Check if the input lists have the same length\n    if len(y_true) != len(y_pred):\n        return -1\n    \n    # Find the sorted unique classes from both y_true and y_pred\n    unique_classes = sorted(set(y_true) | set(y_pred))\n    class_to_index = {cls: idx for idx, cls in enumerate(unique_classes)}\n    \n    # Initialize the confusion matrix with zeros\n    size = len(unique_classes)\n    matrix = [[0] * size for _ in range(size)]\n    \n    # Populate the confusion matrix\n    for true_label, pred_label in zip(y_true, y_pred):\n        true_index = class_to_index[true_label]\n        pred_index = class_to_index[pred_label]\n        matrix[true_index][pred_index] += 1\n    \n    return matrix\n\n# Example usage:\ny_true = [1, 2, 3, 2, 1]\ny_pred = [1, 2, 1, 3, 1]\nprint(confusion_matrix(y_true, y_pred))\n```\n\n### Explanation:\n\n- **Input Length Check**: The function first checks if the lengths of `y_true` and `y_pred` are equal. If not, it returns `-1`.\n\n- **Unique Classes**: We use a set to find unique classes from both lists and then sort them. This ensures that the matrix is constructed in a consistent order.\n\n- **Matrix Initialization**: A list of lists is used to create a `C x C` matrix initialized with zeros.\n\n- **Matrix Population**: We iterate over each pair of true and predicted labels, find their corresponding indices in the matrix using a dictionary (`class_to_index`), and increment the appropriate cell.\n\n- **Return**: Finally, the populated matrix is returned."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Check if n_components is valid\n    if n_components <= 0 or n_components > X.shape[1]:\n        return []\n\n    # Compute the global mean\n    mean_global = np.mean(X, axis=0)\n\n    # Initialize scatter matrices\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n\n    # Compute class means and scatter matrices\n    unique_classes = np.unique(y)\n    for cls in unique_classes:\n        X_c = X[y == cls]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n\n        # Within-class scatter\n        S_W += (X_c - mean_c).T @ (X_c - mean_c)\n\n        # Between-class scatter\n        mean_diff = (mean_c - mean_global).reshape(-1, 1)\n        S_B += N_c * (mean_diff @ mean_diff.T)\n\n    # Compute the matrix A = pinv(S_W) @ S_B\n    A = np.linalg.pinv(S_W) @ S_B\n\n    # Perform eigen-decomposition\n    eigen_values, eigen_vectors = np.linalg.eigh(A)\n\n    # Sort eigenvectors by descending eigenvalues\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n\n    # Select the top n_components eigenvectors\n    W = eigen_vectors[:, :n_components]\n\n    # Deterministic sign flip\n    for i in range(W.shape[1]):\n        first_non_zero = np.argmax(W[:, i] != 0)\n        if W[first_non_zero, i] < 0:\n            W[:, i] = -W[:, i]\n\n    # Project the data\n    X_projected = X @ W\n\n    # Round to four decimal places\n    X_projected = np.round(X_projected, 4)\n\n    # Return as list of lists\n    return X_projected.tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis code implements the multi-class Linear Discriminant Analysis (LDA) transformation as described in the task. It computes the within-class and between-class scatter matrices, performs eigen-decomposition, and projects the data onto the specified number of discriminant components. The results are rounded to four decimal places and returned as a list of lists."}
{"task_id": 129, "completion_id": 0, "completion": "To achieve the desired behavior of cycling through a sequence and returning the first `samples` elements, we can utilize Python's `itertools` module, specifically the `cycle` and `islice` functions. Here's how you can implement the `cycle_sequence` function:\n\n```python\nfrom itertools import islice, cycle\n\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    if not sequence or samples <= 0:\n        return []\n    \n    # Create an infinite cycle of the sequence\n    infinite_cycle = cycle(sequence)\n    \n    # Use islice to take the first 'samples' elements from the infinite cycle\n    result = list(islice(infinite_cycle, samples))\n    \n    return result\n```\n\n### Explanation:\n\n1. **Input Validation**: \n   - The function first checks if the `sequence` is empty or if `samples` is not positive. If either condition is true, it returns an empty list immediately.\n\n2. **Infinite Cycle**:\n   - The `cycle` function from `itertools` creates an iterator that repeats the elements of the `sequence` indefinitely.\n\n3. **Slicing the Cycle**:\n   - The `islice` function is used to extract the first `samples` elements from the infinite cycle. This function efficiently handles the task of taking a specified number of elements from an iterator.\n\n4. **Return the Result**:\n   - The result is converted to a list and returned.\n\nThis implementation efficiently handles the requirements and constraints specified in the task description."}
{"task_id": 130, "completion_id": 0, "completion": "To implement the function `outcome_probs`, we need to process the list of experience tuples and calculate the empirical probability distribution for the given `(state, action)` pair. Here's how you can complete the implementation:\n\n```python\nfrom collections import Counter\nfrom typing import Any, List, Tuple\n\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]],\n                  state: Any,\n                  action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    # Filter transitions to only include those with the given (state, action)\n    filtered_transitions = [next_state for s, a, _, next_state in transitions if s == state and a == action]\n    \n    # If no transitions match the (state, action) pair, return an empty list\n    if not filtered_transitions:\n        return []\n    \n    # Count occurrences of each next_state\n    next_state_counts = Counter(filtered_transitions)\n    \n    # Calculate total occurrences for normalization\n    total_occurrences = sum(next_state_counts.values())\n    \n    # Calculate probabilities and sort by next_state\n    probabilities = [[next_state, round(count / total_occurrences, 4)] for next_state, count in next_state_counts.items()]\n    probabilities.sort(key=lambda x: x[0])\n    \n    return probabilities\n\n# Example usage:\ntransitions = [\n    (0, 'left', -1, 1),\n    (0, 'left', -1, 1),\n    (0, 'left', -1, 2),\n    (0, 'right', 0, 3)\n]\n\nprint(outcome_probs(transitions, 0, 'left'))  # Output: [[1, 0.6667], [2, 0.3333]]\n```\n\n### Explanation:\n1. **Filtering Transitions**: We first filter the list of transitions to only include those that match the given `(state, action)` pair. This is done using a list comprehension.\n\n2. **Counting Next States**: We use the `Counter` from the `collections` module to count how many times each `next_state` appears in the filtered list.\n\n3. **Calculating Probabilities**: We calculate the probability of each `next_state` by dividing its count by the total number of occurrences. We round these probabilities to 4 decimal places.\n\n4. **Sorting**: We sort the list of `[next_state, probability]` pairs by `next_state` in ascending order.\n\n5. **Return**: If no transitions match the `(state, action)` pair, we return an empty list. Otherwise, we return the sorted list of probabilities."}
{"task_id": 131, "completion_id": 0, "completion": "To implement the `get_index` function, we need to handle the cases where either the `uid` or the index `i` is invalid. Here's how you can achieve this:\n\n```python\ndef get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    # Check if uid is a valid index for _SHARED_SEQUENCES\n    if uid < 0 or uid >= len(_SHARED_SEQUENCES):\n        return None\n    \n    # Retrieve the sequence using uid\n    sequence = _SHARED_SEQUENCES[uid]\n    \n    # Check if i is a valid index for the sequence\n    if i < -len(sequence) or i >= len(sequence):\n        return None\n    \n    # Return the element at index i\n    return sequence[i]\n\n# Example usage:\n# Assuming _SHARED_SEQUENCES is defined as follows:\n# _SHARED_SEQUENCES = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# get_index(1, 1) should return 5\n# get_index(2, -1) should return 9\n# get_index(0, 3) should return None\n# get_index(3, 0) should return None\n```\n\n### Explanation:\n1. **Check `uid` Validity**: First, we check if `uid` is within the valid range of indices for `_SHARED_SEQUENCES`. If `uid` is negative or greater than or equal to the length of `_SHARED_SEQUENCES`, it is invalid, and we return `None`.\n\n2. **Retrieve the Sequence**: If `uid` is valid, we retrieve the sequence associated with that `uid`.\n\n3. **Check `i` Validity**: We then check if `i` is a valid index for the retrieved sequence. We account for negative indices by checking if `i` is less than the negative length of the sequence or greater than or equal to the length of the sequence.\n\n4. **Return the Element**: If both `uid` and `i` are valid, we return the element at index `i` of the sequence. If `i` is invalid, we return `None`.\n\nThis approach ensures that the function handles invalid indices gracefully without modifying the global list `_SHARED_SEQUENCES`."}
{"task_id": 132, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    # Check if z is a scalar (int or float)\n    if isinstance(z, (int, float)):\n        return z\n    # Check if z is a list or tuple\n    elif isinstance(z, (list, tuple)):\n        return np.array(z)\n    # Check if z is a NumPy ndarray\n    elif isinstance(z, np.ndarray):\n        return z\n    else:\n        raise TypeError(\"Input must be a scalar, list, tuple, or NumPy ndarray.\")\n```\n\nThis implementation checks the type of the input `z` and returns it according to the specified rules. Scalars are returned unchanged, lists and tuples are converted to NumPy arrays, and NumPy arrays are returned as-is without modification. If the input type is not one of the expected types, a `TypeError` is raised."}
{"task_id": 133, "completion_id": 0, "completion": "To implement the `one_hot_targets` function, we need to iterate over each sequence in `X_train`, and for each token in the sequence, create a one-hot encoded vector of length `vocab_length`. If any token index is invalid (negative or greater than or equal to `vocab_length`), the function should return `-1`. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    # Initialize the result list\n    one_hot_encoded = []\n\n    # Iterate over each sequence in the batch\n    for sequence in X_train:\n        # Initialize the one-hot encoded sequence\n        one_hot_sequence = []\n\n        # Iterate over each token in the sequence\n        for token in sequence:\n            # Check for invalid token indices\n            if token < 0 or token >= vocab_length:\n                return -1\n\n            # Create a one-hot vector for the current token\n            one_hot_vector = [0] * vocab_length\n            one_hot_vector[token] = 1\n\n            # Append the one-hot vector to the sequence\n            one_hot_sequence.append(one_hot_vector)\n\n        # Append the one-hot encoded sequence to the result list\n        one_hot_encoded.append(one_hot_sequence)\n\n    return one_hot_encoded\n\n# Example usage:\nX_train = [[0, 2, 1], [3, 0, 2]]\nvocab_length = 4\nresult = one_hot_targets(X_train, vocab_length)\nprint(result)\n```\n\n### Explanation:\n- **Initialization**: We start by initializing an empty list `one_hot_encoded` to store the one-hot encoded sequences.\n- **Iteration**: We iterate over each sequence in `X_train`. For each sequence, we initialize `one_hot_sequence` to store the one-hot vectors for the tokens in that sequence.\n- **Validation**: For each token, we check if it is within the valid range. If not, we return `-1`.\n- **One-Hot Encoding**: We create a one-hot vector of length `vocab_length` with all zeros, and set the index corresponding to the token to `1`.\n- **Appending**: We append the one-hot vector to the current sequence and the sequence to the result list.\n- **Return**: Finally, we return the nested list `one_hot_encoded`.\n\nThis function will convert the integer-encoded sequences into a 3-D one-hot representation suitable for use in deep learning models."}
{"task_id": 134, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index). If the input list is empty or\n        contains an invalid probability (<0 or >1), the function must return\n        (-1.0, -1).\n    \"\"\"\n    # Check if the list is empty or contains invalid probabilities\n    if not payoff_probs or any(p < 0 or p > 1 for p in payoff_probs):\n        return (-1.0, -1)\n    \n    # Find the maximum probability and its index\n    max_expected_reward = max(payoff_probs)\n    best_arm_index = payoff_probs.index(max_expected_reward)\n    \n    return (max_expected_reward, best_arm_index)\n\n# Example usage\npayoff_probs = [0.15, 0.6, 0.35]\nprint(best_arm(payoff_probs))  # Output: (0.6, 1)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the list is empty or contains any invalid probabilities (less than 0 or greater than 1). If either condition is true, it returns `(-1.0, -1)`.\n\n2. **Finding the Optimal Arm**: If the input is valid, the function uses the `max()` function to find the highest probability in the list. It then uses the `index()` method to find the index of this maximum probability. If multiple arms have the same maximum probability, `index()` will return the smallest index, as required.\n\n3. **Return**: The function returns a tuple containing the maximum expected reward and the index of the best arm."}
{"task_id": 135, "completion_id": 0, "completion": "To implement Ordinary Least Squares (OLS) linear regression using the normal equation, we need to follow these steps:\n\n1. Prepend a column of ones to the feature matrix to account for the intercept term.\n2. Compute the regression coefficients using the normal equation: \\(\\beta = (X^{\\top}X)^{-1}X^{\\top}y\\).\n3. Check if the matrix \\(X^{\\top}X\\) is singular (non-invertible). If it is, return -1.\n4. Use the learned coefficients to predict the target values for the test set.\n5. Return the predictions rounded to 4 decimal places.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef linear_regression_predict(\n        X_train: list[list[int | float]],\n        y_train: list[int | float],\n        X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"Your task is to complete this function!\"\"\"\n    \n    # Convert lists to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Prepend a column of ones to X_train and X_test for the intercept term\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    \n    # Compute X^T * X\n    XtX = X_train.T @ X_train\n    \n    # Check if XtX is singular\n    if np.linalg.det(XtX) == 0:\n        return -1\n    \n    # Compute the coefficients using the normal equation\n    XtX_inv = np.linalg.inv(XtX)\n    XtY = X_train.T @ y_train\n    coefficients = XtX_inv @ XtY\n    \n    # Predict the target values for X_test\n    predictions = X_test @ coefficients\n    \n    # Round predictions to 4 decimal places\n    return [round(pred, 4) for pred in predictions]\n\n```\n\n### Explanation:\n- **Prepending Ones**: We add a column of ones to both `X_train` and `X_test` to account for the intercept term in the linear model.\n- **Normal Equation**: The coefficients are calculated using \\(\\beta = (X^{\\top}X)^{-1}X^{\\top}y\\). This requires checking if \\(X^{\\top}X\\) is invertible.\n- **Singular Matrix Check**: We use `np.linalg.det()` to check if the determinant of \\(X^{\\top}X\\) is zero, indicating it's singular.\n- **Prediction**: We use the learned coefficients to predict the target values for `X_test`.\n- **Rounding**: The predictions are rounded to 4 decimal places as required.\n\nThis implementation ensures that the function handles singular matrices appropriately and provides predictions with the specified precision."}
{"task_id": 136, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(z: np.ndarray, axis: int = -1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function should:\n    1. Subtract the maximum value along *axis* from every element of *z*.\n    2. Exponentiate the shifted values.\n    3. Divide by the sum of exponentials along the same axis.\n    4. Round the result to four decimal places.\n    5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: \u20111).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    # Subtract the maximum value along the specified axis for numerical stability\n    max_z = np.max(z, axis=axis, keepdims=True)\n    shifted_z = z - max_z\n    \n    # Exponentiate the shifted values\n    exp_z = np.exp(shifted_z)\n    \n    # Sum the exponentials along the specified axis\n    sum_exp_z = np.sum(exp_z, axis=axis, keepdims=True)\n    \n    # Compute the softmax probabilities\n    softmax_probs = exp_z / sum_exp_z\n    \n    # Round the probabilities to four decimal places\n    rounded_probs = np.round(softmax_probs, 4)\n    \n    # Convert the NumPy array to a Python list and return\n    return rounded_probs.tolist()\n\n# Example usage\nz = np.array([1.0, 2.0, 3.0])\naxis = 0\nprint(softmax(z, axis))  # Output: [0.0900, 0.2447, 0.6652]\n```\n\n### Explanation:\n1. **Subtract the Maximum Value**: We subtract the maximum value along the specified axis to prevent overflow during exponentiation. This is done using `np.max(z, axis=axis, keepdims=True)` to ensure the dimensions match for broadcasting.\n\n2. **Exponentiate**: We compute the exponentials of the shifted values using `np.exp(shifted_z)`.\n\n3. **Normalize**: We divide the exponentials by their sum along the specified axis using `np.sum(exp_z, axis=axis, keepdims=True)` to get the softmax probabilities.\n\n4. **Round and Convert**: We round the probabilities to four decimal places using `np.round(softmax_probs, 4)` and convert the result to a Python list using `tolist()`.\n\nThis implementation ensures numerical stability and meets the requirements specified in the task."}
{"task_id": 138, "completion_id": 0, "completion": "To implement the `accuracy_score` function, we need to follow these steps:\n\n1. **Validate Input Lengths**: Check if `y_true` and `y_pred` have the same non-zero length. If not, return `-1`.\n2. **Compute Accuracy**: Calculate the proportion of elements that are identical in both lists.\n3. **Round the Result**: Round the computed accuracy to four decimal places.\n4. **Return the Result**: Return the rounded accuracy as a float.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    # Check if both lists have the same non-zero length\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    \n    # Calculate the number of correct predictions\n    correct_predictions = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)\n    \n    # Calculate accuracy\n    accuracy = correct_predictions / len(y_true)\n    \n    # Return the accuracy rounded to four decimal places\n    return round(accuracy, 4)\n\n# Example usage:\n# y_true = [1, 0, 1, 1]\n# y_pred = [1, 0, 0, 1]\n# print(accuracy_score(y_true, y_pred))  # Output: 0.75\n```\n\n### Explanation:\n\n- **Input Validation**: The function first checks if the lengths of `y_true` and `y_pred` are equal and non-zero. If not, it returns `-1`.\n- **Correct Predictions**: It uses a generator expression within the `sum` function to count the number of positions where the elements in `y_true` and `y_pred` are equal.\n- **Accuracy Calculation**: The accuracy is computed as the ratio of correct predictions to the total number of elements.\n- **Rounding**: The result is rounded to four decimal places using Python's built-in `round` function.\n\nThis implementation handles various data types for labels, including numbers, strings, and booleans, as required."}
{"task_id": 139, "completion_id": 0, "completion": "To implement the hyperbolic tangent (tanh) activation function using the numerically stable formula, we can follow these steps:\n\n1. Import the necessary library, which is NumPy for handling arrays and mathematical operations.\n2. Define the function `tanh_activation` that accepts a one-dimensional iterable.\n3. Iterate over each element in the input, compute the tanh using the stable formula, and round the result to four decimal places.\n4. Return the results as a Python list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    # Ensure the input is a NumPy array for easy manipulation\n    z = np.array(z)\n    \n    # Compute tanh using the numerically stable formula\n    tanh_values = (2 / (1 + np.exp(-2 * z))) - 1\n    \n    # Round each value to four decimal places and convert to a list\n    rounded_tanh_values = [round(val, 4) for val in tanh_values]\n    \n    return rounded_tanh_values\n\n# Example usage:\n# input_data = [0, 1, -1, 0.5, -0.5]\n# print(tanh_activation(input_data))\n```\n\n### Explanation:\n- **Numerically Stable Formula**: We use the formula \\(\\tanh(z) = \\frac{2}{1 + e^{-2z}} - 1\\) to compute the tanh, which is more stable for large values of \\(z\\).\n- **Rounding**: Each computed tanh value is rounded to four decimal places using Python's `round()` function.\n- **Handling Input**: The function accepts both lists and NumPy arrays, converting the input to a NumPy array for consistent processing.\n- **Empty Input**: If the input is empty, the function will naturally return an empty list due to the list comprehension.\n\nThis implementation ensures that the tanh values are computed accurately and efficiently, adhering to the constraints provided."}
{"task_id": 140, "completion_id": 0, "completion": "To solve the problem of escaping from the fire maze, we need to simulate the spread of fire and the movement of the agent. We'll use a breadth-first search (BFS) approach to handle both the fire spread and the agent's movement. Here's how we can implement the solution:\n\n```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n    \n    # Check if start or goal is on fire\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    \n    # If the maze is 1x1 and the single cell is free\n    if n == 1 and grid[0][0] == '.':\n        return 0\n    \n    # Directions for moving in the grid\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Initialize fire spread\n    fire_queue = deque()\n    fire_time = [[math.inf] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n                fire_time[i][j] = 0\n    \n    # BFS for fire spread\n    while fire_queue:\n        x, y = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.' and fire_time[nx][ny] == math.inf:\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    \n    # Initialize agent movement\n    agent_queue = deque([(0, 0)])\n    agent_time = [[math.inf] * n for _ in range(n)]\n    agent_time[0][0] = 0\n    \n    # BFS for agent movement\n    while agent_queue:\n        x, y = agent_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.':\n                if agent_time[nx][ny] == math.inf and agent_time[x][y] + 1 < fire_time[nx][ny]:\n                    agent_time[nx][ny] = agent_time[x][y] + 1\n                    agent_queue.append((nx, ny))\n    \n    # Check if the agent can reach the goal\n    return agent_time[n-1][n-1] if agent_time[n-1][n-1] != math.inf else -1\n\n```\n\n### Explanation:\n1. **Fire Spread Simulation**: We use BFS to simulate the spread of fire. We initialize a queue with all the fire cells and calculate the time it takes for each cell to catch fire.\n\n2. **Agent Movement Simulation**: We use BFS again to simulate the agent's movement. The agent can move to a cell only if it is not on fire at the time of arrival.\n\n3. **Checking Feasibility**: After simulating both the fire spread and agent movement, we check if the agent can reach the goal cell safely. If the agent's time to reach the goal is finite, we return that time; otherwise, we return -1 indicating it's impossible.\n\nThis approach efficiently handles the problem using BFS for both fire and agent movement, ensuring that the agent avoids fire and reaches the goal if possible."}
{"task_id": 141, "completion_id": 0, "completion": "To implement the k-Nearest Neighbors (k-NN) classifier, we need to compute distances between test samples and training samples using the specified metric, find the k nearest neighbors, and predict the class based on majority voting. Below is the implementation of the `knn_predict` function:\n\n```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Predict labels for X_test using k-NN with the specified metric.\"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n    \n    def cosine_distance(a, b):\n        dot_product = np.sum(a * b, axis=1)\n        norm_a = np.linalg.norm(a, axis=1)\n        norm_b = np.linalg.norm(b, axis=1)\n        return 1 - (dot_product / (norm_a * norm_b))\n    \n    # Choose the distance function based on the metric\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        distance_func = euclidean_distance  # Default to Euclidean\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Compute distances from the test sample to all training samples\n        distances = distance_func(X_train, test_sample)\n        \n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        nearest_labels = y_train[nearest_indices]\n        \n        # Predict the class by majority vote\n        unique_labels, counts = np.unique(nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n        \n        predictions.append(majority_vote)\n    \n    return np.array(predictions)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([0, 1, 1])\n# X_test = np.array([[1, 2], [3, 3]])\n# k = 2\n# print(knn_predict(X_train, y_train, X_test, k, metric='euclidean'))\n```\n\n### Explanation:\n1. **Distance Functions**: We define three functions to compute Euclidean, Manhattan, and Cosine distances.\n2. **Metric Selection**: Based on the `metric` parameter, we select the appropriate distance function. If an unknown metric is provided, it defaults to Euclidean.\n3. **Distance Calculation**: For each test sample, we calculate the distance to all training samples.\n4. **Nearest Neighbors**: We find the indices of the k smallest distances using `np.argsort`.\n5. **Majority Voting**: We determine the most frequent label among the k nearest neighbors. In case of a tie, `np.unique` with `np.argmax` ensures the smallest label is chosen.\n6. **Return**: The function returns a 1-D NumPy array of predicted labels for the test samples."}
{"task_id": 143, "completion_id": 0, "completion": "To implement the Leaky ReLU activation function and its derivative, we can utilize NumPy's vectorized operations to efficiently handle the computations for arbitrary-shaped arrays. Here's how you can implement the `leaky_relu` function:\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha: float = 0.2, derivative: bool = False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    # Convert input to a NumPy array if it is not already\n    x = np.asarray(x)\n    \n    if derivative:\n        # Compute the derivative of Leaky ReLU\n        return np.where(x >= 0, 1, alpha)\n    else:\n        # Compute the Leaky ReLU activation\n        return np.where(x >= 0, x, alpha * x)\n\n# Example usage:\n# x = np.array([-3, -1, 0, 1, 3])\n# print(leaky_relu(x))  # Activation\n# print(leaky_relu(x, derivative=True))  # Derivative\n```\n\n### Explanation:\n\n1. **Input Conversion**: The function first ensures that the input `x` is a NumPy array using `np.asarray(x)`. This allows the function to handle inputs that are lists or tuples seamlessly.\n\n2. **Vectorized Operations**: \n   - For the activation function (`derivative=False`), we use `np.where` to apply the Leaky ReLU formula: `x` if `x >= 0`, otherwise `alpha * x`.\n   - For the derivative (`derivative=True`), we again use `np.where` to return `1` where `x >= 0` and `alpha` where `x < 0`.\n\n3. **Output**: The function returns a NumPy array with the same shape as the input, containing the computed values for either the activation or its derivative.\n\nThis implementation is efficient and leverages NumPy's capabilities to perform element-wise operations without explicit loops, making it suitable for use in deep learning applications."}
{"task_id": 144, "completion_id": 0, "completion": "To implement the Mean Absolute Error (MAE) calculator using NumPy, we need to follow these steps:\n\n1. Check if the input sequences have the same length. If not, return -1.\n2. Convert the input sequences to NumPy arrays to facilitate numerical operations.\n3. Calculate the absolute differences between the corresponding elements of the two arrays.\n4. Compute the mean of these absolute differences.\n5. Round the result to 4 decimal places and return it.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise \u20111.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if the shapes are the same\n    if actual.shape != predicted.shape:\n        return -1\n    \n    # Calculate the absolute differences\n    absolute_differences = np.abs(actual - predicted)\n    \n    # Calculate the mean of the absolute differences\n    mae = np.mean(absolute_differences)\n    \n    # Return the MAE rounded to 4 decimal places\n    return round(mae, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.0, 2, 8]\n# print(mean_absolute_error(actual, predicted))  # Output: 0.5\n```\n\nThis function will correctly compute the Mean Absolute Error for two sequences of the same length and return -1 if the sequences have different lengths. The use of NumPy ensures efficient computation, especially for large datasets."}
{"task_id": 146, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (k-NN) classifier from scratch, we need to calculate distances between test samples and training samples using the specified metric, find the k nearest neighbors, and perform a majority vote to determine the predicted label for each test sample. Below is the complete implementation:\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n    \n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n    \n    def cosine_distance(x1, x2, epsilon=1e-12):\n        dot_product = np.dot(x1, x2)\n        norm_x1 = np.linalg.norm(x1)\n        norm_x2 = np.linalg.norm(x2)\n        return 1 - (dot_product / (norm_x1 * norm_x2 + epsilon))\n    \n    # Select the appropriate distance function\n    if metric == 'euclidean':\n        distance_function = euclidean_distance\n    elif metric == 'manhattan':\n        distance_function = manhattan_distance\n    elif metric == 'cosine':\n        distance_function = cosine_distance\n    else:\n        raise ValueError(\"Unsupported metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Calculate distances from the test sample to all training samples\n        distances = np.array([distance_function(test_sample, train_sample) for train_sample in X])\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = np.argsort(distances)[:min(k, len(X))]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y[k_nearest_indices]\n        \n        # Perform a majority vote\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        majority_label = unique_labels[np.argmax(counts)]\n        \n        # In case of a tie, choose the smallest label\n        if np.sum(counts == np.max(counts)) > 1:\n            majority_label = np.min(unique_labels[counts == np.max(counts)])\n        \n        predictions.append(majority_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([0, 1, 0])\n# X_test = np.array([[1, 2], [3, 3]])\n# print(knn_predict(X_train, y_train, X_test, k=2, metric='euclidean'))\n```\n\nThis implementation defines three distance functions for Euclidean, Manhattan, and Cosine distances. It then calculates the distances between each test sample and all training samples, finds the k nearest neighbors, and performs a majority vote to predict the label for each test sample. The function returns a list of predicted labels."}
{"task_id": 147, "completion_id": 0, "completion": "To implement binary logistic regression from scratch using batch gradient descent, we need to follow these steps:\n\n1. **Initialize Parameters**: Start with random weights and intercept.\n2. **Define the Sigmoid Function**: This function will map any real-valued number into the range (0, 1).\n3. **Compute the Predictions**: Use the sigmoid function to compute the predicted probabilities.\n4. **Compute the Loss**: Use the negative log-likelihood as the loss function.\n5. **Compute the Gradients**: Derive the gradients of the loss with respect to the weights and intercept.\n6. **Update Parameters**: Adjust the weights and intercept using the gradients and learning rate.\n7. **Predict on Test Data**: Use the learned weights and intercept to predict the class labels for the test set.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-z))\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    learning_rate: float = 0.1,\n    epochs: int = 10000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n    # Check if the training set contains a single class\n    if np.all(y_train == 0) or np.all(y_train == 1):\n        return [int(y_train[0])] * X_test.shape[0]\n\n    # Initialize weights and intercept\n    n_features = X_train.shape[1]\n    w = np.zeros(n_features)\n    b = 0.0\n\n    # Gradient descent\n    for epoch in range(epochs):\n        # Compute linear combination\n        z = np.dot(X_train, w) + b\n        # Compute predictions\n        predictions = sigmoid(z)\n        # Compute the gradient of the loss w.r.t weights and intercept\n        error = predictions - y_train\n        gradient_w = np.dot(X_train.T, error) / len(y_train)\n        gradient_b = np.sum(error) / len(y_train)\n        # Update weights and intercept\n        w -= learning_rate * gradient_w\n        b -= learning_rate * gradient_b\n\n    # Predict on test data\n    z_test = np.dot(X_test, w) + b\n    predictions_test = sigmoid(z_test)\n    # Convert probabilities to class labels\n    return [int(p >= 0.5) for p in predictions_test]\n\n# Example usage\nX_train = np.array([[-2,-1],[-3,-2],[-1,-2],[-2,-3],\n                    [ 2, 1],[ 3, 2],[ 1, 2],[ 2, 3]])\ny_train = np.array([0,0,0,0,1,1,1,1])\nX_test  = np.array([[-2,-2],[ 2, 2]])\n\nprint(logistic_regression(X_train, y_train, X_test))\n```\n\nThis code implements binary logistic regression using batch gradient descent. It initializes the weights and intercept, iteratively updates them using the computed gradients, and finally predicts the class labels for the test set. If the training set contains only one class, it predicts that class for all test examples."}
{"task_id": 148, "completion_id": 0, "completion": "To implement the exponential smoothing function, we need to handle the special cases and compute the smoothed values according to the recursive formula provided. Here's the complete implementation:\n\n```python\nfrom typing import List\n\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # Check for invalid input\n    if not (0 <= alpha <= 1) or not data:\n        return -1\n    \n    # Special cases\n    if alpha == 0:\n        return [round(data[0], 4)] * len(data)\n    if alpha == 1:\n        return [round(x, 4) for x in data]\n    \n    # Initialize the list of smoothed values\n    smoothed_values = [data[0]]\n    \n    # Compute the smoothed values using the recursive formula\n    for k in range(1, len(data)):\n        s_k = (1 - alpha) * smoothed_values[k - 1] + alpha * data[k]\n        smoothed_values.append(s_k)\n    \n    # Round each value to 4 decimal places\n    return [round(s, 4) for s in smoothed_values]\n\n# Example usage:\n# data = [10, 20, 30, 40, 50]\n# alpha = 0.5\n# print(exp_smoothing(data, alpha))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `alpha` is within the valid range `[0, 1]` and if the `data` list is not empty. If either condition fails, it returns `-1`.\n\n2. **Special Cases**:\n   - If `alpha` is `0`, the function returns a list where every element is the first observation, rounded to four decimal places.\n   - If `alpha` is `1`, the function returns the original sequence, with each element rounded to four decimal places.\n\n3. **Recursive Calculation**: For each element in the sequence starting from the second, the function calculates the smoothed value using the recursive formula and appends it to the list of smoothed values.\n\n4. **Rounding**: Each smoothed value is rounded to four decimal places before being returned.\n\nThis implementation efficiently handles the exponential smoothing process and adheres to the specified constraints."}
{"task_id": 150, "completion_id": 0, "completion": "To solve this problem using the A* search algorithm, we need to implement a priority queue to manage the nodes to be explored, calculate the cost of reaching each node, and use the Manhattan distance as a heuristic to guide the search. Here's how you can implement this:\n\n```python\nfrom heapq import heappush, heappop\nfrom typing import List, Tuple, Union\n\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    The maze is described by a 2-D list where 0 denotes a free cell and 1 denotes\n    a blocked cell. The function must use the A* algorithm with the Manhattan\n    heuristic to return *one* optimal path.\n\n    Args:\n        grid: Rectangular 2-D list of integers (0 or 1).\n\n    Returns:\n        \u2022 A list of (row, column) tuples that represents a shortest path\n          including the start (0,0) and goal (m-1,n-1) positions.\n        \u2022 -1 if no such path exists.\n    \"\"\"\n    if not grid or grid[0][0] == 1 or grid[-1][-1] == 1:\n        return -1\n\n    m, n = len(grid), len(grid[0])\n    start, goal = (0, 0), (m - 1, n - 1)\n\n    # Directions for moving in the grid: right, down, left, up\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Priority queue for the A* algorithm\n    open_set = []\n    heappush(open_set, (0, start))  # (priority, (row, col))\n\n    # Cost from start to the current node\n    g_cost = {start: 0}\n\n    # For path reconstruction\n    came_from = {}\n\n    while open_set:\n        _, current = heappop(open_set)\n\n        if current == goal:\n            # Reconstruct path\n            path = []\n            while current in came_from:\n                path.append(current)\n                current = came_from[current]\n            path.append(start)\n            path.reverse()\n            return path\n\n        current_row, current_col = current\n\n        for dr, dc in directions:\n            neighbor = (current_row + dr, current_col + dc)\n\n            if 0 <= neighbor[0] < m and 0 <= neighbor[1] < n and grid[neighbor[0]][neighbor[1]] == 0:\n                tentative_g_cost = g_cost[current] + 1\n\n                if neighbor not in g_cost or tentative_g_cost < g_cost[neighbor]:\n                    g_cost[neighbor] = tentative_g_cost\n                    f_cost = tentative_g_cost + manhattan_distance(neighbor, goal)\n                    heappush(open_set, (f_cost, neighbor))\n                    came_from[neighbor] = current\n\n    return -1\n\ndef manhattan_distance(p1: Tuple[int, int], p2: Tuple[int, int]) -> int:\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n```\n\n### Explanation:\n\n1. **Initialization**: \n   - We start by checking if the grid is empty or if the start or goal positions are blocked. If so, we return `-1`.\n   - We initialize the priority queue `open_set` with the start node and its priority (initially 0).\n   - We use a dictionary `g_cost` to store the cost from the start to each node, initialized with the start node having a cost of 0.\n   - `came_from` is used to reconstruct the path once the goal is reached.\n\n2. **A* Algorithm**:\n   - We repeatedly pop the node with the lowest priority from the `open_set`.\n   - If this node is the goal, we reconstruct the path using `came_from`.\n   - For each neighbor of the current node, we calculate the tentative cost to reach it.\n   - If this cost is lower than any previously recorded cost for this neighbor, we update the cost and push the neighbor onto the `open_set` with its priority calculated as the sum of the tentative cost and the Manhattan distance to the goal.\n\n3. **Path Reconstruction**:\n   - If the goal is reached, we backtrack using `came_from` to reconstruct the path from start to goal.\n\n4. **Return**:\n   - If the goal is unreachable, we return `-1`.\n\nThis implementation efficiently finds the shortest path using the A* algorithm with the Manhattan distance heuristic."}
{"task_id": 151, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x: np.ndarray) -> np.ndarray:\n    return 1 / (1 + np.exp(-x))\n\ndef sigmoid_gradient(a: np.ndarray) -> np.ndarray:\n    return a * (1 - a)\n\ndef tanh(x: np.ndarray) -> np.ndarray:\n    return np.tanh(x)\n\ndef tanh_gradient(a: np.ndarray) -> np.ndarray:\n    return 1 - np.square(a)\n\ndef relu(x: np.ndarray) -> np.ndarray:\n    return np.maximum(0, x)\n\ndef relu_gradient(a: np.ndarray) -> np.ndarray:\n    return np.where(a > 0, 1, 0)\n\ndef softmax(x: np.ndarray) -> np.ndarray:\n    e_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n    return e_x / np.sum(e_x, axis=-1, keepdims=True)\n\ndef softmax_gradient(a: np.ndarray) -> np.ndarray:\n    return np.ones_like(a)\n\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    if activation == \"sigmoid\":\n        A = sigmoid(X)\n        grad = sigmoid_gradient(A)\n    elif activation == \"tanh\":\n        A = tanh(X)\n        grad = tanh_gradient(A)\n    elif activation == \"relu\":\n        A = relu(X)\n        grad = relu_gradient(A)\n    elif activation == \"softmax\":\n        A = softmax(X)\n        grad = softmax_gradient(A)\n    else:\n        raise ValueError(f\"Unsupported activation function: {activation}\")\n\n    A_rounded = np.round(A, 4)\n    grad_rounded = np.round(upstream_grad * grad, 4)\n    \n    return A_rounded, grad_rounded\n```\n\n### Explanation:\n\n1. **Activation Functions**:\n   - **Sigmoid**: \\( \\sigma(x) = \\frac{1}{1 + e^{-x}} \\)\n   - **Tanh**: \\( \\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}} \\)\n   - **ReLU**: \\( \\text{ReLU}(x) = \\max(0, x) \\)\n   - **Softmax**: \\( \\text{Softmax}(x_i) = \\frac{e^{x_i}}{\\sum_j e^{x_j}} \\) (computed along the last axis)\n\n2. **Gradient Functions**:\n   - **Sigmoid Gradient**: \\( \\sigma'(x) = \\sigma(x) \\cdot (1 - \\sigma(x)) \\)\n   - **Tanh Gradient**: \\( \\tanh'(x) = 1 - \\tanh^2(x) \\)\n   - **ReLU Gradient**: \\( \\text{ReLU}'(x) = 1 \\) if \\( x > 0 \\), else \\( 0 \\)\n   - **Softmax Gradient**: Returns an array of ones, as explained in the task.\n\n3. **Numerical Stability**:\n   - For `softmax`, subtracting the maximum value from `x` before exponentiation ensures numerical stability.\n\n4. **Rounding**:\n   - Both the activated output and the gradient are rounded to 4 decimal places using `np.round`.\n\n5. **Error Handling**:\n   - Raises a `ValueError` if an unsupported activation function is specified."}
{"task_id": 152, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Check for special cases\n    if y_true.size == 0 or y_pred.size == 0 or y_true.size != y_pred.size:\n        return -1\n    \n    # Calculate the number of correct predictions\n    correct_predictions = np.sum(y_true == y_pred)\n    \n    # Calculate accuracy\n    accuracy = correct_predictions / y_true.size\n    \n    # Return the accuracy rounded to four decimal places\n    return round(accuracy, 4)\n\n# Example usage\ny_true = [1, 0, 2, 2, 1]\ny_pred = [1, 0, 1, 2, 0]\nprint(accuracy_score(y_true, y_pred))  # Output: 0.6\n```\n\nThis function first converts the input lists to NumPy arrays if they aren't already. It then checks for the special cases where the input arrays are empty or have different lengths, returning `-1` in those cases. If the inputs are valid, it calculates the number of correct predictions by comparing the arrays element-wise, computes the accuracy, and returns the result rounded to four decimal places."}
{"task_id": 154, "completion_id": 0, "completion": "To implement the Radial Basis Function (RBF) kernel matrix, we need to compute the pairwise squared Euclidean distances between vectors in two sets, X and Y, and then apply the RBF formula. Here's how you can achieve this using NumPy:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float = 0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    # Ensure X and Y are 2-dimensional\n    X = np.atleast_2d(X)\n    Y = np.atleast_2d(Y)\n    \n    # Compute the squared Euclidean distance between each pair of vectors\n    # Using broadcasting to efficiently compute the squared distances\n    X_norm = np.sum(X**2, axis=1).reshape(-1, 1)\n    Y_norm = np.sum(Y**2, axis=1).reshape(1, -1)\n    squared_distances = X_norm + Y_norm - 2 * np.dot(X, Y.T)\n    \n    # Compute the RBF kernel matrix\n    K = np.exp(-gamma * squared_distances)\n    \n    # Round the results to 6 decimal places\n    K_rounded = np.round(K, 6)\n    \n    # Convert the result to a nested Python list\n    return K_rounded.tolist()\n\n# Example usage:\nX = np.array([[1, 2], [3, 4]])\nY = np.array([[5, 6], [7, 8]])\ngamma = 0.1\nkernel_matrix = rbf_kernel(X, Y, gamma)\nprint(kernel_matrix)\n```\n\n### Explanation:\n1. **Input Handling**: We use `np.atleast_2d` to ensure that both `X` and `Y` are treated as 2-dimensional arrays, even if they are provided as 1-dimensional arrays.\n\n2. **Squared Euclidean Distance Calculation**: \n   - We compute the squared norms of each row in `X` and `Y`.\n   - Using broadcasting, we efficiently compute the squared Euclidean distances between each pair of vectors from `X` and `Y`.\n\n3. **RBF Kernel Calculation**: We apply the RBF formula using the computed squared distances.\n\n4. **Rounding and Conversion**: We round the kernel matrix to 6 decimal places and convert it to a nested Python list using `tolist()`.\n\nThis implementation efficiently computes the RBF kernel matrix using NumPy's array operations and broadcasting, ensuring that the solution is both concise and performant."}
{"task_id": 155, "completion_id": 0, "completion": "To implement the forward pass of the actor network, we need to perform a series of matrix multiplications and apply activation functions as specified in the task. Here's how you can implement this using NumPy:\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it's not already\n    state = np.array(state)\n\n    # First layer: Linear transformation followed by ReLU\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)  # ReLU activation\n\n    # Second layer: Linear transformation followed by ReLU\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)  # ReLU activation\n\n    # Output layer: Linear transformation followed by tanh\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    a3 = np.tanh(z3)  # tanh activation\n\n    # Round the result to 4 decimal places and convert to a list\n    return np.round(a3, 4).tolist()\n\n# Example usage:\n# state = [0.5, -0.2, 0.1]\n# weights = {\n#     'W1': np.random.rand(3, 5),\n#     'b1': np.random.rand(5),\n#     'W2': np.random.rand(5, 4),\n#     'b2': np.random.rand(4),\n#     'W3': np.random.rand(4, 2),\n#     'b3': np.random.rand(2)\n# }\n# action = actor_forward(state, weights)\n# print(action)\n```\n\n### Explanation:\n1. **Input Conversion**: The state is converted to a NumPy array to facilitate matrix operations.\n2. **First Layer**: The input state is transformed using the first weight matrix `W1` and bias `b1`. The ReLU activation function is applied to the result.\n3. **Second Layer**: The output from the first layer is transformed using the second weight matrix `W2` and bias `b2`, followed by another ReLU activation.\n4. **Output Layer**: The output from the second layer is transformed using the third weight matrix `W3` and bias `b3`, followed by a tanh activation to ensure the output is in the range [-1, 1].\n5. **Rounding**: The final action vector is rounded to four decimal places and returned as a list.\n\nThis implementation follows the specified architecture and ensures that the output is correctly formatted."}
{"task_id": 157, "completion_id": 0, "completion": "To implement the `accuracy_score` function, we need to follow the rules outlined in the task description. Here's the complete implementation:\n\n```python\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return \u20111 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or \u20111 according to the rules above.\n    \"\"\"\n    # Check if the containers have different lengths\n    if len(y_true) != len(y_pred):\n        return -1\n    \n    # Check if both containers are empty\n    if len(y_true) == 0 and len(y_pred) == 0:\n        return 0\n    \n    # Calculate the number of matches\n    matches = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)\n    \n    # Calculate accuracy\n    accuracy = matches / len(y_true)\n    \n    # Return the accuracy rounded to 4 decimal places\n    return round(accuracy, 4)\n\n# Example usage:\n# y_true = [1, 0, 1, 1]\n# y_pred = [1, 0, 0, 1]\n# print(accuracy_score(y_true, y_pred))  # Output: 0.75\n```\n\n### Explanation:\n1. **Length Check**: The function first checks if the lengths of `y_true` and `y_pred` are different. If they are, it returns `-1`.\n\n2. **Empty Containers**: If both containers are empty, it returns `0`.\n\n3. **Calculate Matches**: It uses a generator expression to iterate over pairs of elements from `y_true` and `y_pred`, counting how many pairs are equal.\n\n4. **Calculate Accuracy**: The accuracy is calculated as the number of matches divided by the total number of samples (length of `y_true`).\n\n5. **Rounding**: The result is rounded to 4 decimal places using the `round` function.\n\nThis implementation efficiently handles the special cases and computes the accuracy score as required."}
{"task_id": 158, "completion_id": 0, "completion": "To implement the closed-form solution for Ridge Regression, we need to follow the mathematical formulation provided. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef ridge_regression(X: list[list[int | float]],\n                     y: list[int | float],\n                     alpha: float = 1.0,\n                     fit_intercept: bool = True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.  When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    # Convert X and y to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    \n    # If fit_intercept is True, augment X with a column of ones\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    # Compute X^T * X\n    XtX = X.T @ X\n    \n    # Create the regularization matrix A\n    A = alpha * np.eye(X.shape[1])\n    \n    # If fit_intercept is True, set the first diagonal element of A to 0\n    if fit_intercept:\n        A[0, 0] = 0\n    \n    # Compute the closed-form solution for Ridge Regression\n    beta_hat = np.linalg.inv(XtX + A) @ X.T @ y\n    \n    # Round the coefficients to four decimal places\n    beta_hat_rounded = np.round(beta_hat, 4)\n    \n    # Convert the result to a list and return\n    return beta_hat_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4], [5, 6]]\n# y = [1, 2, 3]\n# alpha = 0.5\n# fit_intercept = True\n# print(ridge_regression(X, y, alpha, fit_intercept))\n```\n\n### Explanation:\n\n1. **Data Conversion**: Convert the input lists `X` and `y` into NumPy arrays for efficient matrix operations.\n\n2. **Intercept Handling**: If `fit_intercept` is `True`, augment the feature matrix `X` with a column of ones. This allows the model to learn an intercept term.\n\n3. **Matrix Computation**: Compute the matrix product \\( X^T X \\).\n\n4. **Regularization Matrix**: Create the regularization matrix \\( A \\) as \\( \\alpha I \\). If `fit_intercept` is `True`, set the first diagonal element of \\( A \\) to 0 to ensure the intercept is not regularized.\n\n5. **Closed-Form Solution**: Use the closed-form solution formula to compute the Ridge Regression coefficients.\n\n6. **Rounding**: Round the coefficients to four decimal places before returning them as a list.\n\nThis implementation should work efficiently for the given problem constraints and provide the desired output."}
{"task_id": 159, "completion_id": 0, "completion": "To implement the function `log_gaussian_pdf`, we need to follow the formula provided and use the specified numerical methods for stability. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n    \"\"\"\n    d = x_i.shape[0]\n    \n    # Compute the log determinant of the covariance matrix using slogdet\n    sign, log_det_sigma = np.linalg.slogdet(sigma)\n    if sign <= 0:\n        raise ValueError(\"Covariance matrix must be positive definite.\")\n    \n    # Compute the difference vector (x_i - mu)\n    diff = x_i - mu\n    \n    # Solve the linear system to compute \u03a3\u207b\u00b9(x_i - \u00b5) without explicitly inverting \u03a3\n    inv_sigma_diff = np.linalg.solve(sigma, diff)\n    \n    # Compute the quadratic term (x_i - \u00b5)\u1d40 \u03a3\u207b\u00b9(x_i - \u00b5)\n    quadratic_term = np.dot(diff.T, inv_sigma_diff)\n    \n    # Compute the log probability density\n    log_prob = -0.5 * (d * np.log(2 * np.pi) + log_det_sigma + quadratic_term)\n    \n    # Return the result rounded to four decimal places\n    return round(log_prob, 4)\n```\n\n### Explanation:\n1. **Dimension `d`:** We determine the dimension `d` from the shape of the input vector `x_i`.\n\n2. **Log Determinant:** We use `np.linalg.slogdet` to compute the log determinant of the covariance matrix `\u03a3`. This function returns a sign and the log determinant. We check the sign to ensure the matrix is positive definite.\n\n3. **Difference Vector:** We compute the difference vector `diff = x_i - mu`.\n\n4. **Solve Linear System:** We use `np.linalg.solve` to compute `\u03a3\u207b\u00b9(x_i - \u00b5)` efficiently without explicitly inverting `\u03a3`.\n\n5. **Quadratic Term:** We compute the quadratic term `(x_i - \u00b5)\u1d40 \u03a3\u207b\u00b9(x_i - \u00b5)` using the dot product.\n\n6. **Log Probability Density:** We calculate the log probability density using the formula provided.\n\n7. **Rounding:** Finally, we round the result to four decimal places before returning it."}
{"task_id": 160, "completion_id": 0, "completion": "To implement Lasso regression using coordinate descent, we need to follow the steps outlined in the task description. Here's the complete implementation using NumPy:\n\n```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # Add intercept column\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n    \n    # Initialize weights and intercept\n    w = np.zeros(n + 1)\n    \n    for _ in range(max_iters):\n        # Update intercept if fit_intercept is True\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        \n        for j in range(1, n + 1):\n            # Compute partial residual excluding the j-th feature\n            r_j = y - X @ w + X[:, j] * w[j]\n            \n            # Compute the dot product of x_j and r_j\n            dot_product = np.dot(X[:, j], r_j)\n            \n            # Apply the soft-thresholding operator\n            w_j_new = np.sign(dot_product) * max(abs(dot_product) - lambda_param * m, 0) / np.sum(X[:, j] ** 2)\n            \n            # Update the weight\n            w[j] = w_j_new\n    \n    # Extract weights and bias\n    bias = w[0]\n    weights = w[1:]\n    \n    # Round the results to 4 decimal places\n    weights = np.round(weights, 4).tolist()\n    bias = round(bias, 4)\n    \n    return weights, bias\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(weights, bias)\n```\n\n### Explanation:\n1. **Intercept Handling**: We add a column of ones to `X` if `fit_intercept` is `True`, otherwise a column of zeros. This ensures the intercept is handled separately from the weights.\n2. **Initialization**: All weights, including the intercept, are initialized to zero.\n3. **Coordinate Descent**: For each weight (excluding the intercept), we compute the partial residual and update the weight using the soft-thresholding operator.\n4. **Soft-Thresholding**: This operator is used to apply the L1 penalty, effectively shrinking some weights to zero if the penalty is strong enough.\n5. **Return Values**: The weights and bias are rounded to 4 decimal places before returning.\n\nThis implementation should correctly perform Lasso regression using coordinate descent, adhering to the constraints and requirements specified."}
{"task_id": 161, "completion_id": 0, "completion": "To implement the factorization machine binary prediction function, we need to compute the score for each sample using the given formula and then apply the rule to determine the binary class labels. Here's how you can complete the function:\n\n```python\nimport numpy as np\n\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"Predict binary class labels using a factorization machine model.\"\"\"\n    # Number of samples (m) and number of features (n)\n    m, n = X.shape\n    \n    # Number of latent factors (k)\n    k = V.shape[1]\n    \n    # Initialize the list to store predictions\n    predictions = []\n    \n    # Iterate over each sample\n    for i in range(m):\n        # Extract the feature vector for the current sample\n        x = X[i]\n        \n        # Compute the linear term: w0 + sum(w_i * x_i)\n        linear_term = w0 + np.dot(w, x)\n        \n        # Compute the interaction term using the computational trick\n        interaction_term = 0.5 * np.sum((np.dot(x, V) ** 2) - np.dot(x ** 2, V ** 2))\n        \n        # Calculate the score for the current sample\n        score = linear_term + interaction_term\n        \n        # Determine the label based on the score\n        label = 1 if score >= 0 else -1\n        \n        # Append the label to the predictions list\n        predictions.append(label)\n    \n    return predictions\n```\n\n### Explanation:\n1. **Inputs**:\n   - `X`: A 2-D NumPy array containing samples and features.\n   - `w0`: A scalar representing the global bias.\n   - `w`: A 1-D NumPy array containing linear weights for each feature.\n   - `V`: A 2-D NumPy array containing latent factors for each feature.\n\n2. **Process**:\n   - For each sample, compute the linear term using the dot product of `w` and the sample's feature vector `x`.\n   - Compute the interaction term using the computational trick, which involves calculating the squared dot product of `x` with `V` and subtracting the dot product of squared `x` with squared `V`.\n   - Sum the linear and interaction terms to get the score.\n   - Apply the rule to determine the binary class label based on the score.\n\n3. **Output**:\n   - Return a list of binary class labels (`1` or `-1`) for each sample.\n\nThis function efficiently computes the predictions using the factorization machine model, leveraging the computational trick to reduce complexity."}
{"task_id": 162, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float = 1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    # Ensure the shapes of Y_hat and Y match\n    assert Y_hat.shape == Y.shape, \"Shapes of Y_hat and Y must match.\"\n\n    # Batch size\n    m = Y.shape[0]\n\n    # Compute the cross-entropy loss\n    # Add epsilon to Y_hat to avoid log(0)\n    log_Y_hat = np.log(Y_hat + epsilon)\n    loss = -np.sum(Y * log_Y_hat) / m\n\n    # Compute the gradient\n    gradient = (Y_hat - Y) / m\n\n    # Round the loss and gradient to 4 decimal places\n    loss = round(loss, 4)\n    gradient = np.round(gradient, 4).tolist()\n\n    return loss, gradient\n```\n\n### Explanation:\n1. **Shape Assertion**: The function first checks if the shapes of `Y_hat` and `Y` match using an assertion. If they don't, it raises an `AssertionError`.\n\n2. **Loss Calculation**: The cross-entropy loss is calculated using the formula provided. A small constant `epsilon` is added to `Y_hat` to prevent taking the logarithm of zero, which can cause numerical instability.\n\n3. **Gradient Calculation**: The gradient of the loss with respect to the soft-max output is computed using the formula \\(\\nabla_{\\hat Y} = \\frac{1}{m}(\\hat Y - Y)\\).\n\n4. **Rounding**: Both the loss and the gradient are rounded to four decimal places before returning. The gradient is converted to a nested Python list using `tolist()` for compatibility with the return type specified in the function signature."}
{"task_id": 163, "completion_id": 0, "completion": "To implement Elastic Net regression with polynomial features, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Expand X into a polynomial feature matrix\n    X = np.array(X)\n    y = np.array(y)\n    n_samples = len(X)\n    \n    # Create polynomial features matrix\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    \n    # Step 2: Fit the coefficients using Elastic Net\n    if l1_ratio == 0:\n        # Pure Ridge regression (analytical solution)\n        # Regularization matrix (do not penalize the bias term)\n        reg_matrix = reg_factor * np.eye(degree + 1)\n        reg_matrix[0, 0] = 0  # No regularization on the bias term\n        \n        # Normal equation: (X^T X + \u03bbI)\u03b2 = X^T y\n        beta = np.linalg.inv(X_poly.T @ X_poly + reg_matrix) @ X_poly.T @ y\n    else:\n        # Elastic Net using batch gradient descent\n        beta = np.zeros(degree + 1)\n        \n        for _ in range(n_iterations):\n            # Predictions\n            y_pred = X_poly @ beta\n            \n            # Gradient of the loss function\n            gradient = (2/n_samples) * X_poly.T @ (y_pred - y)\n            \n            # L1 and L2 regularization terms\n            l1_term = reg_factor * l1_ratio * np.sign(beta)\n            l2_term = reg_factor * (1 - l1_ratio) * beta\n            \n            # Do not penalize the bias term\n            l1_term[0] = 0\n            l2_term[0] = 0\n            \n            # Update beta using gradient descent\n            beta -= learning_rate * (gradient + l1_term + l2_term)\n    \n    # Step 3: Return predictions\n    predictions = X_poly @ beta\n    return list(np.round(predictions, 4))\n\n# Example usage:\nX = [1.0, 2.0, 3.0, 4.0]\ny = [2.0, 3.0, 5.0, 7.0]\ndegree = 2\nreg_factor = 0.1\nl1_ratio = 0.5\nlearning_rate = 0.01\nn_iterations = 1000\n\npredictions = elastic_net_regression(X, y, degree, reg_factor, l1_ratio, learning_rate, n_iterations)\nprint(predictions)\n```\n\n### Explanation:\n1. **Polynomial Feature Expansion**: We use `np.vander` to create a Vandermonde matrix, which represents the polynomial features up to the specified degree.\n\n2. **Ridge Regression (Analytical Solution)**: When `l1_ratio` is 0, we solve the problem using the normal equations with a regularization matrix that does not penalize the bias term.\n\n3. **Elastic Net (Gradient Descent)**: For `l1_ratio > 0`, we use batch gradient descent to update the coefficients. The L1 term uses the sub-gradient `sign(beta)` for non-zero coefficients.\n\n4. **Predictions**: We compute the predictions using the fitted coefficients and return them rounded to 4 decimal places."}
{"task_id": 164, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Computes the binary classification log-loss (cross-entropy loss) for given ground-truth labels and predicted probabilities.\n    \n    Parameters:\n    actual (list or np.array): Ground-truth labels (0 or 1).\n    predicted (list or np.array): Predicted probabilities (real numbers in the interval [0, 1]).\n    \n    Returns:\n    float: The average log-loss rounded to six decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Clip predicted probabilities to avoid log(0) or log(1)\n    epsilon = 1e-15\n    predicted = np.clip(predicted, epsilon, 1 - epsilon)\n    \n    # Calculate log-loss\n    log_loss = -np.mean(actual * np.log(predicted) + (1 - actual) * np.log(1 - predicted))\n    \n    # Return the log-loss rounded to six decimal places\n    return round(log_loss, 6)\n\n# Example usage:\n# actual = [0, 1, 0, 1]\n# predicted = [0.1, 0.9, 0.2, 0.8]\n# print(compute_log_loss(actual, predicted))  # Output should be the log-loss value rounded to six decimal places\n```\n\nThis function calculates the binary classification log-loss by first ensuring that the predicted probabilities are clipped to avoid undefined logarithmic operations. It then computes the log-loss using the formula provided and returns the result rounded to six decimal places."}
{"task_id": 165, "completion_id": 0, "completion": "To implement the function that computes the normalized Hamming distance, we need to follow the given requirements. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    # Check if the lengths are different\n    if x.shape[0] != y.shape[0]:\n        return -1\n    \n    # Calculate the Hamming distance\n    differences = np.sum(x != y)\n    normalized_distance = differences / x.shape[0]\n    \n    # Return the distance rounded to 4 decimal places\n    return round(normalized_distance, 4)\n\n# Example usage:\n# x = [1, 2, 3, 4]\n# y = [1, 2, 0, 4]\n# print(hamming_distance(x, y))  # Output: 0.25\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts both lists and NumPy arrays. If the inputs are lists, they are converted to NumPy arrays for easier element-wise comparison.\n\n2. **Length Check**: The function first checks if the lengths of the two vectors are different. If they are, it returns `-1`.\n\n3. **Hamming Distance Calculation**: Using NumPy, we compute the number of differing elements with `np.sum(x != y)`. This gives the count of positions where the elements differ.\n\n4. **Normalization**: The Hamming distance is normalized by dividing the number of differing elements by the total number of elements.\n\n5. **Rounding**: The result is rounded to 4 decimal places before returning.\n\nThis implementation efficiently handles both list and NumPy array inputs and adheres to the specified requirements."}
{"task_id": 166, "completion_id": 0, "completion": "To implement the Perceptron binary classifier as described, we need to follow the algorithm outline provided. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int = 1000) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    # Initialize weights and bias\n    n_features = X_train.shape[1]\n    w = np.zeros(n_features)\n    b = 0\n\n    # Training phase\n    for _ in range(max_iter):\n        errors = 0\n        for x_i, y_i in zip(X_train, y_train):\n            # Compute the signed margin\n            m = y_i * (np.dot(w, x_i) + b)\n            # Update if misclassified\n            if m <= 0:\n                w += y_i * x_i\n                b += y_i\n                errors += 1\n        # Stop early if no errors\n        if errors == 0:\n            break\n\n    # Prediction phase\n    raw_scores = np.dot(X_test, w) + b\n    predictions = np.sign(raw_scores)\n    # Convert 0 predictions to +1\n    predictions[predictions == 0] = 1\n\n    return predictions.astype(int).tolist()\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing the weight vector `w` and the bias `b` to zero. The weight vector has the same number of elements as there are features in the training data.\n\n2. **Training Loop**: We iterate over the training data for a maximum of `max_iter` times. For each sample, we calculate the signed margin `m`. If `m` is less than or equal to zero, the sample is misclassified, and we update the weights and bias accordingly. We also keep track of the number of errors.\n\n3. **Early Stopping**: If a complete pass over the training data results in zero errors, the algorithm has converged, and we stop early.\n\n4. **Prediction**: After training, we compute the raw scores for the test samples using the learned weights and bias. We then determine the sign of these scores to make predictions. If a score is exactly zero, we treat the prediction as +1.\n\n5. **Return**: Finally, we return the predictions as a list of integers, ensuring all elements are either +1 or -1."}
{"task_id": 167, "completion_id": 0, "completion": "To implement the Binary Cross Entropy (BCE) loss and its gradient, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef binary_cross_entropy(y_hat, y, epsilon: float = 1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    # Step 1: Clip y_hat to avoid log(0)\n    y_hat_clipped = np.clip(y_hat, epsilon, 1 - epsilon)\n    \n    # Step 2: Compute the mean BCE loss\n    m = len(y)\n    loss = -np.sum(y * np.log(y_hat_clipped) + (1 - y) * np.log(1 - y_hat_clipped)) / m\n    \n    # Step 3: Compute the gradient of the loss with respect to y_hat\n    gradient = (y_hat_clipped - y) / m\n    \n    # Step 4: Round the loss and gradient to 4 decimal places\n    loss_rounded = round(loss, 4)\n    gradient_rounded = [round(g, 4) for g in gradient]\n    \n    return loss_rounded, gradient_rounded\n\n# Example usage:\n# y_hat = np.array([0.9, 0.2, 0.7])\n# y = np.array([1, 0, 1])\n# loss, gradient = binary_cross_entropy(y_hat, y)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", gradient)\n```\n\n### Explanation:\n1. **Clipping `y_hat`:** We use `np.clip` to ensure that the predicted probabilities are within the range `[\u03b5, 1 - \u03b5]`. This prevents the logarithm from encountering zero, which would result in undefined behavior.\n\n2. **Computing the BCE Loss:** The loss is calculated using the formula provided, which involves the negative sum of the log probabilities weighted by the true labels and their complements. We divide by `m` to get the mean loss.\n\n3. **Computing the Gradient:** The gradient of the loss with respect to `y_hat` is calculated as `(y_hat - y) / m`, which gives the direction and magnitude of change needed to minimize the loss.\n\n4. **Rounding:** Both the loss and each element of the gradient are rounded to four decimal places to meet the output constraints.\n\nThis implementation should work correctly for valid inputs, assuming `y_hat` contains probabilities and `y` contains binary labels."}
{"task_id": 168, "completion_id": 0, "completion": "To implement a Gaussian Naive Bayes classifier from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"Gaussian Naive Bayes classifier.\n\n    You must complete this function so that it learns the parameters of a\n    Gaussian Naive Bayes model from the training data (`X_train`, `y_train`)\n    and returns a list with the predicted class label for every sample in\n    `X_test`.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        2-D list containing the training feature vectors.\n    y_train : list[int]\n        1-D list with the class label of every training sample.\n    X_test : list[list[float]]\n        2-D list with the feature vectors that must be classified.\n\n    Returns\n    -------\n    list[int]\n        A list with the predicted class label for every vector in `X_test`.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Get unique classes\n    classes = np.unique(y_train)\n    \n    # Initialize dictionaries to store mean, variance, and prior probabilities\n    mean = {}\n    variance = {}\n    prior = {}\n    \n    # Calculate mean, variance, and prior for each class\n    for c in classes:\n        X_c = X_train[y_train == c]\n        mean[c] = np.mean(X_c, axis=0)\n        variance[c] = np.var(X_c, axis=0) + 1e-6  # Add a small value to avoid zero variance\n        prior[c] = X_c.shape[0] / X_train.shape[0]\n    \n    # Function to calculate Gaussian probability density\n    def gaussian_density(x, mean, var):\n        exponent = np.exp(-((x - mean) ** 2) / (2 * var))\n        return (1 / np.sqrt(2 * np.pi * var)) * exponent\n    \n    # Predict class for each sample in X_test\n    predictions = []\n    for x in X_test:\n        posteriors = []\n        for c in classes:\n            # Calculate log P(c) + \u03a3\u1d62 log \ud835\udca9(x\u1d62 ; \u03bc_{ci}, \u03c3\u00b2_{ci})\n            log_prior = np.log(prior[c])\n            log_likelihood = np.sum(np.log(gaussian_density(x, mean[c], variance[c])))\n            posterior = log_prior + log_likelihood\n            posteriors.append(posterior)\n        \n        # Choose the class with the highest posterior probability\n        predictions.append(classes[np.argmax(posteriors)])\n    \n    return predictions\n\n# Example usage\nX_train = [[1.0, 2.0], [1.1, 1.9], [0.9, 2.1], [1.2, 2.0], [10.0, 10.0], [10.1, 9.9], [9.9, 10.1]]\ny_train = [0, 0, 0, 0, 1, 1, 1]\nX_test = [[1.0, 2.0], [10.0, 10.0]]\nprint(gaussian_naive_bayes(X_train, y_train, X_test))  # Output: [0, 1]\n```\n\n### Explanation:\n1. **Data Preparation**: Convert the input lists to NumPy arrays for easier manipulation.\n2. **Parameter Calculation**: For each class, calculate the mean and variance of each feature, and compute the prior probability of the class.\n3. **Gaussian Density Function**: Define a function to compute the Gaussian probability density for a given feature value, mean, and variance.\n4. **Prediction**: For each test sample, compute the log-posterior probability for each class and select the class with the highest probability.\n5. **Return Predictions**: Return the predicted class labels for the test samples."}
{"task_id": 169, "completion_id": 0, "completion": "To implement the `generate_window` function, we need to handle different types of window functions as specified. Each window type has its own mathematical formula, and we need to ensure that the function handles special cases and errors appropriately. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if N == 1:\n        return [1.0]\n    \n    n = np.arange(N)\n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = (a0 \n             - a1 * np.cos(2 * np.pi * n / (N - 1)) \n             + a2 * np.cos(4 * np.pi * n / (N - 1)) \n             - a3 * np.cos(6 * np.pi * n / (N - 1)))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window.\")\n        w = np.zeros(N)\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(\"Unknown window type.\")\n    \n    return [round(float(val), 4) for val in w]\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, coefficients=[0.5, 0.5]))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `N` is a positive integer. If `N` is 1, it returns `[1.0]` as per the conventional definition.\n\n2. **Window Calculations**:\n   - **Hamming Window**: Uses the formula `w[n] = 0.54 \u2212 0.46 cos(2\u03c0n/(N\u22121))`.\n   - **Hann Window**: Uses the formula `w[n] = 0.5 \u2212 0.5 cos(2\u03c0n/(N\u22121))`.\n   - **Blackman-Harris Window**: Uses the given coefficients to compute the window.\n   - **Generalized Cosine Window**: Uses the provided coefficients to compute the window. If coefficients are not provided, it raises a `ValueError`.\n\n3. **Rounding**: Each coefficient is rounded to 4 decimal places before returning the list.\n\n4. **Error Handling**: Raises a `ValueError` for unknown window types or if coefficients are not provided for the generalized cosine window."}
{"task_id": 171, "completion_id": 0, "completion": "To implement a binary Logistic Regression classifier using mini-batch Gradient Descent, we need to follow several steps. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Add intercept term (bias) to the data\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n\n    # Handle the special case where all training labels are identical\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n\n    # Map labels to {0, 1}\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    reverse_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n\n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Training using mini-batch gradient descent\n    for epoch in range(epochs):\n        # Shuffle the data\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n\n        # Mini-batch gradient descent\n        for start in range(0, X_train.shape[0], batch_size):\n            end = start + batch_size\n            X_batch = X_train_shuffled[start:end]\n            y_batch = y_train_shuffled[start:end]\n\n            # Predictions\n            predictions = sigmoid(np.dot(X_batch, weights))\n\n            # Gradient calculation\n            gradient = np.dot(X_batch.T, (predictions - y_batch)) / len(y_batch)\n\n            # Update weights\n            weights -= learning_rate * gradient\n\n    # Predict on test set\n    test_predictions = sigmoid(np.dot(X_test, weights))\n    test_labels_mapped = (test_predictions >= 0.5).astype(int)\n    test_labels = [reverse_label_map[label] for label in test_labels_mapped]\n\n    return test_labels\n```\n\n### Explanation:\n\n1. **Data Preparation**: Convert input lists to numpy arrays for easier manipulation. Add an intercept term (bias) to both training and test data.\n\n2. **Label Mapping**: Map the original labels to `{0, 1}` for internal processing and create a reverse mapping to convert predictions back to the original labels.\n\n3. **Special Case Handling**: If all training labels are identical, skip training and return the unique label for all test samples.\n\n4. **Weight Initialization**: Initialize the weight vector to zeros.\n\n5. **Sigmoid Function**: Define the sigmoid function to map linear combinations of inputs to probabilities.\n\n6. **Mini-Batch Gradient Descent**: Shuffle the training data and perform mini-batch updates to the weights using the gradient of the negative log-likelihood loss.\n\n7. **Prediction**: Use the trained weights to predict probabilities on the test set, apply a threshold of 0.5, and map the binary predictions back to the original labels.\n\nThis implementation should work well for linearly separable data and simple binary classification tasks."}
{"task_id": 172, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    # Convert input to a NumPy array for uniform processing\n    z_array = np.array(z, dtype=float)\n    \n    # Compute the tanh of the input\n    tanh_z = np.tanh(z_array)\n    \n    # Compute the derivative using the formula 1 - tanh(z)**2\n    derivative = 1 - tanh_z**2\n    \n    # Round the result to 4 decimal places\n    derivative_rounded = np.round(derivative, 4)\n    \n    # Check if the input was a scalar\n    if np.isscalar(z):\n        return derivative_rounded.item()  # Return as a float\n    else:\n        return derivative_rounded.tolist()  # Return as a list\n\n# Example usage:\n# print(tanh_grad(0.5))  # Scalar input\n# print(tanh_grad([0.5, 1.0, -1.5]))  # List input\n# print(tanh_grad(np.array([0.5, 1.0, -1.5])))  # NumPy array input\n```\n\nThis function handles scalar, list, and NumPy array inputs, computes the derivative of the tanh function element-wise, rounds the results to four decimal places, and returns the appropriate type based on the input."}
{"task_id": 173, "completion_id": 0, "completion": "To implement the `alphabetical_distance` function, we need to follow the rules outlined in the task description. Here's the complete implementation:\n\n```python\ndef alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    # Check if the strings have the same length\n    if len(candidate) != len(target):\n        return -1\n    \n    # Calculate the alphabetical distance\n    distance = 0\n    for c_char, t_char in zip(candidate, target):\n        distance += abs(ord(c_char) - ord(t_char))\n    \n    return distance\n\n# Example usage:\nprint(alphabetical_distance(\"HELLO\", \"WORLD\"))  # Output: 37\n```\n\n### Explanation:\n1. **Length Check**: The function first checks if the lengths of the `candidate` and `target` strings are equal. If not, it returns `-1` as specified.\n\n2. **Distance Calculation**: If the lengths are equal, the function calculates the alphabetical distance by iterating over pairs of characters from both strings using `zip`. For each pair, it computes the absolute difference between their ASCII values using `ord()` and adds this difference to a running total.\n\n3. **Return Value**: Finally, the function returns the computed distance. If the strings are empty, the loop doesn't execute, and the function correctly returns `0` as the distance."}
{"task_id": 174, "completion_id": 0, "completion": "To implement the function `gan_discriminator_metrics`, we need to calculate the categorical cross-entropy loss and the classification accuracy for a given mini-batch of predictions and labels. Here's how you can do it:\n\n1. **Categorical Cross-Entropy Loss**: This is calculated using the formula:\n   \\[\n   \\text{loss} = -\\frac{1}{N} \\sum_{i=1}^{N} \\sum_{j=1}^{C} y_{ij} \\log(p_{ij})\n   \\]\n   where \\(N\\) is the number of samples, \\(C\\) is the number of classes, \\(y_{ij}\\) is the true label (0 or 1), and \\(p_{ij}\\) is the predicted probability for class \\(j\\).\n\n2. **Accuracy**: This is calculated by comparing the predicted class (the one with the highest probability) with the true class for each sample. The accuracy is the fraction of correct predictions.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    # Ensure predictions are not exactly 0 or 1 to avoid log(0)\n    epsilon = 1e-15\n    predictions = np.clip(predictions, epsilon, 1 - epsilon)\n    \n    # Calculate categorical cross-entropy loss\n    loss = -np.sum(labels * np.log(predictions)) / labels.shape[0]\n    \n    # Calculate accuracy\n    predicted_classes = np.argmax(predictions, axis=1)\n    true_classes = np.argmax(labels, axis=1)\n    accuracy = np.mean(predicted_classes == true_classes)\n    \n    # Round the results to 4 decimal places\n    return round(loss, 4), round(accuracy, 4)\n\n# Example usage:\n# predictions = np.array([[0.9, 0.1], [0.2, 0.8]])\n# labels = np.array([[1, 0], [0, 1]])\n# print(gan_discriminator_metrics(predictions, labels))\n```\n\n### Explanation:\n- **Clipping**: We clip the predictions to avoid taking the logarithm of zero, which would result in an undefined value.\n- **Loss Calculation**: We compute the negative log likelihood for each class and average it over all samples.\n- **Accuracy Calculation**: We determine the predicted class by finding the index of the maximum probability for each sample and compare it to the true class.\n- **Rounding**: Finally, we round the loss and accuracy to four decimal places as required."}
{"task_id": 175, "completion_id": 0, "completion": "To implement the L2 regularization penalty, we need to compute the sum of the squares of the weights, multiply it by the regularization strength \\( C \\), and then round the result to four decimal places. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    # Convert weights to a numpy array if it's a list\n    if isinstance(weights, list):\n        weights = np.array(weights)\n    \n    # Compute the L2 penalty\n    penalty = C * np.sum(weights ** 2)\n    \n    # Return the penalty rounded to 4 decimal places\n    return round(penalty, 4)\n\n# Example usage:\n# weights = [1.0, 2.0, 3.0]\n# C = 0.1\n# print(l2_penalty(weights, C))  # Output: 1.4\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts weights as either a list or a NumPy array. If the input is a list, it is converted to a NumPy array for easier mathematical operations.\n\n2. **Penalty Calculation**: The L2 penalty is calculated by squaring each element in the weights array, summing these squares, and then multiplying by the regularization strength \\( C \\).\n\n3. **Rounding**: The result is rounded to four decimal places using Python's built-in `round` function.\n\n4. **Edge Cases**: The function handles empty or all-zero weight vectors by returning a penalty of 0, as the sum of squares in these cases is 0.\n\nThis implementation is efficient and leverages NumPy's capabilities for numerical operations, ensuring that it works well for both small and large weight vectors."}
{"task_id": 176, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps from scratch, we need to follow the steps outlined in the task description. Here's a complete implementation:\n\n```python\nimport numpy as np\n\nclass DecisionStump:\n    def __init__(self):\n        self.feature_index = None\n        self.threshold = None\n        self.polarity = 1\n        self.alpha = None\n\n    def predict(self, X):\n        n_samples = X.shape[0]\n        predictions = np.ones(n_samples)\n        if self.polarity == 1:\n            predictions[X[:, self.feature_index] < self.threshold] = -1\n        else:\n            predictions[X[:, self.feature_index] >= self.threshold] = -1\n        return predictions\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, (1 / n_samples))\n    y_train = np.where(y_train == 0, -1, 1)  # Convert labels to {-1, 1}\n\n    stumps = []\n    for _ in range(n_estimators):\n        stump = DecisionStump()\n        min_error = float('inf')\n\n        for feature_index in range(n_features):\n            feature_values = np.sort(np.unique(X_train[:, feature_index]))\n            thresholds = (feature_values[:-1] + feature_values[1:]) / 2.0\n\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n\n                    misclassified = weights[y_train != predictions]\n                    error = np.sum(misclassified)\n\n                    if error < min_error:\n                        min_error = error\n                        stump.feature_index = feature_index\n                        stump.threshold = threshold\n                        stump.polarity = polarity\n\n        if min_error == 0:\n            break\n\n        stump.alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n        predictions = stump.predict(X_train)\n        weights *= np.exp(-stump.alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        stumps.append(stump)\n\n    # Aggregate predictions\n    y_pred = np.zeros(X_test.shape[0])\n    for stump in stumps:\n        predictions = stump.predict(X_test)\n        y_pred += stump.alpha * predictions\n\n    y_pred = np.sign(y_pred)\n    y_pred = np.where(y_pred == -1, 0, 1)\n\n    return y_pred.tolist()\n```\n\n### Explanation:\n\n1. **Decision Stump Class**: This class represents a weak learner. It stores the feature index, threshold, polarity, and alpha (weight of the stump).\n\n2. **Training**: For each estimator, we iterate over all features and possible thresholds to find the best decision stump with the smallest weighted error. We update the weights of the samples based on the performance of the stump.\n\n3. **Early Stopping**: If a perfect stump is found (error = 0), the training stops early.\n\n4. **Prediction**: For the test set, we aggregate the predictions of all stumps, weighted by their alpha values, and convert the aggregated sign back to class labels {0, 1}.\n\nThis implementation follows the AdaBoost algorithm's standard procedure and should work efficiently for small to medium-sized datasets."}
{"task_id": 177, "completion_id": 0, "completion": "To implement the `tanh` function as described, we need to handle different types of inputs: scalars, lists, and NumPy arrays. We'll compute the hyperbolic tangent using the formula provided and ensure that the results are rounded to four decimal places. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import Union\n\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to 4 decimal places.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n    \"\"\"\n    def compute_tanh(value):\n        \"\"\"Compute tanh for a single value.\"\"\"\n        return round((np.exp(value) - np.exp(-value)) / (np.exp(value) + np.exp(-value)), 4)\n\n    if isinstance(z, (int, float)):\n        # If z is a scalar, compute tanh and return as float\n        return compute_tanh(z)\n    else:\n        # If z is a list or np.ndarray, convert to np.ndarray for element-wise operations\n        z_array = np.array(z)\n        # Compute tanh for each element\n        tanh_result = np.vectorize(compute_tanh)(z_array)\n        # Convert result back to list\n        return tanh_result.tolist()\n\n# Example usage:\nprint(tanh(0.5))  # Scalar input\nprint(tanh([0.5, -1.0, 2.0]))  # List input\nprint(tanh(np.array([[0.5, -1.0], [2.0, 3.0]])))  # NumPy array input\n```\n\n### Explanation:\n1. **Scalar Input**: If the input is a scalar (either `int` or `float`), we directly compute the tanh using the formula and return the result rounded to four decimal places.\n\n2. **List or NumPy Array Input**: \n   - Convert the input to a NumPy array to facilitate element-wise operations.\n   - Use `np.vectorize` to apply the `compute_tanh` function to each element of the array.\n   - Convert the resulting NumPy array back to a Python list using `.tolist()`.\n\nThis implementation ensures that the function handles different input types correctly and returns results rounded to four decimal places."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Check for invalid input\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # Initialize random number generator\n    rng = np.random.default_rng(seed)\n\n    # PSO parameters\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n\n    # Initialize particles\n    positions = rng.uniform(low=-1.0, high=1.0, size=(num_particles, n_dims))\n    velocities = rng.uniform(low=-0.1, high=0.1, size=(num_particles, n_dims))\n    personal_best_positions = np.copy(positions)\n    personal_best_values = np.sum(personal_best_positions**2, axis=1)\n\n    # Initialize global best\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n\n    # PSO main loop\n    for _ in range(num_iterations):\n        # Update velocities and positions\n        for i in range(num_particles):\n            r1 = rng.uniform(0, 1, n_dims)\n            r2 = rng.uniform(0, 1, n_dims)\n\n            velocities[i] = (w * velocities[i] +\n                             c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                             c2 * r2 * (global_best_position - positions[i]))\n\n            positions[i] = np.clip(positions[i] + velocities[i], -1.0, 1.0)\n\n            # Evaluate new position\n            current_value = np.sum(positions[i]**2)\n\n            # Update personal best\n            if current_value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < global_best_value:\n                    global_best_position = positions[i]\n                    global_best_value = current_value\n\n    return round(global_best_value, 4)\n```\n\nThis implementation of Particle Swarm Optimization (PSO) is designed to minimize the Sphere function. It initializes a swarm of particles with random positions and velocities, updates their velocities and positions iteratively, and tracks the best-known positions both personally and globally. The function returns the best value found, rounded to four decimal places, or -1 if any input is invalid."}
{"task_id": 179, "completion_id": 0, "completion": "To implement the `tokenize_chars` function, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport re\nimport string\n\ndef tokenize_chars(line: str, lowercase: bool = True, filter_punctuation: bool = True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n\n    # Convert to lower-case if required\n    if lowercase:\n        line = line.lower()\n\n    # Remove punctuation if required\n    if filter_punctuation:\n        line = line.translate(str.maketrans('', '', string.punctuation))\n\n    # Collapse consecutive spaces into a single space and strip leading/trailing spaces\n    line = re.sub(r'\\s+', ' ', line).strip()\n\n    # Return the list of characters\n    return list(line) if line else []\n\n# Example usage:\ntext = \"Hello, World!  This is a test.\"\ntokens = tokenize_chars(text)\nprint(tokens)\n```\n\n### Explanation:\n\n1. **Check for `None`:** If the input `line` is `None`, we immediately return an empty list.\n\n2. **Lowercase Conversion:** If `lowercase` is `True`, we convert the entire string to lowercase using `line.lower()`.\n\n3. **Punctuation Removal:** If `filter_punctuation` is `True`, we remove all standard ASCII punctuation using `str.translate()` with a translation table created by `str.maketrans('', '', string.punctuation)`.\n\n4. **Space Normalization:** We use a regular expression `re.sub(r'\\s+', ' ', line)` to replace all runs of consecutive whitespace with a single space. We then use `strip()` to remove any leading or trailing spaces.\n\n5. **Character Tokenization:** Finally, we convert the processed string into a list of characters using `list(line)`. If the string is empty after preprocessing, we return an empty list.\n\nThis function should meet all the requirements specified in the task description."}
{"task_id": 180, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (k-NN) algorithm as described, we need to calculate the Euclidean distance between test samples and training samples, select the k nearest neighbors, and then perform either classification or regression based on the task type. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n    \n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    \n    predictions = []\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [euclidean_distance(test_point, train_point) for train_point in X_train]\n        \n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels/values of the k nearest neighbors\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        \n        if task == \"classification\":\n            # Perform majority voting\n            label_counts = Counter(nearest_labels)\n            # Get the most common label, with tie-breaking by smallest label\n            most_common_label = min(label_counts.items(), key=lambda x: (-x[1], x[0]))[0]\n            predictions.append(most_common_label)\n        \n        elif task == \"regression\":\n            # Calculate the mean of the nearest labels/values\n            mean_value = np.mean(nearest_labels)\n            # Round to 4 decimal places\n            predictions.append(round(mean_value, 4))\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Euclidean Distance Calculation**: The function `euclidean_distance` computes the Euclidean distance between two points.\n\n2. **Handling k**: If `k` is 0 or greater than the number of training samples, we use all training samples.\n\n3. **Distance Calculation**: For each test sample, we calculate the distance to all training samples.\n\n4. **Nearest Neighbors Selection**: We sort the distances and select the indices of the k smallest distances.\n\n5. **Classification**: We use `Counter` to count the occurrences of each label among the k nearest neighbors and select the most common label, resolving ties by choosing the smallest label.\n\n6. **Regression**: We compute the mean of the k nearest neighbors' target values and round it to 4 decimal places.\n\nThis implementation should work correctly for both classification and regression tasks as specified."}
{"task_id": 181, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (kNN) algorithm from scratch, we need to calculate the Euclidean distance between each test sample and all training samples, find the k closest neighbors, and then make predictions based on those neighbors. Here's how you can implement this:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n\ndef knn_predict(\n    X_train: list[list[float]],\n    y_train: list,\n    X_test: list[list[float]],\n    k: int = 5,\n    problem: str = \"classify\",\n) -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to *X_train*.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type.  Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in *X_test*.\n    \"\"\"\n    predictions = []\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [euclidean_distance(test_point, train_point) for train_point in X_train]\n        \n        # Get indices of the k nearest neighbors\n        k_nearest_indices = np.argsort(distances)[:min(k, len(X_train))]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n        \n        if problem == 'classify':\n            # Use majority vote for classification\n            label_counts = Counter(k_nearest_labels)\n            # Sort labels by count (descending) and then by label (ascending)\n            sorted_labels = sorted(label_counts.items(), key=lambda x: (-x[1], x[0]))\n            # Choose the label with the highest count, smallest in case of tie\n            predictions.append(sorted_labels[0][0])\n        \n        elif problem == 'regress':\n            # Use mean for regression\n            mean_value = np.mean(k_nearest_labels)\n            predictions.append(round(mean_value, 4))\n    \n    return predictions\n```\n\n### Explanation:\n1. **Euclidean Distance Calculation**: The `euclidean_distance` function computes the distance between two points using the Euclidean formula.\n\n2. **Distance Calculation**: For each test point, we calculate the distance to all training points.\n\n3. **Finding Nearest Neighbors**: We sort the distances and select the indices of the k smallest distances.\n\n4. **Classification**: For classification, we use a majority vote among the k nearest neighbors. In case of a tie, we sort the labels and choose the smallest one.\n\n5. **Regression**: For regression, we compute the mean of the target values of the k nearest neighbors and round it to 4 decimal places.\n\nThis implementation handles both classification and regression tasks using the k-Nearest Neighbors algorithm."}
{"task_id": 182, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"\n    Computes the polynomial kernel matrix between two datasets X and Y.\n    \n    Parameters:\n    X (list or np.ndarray): A 2-D list or NumPy array of shape (n, p).\n    Y (list or np.ndarray): A 2-D list or NumPy array of shape (m, p).\n    degree (int): The degree of the polynomial kernel. Must be a positive integer (default is 2).\n    \n    Returns:\n    list: A nested Python list representing the kernel matrix, with each element rounded to four decimal places.\n    Returns -1 if the inputs are invalid.\n    \"\"\"\n    \n    # Convert inputs to NumPy arrays if they are lists\n    if isinstance(X, list):\n        X = np.array(X)\n    if isinstance(Y, list):\n        Y = np.array(Y)\n    \n    # Validate inputs\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if not isinstance(degree, int) or degree < 1:\n        return -1\n    \n    # Compute the polynomial kernel matrix\n    kernel_matrix = (X @ Y.T) ** degree\n    \n    # Round each element to four decimal places\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n    \n    # Convert the result to a plain nested Python list\n    return kernel_matrix_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# degree = 2\n# print(polynomial_kernel(X, Y, degree))\n```\n\nThis function first checks if the inputs are valid, ensuring they are two-dimensional and have matching numbers of features. It also checks that the degree is a positive integer. If any of these conditions are not met, it returns `-1`. Otherwise, it computes the polynomial kernel matrix, rounds each element to four decimal places, and returns the result as a nested Python list."}
{"task_id": 183, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    # Determine the fan_in based on the shape of the weight tensor\n    if len(weight_shape) == 2:\n        # Dense layer: fan_in is the first dimension\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        # 2-D convolutional layer: fan_in is the product of the first three dimensions\n        fW, fH, in_channels, _ = weight_shape\n        fan_in = fW * fH * in_channels\n    else:\n        raise ValueError(\"Unsupported weight shape. Must be of length 2 or 4.\")\n\n    # Calculate the limit for the uniform distribution\n    limit = np.sqrt(6 / fan_in)\n\n    # Generate the weights using the uniform distribution\n    weights = np.random.uniform(-limit, limit, size=weight_shape)\n\n    return weights\n\n# Example usage with a fixed seed for reproducibility\nif __name__ == \"__main__\":\n    np.random.seed(42)\n    weights = he_uniform((2, 2))\n    print(np.round(weights, 4))\n```\n\n### Explanation:\n1. **Importing NumPy**: We start by importing the NumPy library, which is essential for numerical operations and random sampling.\n\n2. **Function Definition**: The function `he_uniform` is defined to take a `weight_shape` parameter, which can be either a tuple or a list.\n\n3. **Fan-in Calculation**:\n   - For a dense layer (2D shape), `fan_in` is simply the first dimension of the shape.\n   - For a 2-D convolutional layer (4D shape), `fan_in` is calculated as the product of the filter width (`fW`), filter height (`fH`), and the number of input channels (`in_channels`).\n\n4. **Limit Calculation**: The limit for the uniform distribution is calculated using the formula `sqrt(6 / fan_in)`.\n\n5. **Weight Initialization**: The weights are initialized using `np.random.uniform`, which samples values uniformly from the interval `[\u2212limit, limit]`.\n\n6. **Return Statement**: The function returns the initialized weights as a NumPy ndarray.\n\n7. **Example Usage**: An example is provided to demonstrate the function's usage with a fixed random seed for reproducibility."}
{"task_id": 184, "completion_id": 0, "completion": "To implement a binary decision-tree classifier using the CART algorithm from scratch, we need to follow the steps outlined in your task description. Here's a complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    m = len(y)\n    if m == 0:\n        return 0\n    counts = np.bincount(y)\n    probabilities = counts / m\n    return 1 - np.sum(probabilities ** 2)\n\ndef majority_class(y):\n    \"\"\"Return the majority class label.\"\"\"\n    return Counter(y).most_common(1)[0][0]\n\ndef best_split(X, y):\n    \"\"\"Find the best feature and threshold to split on.\"\"\"\n    n_samples, n_features = X.shape\n    best_gini_gain = 0\n    best_feature = None\n    best_threshold = None\n    parent_gini = gini_impurity(y)\n    \n    for feature in range(n_features):\n        sorted_indices = np.argsort(X[:, feature])\n        X_sorted, y_sorted = X[sorted_indices], y[sorted_indices]\n        \n        for i in range(1, n_samples):\n            if X_sorted[i, feature] == X_sorted[i - 1, feature]:\n                continue\n            \n            threshold = (X_sorted[i, feature] + X_sorted[i - 1, feature]) / 2\n            left_indices = X_sorted[:, feature] <= threshold\n            right_indices = X_sorted[:, feature] > threshold\n            \n            y_left, y_right = y_sorted[left_indices], y_sorted[right_indices]\n            gini_left = gini_impurity(y_left)\n            gini_right = gini_impurity(y_right)\n            \n            weighted_gini = (len(y_left) * gini_left + len(y_right) * gini_right) / n_samples\n            gini_gain = parent_gini - weighted_gini\n            \n            if gini_gain > best_gini_gain:\n                best_gini_gain = gini_gain\n                best_feature = feature\n                best_threshold = threshold\n    \n    return best_feature, best_threshold, best_gini_gain\n\nclass DecisionTreeNode:\n    def __init__(self, depth=0, max_depth=None):\n        self.depth = depth\n        self.max_depth = max_depth\n        self.feature = None\n        self.threshold = None\n        self.left = None\n        self.right = None\n        self.label = None\n\n    def fit(self, X, y):\n        if len(set(y)) == 1:\n            self.label = y[0]\n            return\n        \n        if self.max_depth is not None and self.depth >= self.max_depth:\n            self.label = majority_class(y)\n            return\n        \n        feature, threshold, gini_gain = best_split(X, y)\n        \n        if gini_gain == 0:\n            self.label = majority_class(y)\n            return\n        \n        self.feature = feature\n        self.threshold = threshold\n        \n        left_indices = X[:, feature] <= threshold\n        right_indices = X[:, feature] > threshold\n        \n        if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n            self.label = majority_class(y)\n            return\n        \n        self.left = DecisionTreeNode(depth=self.depth + 1, max_depth=self.max_depth)\n        self.right = DecisionTreeNode(depth=self.depth + 1, max_depth=self.max_depth)\n        \n        self.left.fit(X[left_indices], y[left_indices])\n        self.right.fit(X[right_indices], y[right_indices])\n\n    def predict_one(self, x):\n        if self.label is not None:\n            return self.label\n        if x[self.feature] <= self.threshold:\n            return self.left.predict_one(x)\n        else:\n            return self.right.predict_one(x)\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    root = DecisionTreeNode(max_depth=max_depth)\n    root.fit(X_train, y_train)\n    return [root.predict_one(x) for x in X_test]\n```\n\n### Explanation:\n1. **Gini Impurity Calculation**: The `gini_impurity` function calculates the impurity of a set of labels.\n2. **Majority Class**: The `majority_class` function returns the most common label in a set.\n3. **Best Split**: The `best_split` function finds the best feature and threshold to split the data based on the largest Gini gain.\n4. **Decision Tree Node**: The `DecisionTreeNode` class represents a node in the decision tree. It handles fitting the data and predicting labels for new samples.\n5. **Decision Tree Prediction**: The `decision_tree_predict` function builds the tree using the training data and predicts labels for the test data.\n\nThis implementation follows the rules and criteria specified in your task description, ensuring deterministic predictions."}
{"task_id": 185, "completion_id": 0, "completion": "To implement the `dataset_shape` function, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    # Convert X to np.ndarray if it is not already one\n    X = np.asarray(X)\n    \n    # Check if X is empty\n    if X.size == 0:\n        raise ValueError(\"Got an empty matrix.\")\n    \n    # Determine the shape based on the number of dimensions\n    if X.ndim == 1:\n        # Treat as a single sample\n        n_samples = 1\n        n_features = len(X)\n    else:\n        # First axis stores samples\n        n_samples = X.shape[0]\n        n_features = np.prod(X.shape[1:])\n    \n    return (n_samples, n_features)\n```\n\n### Explanation:\n\n1. **Conversion to `np.ndarray`:** We use `np.asarray(X)` to ensure that `X` is a NumPy array. This function will convert any array-like object to a NumPy array without modifying the original object in-place.\n\n2. **Check for Empty Matrix:** We check if `X.size == 0` to determine if the matrix is empty. If it is, we raise a `ValueError` with the message \"Got an empty matrix.\"\n\n3. **Determine Shape:**\n   - If `X` is one-dimensional (`X.ndim == 1`), we treat it as a single sample with `n_samples = 1` and `n_features = len(X)`.\n   - If `X` has two or more dimensions (`X.ndim >= 2`), we assume the first axis represents samples. Thus, `n_samples = X.shape[0]` and `n_features = np.prod(X.shape[1:])`, which calculates the product of the sizes of all remaining axes to determine the number of features.\n\n4. **Return the Result:** Finally, we return the tuple `(n_samples, n_features)`.\n\nThis function should correctly handle various array-like inputs and provide the expected output according to the specified logic."}
{"task_id": 186, "completion_id": 0, "completion": "To implement the baseline mean regressor, we need to calculate the mean of the `y_train` values and return this mean for each sample in `X_test`. If `X_test` is empty, we should return an empty list. Here's how you can complete the function:\n\n```python\nimport numpy as np\n\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    # Calculate the mean of y_train\n    mean_y_train = np.mean(y_train)\n    \n    # Round the mean to 4 decimal places\n    rounded_mean = round(mean_y_train, 4)\n    \n    # Get the number of samples in X_test\n    num_samples = X_test.shape[0]\n    \n    # Return the mean repeated for each sample in X_test\n    return [rounded_mean] * num_samples\n```\n\n### Explanation:\n1. **Calculate the Mean**: We use `np.mean(y_train)` to compute the arithmetic mean of the training target values.\n2. **Round the Mean**: We round the mean to four decimal places using Python's built-in `round()` function.\n3. **Determine the Number of Predictions**: The number of predictions we need to make is equal to the number of rows in `X_test`, which is obtained using `X_test.shape[0]`.\n4. **Return Predictions**: We return a list where the rounded mean is repeated for each sample in `X_test`. If `X_test` is empty, the list will naturally be empty.\n\nThis function provides a simple baseline model that can be used as a reference point for evaluating more complex models."}
{"task_id": 188, "completion_id": 0, "completion": "To implement the exponential \u03b5-decay scheduler, we need to follow the given formula and ensure that the input parameters are validated correctly. Let's write the function step-by-step:\n\n```python\nimport math\n\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n    # Validate inputs\n    if not (0 <= min_epsilon < max_epsilon) or decay_rate <= 0 or step < 0:\n        return -1\n    \n    # Compute the exponentially decayed epsilon\n    epsilon_t = min_epsilon + (max_epsilon - min_epsilon) * math.exp(-decay_rate * step)\n    \n    # Clip the result to ensure it doesn't fall below min_epsilon due to numerical underflow\n    epsilon_t = max(epsilon_t, min_epsilon)\n    \n    # Return the result rounded to 4 decimal places\n    return round(epsilon_t, 4)\n\n# Example usage:\n# print(epsilon_decay(1.0, 0.1, 0.01, 100))  # Example call to the function\n```\n\n### Explanation:\n1. **Input Validation**: We check if `0 \u2264 \u03b5_min < \u03b5_max`, `\u03bb > 0`, and `t \u2265 0`. If any of these conditions are not met, the function returns `-1`.\n\n2. **Exponential Decay Calculation**: We use the formula provided to calculate the decayed epsilon value.\n\n3. **Clipping**: We ensure that the calculated epsilon value does not fall below `\u03b5_min` due to numerical underflow by using `max(epsilon_t, min_epsilon)`.\n\n4. **Rounding**: The result is rounded to 4 decimal places before returning.\n\nThis function can be used within a reinforcement learning loop to adjust the exploration rate dynamically based on the current time-step."}
{"task_id": 189, "completion_id": 0, "completion": "To implement the `batch_resample` function, we need to handle two types of interpolation: bilinear and nearest-neighbor. We'll use NumPy for array manipulation and SciPy's `zoom` function for resampling, which supports both bilinear and nearest-neighbor interpolation.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom scipy.ndimage import zoom\n\ndef batch_resample(X, new_dim, mode=\"bilinear\"):\n    \"\"\"Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels).\n    \"\"\"\n    n_ex, in_rows, in_cols, in_channels = X.shape\n    out_rows, out_cols = new_dim\n    \n    # Determine the zoom factors for rows and columns\n    row_zoom = out_rows / in_rows\n    col_zoom = out_cols / in_cols\n    \n    # Initialize the output array\n    resampled = np.empty((n_ex, out_rows, out_cols, in_channels), dtype=X.dtype)\n    \n    # Choose the order of interpolation\n    if mode == \"bilinear\":\n        order = 1  # Bilinear interpolation\n    elif mode == \"neighbor\":\n        order = 0  # Nearest-neighbor interpolation\n    else:\n        raise NotImplementedError(f\"Unrecognized resampling mode: {mode}\")\n    \n    # Resample each image in the batch\n    for i in range(n_ex):\n        for c in range(in_channels):\n            # Apply zoom to each channel of each image\n            resampled[i, :, :, c] = zoom(X[i, :, :, c], (row_zoom, col_zoom), order=order)\n    \n    # Round the results to 4 decimal places\n    return np.round(resampled, 4)\n```\n\n### Explanation:\n\n1. **Zoom Factors**: We calculate the zoom factors for rows and columns based on the desired output dimensions.\n\n2. **Interpolation Order**: \n   - `order=1` for bilinear interpolation.\n   - `order=0` for nearest-neighbor interpolation.\n\n3. **Loop Through Batch**: We loop through each image and each channel, applying the `zoom` function to resample the image.\n\n4. **Rounding**: Finally, we round the resampled images to 4 decimal places using `np.round`.\n\nThis implementation efficiently handles the resampling of a batch of images using the specified interpolation method."}
{"task_id": 190, "completion_id": 0, "completion": "To solve the problem of finding the best Gini split, we need to iterate over each feature and each unique value within that feature to evaluate potential splits. For each split, we calculate the weighted Gini impurity and keep track of the best split found. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    if len(y) == 0:\n        return 0\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(probabilities ** 2)\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n\n    # Calculate the Gini impurity of the whole dataset\n    G_whole_dataset = gini_impurity(y)\n\n    best_gini = G_whole_dataset\n    best_feature_index = -1\n    best_threshold_value = None\n\n    for feature_index in range(n_features):\n        # Get all unique values for this feature\n        unique_values = np.unique(X[:, feature_index])\n        \n        for threshold in unique_values:\n            # Split the data\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            \n            left_y = y[left_indices]\n            right_y = y[right_indices]\n            \n            # Calculate the weighted Gini impurity for this split\n            n_left = len(left_y)\n            n_right = len(right_y)\n            n_total = n_left + n_right\n            \n            G_left = gini_impurity(left_y)\n            G_right = gini_impurity(right_y)\n            \n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n            \n            # Check if this is the best split so far\n            if G_split < best_gini or (np.isclose(G_split, best_gini, atol=1e-12) and \n                                       (feature_index < best_feature_index or \n                                        (feature_index == best_feature_index and threshold < best_threshold_value))):\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\n# X = [[2.5, 3.0], [1.5, 2.0], [3.5, 4.0]]\n# y = [0, 1, 0]\n# print(best_gini_split(X, y))\n```\n\n### Explanation:\n1. **Gini Impurity Calculation**: The `gini_impurity` function calculates the Gini impurity for a given set of labels.\n\n2. **Iterating Over Features and Thresholds**: For each feature, we consider each unique value as a potential threshold for splitting the data.\n\n3. **Splitting the Data**: For each threshold, we split the data into left and right subsets.\n\n4. **Calculating Weighted Gini Impurity**: We calculate the weighted Gini impurity for the split and check if it's the best one found so far.\n\n5. **Tie-breaking**: We handle ties by preferring splits with smaller feature indices and threshold values.\n\n6. **Return the Best Split**: If no valid split is found, we return the Gini impurity of the whole dataset. Otherwise, we return the best split found."}
{"task_id": 191, "completion_id": 0, "completion": "To implement the `metric` function, we need to create a factory that returns a callable function for each of the specified distance metrics. The callable function should validate the input vectors and compute the distance if the inputs are valid. If the inputs are invalid or the metric name is unsupported, the function should return `-1`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef metric(name: str):\n    def validate_vectors(x, y):\n        # Check if both are list, tuple or numpy array\n        if not isinstance(x, (list, tuple, np.ndarray)) or not isinstance(y, (list, tuple, np.ndarray)):\n            return False\n        \n        # Convert to numpy arrays for easy manipulation\n        x = np.array(x, dtype=float)\n        y = np.array(y, dtype=float)\n        \n        # Check if both are one-dimensional, non-empty, and of the same length\n        if x.ndim != 1 or y.ndim != 1 or len(x) == 0 or len(y) == 0 or len(x) != len(y):\n            return False\n        \n        return x, y\n\n    def euclidean(x, y):\n        x, y = validate_vectors(x, y)\n        if x is False:\n            return -1\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        x, y = validate_vectors(x, y)\n        if x is False:\n            return -1\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        x, y = validate_vectors(x, y)\n        if x is False:\n            return -1\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        x, y = validate_vectors(x, y)\n        if x is False:\n            return -1\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        cosine_similarity = np.dot(x, y) / (norm_x * norm_y)\n        cosine_distance = 1 - cosine_similarity\n        return round(cosine_distance, 4)\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    return metrics.get(name, lambda x, y: -1)\n\n# Example usage:\nprint(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n```\n\n### Explanation:\n1. **Validation**: The `validate_vectors` function checks if the inputs are valid numeric vectors. It ensures they are one-dimensional, non-empty, and of the same length. It also converts them to NumPy arrays for easier computation.\n\n2. **Distance Functions**: Each distance function (`euclidean`, `manhattan`, `chebyshev`, `cosine`) uses the validated vectors to compute the respective distance. If validation fails, they return `-1`.\n\n3. **Factory**: The `metric` function returns the appropriate distance function based on the `name` provided. If the name is unsupported, it returns a lambda function that always returns `-1`.\n\n4. **Rounding**: All valid results are rounded to four decimal places before being returned."}
{"task_id": 193, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    def compute_softsign(value):\n        return round(value / (1 + abs(value)), 4)\n    \n    if isinstance(z, (int, float)):\n        # Handle scalar input\n        return compute_softsign(z)\n    elif isinstance(z, (list, np.ndarray)):\n        # Handle array-like input\n        return [compute_softsign(element) for element in z]\n    else:\n        raise TypeError(\"Input must be a scalar or a one-dimensional list/NumPy array.\")\n\n# Example usage:\n# Scalar input\nprint(softsign(3.5))  # Output: 0.7778\n\n# List input\nprint(softsign([1, -2, 3.5]))  # Output: [0.5, -0.6667, 0.7778]\n\n# NumPy array input\nprint(softsign(np.array([1, -2, 3.5])))  # Output: [0.5, -0.6667, 0.7778]\n\n# Empty list input\nprint(softsign([]))  # Output: []\n```\n\nThis implementation defines a helper function `compute_softsign` to calculate the Softsign value for a single element and rounds it to 4 decimal places. The main function `softsign` checks the type of the input and processes it accordingly, returning the appropriate result based on whether the input is a scalar or an array-like structure."}
{"task_id": 194, "completion_id": 0, "completion": "To implement the Adagrad optimization step, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adagrad_update(weights: list[float],\n                   gradients: list[float],\n                   G: list[float] | None = None,\n                   learning_rate: float = 0.01,\n                   eps: float = 1e-8) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple  (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    # Initialize G if it's the first iteration\n    if G is None:\n        G = [0.0] * len(weights)\n    \n    # Accumulate the squared gradients\n    new_G = [g + grad**2 for g, grad in zip(G, gradients)]\n    \n    # Update the parameters\n    new_weights = [\n        w - learning_rate * grad / (np.sqrt(g) + eps)\n        for w, grad, g in zip(weights, gradients, new_G)\n    ]\n    \n    # Round the results to 6 decimal places\n    new_weights = [round(w, 6) for w in new_weights]\n    new_G = [round(g, 6) for g in new_G]\n    \n    return new_weights, new_G\n```\n\n### Explanation:\n1. **Initialization**: If `G` is `None`, it means this is the first iteration, so we initialize `G` as a list of zeros with the same length as `weights`.\n\n2. **Accumulate Squared Gradients**: We update `G` by adding the square of each gradient to the corresponding element in `G`.\n\n3. **Update Parameters**: We update each weight using the Adagrad formula, adjusting the learning rate by dividing the gradient by the square root of the accumulated squared gradients plus a small constant `eps` for numerical stability.\n\n4. **Rounding**: We round each element in the updated weights and `G` to 6 decimal places before returning them.\n\nThis implementation should correctly perform a single Adagrad optimization step according to the given specifications."}
{"task_id": 197, "completion_id": 0, "completion": "To implement the `action_stats` function, we need to handle both single-dimensional and multi-dimensional action spaces, and distinguish between continuous and discrete spaces. Here's how you can achieve this:\n\n```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if cont_action:\n        # Continuous action space\n        if md_action:\n            # Multi-dimensional continuous space\n            n_actions_per_dim = [np.inf] * len(env.action_space.spaces)\n            action_dim = len(env.action_space.spaces)\n        else:\n            # Single-dimensional continuous space\n            n_actions_per_dim = [np.inf]\n            action_dim = env.action_space.shape[0]\n        action_ids = None\n    else:\n        # Discrete action space\n        if md_action:\n            # Multi-dimensional discrete space\n            n_actions_per_dim = [space.n for space in env.action_space.spaces]\n            action_dim = len(env.action_space.spaces)\n            # Generate all possible actions using cartesian product\n            action_ranges = [range(n) for n in n_actions_per_dim]\n            action_ids = list(product(*action_ranges))\n        else:\n            # Single-dimensional discrete space\n            n_actions_per_dim = [env.action_space.n]\n            action_dim = 1\n            action_ids = list(range(env.action_space.n))\n    \n    return n_actions_per_dim, action_ids, action_dim\n```\n\n### Explanation:\n\n1. **Continuous Action Space**:\n   - If `cont_action` is `True`, the function sets `n_actions_per_dim` to `numpy.inf` for each dimension.\n   - `action_ids` is set to `None` because continuous spaces have infinitely many actions.\n   - The dimensionality (`action_dim`) is determined by the length of `env.action_space.spaces` for multi-dimensional spaces or `env.action_space.shape[0]` for single-dimensional spaces.\n\n2. **Discrete Action Space**:\n   - If `cont_action` is `False`, the function calculates `n_actions_per_dim` based on the number of actions in each dimension.\n   - For multi-dimensional spaces, it uses `env.action_space.spaces` to get the number of actions per dimension.\n   - For single-dimensional spaces, it uses `env.action_space.n`.\n   - `action_ids` is generated using the cartesian product of all possible actions across dimensions.\n\nThis implementation handles both single and multi-dimensional spaces and distinguishes between continuous and discrete action spaces, providing the required statistics."}
{"task_id": 198, "completion_id": 0, "completion": "To implement the \u03b2-maximisation step for Latent Dirichlet Allocation, we need to compute the word-topic matrix \u03b2 using the given variational parameters \u03c6 and the corpus. The process involves accumulating contributions from each document and normalizing the matrix so that each column sums to one. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine the number of topics from the shape of the first phi array\n    T = phi[0].shape[1]\n    \n    # Initialize the \u03b2 matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Accumulate contributions to \u03b2 from each document\n    for d, doc in enumerate(corpus):\n        for n, word_index in enumerate(doc):\n            beta[word_index] += phi[d][n]\n    \n    # Normalize each column of \u03b2 so that it sums to 1\n    for t in range(T):\n        column_sum = np.sum(beta[:, t])\n        if column_sum > 0:\n            beta[:, t] /= column_sum\n    \n    # Convert \u03b2 to a list of lists and round each entry to 4 decimal places\n    beta_list = beta.tolist()\n    beta_list = [[round(value, 4) for value in row] for row in beta_list]\n    \n    return beta_list\n\n# Example usage:\n# phi = [np.array([[0.1, 0.9], [0.3, 0.7]]), np.array([[0.4, 0.6], [0.2, 0.8]])]\n# corpus = [[0, 1], [1, 0]]\n# V = 2\n# print(update_beta(phi, corpus, V))\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing a zero matrix `beta` of shape `(V, T)` where `V` is the vocabulary size and `T` is the number of topics.\n\n2. **Accumulation**: For each document `d` and each token `n` in the document, we add the corresponding `phi[d][n]` values to the `beta` matrix at the row corresponding to the word index `w^{(d)}_n`.\n\n3. **Normalization**: After accumulating the contributions, we normalize each column of `beta` so that the sum of each column is 1. This ensures that the probabilities are valid.\n\n4. **Rounding**: Finally, we convert the `beta` matrix to a list of lists and round each value to 4 decimal places to meet the output constraints.\n\nThis implementation efficiently updates the word-topic matrix \u03b2 using the given variational parameters and corpus data."}
{"task_id": 199, "completion_id": 0, "completion": "To implement the `split` function, we need to iterate over the feature vector `X` and use the threshold `value` to determine which labels from `y` should go into `y_left` and which should go into `y_right`. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    \"\"\"Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left  contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n    \"\"\"\n    y_left = []\n    y_right = []\n\n    for feature, label in zip(X, y):\n        if feature < value:\n            y_left.append(label)\n        else:\n            y_right.append(label)\n\n    return y_left, y_right\n\n# Example usage:\nX = np.array([1.0, 2.5, 3.0, 4.5])\ny = np.array([10, 20, 30, 40])\nvalue = 3.0\n\ny_left, y_right = split(X, y, value)\nprint(\"y_left:\", y_left)  # Output: [10, 20]\nprint(\"y_right:\", y_right)  # Output: [30, 40]\n```\n\n### Explanation:\n- We initialize two empty lists, `y_left` and `y_right`, to store the labels based on the threshold condition.\n- We iterate over the pairs of features and labels using `zip(X, y)`.\n- For each pair, we check if the feature is less than the threshold `value`. If it is, we append the label to `y_left`; otherwise, we append it to `y_right`.\n- Finally, we return the two lists as a tuple."}
{"task_id": 200, "completion_id": 0, "completion": "To implement the L1 regularization penalty, we need to compute the sum of the absolute values of all elements in the `weights` and multiply it by the regularization strength `C`. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    # Convert weights to a NumPy array if it is not already\n    weights_array = np.array(weights)\n    \n    # Compute the sum of absolute values of all elements in weights\n    l1_sum = np.sum(np.abs(weights_array))\n    \n    # Compute the L1 penalty\n    l1_penalty = C * l1_sum\n    \n    # Return the result rounded to 4 decimal places\n    return round(l1_penalty, 4)\n\n# Example usage:\nweights = [[1.5, -2.3], [0.0, 4.1]]\nC = 0.5\nprint(compute_l1_penalty(weights, C))  # Output: 3.95\n```\n\n### Explanation:\n1. **Conversion to NumPy Array**: We first convert the `weights` to a NumPy array to handle arbitrary dimensions and facilitate operations like summing and taking absolute values.\n\n2. **Sum of Absolute Values**: We use `np.abs(weights_array)` to get the absolute values of all elements and `np.sum()` to compute their sum.\n\n3. **Compute L1 Penalty**: Multiply the sum by the regularization strength `C`.\n\n4. **Rounding**: Use Python's `round()` function to round the result to 4 decimal places before returning it.\n\nThis implementation handles both nested lists and NumPy arrays, and it correctly returns `0.0` for empty weights."}
{"task_id": 201, "completion_id": 0, "completion": "To implement the `max_norm` function, we need to iterate over the slices of the input tensor `p` along the specified `axis`, compute the L2 norm for each slice, and then scale the slice if its norm exceeds the threshold `m`. The scaling factor is determined by the formula provided, which includes a small epsilon for numerical stability. Finally, the result should be rounded to four decimal places and returned as a nested Python list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-12\n    \n    if axis is None:\n        # Treat the whole tensor as a single vector\n        norm = np.linalg.norm(p)\n        scale = min(1, m / (norm + epsilon))\n        p_clipped = p * scale\n    else:\n        # Compute the norm along the specified axis\n        norm = np.linalg.norm(p, axis=axis, keepdims=True)\n        scale = np.minimum(1, m / (norm + epsilon))\n        p_clipped = p * scale\n    \n    # Round to 4 decimal places and convert to a nested list\n    p_clipped_rounded = np.round(p_clipped, 4)\n    return p_clipped_rounded.tolist()\n\n# Example usage:\n# p = np.array([[1, 2, 3], [4, 5, 6]])\n# result = max_norm(p, m=5.0, axis=1)\n# print(result)\n```\n\n### Explanation:\n- **Epsilon**: A small value (`1e-12`) is added to the norm to prevent division by zero.\n- **Norm Calculation**: The L2 norm is calculated using `np.linalg.norm`. If `axis` is `None`, the entire tensor is treated as a single vector. Otherwise, the norm is computed along the specified axis.\n- **Scaling**: Each slice is scaled by the factor `min(1, m / (norm + epsilon))` to ensure the norm does not exceed `m`.\n- **Rounding and Conversion**: The result is rounded to four decimal places using `np.round` and converted to a nested list using `.tolist()`.\n\nThis function should work for tensors of arbitrary shape and handle both the case where a specific axis is provided and where the entire tensor is treated as a single vector."}
{"task_id": 202, "completion_id": 0, "completion": "To implement the Partitioning Around Medoids (PAM) clustering algorithm, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    \n    # Step 1: Initialize medoids as the first k samples\n    medoids = list(range(k))\n    \n    def compute_cost(medoids):\n        \"\"\"Compute the total clustering cost for the given medoids.\"\"\"\n        total_cost = 0\n        for i in range(n_samples):\n            # Find the closest medoid for each sample\n            distances = [np.linalg.norm(X[i] - X[medoid]) for medoid in medoids]\n            total_cost += min(distances)\n        return total_cost\n    \n    def assign_labels(medoids):\n        \"\"\"Assign each sample to the closest medoid.\"\"\"\n        labels = []\n        for i in range(n_samples):\n            distances = [np.linalg.norm(X[i] - X[medoid]) for medoid in medoids]\n            # Choose the medoid with the smallest distance (ties broken by order)\n            labels.append(np.argmin(distances))\n        return labels\n    \n    # Initial cost\n    current_cost = compute_cost(medoids)\n    \n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n        \n        # Try swapping each medoid with each non-medoid\n        for medoid in medoids:\n            for candidate in range(n_samples):\n                if candidate in medoids:\n                    continue\n                \n                # Swap medoid with candidate\n                new_medoids = medoids.copy()\n                new_medoids[new_medoids.index(medoid)] = candidate\n                \n                # Compute new cost\n                new_cost = compute_cost(new_medoids)\n                cost_reduction = current_cost - new_cost\n                \n                # Check if this swap is the best so far\n                if cost_reduction > best_cost_reduction:\n                    best_swap = (medoid, candidate)\n                    best_cost_reduction = cost_reduction\n        \n        # If no swap improves the cost, break the loop\n        if best_swap is None:\n            break\n        \n        # Perform the best swap\n        medoids[medoids.index(best_swap[0])] = best_swap[1]\n        current_cost -= best_cost_reduction\n    \n    # Step 3: Assign labels based on the final medoids\n    labels = assign_labels(medoids)\n    \n    return labels\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\n### Explanation:\n1. **Initialization**: The medoids are initialized as the first `k` samples.\n2. **Cost Calculation**: The total clustering cost is calculated as the sum of the minimum distances from each sample to its closest medoid.\n3. **Swapping**: We attempt to swap each medoid with each non-medoid sample, calculating the potential cost reduction. We perform the swap that results in the largest cost reduction, provided it strictly reduces the cost.\n4. **Convergence**: The process stops when no swap can further reduce the cost.\n5. **Label Assignment**: After convergence, each sample is assigned to the cluster of the closest medoid.\n\nThis implementation ensures the algorithm is deterministic and follows the specified rules."}
{"task_id": 203, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1) return -1.\n    \"\"\"\n    # Convert probs to a NumPy array if it is not already\n    if not isinstance(probs, np.ndarray):\n        probs = np.array(probs)\n    \n    # Check for negative probabilities or if they do not sum to 1 within tolerance\n    if np.any(probs < 0) or not np.isclose(np.sum(probs), 1, atol=1e-12):\n        return -1\n    \n    N = len(probs)\n    scaled_probs = probs * N\n    prob_table = np.zeros(N)\n    alias_table = np.zeros(N, dtype=int)\n    \n    # Initialize small and large lists\n    small = [i for i in range(N) if scaled_probs[i] < 1]\n    large = [i for i in range(N) if scaled_probs[i] >= 1]\n    \n    # Process small and large lists\n    while small and large:\n        l = small.pop()\n        g = large.pop()\n        \n        prob_table[l] = scaled_probs[l]\n        alias_table[l] = g\n        \n        scaled_probs[g] = scaled_probs[g] + scaled_probs[l] - 1\n        \n        if scaled_probs[g] < 1:\n            small.append(g)\n        else:\n            large.append(g)\n    \n    # Set remaining entries in prob_table to 1\n    for remaining in large:\n        prob_table[remaining] = 1.0\n    for remaining in small:\n        prob_table[remaining] = 1.0\n    \n    # Round the prob_table to 4 decimal places\n    prob_table = np.round(prob_table, 4).tolist()\n    \n    return prob_table, alias_table.tolist()\n\n# Example usage\nprobs = [0.1, 0.2, 0.7]\nprint(build_alias_table(probs))  # Output: ([0.3, 0.6, 1.0], [2, 2, 0])\n```\n\nThis implementation follows the steps outlined in the task description to construct the alias method tables. It checks for valid input, processes the `small` and `large` lists, and rounds the probabilities to four decimal places before returning the tables as Python lists."}
{"task_id": 204, "completion_id": 0, "completion": "To implement the `num_missing` function, we need to iterate over the elements of the input data and check if each element is either `None` or `NaN`. We can use the `math.isnan()` function to check for `NaN` values, and a simple comparison to check for `None`. Here's how you can implement this:\n\n```python\nimport numpy as np\nimport math\n\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    # Convert the input data to a list to ensure it is iterable\n    data_list = list(data)\n    \n    # Initialize a counter for missing values\n    missing_count = 0\n    \n    # Iterate over the elements in the list\n    for element in data_list:\n        # Check if the element is None or NaN\n        if element is None or (isinstance(element, float) and math.isnan(element)):\n            missing_count += 1\n    \n    return missing_count\n\n# Example usage:\n# data = [1, None, 2, float('nan'), 'nan', np.nan]\n# print(num_missing(data))  # Output: 3\n```\n\n### Explanation:\n- **Conversion to List**: We convert the input data to a list to ensure that it is iterable. This allows the function to handle various types of input, such as lists, tuples, and NumPy arrays.\n- **Missing Value Check**: We check each element to see if it is `None` or `NaN`. For `NaN`, we use `math.isnan()` which is specifically designed to check for `NaN` values in floating-point numbers.\n- **Counting**: We maintain a counter (`missing_count`) to keep track of the number of missing values found during iteration.\n\nThis function should work correctly for any 1-D iterable input and return the count of missing values as specified."}
{"task_id": 205, "completion_id": 0, "completion": "To solve the task of extracting unique environment IDs from a registry, we need to iterate through the list, check if each item is a dictionary containing the key \"id\", and then collect unique IDs while preserving their order of first appearance. Here's how you can implement this:\n\n```python\ndef get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    unique_ids = []\n    seen_ids = set()\n\n    for item in registry:\n        if isinstance(item, dict) and \"id\" in item:\n            env_id = item[\"id\"]\n            if env_id not in seen_ids:\n                unique_ids.append(env_id)\n                seen_ids.add(env_id)\n\n    return unique_ids\n\n# Example usage:\nregistry = [\n    {\"id\": \"env1\", \"other_key\": \"value1\"},\n    {\"id\": \"env2\", \"other_key\": \"value2\"},\n    {\"id\": \"env1\", \"other_key\": \"value3\"},\n    \"not_a_dict\",\n    {\"another_key\": \"value4\"},\n    {\"id\": \"env3\", \"other_key\": \"value5\"},\n]\n\nprint(get_gym_environs(registry))  # Output: ['env1', 'env2', 'env3']\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing an empty list `unique_ids` to store the unique IDs and a set `seen_ids` to keep track of IDs that have already been encountered.\n\n2. **Iteration**: We iterate over each item in the `registry` list.\n\n3. **Check for Dictionary and Key**: For each item, we check if it is a dictionary and contains the key \"id\".\n\n4. **Collect Unique IDs**: If the item meets the criteria, we check if the ID is not already in `seen_ids`. If it's a new ID, we add it to `unique_ids` and mark it as seen by adding it to `seen_ids`.\n\n5. **Return Result**: After processing all items, we return the `unique_ids` list, which contains all unique environment IDs in their first appearance order."}
{"task_id": 206, "completion_id": 0, "completion": "To implement the Mean Absolute Error (MAE) calculator, we need to ensure that the function can handle different types of input sequences (lists, tuples, or NumPy arrays) and perform the necessary validation checks. We'll leverage NumPy for efficient computation. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    \n    # Check if both inputs are one-dimensional and of equal length\n    if actual.ndim != 1 or predicted.ndim != 1 or actual.shape[0] != predicted.shape[0]:\n        return -1\n    \n    # Calculate the absolute differences\n    absolute_differences = np.abs(actual - predicted)\n    \n    # Compute the mean of the absolute differences\n    mae = np.mean(absolute_differences)\n    \n    # Return the result rounded to four decimal places\n    return round(mae, 4)\n\n# Example usage:\n# actual = [3.0, -0.5, 2.0, 7.0]\n# predicted = [2.5, 0.0, 2.0, 8.0]\n# print(absolute_error(actual, predicted))  # Output: 0.5\n```\n\n### Explanation:\n1. **Input Conversion**: We use `np.asarray()` to convert the input sequences to NumPy arrays, which allows us to perform efficient numerical operations.\n\n2. **Validation**: We check if both arrays are one-dimensional using `ndim` and ensure they have the same length using `shape[0]`. If these conditions are not met, the function returns `-1`.\n\n3. **MAE Calculation**: We compute the absolute differences using `np.abs(actual - predicted)` and then calculate the mean of these differences using `np.mean()`.\n\n4. **Rounding**: The result is rounded to four decimal places using Python's built-in `round()` function.\n\nThis implementation efficiently handles the input validation and computation using NumPy, ensuring the function is both robust and performant."}
{"task_id": 207, "completion_id": 0, "completion": "To implement the function `convolution_shape`, we need to follow the given formula for calculating the output dimensions of a convolution operation and ensure that the results are valid according to the constraints. Here's the complete implementation:\n\n```python\ndef convolution_shape(img_height: int,\n                      img_width: int,\n                      filter_shape: tuple[int, int],\n                      stride: tuple[int, int],\n                      padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    KH, KW = filter_shape\n    SH, SW = stride\n    PH, PW = padding\n\n    # Check for non-positive stride values\n    if SH <= 0 or SW <= 0:\n        return -1\n\n    # Calculate output dimensions\n    OH = (img_height + 2 * PH - KH) / SH + 1\n    OW = (img_width + 2 * PW - KW) / SW + 1\n\n    # Check if the output dimensions are positive integers\n    if OH <= 0 or OW <= 0 or OH != int(OH) or OW != int(OW):\n        return -1\n\n    return int(OH), int(OW)\n\n# Example usage:\n# print(convolution_shape(5, 5, (3, 3), (1, 1), (0, 0)))  # Output: (3, 3)\n```\n\n### Explanation:\n1. **Parameter Extraction**: We extract the kernel dimensions, stride, and padding from the tuples provided as input.\n\n2. **Stride Validation**: We first check if the stride values are positive. If either stride is non-positive, the configuration is invalid, and we return `-1`.\n\n3. **Output Dimension Calculation**: We use the given formula to calculate the output height (`OH`) and width (`OW`).\n\n4. **Validation of Output Dimensions**: We check if both `OH` and `OW` are positive integers. If either dimension is non-positive or not an integer, the configuration is invalid, and we return `-1`.\n\n5. **Return Valid Dimensions**: If the dimensions are valid, we return them as a tuple of integers.\n\nThis function ensures that the convolution operation is feasible with the given parameters and returns the correct output dimensions or indicates an invalid configuration."}
{"task_id": 208, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_encode(labels: list[str], categories: list[str] | None = None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length *N*.\n        categories: Optional complete list of unique categories of length *C*.\n            If *None*, the set of categories is inferred from *labels* in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where *C* is the number of categories. If an unknown label is\n        found when *categories* is supplied, the function returns -1.\n    \"\"\"\n    if categories is None:\n        # Deduce categories from labels preserving the order of first appearance\n        categories = []\n        for label in labels:\n            if label not in categories:\n                categories.append(label)\n    \n    # Create a mapping from category to index\n    category_to_index = {category: idx for idx, category in enumerate(categories)}\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = np.zeros((len(labels), len(categories)), dtype=int)\n    \n    for i, label in enumerate(labels):\n        if label not in category_to_index:\n            return -1  # Return -1 if label is not in the provided categories\n        index = category_to_index[label]\n        one_hot_matrix[i, index] = 1\n    \n    # Convert the numpy array to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\nlabels = ['red', 'green', 'blue', 'green']\ncategories = ['red', 'green', 'blue']\nprint(one_hot_encode(labels, categories))\n# Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n```\n\nThis function handles the conversion of categorical labels into a one-hot encoded matrix, considering the optional `categories` argument. If `categories` is not provided, it infers the categories from the labels while preserving their order of first appearance. If any label is not found in the provided categories, it returns `-1`. The final output is a list of lists representing the one-hot encoded matrix."}
{"task_id": 209, "completion_id": 0, "completion": "To solve the problem of analyzing the expected value of a multi-armed bandit, we need to implement the function `analyze_bandit` that performs the following tasks:\n\n1. Validate the input probability distributions.\n2. Compute the expected payoff for each arm.\n3. Identify the arm with the highest expected payoff.\n4. Return the results in the specified format.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    expected_values = []\n    \n    for k in range(len(payoffs)):\n        # Validate probability length match\n        if len(payoffs[k]) != len(payoff_probs[k]):\n            return -1\n        \n        # Validate probability sum\n        if not np.isclose(sum(payoff_probs[k]), 1.0, atol=1e-8):\n            return -1\n        \n        # Compute expected payoff for arm k\n        expected_value = sum(p * v for p, v in zip(payoff_probs[k], payoffs[k]))\n        expected_values.append(round(expected_value, 4))\n    \n    # Find the arm with the highest expected payoff\n    best_ev = max(expected_values)\n    best_arm = expected_values.index(best_ev)\n    \n    return expected_values, best_arm, best_ev\n\n# Example usage:\npayoffs = [[1, 2, 3], [4, 5, 6]]\npayoff_probs = [[0.2, 0.3, 0.5], [0.1, 0.2, 0.7]]\nresult = analyze_bandit(payoffs, payoff_probs)\nprint(result)  # Output: ([2.1, 5.2], 1, 5.2)\n```\n\n### Explanation:\n\n1. **Validation**:\n   - We check if the length of the payoff values matches the length of the probabilities for each arm.\n   - We ensure that the sum of probabilities for each arm is approximately 1, using a tolerance of \\(10^{-8}\\).\n\n2. **Expected Payoff Calculation**:\n   - For each arm, we calculate the expected payoff using the formula: \\(\\text{expected value} = \\sum (\\text{probability} \\times \\text{payoff})\\).\n   - We round the expected payoff to 4 decimal places.\n\n3. **Finding the Best Arm**:\n   - We identify the arm with the highest expected payoff using the `max` function and find its index using `index`.\n\n4. **Return**:\n   - We return a tuple containing the list of expected values, the index of the best arm, and the best expected value, all rounded to 4 decimal places.\n\nThis implementation ensures that the function adheres to the specified validation rules and output constraints."}
{"task_id": 210, "completion_id": 0, "completion": "To solve the problem of creating a decorator that can be used both with and without parentheses, we need to implement a function `doublewrap`. This function will take a decorator function as input and return a new decorator that can handle both usage styles. The key is to distinguish between when the decorator is applied directly to a function and when it is called with additional arguments.\n\nHere's how you can implement the `doublewrap` function:\n\n```python\nimport functools\nfrom typing import Callable, Any\n\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n    @functools.wraps(decorator_func)\n    def wrapper(*args, **kwargs):\n        # If the first argument is a callable, assume it's the function to be decorated\n        if args and callable(args[0]):\n            return decorator_func(*args, **kwargs)\n        else:\n            # Otherwise, return a decorator that will receive the function later\n            def real_decorator(func):\n                return decorator_func(func, *args, **kwargs)\n            return real_decorator\n\n    return wrapper\n\n# Example usage\n@doublewrap\ndef repeat(func, times: int = 2):\n    \"\"\"Repeat the return value *times* times.\"\"\"\n    @functools.wraps(func)\n    def inner(*args, **kwargs):\n        return func(*args, **kwargs) * times\n    return inner\n\n@repeat  # used without arguments, default times = 2\ndef greet():\n    return \"Hi\"\n\n@repeat(times=3)  # used with keyword argument\ndef excited():\n    return \"Wow\"\n\nprint(greet())   # \u279e \"HiHi\"\nprint(excited()) # \u279e \"WowWowWow\"\n```\n\n### Explanation:\n\n1. **Wrapper Function**: The `wrapper` function inside `doublewrap` is responsible for handling both cases:\n   - If the first argument is a callable (i.e., the function to be decorated), it directly applies the `decorator_func` to it.\n   - If not, it assumes that the decorator is being called with additional arguments and returns a `real_decorator` function that will later receive the function to be decorated.\n\n2. **Real Decorator**: The `real_decorator` function is returned when the decorator is called with additional arguments. It takes the function to be decorated as its argument and applies the `decorator_func` with all the collected arguments.\n\n3. **Preserving Metadata**: The `functools.wraps` decorator is used to ensure that the metadata of the original decorator is preserved, such as the `__name__` and `__doc__` attributes.\n\nThis implementation allows the decorator to be used flexibly, either directly or with additional parameters, while maintaining the original decorator's metadata."}
{"task_id": 211, "completion_id": 0, "completion": "To solve this problem, we need to implement the `accuracy` function that calculates the classification accuracy based on the given `actual` and `predicted` label sequences. We'll also need to handle cases where the sequences are either empty or of different lengths, returning `-1` in such cases.\n\nHere's how we can implement this:\n\n```python\ndef accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    # Check if the input sequences are empty or of unequal length\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1\n    \n    # Calculate the number of mismatches\n    mismatches = sum(1 for a, p in zip(actual, predicted) if a != p)\n    \n    # Calculate the classification error\n    classification_error = mismatches / len(actual)\n    \n    # Calculate accuracy\n    accuracy_value = 1.0 - classification_error\n    \n    # Return the accuracy rounded to four decimal places\n    return round(accuracy_value, 4)\n\n# Example usage:\n# actual = [1, 0, 1, 1]\n# predicted = [1, 0, 0, 1]\n# print(accuracy(actual, predicted))  # Output: 0.75\n```\n\n### Explanation:\n\n1. **Input Validation**: \n   - We first check if the lengths of `actual` and `predicted` are equal and non-zero. If not, we return `-1`.\n\n2. **Mismatch Calculation**:\n   - We use a generator expression within the `sum` function to count the number of mismatches between the `actual` and `predicted` labels.\n\n3. **Classification Error**:\n   - The classification error is calculated as the ratio of mismatches to the total number of samples.\n\n4. **Accuracy Calculation**:\n   - Accuracy is computed as `1 - classification_error`.\n\n5. **Rounding**:\n   - Finally, we round the accuracy to four decimal places before returning it.\n\nThis implementation efficiently computes the accuracy while adhering to the specified rules and constraints."}
{"task_id": 212, "completion_id": 0, "completion": "To solve this problem, we can use a breadth-first search (BFS) approach to find the shortest path from the `\"input\"` layer to the `\"output_realtime\"` layer. BFS is well-suited for finding shortest paths in unweighted graphs, and we can modify it to also track the lexicographically smallest path when multiple shortest paths exist.\n\nHere's the implementation of the `extract_realtime_model` function:\n\n```python\nfrom collections import deque\n\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  When no\n    path exists an empty list is returned.\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Adjacency list of the directed graph.\n\n    Returns\n    -------\n    list[str]\n        Ordered list of layer names on the desired path or an empty list.\n    \"\"\"\n    # Initialize the queue for BFS with the starting point\n    queue = deque([(\"input\", [\"input\"])])\n    visited = set()\n\n    # Perform BFS\n    while queue:\n        current_layer, path = queue.popleft()\n\n        # If we reach the target layer, return the path\n        if current_layer == \"output_realtime\":\n            return path\n\n        # Mark the current layer as visited\n        visited.add(current_layer)\n\n        # Explore neighbors\n        for neighbor in sorted(graph.get(current_layer, [])):\n            if neighbor not in visited:\n                queue.append((neighbor, path + [neighbor]))\n\n    # If no path is found, return an empty list\n    return []\n\n# Example usage:\ngraph = {\n    \"input\": [\"layer1\", \"layer2\"],\n    \"layer1\": [\"layer3\"],\n    \"layer2\": [\"layer3\", \"layer4\"],\n    \"layer3\": [\"output_realtime\"],\n    \"layer4\": [\"output_realtime\"],\n    \"output_realtime\": []\n}\n\nprint(extract_realtime_model(graph))  # Output: ['input', 'layer1', 'layer3', 'output_realtime']\n```\n\n### Explanation:\n1. **Initialization**: We start BFS from the `\"input\"` layer, initializing the queue with a tuple containing the current layer and the path taken to reach it. We also maintain a `visited` set to avoid revisiting layers.\n\n2. **BFS Loop**: We dequeue a layer and its path from the queue. If the current layer is `\"output_realtime\"`, we return the path as the result.\n\n3. **Exploring Neighbors**: For each neighbor of the current layer, we check if it has been visited. If not, we add it to the queue with the updated path. Neighbors are sorted to ensure lexicographical order when multiple paths of the same length exist.\n\n4. **No Path Found**: If the queue is exhausted without finding `\"output_realtime\"`, we return an empty list.\n\nThis approach efficiently finds the shortest path while ensuring lexicographical order when needed."}
{"task_id": 213, "completion_id": 0, "completion": "To implement the `he_normal` function, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n    \"\"\"\n    # Set the random seed for reproducibility\n    np.random.seed(42)\n    \n    # Determine fan_in and fan_out based on the shape\n    if len(shape) == 0 or any(dim == 0 for dim in shape):\n        return []  # Return an empty list if the shape is empty or contains zero\n    \n    if len(shape) == 1:\n        fan_in = fan_out = shape[0]\n    elif len(shape) == 2:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    else:\n        # For shapes with 3 or more dimensions\n        out_channels, in_channels = shape[0], shape[1]\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    \n    # If fan_in is zero, return an empty list\n    if fan_in == 0:\n        return []\n    \n    # Calculate the standard deviation for the normal distribution\n    std_dev = np.sqrt(2 / fan_in)\n    \n    # Generate the weights using a normal distribution\n    weights = np.random.normal(loc=0.0, scale=std_dev, size=shape)\n    \n    # Convert the weights to a nested Python list and return\n    return weights.tolist()\n\n# Example usage:\n# shape = (3, 2, 4, 4)\n# weights = he_normal(shape)\n# print(weights)\n```\n\n### Explanation:\n1. **Seed Setting**: We set the random seed to 42 using `np.random.seed(42)` to ensure the function is deterministic and reproducible.\n\n2. **Shape Handling**: We handle different cases based on the length of the shape:\n   - **Length 0 or contains zero**: Return an empty list.\n   - **Length 1**: `fan_in` and `fan_out` are both set to the single dimension value.\n   - **Length 2**: `fan_in` is set to the first dimension (input units), and `fan_out` to the second dimension (output units).\n   - **Length \u2265 3**: Calculate `fan_in` and `fan_out` using the first two dimensions as channels and the product of the remaining dimensions as the receptive field size.\n\n3. **Weight Generation**: We use `np.random.normal` to generate weights from a normal distribution with mean 0 and standard deviation `\u221a(2 / fan_in)`.\n\n4. **Return**: Convert the generated NumPy array to a nested Python list using `.tolist()` and return it."}
{"task_id": 214, "completion_id": 0, "completion": "To implement the `mean_squared_error` function, we need to ensure that it can handle both Python lists and NumPy arrays, check for equal lengths of the input sequences, and compute the MSE accordingly. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function must return -1 if the two input sequences do not share the\n    same length. Otherwise, it should return the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays have to be supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    if isinstance(actual, list):\n        actual = np.array(actual)\n    if isinstance(predicted, list):\n        predicted = np.array(predicted)\n    \n    # Check if the lengths are the same\n    if actual.shape != predicted.shape:\n        return -1\n    \n    # Calculate the MSE\n    mse = np.mean((actual - predicted) ** 2)\n    \n    # Round the result to 4 decimal places\n    return np.round(mse, 4)\n\n# Example usage:\nactual = [1.0, 2.0, 3.0]\npredicted = [1.1, 2.1, 3.1]\nprint(mean_squared_error(actual, predicted))  # Output: 0.01\n```\n\n### Explanation:\n1. **Input Conversion**: The function first checks if the inputs are lists and converts them to NumPy arrays. This ensures that operations like subtraction and squaring can be performed element-wise efficiently.\n\n2. **Shape Check**: It checks if the shapes of the two arrays are the same. If not, it returns `-1` as specified.\n\n3. **MSE Calculation**: The mean squared error is calculated using NumPy's `mean` function on the squared differences between the actual and predicted values.\n\n4. **Rounding**: The result is rounded to 4 decimal places using `numpy.round`.\n\nThis implementation handles both lists and arrays seamlessly and adheres to the requirements specified in the task."}
{"task_id": 216, "completion_id": 0, "completion": "To implement Elastic Net regression from scratch using batch gradient descent, we need to follow these steps:\n\n1. **Polynomial Feature Expansion**: If the degree is greater than 1, we need to expand the features to include polynomial terms.\n\n2. **Standardization**: Standard-score (zero-mean, unit-variance) the features, excluding the bias term.\n\n3. **Initialize Weights**: Start with a weight vector initialized to zeros.\n\n4. **Gradient Descent**: Update the weights iteratively using the gradient of the loss function, which includes both the mean squared error and the Elastic Net penalty.\n\n5. **Prediction**: Use the learned weights to predict the target values for `x_test`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    \n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check for input validity\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    \n    # Polynomial feature expansion\n    def polynomial_features(X, degree):\n        from itertools import combinations_with_replacement\n        n_samples, n_features = X.shape\n        if degree == 1:\n            return X\n        else:\n            comb = combinations_with_replacement(range(n_features), degree)\n            poly_features = np.empty((n_samples, 0))\n            for indices in comb:\n                new_feature = np.prod(X[:, indices], axis=1).reshape(-1, 1)\n                poly_features = np.hstack((poly_features, new_feature))\n            return poly_features\n    \n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    \n    # Standardize features (zero mean, unit variance)\n    mean = np.mean(x_train_poly, axis=0)\n    std = np.std(x_train_poly, axis=0)\n    std[std == 0] = 1  # Avoid division by zero\n    x_train_poly = (x_train_poly - mean) / std\n    x_test_poly = (x_test_poly - mean) / std\n    \n    # Add bias term (column of ones)\n    x_train_poly = np.hstack((np.ones((x_train_poly.shape[0], 1)), x_train_poly))\n    x_test_poly = np.hstack((np.ones((x_test_poly.shape[0], 1)), x_test_poly))\n    \n    # Initialize weights\n    n_features = x_train_poly.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        predictions = x_train_poly.dot(weights)\n        errors = predictions - y_train\n        gradient = (2 / len(y_train)) * x_train_poly.T.dot(errors)\n        \n        # Elastic Net regularization\n        l1_term = l1_ratio * reg_factor * np.sign(weights)\n        l2_term = (1 - l1_ratio) * reg_factor * weights\n        l1_term[0] = 0  # Do not regularize the bias term\n        l2_term[0] = 0  # Do not regularize the bias term\n        \n        # Update weights\n        weights -= learning_rate * (gradient + l1_term + l2_term)\n    \n    # Predict on x_test\n    predictions_test = x_test_poly.dot(weights)\n    \n    # Return predictions rounded to 4 decimal places\n    return np.round(predictions_test, 4).tolist()\n```\n\n### Explanation:\n- **Polynomial Features**: We use combinations with replacement to generate polynomial features up to the specified degree.\n- **Standardization**: We standardize the features to have zero mean and unit variance, which is crucial for gradient descent to converge efficiently.\n- **Gradient Descent**: We update the weights using the gradient of the loss function, which includes both the mean squared error and the Elastic Net penalty. The L1 and L2 terms are adjusted to not regularize the bias term.\n- **Prediction**: After training, we use the learned weights to predict the target values for `x_test`.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 217, "completion_id": 0, "completion": "To implement the function `logistic_components`, we will follow these steps:\n\n1. Convert the input containers to NumPy arrays for efficient computation.\n2. Compute the sigmoid function for each element in the `predicted` array.\n3. Calculate the gradient, Hessian, and probability for each observation using vectorized operations.\n4. Round the results to six decimal places.\n5. Convert the NumPy arrays back to Python lists and return them as a tuple.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Compute the sigmoid function\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    \n    # Compute the gradient\n    gradient = actual * (1 / (1 + np.exp(-actual * predicted)))\n    \n    # Compute the Hessian\n    hessian = sigmoid * (1 - sigmoid)\n    \n    # Round the results to 6 decimal places\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    probability = np.round(sigmoid, 6)\n    \n    # Convert numpy arrays to lists\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = probability.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Example usage:\nactual = [1, -1, 1]\npredicted = [0.5, -0.5, 0.0]\nresult = logistic_components(actual, predicted)\nprint(result)\n```\n\nThis function efficiently computes the required components using NumPy's vectorized operations, ensuring that the results are accurate and rounded to six decimal places before returning them as lists."}
{"task_id": 218, "completion_id": 0, "completion": "To solve the problem of evaluating the outcome of a Blackjack hand, we need to implement the function `blackjack_outcome` according to the rules provided. Here's the complete implementation:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the score of a hand, considering usable aces.\"\"\"\n        total = sum(hand)\n        # Check for usable ace\n        if 1 in hand and total + 10 <= 21:\n            total += 10\n        return total\n    \n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if the hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n    \n    # Calculate scores\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    \n    # Check for busts\n    player_bust = player_score > 21\n    dealer_bust = dealer_score > 21\n    \n    # Determine outcome\n    if player_bust:\n        return -1.0\n    if dealer_bust:\n        return 1.0\n    if player_score > dealer_score:\n        if is_natural_blackjack(player):\n            return 1.5\n        return 1.0\n    if player_score < dealer_score:\n        return -1.0\n    return 0.0\n\n# Example usage:\n# player = [1, 10]  # Natural blackjack\n# dealer = [10, 7]  # Score 17\n# print(blackjack_outcome(player, dealer))  # Output: 1.5\n```\n\n### Explanation:\n\n1. **Hand Value Calculation**:\n   - The `hand_value` function calculates the score of a hand, considering the possibility of a usable ace (an ace counted as 11 if it doesn't cause the hand to bust).\n\n2. **Natural Blackjack Check**:\n   - The `is_natural_blackjack` function checks if a hand is a natural blackjack, which is a two-card hand consisting of an Ace and a 10-value card.\n\n3. **Outcome Determination**:\n   - The function first checks if the player busts, returning -1 if true.\n   - If the dealer busts and the player does not, it returns +1.\n   - If neither busts, it compares scores:\n     - If the player has a higher score, it checks for a natural blackjack to return 1.5, otherwise returns 1.\n     - If the dealer has a higher score, it returns -1.\n     - If scores are equal, it returns 0 for a draw.\n\nThis implementation follows the rules provided and correctly evaluates the outcome of a Blackjack hand."}
{"task_id": 220, "completion_id": 0, "completion": "To implement the function `estimate_lda_params`, we need to calculate the smoothed estimates for the word-topic distribution `\u03d5` and the document-topic distribution `\u03b8` using the provided count matrices `C_wt` and `C_dt`, along with the Dirichlet priors `\u03b1` and `\u03b2`. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    # Check if the count matrices are empty\n    if C_wt.size == 0:\n        phi = []\n    else:\n        V, T = C_wt.shape\n        phi = (C_wt + beta) / (np.sum(C_wt, axis=0) + V * beta)\n        phi = np.round(phi, 4).tolist()\n\n    if C_dt.size == 0:\n        theta = []\n    else:\n        D, T = C_dt.shape\n        theta = (C_dt + alpha) / (np.sum(C_dt, axis=1, keepdims=True) + T * alpha)\n        theta = np.round(theta, 4).tolist()\n\n    return phi, theta\n\n# Example usage:\n# C_wt = np.array([[3, 0], [1, 2]])\n# C_dt = np.array([[2, 1], [0, 3]])\n# alpha = 0.1\n# beta = 0.1\n# phi, theta = estimate_lda_params(C_wt, C_dt, alpha, beta)\n# print(\"Phi:\", phi)\n# print(\"Theta:\", theta)\n```\n\n### Explanation:\n1. **Input Validation**: We first check if the count matrices are empty. If `C_wt` is empty, we return an empty list for `phi`. Similarly, if `C_dt` is empty, we return an empty list for `theta`.\n\n2. **Calculate `\u03d5` (phi)**:\n   - For each topic `t`, compute the smoothed probability of each word `v` using the formula:\n     \\[\n     \\phi[v,t] = \\frac{C_{wt}[v,t] + \\beta}{\\sum_v C_{wt}[v,t] + V \\cdot \\beta}\n     \\]\n   - We use `np.sum(C_wt, axis=0)` to get the sum over all words for each topic.\n\n3. **Calculate `\u03b8` (theta)**:\n   - For each document `d`, compute the smoothed probability of each topic `t` using the formula:\n     \\[\n     \\theta[d,t] = \\frac{C_{dt}[d,t] + \\alpha}{\\sum_t C_{dt}[d,t] + T \\cdot \\alpha}\n     \\]\n   - We use `np.sum(C_dt, axis=1, keepdims=True)` to get the sum over all topics for each document.\n\n4. **Rounding**: We round each entry in the resulting matrices to four decimal places using `np.round`.\n\n5. **Return**: The function returns the smoothed and rounded `phi` and `theta` matrices as nested Python lists."}
{"task_id": 221, "completion_id": 0, "completion": "To implement the Mean Squared Logarithmic Error (MSLE) in Python, we will follow the requirements outlined in the task. We'll start by implementing the helper function `squared_log_error` to compute the element-wise squared logarithmic errors, and then implement the main function `mean_squared_log_error` to calculate the average of these errors. We'll also include input validation to ensure the inputs are valid.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Calculate element-wise squared logarithmic errors.\"\"\"\n    # Convert inputs to numpy arrays for element-wise operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Calculate the squared logarithmic error\n    squared_log_errors = (np.log1p(actual) - np.log1p(predicted)) ** 2\n    return squared_log_errors\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals. If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    # Convert inputs to numpy arrays for easy validation and operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    # Calculate squared logarithmic errors\n    squared_log_errors = squared_log_error(actual, predicted)\n    \n    # Calculate mean of squared logarithmic errors\n    msle = np.mean(squared_log_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(msle, 4)\n\n# Example usage:\nactual = [3, 5, 2.5, 7]\npredicted = [2.5, 5, 4, 8]\nresult = mean_squared_log_error(actual, predicted)\nprint(result)  # Output should be a float rounded to 4 decimal places\n```\n\n### Explanation:\n\n1. **Helper Function (`squared_log_error`)**:\n   - Converts the input sequences to NumPy arrays to facilitate element-wise operations.\n   - Computes the squared logarithmic error for each pair of actual and predicted values using the formula: \\((\\log(1 + \\text{actual}) - \\log(1 + \\text{predicted}))^2\\).\n\n2. **Main Function (`mean_squared_log_error`)**:\n   - Converts inputs to NumPy arrays for consistency and ease of validation.\n   - Validates that the inputs have the same shape and contain only non-negative values. If any validation fails, it returns -1.\n   - Calls the helper function to get the squared logarithmic errors.\n   - Computes the mean of these errors and rounds the result to 4 decimal places before returning it.\n\nThis implementation ensures that the MSLE is calculated correctly and handles invalid inputs gracefully by returning -1."}
{"task_id": 222, "completion_id": 0, "completion": "To implement the sigmoid activation function with the specified requirements, we need to handle different types of inputs (scalar, list, and NumPy array) and ensure numerical stability for large values. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    def sigmoid_scalar(x):\n        \"\"\"Compute the sigmoid function for a single scalar.\"\"\"\n        if x >= 0:\n            exp_neg_x = np.exp(-x)\n            return 1 / (1 + exp_neg_x)\n        else:\n            exp_x = np.exp(x)\n            return exp_x / (1 + exp_x)\n\n    if np.isscalar(z):\n        # If z is a scalar, compute the sigmoid and return a rounded float\n        result = sigmoid_scalar(z)\n        return round(result, 4)\n    else:\n        # Convert input to a NumPy array for vectorized operations\n        z_array = np.array(z)\n        # Apply the sigmoid function element-wise using vectorized operations\n        positive_mask = z_array >= 0\n        negative_mask = ~positive_mask\n\n        # Compute sigmoid for positive values\n        exp_neg_z = np.exp(-z_array[positive_mask])\n        sigmoid_positive = 1 / (1 + exp_neg_z)\n\n        # Compute sigmoid for negative values\n        exp_z = np.exp(z_array[negative_mask])\n        sigmoid_negative = exp_z / (1 + exp_z)\n\n        # Combine results\n        sigmoid_result = np.empty_like(z_array, dtype=float)\n        sigmoid_result[positive_mask] = sigmoid_positive\n        sigmoid_result[negative_mask] = sigmoid_negative\n\n        # Round the results to 4 decimal places and convert to a list\n        rounded_result = np.round(sigmoid_result, 4).tolist()\n        return rounded_result\n\n# Example usage:\nprint(sigmoid(1000))  # Scalar input\nprint(sigmoid([-1000, 0, 1000]))  # List input\nprint(sigmoid(np.array([[1000, -1000], [0, 1]])))  # 2D NumPy array input\n```\n\n### Explanation:\n1. **Scalar Handling**: If the input is a scalar, the function `sigmoid_scalar` is used to compute the sigmoid value. It handles large values by computing the expression differently for `x >= 0` and `x < 0` to maintain numerical stability.\n\n2. **Array Handling**: For array-like inputs (lists or NumPy arrays), the input is first converted to a NumPy array to leverage vectorized operations. Masks are used to separate positive and negative values, and the sigmoid is computed differently for each group to ensure stability.\n\n3. **Rounding and Conversion**: After computing the sigmoid values, they are rounded to 4 decimal places and converted back to a Python list using `.tolist()`.\n\nThis implementation ensures that the function is both efficient and numerically stable for a wide range of input values."}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        \"\"\"Apply Leaky ReLU to a single value.\"\"\"\n        return x if x >= 0 else a * x\n\n    def recursive_apply(data):\n        \"\"\"Recursively apply Leaky ReLU to each element in the data structure.\"\"\"\n        if isinstance(data, (int, float)):\n            return apply_leaky_relu(data)\n        elif isinstance(data, list):\n            return [recursive_apply(item) for item in data]\n        elif isinstance(data, np.ndarray):\n            return recursive_apply(data.tolist())\n        else:\n            raise TypeError(\"Input must be a scalar, list, or numpy.ndarray\")\n\n    return recursive_apply(z)\n\n# Example usage:\n# scalar input\nprint(leaky_relu(-3))  # Output: [-0.03]\n\n# list input\nprint(leaky_relu([1, -2, 3, -4]))  # Output: [1, -0.02, 3, -0.04]\n\n# nested list input\nprint(leaky_relu([[1, -2], [3, -4]]))  # Output: [[1, -0.02], [3, -0.04]]\n\n# numpy array input\nprint(leaky_relu(np.array([1, -2, 3, -4])))  # Output: [1, -0.02, 3, -0.04]\n```\n\nThis implementation handles scalars, lists, nested lists, and numpy arrays, applying the Leaky ReLU activation function to each element and returning the result as a Python list with the same structure as the input."}
{"task_id": 225, "completion_id": 0, "completion": "To implement the `hz2mel` function, we need to handle both the HTK and Slaney formulas for converting frequencies from Hertz to the mel scale. We'll use NumPy for array manipulation and mathematical operations, and ensure the output is a Python list with the same shape as the input. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef hz2mel(hz, formula: str = \"htk\") -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n    \"\"\"\n    # Ensure the formula is valid\n    assert formula in {\"htk\", \"slaney\"}, \"Formula must be 'htk' or 'slaney'.\"\n\n    # Convert input to a NumPy array for easier manipulation\n    hz_array = np.asarray(hz)\n\n    # Apply the appropriate formula\n    if formula == \"htk\":\n        mel_values = 2595 * np.log10(1 + hz_array / 700)\n    elif formula == \"slaney\":\n        mel_values = 1127 * np.log(1 + hz_array / 700)\n\n    # Round the results to 4 decimal places\n    mel_values_rounded = np.round(mel_values, 4)\n\n    # Convert the result to a Python list with the same shape\n    return mel_values_rounded.tolist()\n\n# Example usage\nhz = np.array([0, 6300])\nformula = \"htk\"\nprint(hz2mel(hz, formula))  # Output: [0.0, 2595.0]\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts an array-like input, which is converted to a NumPy array for easier mathematical operations.\n2. **Formula Selection**: The function checks the `formula` parameter to decide which conversion formula to use. An `AssertionError` is raised if the formula is not \"htk\" or \"slaney\".\n3. **Conversion**: Depending on the selected formula, the appropriate mathematical operation is applied to convert Hz to mel.\n4. **Rounding**: The results are rounded to 4 decimal places using `np.round`.\n5. **Output**: The rounded NumPy array is converted back to a Python list using `tolist()`, preserving the original shape of the input.\n\nThis implementation ensures that the function is flexible, efficient, and meets the specified requirements."}
{"task_id": 226, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps as weak learners, we need to follow a series of steps. Here's a complete implementation of the `adaboost_predict` function:\n\n```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize weights to 1/N\n    weights = np.full(n_samples, (1 / n_samples))\n    \n    # To store the parameters of each decision stump\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        # Initialize variables to find the best stump\n        min_error = float('inf')\n        best_stump = None\n\n        # Iterate over each feature\n        for feature_index in range(n_features):\n            feature_values = X_train[:, feature_index]\n            possible_thresholds = np.unique(feature_values)\n\n            # Try each threshold\n            for threshold in possible_thresholds:\n                for polarity in [1, -1]:\n                    # Predict with current stump\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[feature_values < threshold] = -1\n                    else:\n                        predictions[feature_values >= threshold] = -1\n\n                    # Calculate weighted error\n                    misclassified = weights[y_train != predictions]\n                    error = np.sum(misclassified)\n\n                    # Update the best stump if the current one is better\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_index, threshold, polarity)\n\n        # Calculate alpha\n        alpha = 0.5 * math.log((1.0 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n\n        # Update weights\n        feature_index, threshold, polarity = best_stump\n        predictions = np.ones(n_samples)\n        if polarity == 1:\n            predictions[X_train[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_train[:, feature_index] >= threshold] = -1\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    # Make predictions on X_test\n    y_pred = np.zeros(X_test.shape[0])\n    for alpha, (feature_index, threshold, polarity) in zip(alphas, stumps):\n        predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            predictions[X_test[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_test[:, feature_index] >= threshold] = -1\n        y_pred += alpha * predictions\n\n    # Return the sign of the weighted sum\n    return [1 if i > 0 else -1 for i in y_pred]\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing the sample weights equally. We also prepare lists to store the parameters of each decision stump and their corresponding alpha values.\n\n2. **Training**: For each weak learner (decision stump), we iterate over all features and possible thresholds to find the best decision stump that minimizes the weighted classification error. We calculate the error for each possible stump and select the one with the lowest error.\n\n3. **Alpha Calculation**: Once the best stump is found, we calculate its weight (`alpha`) using the formula provided.\n\n4. **Weight Update**: We update the sample weights to give more importance to the misclassified samples.\n\n5. **Prediction**: For the test data, we compute the weighted sum of the predictions from all the stumps and return the sign of this sum as the final prediction.\n\nThis implementation follows the AdaBoost algorithm's principles and uses decision stumps as weak learners."}
{"task_id": 227, "completion_id": 0, "completion": "Here's the implementation of the two-hidden-layer value network forward pass using NumPy:\n\n```python\nimport numpy as np\n\ndef value_network_forward(state: list[float],\n                          W1: list[list[float]],\n                          W2: list[list[float]],\n                          W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    state = np.array(state)\n    W1 = np.array(W1)\n    W2 = np.array(W2)\n    W3 = np.array(W3)\n\n    # Validate dimensions\n    N = state.shape[0]\n    if W1.shape != (N, W1.shape[1]):\n        return -1\n    H1 = W1.shape[1]\n    if W2.shape != (H1, W2.shape[1]):\n        return -1\n    H2 = W2.shape[1]\n    if W3.shape != (H2,) and W3.shape != (H2, 1):\n        return -1\n\n    # Forward pass\n    h1 = np.tanh(np.dot(state, W1))\n    h2 = np.tanh(np.dot(h1, W2))\n    v = np.dot(h2, W3)\n\n    # Ensure v is a scalar\n    v = v.item() if isinstance(v, np.ndarray) else v\n\n    # Round the result to 4 decimal places\n    return round(v, 4)\n```\n\n### Explanation:\n1. **Input Conversion**: The function first converts the input lists to NumPy arrays for efficient matrix operations.\n2. **Dimension Validation**: It checks the dimensions of the matrices to ensure they match the expected shapes. If any dimension check fails, it returns `-1`.\n3. **Forward Pass**: It performs the forward pass through the network using matrix multiplication and the `tanh` activation function.\n4. **Output**: The final scalar value is rounded to 4 decimal places and returned. If the output is a NumPy array, it is converted to a scalar using `.item()`."}
{"task_id": 228, "completion_id": 0, "completion": "To solve the task of computing the pairwise Euclidean distance matrix, we can leverage NumPy's efficient array operations to perform the calculations in a vectorized manner. Here's the implementation:\n\n```python\nimport numpy as np\n\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is ``None`` the function should compute the distances inside *X* itself.\n    All distances must be rounded to four decimal places and the function must\n    return a plain Python nested list (use ``tolist()`` if needed).\n\n    Args:\n        X: NumPy array with shape (N, C).\n        Y: NumPy array with shape (M, C) or ``None``.  Default is ``None``.\n\n    Returns:\n        Nested list representing the N \u00d7 M matrix of Euclidean distances.\n    \"\"\"\n    if Y is None:\n        Y = X\n\n    # Compute squared norms of each row in X and Y\n    X_norm_squared = np.sum(X**2, axis=1).reshape(-1, 1)  # Shape (N, 1)\n    Y_norm_squared = np.sum(Y**2, axis=1).reshape(1, -1)  # Shape (1, M)\n\n    # Compute the dot product between each pair of rows in X and Y\n    dot_product = np.dot(X, Y.T)  # Shape (N, M)\n\n    # Compute the squared Euclidean distances using the identity\n    distances_squared = X_norm_squared + Y_norm_squared - 2 * dot_product\n\n    # Compute the Euclidean distances\n    distances = np.sqrt(distances_squared)\n\n    # Round the distances to 4 decimal places\n    distances_rounded = np.round(distances, 4)\n\n    # Convert the result to a nested Python list\n    return distances_rounded.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# Y = np.array([[5, 6], [7, 8]])\n# print(pairwise_l2_distances(X, Y))\n```\n\n### Explanation:\n1. **Handling `Y`**: If `Y` is `None`, we set `Y` to be equal to `X` to compute the pairwise distances within `X`.\n\n2. **Squared Norms**: We compute the squared norms of each row in `X` and `Y` using `np.sum(X**2, axis=1)` and `np.sum(Y**2, axis=1)`, respectively. These are reshaped to column and row vectors to facilitate broadcasting.\n\n3. **Dot Product**: We compute the dot product between each pair of rows in `X` and `Y` using `np.dot(X, Y.T)`.\n\n4. **Distance Calculation**: Using the identity \u2016x \u2212 y\u2016\u00b2 = \u2016x\u2016\u00b2 + \u2016y\u2016\u00b2 \u2212 2\u00b7x\u1d40y, we calculate the squared Euclidean distances and then take the square root to get the actual distances.\n\n5. **Rounding**: We round the distances to 4 decimal places using `np.round`.\n\n6. **Conversion to List**: Finally, we convert the NumPy array to a nested Python list using `.tolist()` to meet the output constraints."}
{"task_id": 230, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    # Step 1: Calculate means and variances for each class and feature\n    classes = np.unique(y_train)\n    n_features = X_train.shape[1]\n    epsilon = 1e-9  # Small constant to avoid division by zero\n\n    # Initialize dictionaries to store means and variances\n    means = {c: np.zeros(n_features) for c in classes}\n    variances = {c: np.zeros(n_features) for c in classes}\n    priors = {c: 0 for c in classes}\n\n    # Calculate means, variances, and priors\n    for c in classes:\n        X_c = X_train[y_train == c]\n        means[c] = np.mean(X_c, axis=0)\n        variances[c] = np.var(X_c, axis=0) + epsilon\n        priors[c] = X_c.shape[0] / X_train.shape[0]\n\n    # Step 2: Predict labels for X_test\n    predictions = []\n    for x in X_test:\n        posteriors = []\n        for c in classes:\n            # Calculate log prior\n            log_prior = np.log(priors[c])\n            # Calculate log likelihood\n            log_likelihood = -0.5 * np.sum(np.log(2 * np.pi * variances[c]))\n            log_likelihood -= 0.5 * np.sum(((x - means[c]) ** 2) / variances[c])\n            # Calculate log posterior\n            log_posterior = log_prior + log_likelihood\n            posteriors.append(log_posterior)\n        \n        # Choose the class with the highest posterior probability\n        predicted_class = classes[np.argmax(posteriors)]\n        predictions.append(predicted_class)\n\n    return predictions\n```\n\nThis implementation of Gaussian Naive Bayes from scratch calculates the necessary statistics (means, variances, and priors) from the training data, then uses these to compute the log posterior probabilities for each test sample. The class with the highest posterior probability is chosen as the predicted label for each test sample."}
{"task_id": 231, "completion_id": 0, "completion": "```python\ndef is_natural(hand: list[int]) -> bool:\n    \"\"\"\n    Determines if a given hand is a natural blackjack.\n    \n    A natural blackjack is a two-card hand consisting of an Ace (represented by 1)\n    and any ten-valued card (represented by 10). The function returns True if the\n    hand is a natural blackjack, otherwise it returns False.\n    \n    Parameters:\n    hand (list[int]): A list of integers representing the ranks of the cards.\n    \n    Returns:\n    bool: True if the hand is a natural blackjack, False otherwise.\n    \"\"\"\n    # Check if the hand contains exactly two cards\n    if len(hand) != 2:\n        return False\n    \n    # Check if the hand contains an Ace (1) and a ten-valued card (10)\n    return 1 in hand and 10 in hand\n\n# Example usage:\n# print(is_natural([1, 10]))  # True\n# print(is_natural([10, 1]))  # True\n# print(is_natural([1, 1]))   # False\n# print(is_natural([10, 10])) # False\n# print(is_natural([1]))      # False\n# print(is_natural([10]))     # False\n# print(is_natural([1, 10, 10])) # False\n```\n\nThis function checks if the hand contains exactly two cards and if those cards are an Ace and a ten-valued card, returning `True` if both conditions are met and `False` otherwise."}
{"task_id": 232, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    # Rule 1: Check if the array is two-dimensional\n    if x.ndim != 2:\n        return False\n    \n    # Rule 2: Check if every element is either 0 or 1\n    if not np.all((x == 0) | (x == 1)):\n        return False\n    \n    # Rule 3: Check if each row contains exactly one '1'\n    if not np.all(np.sum(x, axis=1) == 1):\n        return False\n    \n    return True\n```\n\nThis function checks each of the three rules for a valid one-hot matrix:\n\n1. It verifies that the input array is two-dimensional using `x.ndim`.\n2. It ensures all elements are either `0` or `1` using `np.all((x == 0) | (x == 1))`.\n3. It checks that each row contains exactly one `1` by summing each row and confirming the sum is `1` using `np.sum(x, axis=1) == 1`."}
{"task_id": 234, "completion_id": 0, "completion": "To implement single-step Thompson sampling for a Bernoulli multi-armed bandit, we need to follow these steps:\n\n1. Validate the input lists to ensure they are non-empty and of equal length.\n2. Set the random seed if provided to ensure reproducibility.\n3. For each arm, draw a sample from the Beta distribution using the observed successes and failures, along with the prior parameters.\n4. Determine the arm with the highest sampled value, using `numpy.argmax` to handle ties by selecting the smallest index.\n5. Return the index of the selected arm.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef thompson_sampling_beta_binomial(successes: list[int],\n                                    failures: list[int],\n                                    prior_alpha: float = 1.0,\n                                    prior_beta: float = 1.0,\n                                    seed: int | None = None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    # Check for input validity\n    if not successes or not failures or len(successes) != len(failures):\n        return -1\n    \n    # Set the random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Number of arms\n    num_arms = len(successes)\n    \n    # Sample from the posterior Beta distribution for each arm\n    samples = []\n    for i in range(num_arms):\n        alpha = prior_alpha + successes[i]\n        beta = prior_beta + failures[i]\n        sample = np.random.beta(alpha, beta)\n        samples.append(sample)\n    \n    # Find the index of the arm with the highest sample\n    best_arm = np.argmax(samples)\n    \n    return best_arm\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the input lists are empty or of different lengths, returning `-1` if they are invalid.\n- **Random Seed**: If a seed is provided, it sets the NumPy random seed to ensure reproducibility of the sampling process.\n- **Sampling**: For each arm, it calculates the parameters of the Beta distribution using the prior and observed data, then draws a sample from this distribution.\n- **Selection**: It uses `numpy.argmax` to find the index of the arm with the highest sampled value, ensuring ties are resolved by choosing the smallest index.\n- **Return**: The function returns the index of the selected arm."}
{"task_id": 235, "completion_id": 0, "completion": "To implement the `to_one_hot` function, we need to follow the given constraints and handle the input validation. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef to_one_hot(labels: np.ndarray, n_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes.  Each row is a\n        one-hot vector corresponding to the associated label.\n    \"\"\"\n    # Check if the input array is 1-D\n    if labels.ndim != 1:\n        raise ValueError(\"Input array must be 1-D.\")\n    \n    # Determine the number of classes\n    inferred_classes = labels.max() + 1\n    if n_classes is None:\n        n_classes = inferred_classes\n    elif n_classes < inferred_classes:\n        raise ValueError(\"n_classes must be at least max(labels) + 1.\")\n    \n    # Initialize the one-hot encoded array\n    one_hot = np.zeros((labels.size, n_classes), dtype=float)\n    \n    # Set the appropriate indices to 1\n    one_hot[np.arange(labels.size), labels] = 1.0\n    \n    return one_hot\n```\n\n### Explanation:\n\n1. **Input Validation**:\n   - We first check if the input `labels` is a 1-D array using `labels.ndim`. If not, we raise a `ValueError`.\n\n2. **Determine Number of Classes**:\n   - If `n_classes` is `None`, we infer the number of classes as `max(labels) + 1`.\n   - If `n_classes` is provided, we check if it is at least `max(labels) + 1`. If not, we raise a `ValueError`.\n\n3. **Initialize One-Hot Array**:\n   - We create a zero-filled 2-D array `one_hot` with shape `(labels.size, n_classes)` and dtype `float`.\n\n4. **Set One-Hot Values**:\n   - We use NumPy's advanced indexing to set the appropriate positions to `1.0` in the `one_hot` array. This is done by using `np.arange(labels.size)` to get row indices and `labels` to get column indices.\n\nThis implementation efficiently converts the class labels into a one-hot encoded format while adhering to the constraints provided."}
{"task_id": 236, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef minibatch(X: np.ndarray, batchsize: int = 256, shuffle: bool = True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    N = X.shape[0]\n    indices = np.arange(N)\n    \n    if shuffle:\n        np.random.shuffle(indices)\n    \n    n_batches = int(np.ceil(N / batchsize))\n    \n    def generator():\n        for i in range(n_batches):\n            start_idx = i * batchsize\n            end_idx = min(start_idx + batchsize, N)\n            yield indices[start_idx:end_idx]\n    \n    return generator(), n_batches\n```\n\n### Explanation:\n\n1. **Calculate Total Samples (`N`)**: Determine the number of samples in the dataset using `X.shape[0]`.\n\n2. **Create Indices Array**: Generate an array of indices from `0` to `N-1`.\n\n3. **Shuffle Indices**: If `shuffle` is `True`, shuffle the indices array in-place using `numpy.random.shuffle`.\n\n4. **Calculate Number of Batches**: Compute the total number of mini-batches using `ceil(N / batchsize)`.\n\n5. **Define Generator Function**: Create a generator function that iterates over the number of batches, yielding slices of the indices array corresponding to each mini-batch.\n\n6. **Return Generator and Number of Batches**: Return the generator and the total number of mini-batches as a tuple."}
{"task_id": 237, "completion_id": 0, "completion": "To implement the Blackjack hand evaluator, we need to consider the values of each card and handle the special case of Aces, which can be worth either 11 or 1. The goal is to maximize the hand's score without exceeding 21. Here's how you can implement the `score` function:\n\n```python\nfrom typing import List\n\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    # Define the values for each card\n    card_values = {\n        '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,\n        'J': 10, 'Q': 10, 'K': 10, 'A': 11  # Start with Ace as 11\n    }\n    \n    total_score = 0\n    ace_count = 0\n    \n    # Calculate the initial score and count the number of Aces\n    for card in hand:\n        if card == 'A':\n            ace_count += 1\n        total_score += card_values[card]\n    \n    # Adjust the score for Aces if the total exceeds 21\n    while total_score > 21 and ace_count > 0:\n        total_score -= 10  # Change an Ace from 11 to 1\n        ace_count -= 1\n    \n    # If the score exceeds 21, return 0 (bust)\n    if total_score > 21:\n        return 0\n    \n    return total_score\n\n# Example usage:\n# print(score(['A', 'J']))  # Output: 21\n# print(score(['A', 'A', '9']))  # Output: 21\n# print(score(['A', 'A', 'A', '9']))  # Output: 12\n# print(score(['10', 'J', 'Q']))  # Output: 0 (bust)\n```\n\n### Explanation:\n1. **Card Values**: We define a dictionary `card_values` to map each card to its corresponding value. Aces are initially considered as 11.\n\n2. **Initial Score Calculation**: We iterate through the hand, summing up the values of the cards and counting the number of Aces.\n\n3. **Adjusting for Aces**: If the total score exceeds 21, we adjust the value of Aces from 11 to 1, one at a time, until the score is 21 or less, or there are no more Aces to adjust.\n\n4. **Bust Check**: If the score is still greater than 21 after adjustments, the hand is bust, and we return 0.\n\nThis implementation efficiently handles the special case of Aces and ensures the hand's score is maximized without exceeding 21."}
{"task_id": 239, "completion_id": 0, "completion": "To solve the task of determining the padding for \"same\" and \"valid\" 2-D convolutions, we need to compute the padding required to maintain the spatial dimensions of the input when using a stride of one. For \"valid\" convolutions, no padding is needed. For \"same\" convolutions, the padding is calculated based on the filter size.\n\nHere's the implementation of the `determine_padding` function:\n\n```python\nimport math\n\ndef determine_padding(filter_shape: tuple[int, int], output_shape: str = \"same\") -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == \"valid\":\n        return ((0, 0), (0, 0))\n    \n    elif output_shape == \"same\":\n        filter_height, filter_width = filter_shape\n        \n        # Calculate padding for height\n        pad_top = math.floor((filter_height - 1) / 2)\n        pad_bottom = math.ceil((filter_height - 1) / 2)\n        \n        # Calculate padding for width\n        pad_left = math.floor((filter_width - 1) / 2)\n        pad_right = math.ceil((filter_width - 1) / 2)\n        \n        return ((pad_top, pad_bottom), (pad_left, pad_right))\n    \n    else:\n        raise ValueError(\"output_shape must be either 'same' or 'valid'\")\n\n# Example usage:\n# filter_shape = (3, 3)\n# output_shape = \"same\"\n# print(determine_padding(filter_shape, output_shape))  # Output: ((1, 1), (1, 1))\n```\n\n### Explanation:\n- **Valid Convolution**: No padding is required, so the function returns `((0, 0), (0, 0))`.\n- **Same Convolution**: The padding is calculated to ensure the output dimensions match the input dimensions. The padding is distributed such that if the required padding is odd, the smaller part is placed on the top/left and the larger part on the bottom/right. This is achieved using `math.floor` and `math.ceil` functions to split the padding appropriately."}
{"task_id": 240, "completion_id": 0, "completion": "Certainly! Let's implement the `create_encoding_dicts` function to build the required symbol\u2013number encoding dictionaries. We'll handle the special cases and ensure the mappings are consistent as described.\n\n```python\ndef create_encoding_dicts(obs_ids: list, action_ids: list,\n                          obs_encoder: dict | None = None,\n                          act_encoder: dict | None = None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n    \n    # Initialize dictionaries\n    obs2num = {}\n    num2obs = {}\n    act2num = {}\n    num2act = {}\n    \n    # Create observation mappings\n    if obs_encoder is not None:\n        obs2num = obs_encoder\n        num2obs = {v: k for k, v in obs_encoder.items()}\n    elif obs_ids:\n        obs2num = {obs: idx for idx, obs in enumerate(obs_ids)}\n        num2obs = {idx: obs for obs, idx in obs2num.items()}\n    \n    # Create action mappings\n    if act_encoder is not None:\n        act2num = act_encoder\n        num2act = {v: k for k, v in act_encoder.items()}\n    elif action_ids:\n        act2num = {act: idx for idx, act in enumerate(action_ids)}\n        num2act = {idx: act for act, idx in act2num.items()}\n    \n    # Return the combined dictionary\n    return {\n        'obs2num': obs2num,\n        'num2obs': num2obs,\n        'act2num': act2num,\n        'num2act': num2act\n    }\n\n# Example usage\nobs_ids = ['left', 'right', 'front', 'back']\naction_ids = ['move', 'turn']\nresult = create_encoding_dicts(obs_ids, action_ids)\nprint(result)\n```\n\n### Explanation:\n- **Observation Mapping**:\n  - If `obs_encoder` is provided, it is used directly to create `obs2num` and its inverse `num2obs`.\n  - If `obs_encoder` is not provided and `obs_ids` is not empty, we enumerate `obs_ids` to create `obs2num` and `num2obs`.\n  - If `obs_ids` is empty and no encoder is provided, both dictionaries remain empty.\n\n- **Action Mapping**:\n  - If `act_encoder` is provided, it is used directly to create `act2num` and its inverse `num2act`.\n  - If `act_encoder` is not provided and `action_ids` is not empty, we enumerate `action_ids` to create `act2num` and `num2act`.\n  - If `action_ids` is empty and no encoder is provided, both dictionaries remain empty.\n\nThis implementation ensures that the mappings are consistent and handles all special cases as described."}
{"task_id": 241, "completion_id": 0, "completion": "To implement the orthogonal weight initializer as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Step 2: Create a 2-D matrix A filled with i.i.d. samples from the standard normal distribution\n    d0 = shape[0]\n    d1_to_dn = np.prod(shape[1:])\n    A = np.random.randn(d0, d1_to_dn)\n\n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    Q = Q.reshape(shape) * scale\n\n    # Return the result as a Python list\n    return Q.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(result)\n```\n\n### Explanation:\n\n1. **Input Validation**: We first check if the length of the shape is less than 2. If so, we return `-1` as specified.\n\n2. **Matrix Creation**: We create a 2D matrix `A` with dimensions `(d0, d1\u22efdn)` filled with random samples from a standard normal distribution.\n\n3. **SVD Computation**: We perform Singular Value Decomposition (SVD) on matrix `A`. This gives us matrices `U`, `\u03a3`, and `V\u1d40`.\n\n4. **Choosing the Correct Matrix**: We select `U` if it matches the shape of `A`, otherwise, we select `V\u1d40`.\n\n5. **Reshape and Scale**: We reshape the selected matrix back to the original requested shape and scale it by the given factor.\n\n6. **Return**: Finally, we convert the NumPy array to a Python list using `tolist()` and return it.\n\nThis implementation ensures that the returned matrix satisfies the orthogonality condition as described in the task."}
{"task_id": 242, "completion_id": 0, "completion": "To implement the UCB1 arm selection rule, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport math\n\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float = 1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\n\n    PARAMETERS\n    ----------\n    ev_estimates : list[float]\n        Current empirical mean reward for every arm.\n    pull_counts  : list[int]\n        How many times each arm has been pulled so far (same length as\n        ``ev_estimates``).\n    current_step : int\n        The time-step about to be executed.  The quantity *T* in the UCB1\n        formula equals ``current_step + 1``.\n    C : float, default 1.0\n        Exploration parameter.  ``C = 1.0`` recovers the original UCB1.\n\n    RETURNS\n    -------\n    int\n        Index (0-based) of the arm selected by UCB1.\n    \"\"\"\n    # Check if any arm has never been pulled\n    for index, count in enumerate(pull_counts):\n        if count == 0:\n            return index  # Return the first arm that has never been pulled\n\n    # Calculate UCB scores for each arm\n    ucb_scores = []\n    for index, (ev, count) in enumerate(zip(ev_estimates, pull_counts)):\n        exploration_term = C * math.sqrt(2 * math.log(current_step + 1) / count)\n        ucb_score = ev + exploration_term\n        ucb_scores.append(ucb_score)\n\n    # Select the arm with the highest UCB score\n    # In case of ties, the arm with the smallest index is chosen\n    return ucb_scores.index(max(ucb_scores))\n\n# Example usage:\n# ev_estimates = [0.5, 0.6, 0.7]\n# pull_counts = [10, 15, 20]\n# current_step = 45\n# selected_arm = ucb1_select(ev_estimates, pull_counts, current_step)\n# print(selected_arm)\n```\n\n### Explanation:\n1. **Initial Check for Unpulled Arms**: The function first checks if any arm has never been pulled (i.e., its pull count is 0). If such an arm exists, it returns the index of the first unpulled arm. This ensures that every arm is tried at least once.\n\n2. **UCB Score Calculation**: For each arm, the UCB score is calculated using the formula provided. The exploration term is scaled by the parameter `C`, which encourages exploration.\n\n3. **Arm Selection**: The arm with the highest UCB score is selected. If multiple arms have the same score, the one with the smallest index is chosen, which is naturally handled by Python's `max` function when iterating from the first to the last element.\n\nThis implementation should work for any number of arms and any valid positive `current_step` value."}
{"task_id": 243, "completion_id": 0, "completion": "To implement the forward pass of the Actor-Critic network as described, we need to follow the steps outlined in the task. Given the fixed weights and biases, the calculations simplify significantly. Let's go through the implementation step-by-step:\n\n1. **ReLU Activation**: This activation function outputs the input directly if it is positive; otherwise, it outputs zero. In this network, the ReLU is applied after each dense layer except the output layers.\n\n2. **Softmax Activation**: This function converts logits into probabilities that sum to 1. Since all logits are identical, the softmax will yield equal probabilities for each action.\n\n3. **Network Layers**: The network consists of three dense layers followed by two separate output heads (actor and critic).\n\nHere's the implementation of the forward pass:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array for easier manipulation\n    s = np.array(state)\n    \n    # Dense-1: input \u2192 4 neurons, ReLU activation\n    z1 = np.maximum(0, np.sum(s))  # Each component of z1 is max(0, s0 + s1 + s2)\n    \n    # Dense-2: 4 \u2192 4 neurons, ReLU activation\n    z2 = np.maximum(0, 4 * z1)  # Each component of z2 is 4 * z1\n    \n    # Dense-3: 4 \u2192 4 neurons, ReLU activation\n    z3 = np.maximum(0, 4 * z2)  # Each component of z3 is 16 * z1\n    \n    # Actor head: 4 \u2192 3 neurons, Softmax activation\n    logits = 4 * z3  # Each component of logits is 64 * z1\n    action_probs = np.full(3, 1/3)  # Since all logits are identical, softmax gives equal probabilities\n    \n    # Critic head: 4 \u2192 1 neuron\n    state_value = 4 * z3  # The state value is 64 * z1\n    \n    # Round the results to 4 decimal places\n    action_probs = np.round(action_probs, 4).tolist()\n    state_value = round(state_value, 4)\n    \n    return action_probs, state_value\n\n# Example usage:\nstate = [1.0, 2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action Probabilities:\", action_probs)\nprint(\"State Value:\", state_value)\n```\n\n### Explanation:\n- **ReLU Layers**: The ReLU layers simply propagate the sum of the input state if it's positive, and zero otherwise. This is because all weights are 1 and biases are 0.\n- **Softmax Layer**: Since all logits are the same, the softmax function results in equal probabilities for each action.\n- **Critic Output**: The critic's output is a single scalar value derived from the final layer's output.\n\nThis code will correctly compute the action probabilities and state value for any given input state, adhering to the constraints and architecture specified."}
{"task_id": 244, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple, sparsity: float = 0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    # Validate shape\n    if not isinstance(shape, tuple) or not all(isinstance(dim, int) and dim > 0 for dim in shape):\n        return -1\n    \n    # Validate sparsity\n    if not isinstance(sparsity, (int, float)) or not (0 <= sparsity <= 1):\n        return -1\n    \n    # Generate random numbers\n    random_values = np.random.rand(*shape)\n    \n    # Create binary tensor based on sparsity\n    binary_tensor = (random_values >= (1 - sparsity)).astype(float)\n    \n    # Convert to nested Python list\n    return binary_tensor.tolist()\n\n# Example usage:\nnp.random.seed(0)\nprint(random_binary_tensor((2, 3), 0.5))\n```\n\nThis function first checks if the `shape` is a tuple of positive integers and if `sparsity` is a real number between 0 and 1. If either of these conditions is not met, it returns `-1`. Otherwise, it generates random numbers using `numpy.random.rand`, applies the threshold based on `sparsity`, and converts the resulting binary tensor to a nested Python list using `tolist()`."}
{"task_id": 247, "completion_id": 0, "completion": "To solve the problem of determining the arm with the highest expected reward in a Gaussian bandit, we need to follow these steps:\n\n1. **Input Validation**: Ensure that the input lists are of the same non-zero length, that all variances are strictly positive, and that all probabilities are within the interval [0, 1].\n\n2. **Calculate Expected Rewards**: For each arm, calculate the expected reward using the formula \\( \\mathbb{E}[R_k] = p_k \\cdot \\mu_k \\).\n\n3. **Determine the Best Arm**: Identify the arm with the maximum expected reward. If there are ties, select the arm with the smallest index.\n\n4. **Return the Result**: Return the maximum expected reward rounded to four decimal places and the index of the best arm.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]],\n                           payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function must compute the expected reward for each arm (p_k * \u03bc_k) and\n    return a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  If\n    the input is invalid (see task description) the function should return -1.\n    \"\"\"\n    # Check if both lists are of the same non-zero length\n    if len(payoff_dists) == 0 or len(payoff_dists) != len(payoff_probs):\n        return -1\n    \n    # Initialize variables to track the best expected value and corresponding arm\n    best_ev = -np.inf\n    best_arm = -1\n    \n    # Iterate over each arm to calculate expected rewards\n    for i, ((mu_k, sigma_k2), p_k) in enumerate(zip(payoff_dists, payoff_probs)):\n        # Validate variance and probability\n        if sigma_k2 <= 0 or not (0 <= p_k <= 1):\n            return -1\n        \n        # Calculate expected reward for the current arm\n        expected_reward = p_k * mu_k\n        \n        # Update best expected value and arm if current is better\n        if expected_reward > best_ev:\n            best_ev = expected_reward\n            best_arm = i\n    \n    # Return the best expected value rounded to 4 decimals and the best arm index\n    return round(best_ev, 4), best_arm\n```\n\n### Explanation:\n\n- **Input Validation**: The function first checks if the input lists are of the same non-zero length. It also checks if each variance is positive and each probability is within the valid range.\n\n- **Expected Reward Calculation**: For each arm, the expected reward is calculated using the formula \\( \\mathbb{E}[R_k] = p_k \\cdot \\mu_k \\).\n\n- **Finding the Best Arm**: The function keeps track of the maximum expected reward and the corresponding arm index. If a new maximum is found, it updates these values.\n\n- **Output**: The function returns the maximum expected reward rounded to four decimal places and the index of the best arm. If any input validation fails, it returns -1."}
{"task_id": 248, "completion_id": 0, "completion": "To implement the baseline class-probability predictor as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix. Its values are ignored by this baseline\n        predictor; only its length is potentially useful for sanity checks.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 for negative, 1 for positive).\n    X_test : np.ndarray\n        Feature matrix for which the predictions are required. The number of\n        returned probabilities must match the number of rows in this matrix.\n\n    Returns\n    -------\n    list[float]\n        A list containing the same probability repeated for every row of\n        `X_test`. The probability is rounded to four decimal places.\n    \"\"\"\n    # Step 1: Compute the positive-class probability\n    p = np.sum(y_train) / len(y_train)\n    \n    # Step 2: Create a NumPy array filled with the probability p\n    num_rows = X_test.shape[0]\n    probabilities = np.full(num_rows, p)\n    \n    # Step 3: Round every probability to four decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Step 4: Return the predictions as a regular Python list\n    return probabilities.tolist()\n\n# Example usage:\n# X_train = np.array([[1, 2], [3, 4], [5, 6]])\n# y_train = np.array([0, 1, 1])\n# X_test = np.array([[7, 8], [9, 10]])\n# print(baseline_prob_predict(X_train, y_train, X_test))\n```\n\n### Explanation:\n1. **Compute the Positive-Class Probability**: We calculate the proportion of positive labels in `y_train` using `np.sum(y_train) / len(y_train)`. This gives us the empirical probability of the positive class.\n\n2. **Create a NumPy Array**: We use `np.full(num_rows, p)` to create an array filled with the computed probability `p`, where `num_rows` is the number of rows in `X_test`.\n\n3. **Round Probabilities**: We round each probability to four decimal places using `np.round(probabilities, 4)`.\n\n4. **Return as a List**: Finally, we convert the NumPy array to a Python list using `probabilities.tolist()` and return it.\n\nThis function handles the case where `X_test` has zero rows by returning an empty list, as the `np.full` function will create an empty array when `num_rows` is zero."}
{"task_id": 249, "completion_id": 0, "completion": "To implement the forward pass of an Actor-Critic network using NumPy, we need to perform several matrix operations and apply activation functions. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef relu(x):\n    \"\"\"Applies the ReLU activation function.\"\"\"\n    return np.maximum(0, x)\n\ndef softmax(x):\n    \"\"\"Applies the softmax function.\"\"\"\n    exp_x = np.exp(x - np.max(x))  # Subtract max for numerical stability\n    return exp_x / np.sum(exp_x)\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a NumPy array\n    state = np.array(state)\n\n    # Extract parameters and convert them to NumPy arrays\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n\n    # Forward pass through shared layers\n    h1 = relu(np.dot(state, W1) + b1)\n    h2 = relu(np.dot(h1, W2) + b2)\n    h3 = relu(np.dot(h2, W3) + b3)\n\n    # Actor head: compute action scores and apply softmax\n    action_scores = np.dot(h3, Wa) + ba\n    probabilities = softmax(action_scores)\n\n    # Critic head: compute state value\n    state_value = np.dot(h3, Wc) + bc\n\n    # Round probabilities and state value to 4 decimal places\n    probabilities = [round(p, 4) if p != 0 and p != 1 else round(p, 1) for p in probabilities]\n    state_value = round(state_value.item(), 4) if state_value != 0 and state_value != 1 else round(state_value.item(), 1)\n\n    return probabilities, state_value\n\n# Example usage:\n# state = [0.1, 0.2, 0.3]\n# params = {\n#     'W1': [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]],\n#     'b1': [0.1, 0.2],\n#     'W2': [[0.1, 0.2], [0.3, 0.4]],\n#     'b2': [0.1, 0.2],\n#     'W3': [[0.1, 0.2], [0.3, 0.4]],\n#     'b3': [0.1, 0.2],\n#     'Wa': [[0.1, 0.2], [0.3, 0.4]],\n#     'ba': [0.1, 0.2],\n#     'Wc': [0.1, 0.2],\n#     'bc': [0.1]\n# }\n# probabilities, value = actor_critic_forward(state, params)\n# print(probabilities, value)\n```\n\nThis code defines the `actor_critic_forward` function, which performs the forward pass through the shared layers, computes the action probabilities using the actor head, and calculates the state value using the critic head. The results are rounded to the specified precision before being returned."}
{"task_id": 251, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Element-wise logistic sigmoid.\"\"\"\n    if np.isscalar(x):\n        return round(1 / (1 + np.exp(-x)), 4)\n    else:\n        x = np.array(x)\n        return np.round(1 / (1 + np.exp(-x)), 4)\n\ndef tanh(x):\n    \"\"\"Element-wise hyperbolic tangent.\"\"\"\n    if np.isscalar(x):\n        return round(np.tanh(x), 4)\n    else:\n        x = np.array(x)\n        return np.round(np.tanh(x), 4)\n\ndef relu(x):\n    \"\"\"Element-wise Rectified Linear Unit.\"\"\"\n    if np.isscalar(x):\n        return round(max(0, x), 4)\n    else:\n        x = np.array(x)\n        return np.round(np.maximum(0, x), 4)\n\ndef leaky_relu(x, alpha: float = 0.01):\n    \"\"\"Element-wise Leaky-ReLU with slope *alpha* for x<0.\"\"\"\n    if np.isscalar(x):\n        return round(x if x > 0 else alpha * x, 4)\n    else:\n        x = np.array(x)\n        return np.round(np.where(x > 0, x, alpha * x), 4)\n\ndef softmax(x):\n    \"\"\"Numerically stable softmax over a 1-D input.\"\"\"\n    x = np.array(x)\n    e_x = np.exp(x - np.max(x))\n    return np.round(e_x / e_x.sum(), 4)\n\ndef get_activation(name):\n    \"\"\"Return the activation function by *name*.\n\n    Args:\n        name (str): One of {\"sigmoid\", \"tanh\", \"relu\", \"leaky_relu\", \"softmax\"}\n\n    Returns:\n        Callable: the requested activation function.\n\n    Raises:\n        ValueError: If *name* is not recognised.\n    \"\"\"\n    activations = {\n        \"sigmoid\": sigmoid,\n        \"tanh\": tanh,\n        \"relu\": relu,\n        \"leaky_relu\": leaky_relu,\n        \"softmax\": softmax\n    }\n    \n    if name in activations:\n        return activations[name]\n    else:\n        raise ValueError('Invalid activation function.')\n```\n\n### Explanation:\n\n1. **Sigmoid**: The logistic sigmoid function is implemented using the formula \\( \\sigma(x) = \\frac{1}{1 + e^{-x}} \\). It handles both scalar and array inputs, rounding the result to 4 decimal places.\n\n2. **Tanh**: The hyperbolic tangent function is implemented using `np.tanh`, which is applied element-wise. The result is rounded to 4 decimal places.\n\n3. **ReLU**: The Rectified Linear Unit function returns \\( \\max(0, x) \\). It uses `np.maximum` for array inputs and rounds the result.\n\n4. **Leaky ReLU**: This function returns \\( x \\) if \\( x > 0 \\) and \\( \\alpha \\times x \\) otherwise, where \\( \\alpha \\) is 0.01 by default. It uses `np.where` for array inputs and rounds the result.\n\n5. **Softmax**: The softmax function is implemented in a numerically stable way by subtracting the maximum value from the input before exponentiation. It normalizes the exponentiated values and rounds the result.\n\n6. **get_activation**: This helper function returns the appropriate activation function based on the input name. If the name is not recognized, it raises a `ValueError`."}
{"task_id": 252, "completion_id": 0, "completion": "To implement the function that computes both the gradient and the diagonal Hessian of the least-squares loss, we can follow the given mathematical definitions. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    # Compute the gradient\n    grad = actual - predicted\n    \n    # Compute the Hessian (which is a list of ones)\n    hess = np.ones_like(actual)\n    \n    # Convert the NumPy arrays to Python lists before returning\n    return grad.tolist(), hess.tolist()\n\n# Example usage:\nactual = np.array([1.0, 2.0, 3.0])\npredicted = np.array([1.5, 2.5, 3.5])\ngrad, hess = least_squares_loss(actual, predicted)\nprint(\"Gradient:\", grad)\nprint(\"Hessian:\", hess)\n```\n\n### Explanation:\n1. **Gradient Calculation**: The gradient is calculated as the difference between the `actual` and `predicted` arrays. This is straightforward using NumPy's element-wise operations.\n\n2. **Hessian Calculation**: The Hessian for the least-squares loss is constant and equal to 1 for each element. We use `np.ones_like(actual)` to create an array of ones with the same shape as `actual`.\n\n3. **Conversion to Python Lists**: Since the output constraints specify that the result should be Python lists, we convert the NumPy arrays to lists using the `.tolist()` method before returning them.\n\nThis implementation efficiently computes the required gradient and Hessian for the least-squares loss function."}
{"task_id": 253, "completion_id": 0, "completion": "To implement the `elastic_net_regularization` function, we need to compute both the Elastic-Net penalty and its gradient based on the given weight vector `w`, regularization strength `alpha`, and L1 ratio `l1_ratio`. The function should handle both the calculation of the penalty and the gradient, depending on the `gradient` flag.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Ensure w is a NumPy array for vectorized operations\n    w = np.array(w)\n    \n    # Calculate the L1 norm (sum of absolute values)\n    l1_norm = np.sum(np.abs(w))\n    \n    # Calculate the L2 norm (Euclidean norm)\n    l2_norm = np.dot(w, w)\n    \n    if not gradient:\n        # Calculate the Elastic-Net penalty\n        penalty = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm)\n        return round(penalty, 4)\n    else:\n        # Calculate the gradient of the Elastic-Net penalty\n        l1_grad = np.sign(w)\n        l2_grad = w\n        gradient = alpha * (l1_ratio * l1_grad + (1 - l1_ratio) * l2_grad)\n        return [round(g, 4) for g in gradient]\n\n# Example usage:\nw = [1.0, -2.0, 3.0]\nalpha = 0.1\nl1_ratio = 0.5\n\n# Calculate penalty\npenalty = elastic_net_regularization(w, alpha, l1_ratio)\nprint(\"Penalty:\", penalty)\n\n# Calculate gradient\ngrad = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\nprint(\"Gradient:\", grad)\n```\n\n### Explanation:\n\n1. **Penalty Calculation**:\n   - The L1 norm is calculated as the sum of the absolute values of the weight vector `w`.\n   - The L2 norm is calculated as the dot product of `w` with itself, which is equivalent to the sum of squares of the elements of `w`.\n   - The penalty is then computed using the formula provided, and the result is rounded to 4 decimal places.\n\n2. **Gradient Calculation**:\n   - The gradient of the L1 norm is the sign of each element in `w`.\n   - The gradient of the L2 norm is simply `w` itself.\n   - The overall gradient is a combination of these two components, scaled by `alpha` and the respective ratios. Each element of the gradient is rounded to 4 decimal places.\n\nThis implementation ensures that the function can handle both the penalty and gradient calculations efficiently and correctly."}
{"task_id": 255, "completion_id": 0, "completion": "To implement the `usable_ace` function, we need to check if there is an ace in the hand that can be counted as 11 without the total hand value exceeding 21. Here's how you can implement this:\n\n```python\ndef usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    # Calculate the total value of the hand treating all aces as 1 initially\n    total_value = sum(hand)\n    \n    # Count the number of aces in the hand\n    ace_count = hand.count(1)\n    \n    # Check if any ace can be treated as 11 without exceeding 21\n    for _ in range(ace_count):\n        # If treating an ace as 11 keeps the total value <= 21, return True\n        if total_value + 10 <= 21:\n            return True\n        # Otherwise, treat the ace as 1 (which is already the case) and continue\n    \n    # If no ace can be treated as 11 without exceeding 21, return False\n    return False\n```\n\n### Explanation:\n1. **Initial Calculation**: Start by calculating the total value of the hand assuming all aces are counted as 1. This is done using `sum(hand)`.\n\n2. **Count Aces**: Count the number of aces in the hand using `hand.count(1)`.\n\n3. **Check Usability**: Iterate over the number of aces. For each ace, check if treating it as 11 (by adding 10 to the total value) keeps the total value \u2264 21. If it does, return `True`.\n\n4. **Return False**: If no ace can be treated as 11 without exceeding 21, return `False`.\n\nThis approach ensures that we correctly identify whether there is a usable ace in the hand."}
{"task_id": 256, "completion_id": 0, "completion": "To implement the numerical gradient checker for a vanilla RNN parameter, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle special cases\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n\n    # Get the parameter to be checked\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros(param_shape, dtype=np.float64)\n\n    # Iterate over each element in the parameter\n    for index, _ in np.ndenumerate(param):\n        # Create perturbed parameters\n        param_plus_epsilon = deepcopy(param)\n        param_minus_epsilon = deepcopy(param)\n\n        param_plus_epsilon[index] += epsilon\n        param_minus_epsilon[index] -= epsilon\n\n        # Set the perturbed parameters in the model\n        model.parameters[param_name] = param_plus_epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            predictions_plus.append(model.forward(X[:, :, t]))\n        loss_plus = loss_func(predictions_plus)\n\n        model.parameters[param_name] = param_minus_epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            predictions_minus.append(model.forward(X[:, :, t]))\n        loss_minus = loss_func(predictions_minus)\n\n        # Compute the numerical gradient\n        grads[index] = (loss_plus - loss_minus) / (2 * epsilon)\n\n    # Restore the original parameter\n    model.parameters[param_name] = param\n\n    # Return the transposed gradient\n    return grads.T\n```\n\n### Explanation:\n\n1. **Special Cases Handling**: The function immediately returns `None` if `param_name` is \"X\" or \"y\". If `param_name` is \"Ba\" or \"Bx\", it converts them to lowercase to match the keys in the `parameters` dictionary.\n\n2. **Gradient Calculation**:\n   - For each element in the parameter, perturb it by `+\u03b5` and `-\u03b5`.\n   - For each perturbation, run the forward pass for `n_t` time-steps, collect predictions, and compute the loss.\n   - Use the centered finite difference formula to approximate the gradient.\n\n3. **Parameter Restoration**: After computing the gradient, restore the original parameter to ensure the model remains unchanged.\n\n4. **Return**: The function returns the transposed numerical gradient, ensuring the output shape matches the requirement.\n\nThis implementation should work correctly for any trainable parameter in the model's `parameters` dictionary."}
{"task_id": 257, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps from scratch, we need to follow these steps:\n\n1. **Initialize Weights**: Start with equal weights for all training samples.\n2. **Iteratively Build Stumps**: For each iteration, find the decision stump that minimizes the weighted error.\n3. **Compute Stump Weight**: Calculate the weight of the stump using the formula provided.\n4. **Update Weights**: Adjust the weights of the training samples based on the errors.\n5. **Aggregate Stump Votes**: For prediction, use the weighted sum of the stumps' predictions.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    classifiers = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_pred = None\n\n        for feature in range(n):\n            feature_values = np.unique(X_train[:, feature])\n            for threshold in feature_values:\n                for polarity in [1, -1]:\n                    stump_pred = np.ones(m)\n                    if polarity == 1:\n                        stump_pred[X_train[:, feature] < threshold] = -1\n                    else:\n                        stump_pred[X_train[:, feature] >= threshold] = -1\n\n                    error = np.sum(weights[y_train != stump_pred])\n\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature, threshold, polarity)\n                        best_pred = stump_pred\n\n        epsilon = min_error / np.sum(weights)\n        alpha = 0.5 * np.log((1 - epsilon) / (epsilon + 1e-10))\n        weights *= np.exp(-alpha * y_train * best_pred)\n        weights /= np.sum(weights)\n\n        classifiers.append(best_stump)\n        alphas.append(alpha)\n\n    def stump_predict(X, stump):\n        feature, threshold, polarity = stump\n        predictions = np.ones(X.shape[0])\n        if polarity == 1:\n            predictions[X[:, feature] < threshold] = -1\n        else:\n            predictions[X[:, feature] >= threshold] = -1\n        return predictions\n\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, classifiers):\n        final_predictions += alpha * stump_predict(X_test, stump)\n\n    return [1 if pred > 0 else -1 for pred in final_predictions]\n\n```\n\n### Explanation:\n\n- **Initialization**: We start by initializing the weights equally for all samples.\n- **Decision Stump**: For each feature and possible threshold, we evaluate the weighted error and select the best stump.\n- **Stump Weight**: The weight of each stump is calculated using the formula provided, which depends on the error rate.\n- **Weight Update**: We update the weights of the samples, increasing the weight of misclassified samples.\n- **Prediction**: For each test sample, we compute the weighted sum of the predictions from all stumps and determine the final class based on the sign of this sum.\n\nThis implementation should work efficiently for small to medium-sized datasets. For larger datasets, optimizations and more sophisticated data structures might be necessary."}
{"task_id": 258, "completion_id": 0, "completion": "To implement the hinge loss function as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef hinge_loss(actual, predicted):\n    \"\"\"Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if the lengths of the inputs are the same\n    if actual.shape[0] != predicted.shape[0]:\n        return -1\n    \n    # Compute the per-sample hinge losses\n    losses = np.maximum(0, 1 - actual * predicted)\n    \n    # Compute the mean loss\n    mean_loss = np.mean(losses)\n    \n    # Return the mean loss rounded to four decimal places\n    return round(mean_loss, 4)\n\n# Example usage:\n# actual = [1, -1, 1, -1]\n# predicted = [0.8, -0.5, 0.3, -0.2]\n# print(hinge_loss(actual, predicted))  # Output should be the mean hinge loss\n```\n\n### Explanation:\n\n1. **Input Conversion**: The function first converts the input lists to NumPy arrays. This allows us to leverage NumPy's vectorized operations for efficient computation.\n\n2. **Length Check**: Before proceeding with the computation, the function checks if the lengths of the `actual` and `predicted` arrays are the same. If not, it returns `-1` as specified.\n\n3. **Hinge Loss Calculation**: The hinge loss for each sample is calculated using the formula `L_i = max(0, 1 - y_i * \\hat{y}_i)`. This is done in a vectorized manner using `np.maximum`.\n\n4. **Mean Loss**: The mean of these per-sample losses is computed using `np.mean`.\n\n5. **Rounding**: Finally, the mean loss is rounded to four decimal places before being returned.\n\nThis implementation efficiently computes the hinge loss using NumPy's capabilities, ensuring both correctness and performance."}
{"task_id": 259, "completion_id": 0, "completion": "To implement the `sample_replay_memory` function, we need to use Python's `random.sample` method to select a specified number of unique elements from the list. We'll seed the random number generator with the value 42 to ensure deterministic behavior. If the requested `batch_size` exceeds the length of the buffer, we'll return -1. Here's the complete implementation:\n\n```python\nimport random\n\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    if batch_size > len(memory):\n        return -1\n    \n    random.seed(42)\n    sampled_transitions = random.sample(memory, batch_size)\n    return sampled_transitions\n```\n\n### Explanation:\n1. **Check Buffer Length**: We first check if `batch_size` is greater than the length of `memory`. If it is, we return -1, as it's not possible to sample more elements than are present in the buffer.\n\n2. **Seed the Random Generator**: We use `random.seed(42)` to ensure that the sampling is deterministic. This means that every time the function is called with the same inputs, it will produce the same output.\n\n3. **Sample Transitions**: We use `random.sample(memory, batch_size)` to select `batch_size` unique elements from `memory`. This function returns a list of sampled elements in the order they are selected.\n\n4. **Return the Sampled List**: Finally, we return the list of sampled transitions."}
{"task_id": 260, "completion_id": 0, "completion": "To implement the `tileswrap` function, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nfrom math import floor\n\ndef tileswrap(ihtORsize: int,\n              numtilings: int,\n              floats: list[float],\n              wrapwidths: list[int | None],\n              ints: list[int] | None = None,\n              readonly: bool = False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\n\n    The implementation must follow Sutton's original algorithm with the\n    modifications described in the task description (deterministic hash and\n    integer table size).\n\n    Args:\n        ihtORsize (int): Size of the hash table (positive integer).\n        numtilings (int): Number of tilings.\n        floats (list[float]): Continuous variables.\n        wrapwidths (list[int | None]): Optional wrap width for every float.  If\n            `None` or 0 no wrapping is applied.\n        ints (list[int] | None): Additional integer variables to include in the\n            coordinate list.\n        readonly (bool): Ignored \u2013 present for API compatibility.\n\n    Returns:\n        list[int]: Indices of the active tiles, one per tiling.\n    \"\"\"\n    if ints is None:\n        ints = []\n\n    indices = []\n\n    # Quantize each float\n    q_floats = [floor(f * numtilings) for f in floats]\n\n    for t in range(numtilings):\n        coords = [t]\n        b = t\n\n        for q_i, wrapwidth_i in zip(q_floats, wrapwidths):\n            c = (q_i + (b % numtilings)) // numtilings\n            if wrapwidth_i is not None and wrapwidth_i > 0:\n                coords.append(c % wrapwidth_i)\n            else:\n                coords.append(c)\n            b += t * 2\n\n        # Append integer variables\n        coords.extend(ints)\n\n        # Hash the coordinates\n        index = 0\n        for coord in coords:\n            index = (index * 31 + coord) % ihtORsize\n\n        indices.append(index)\n\n    return indices\n\n# Example usage\nihtORsize = 32\nnumtilings = 2\nfloats = [0.1]\nwrapwidths = [5]\nprint(tileswrap(ihtORsize, numtilings, floats, wrapwidths))  # Output: [0, 31]\n```\n\n### Explanation:\n1. **Quantization**: Each float is quantized by multiplying it with `numtilings` and taking the floor of the result.\n\n2. **Coordinate Calculation**: For each tiling `t`, we start with the tiling number in the coordinate list. We then calculate the coordinate for each quantized float `q_i` using the formula provided. If `wrapwidth_i` is positive, we apply wrapping using modulo operation; otherwise, we append the coordinate unchanged.\n\n3. **Integer Variables**: Any additional integer variables are appended to the coordinate list.\n\n4. **Hashing**: We use a deterministic polynomial hash to map the coordinate list to an index in the range `[0, ihtORsize)`.\n\n5. **Return**: The function returns a list of indices, one for each tiling.\n\nThis implementation follows the task description closely and should work correctly for the given example and similar inputs."}
{"task_id": 261, "completion_id": 0, "completion": "To implement the Glorot Xavier Normal Initialization function, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        fan_in = shape[1] * np.prod(shape[2:])\n        fan_out = shape[0] * np.prod(shape[2:])\n\n    # Calculate the standard deviation\n    stddev = np.sqrt(2.0 / (fan_in + fan_out))\n\n    # Generate the array with the specified shape and standard deviation\n    return np.random.normal(loc=0.0, scale=stddev, size=shape)\n\n# Example usage:\n# shape = (64, 128, 3, 3)  # Example shape for a convolutional layer\n# weights = glorot_normal(shape)\n# print(weights.shape)  # Should print (64, 128, 3, 3)\n```\n\n### Explanation:\n\n1. **Shape Validation**: The function first checks if the provided shape has at least two dimensions. If not, it raises a `ValueError`.\n\n2. **Fan In and Fan Out Calculation**:\n   - For a 2-D shape, `fan_in` and `fan_out` are directly taken from the shape.\n   - For shapes with more than two dimensions, the receptive field size is calculated as the product of all dimensions after the first two. `fan_in` is calculated as `in_channels * receptive_field_size`, and `fan_out` is calculated as `out_channels * receptive_field_size`.\n\n3. **Standard Deviation Calculation**: The standard deviation `s` is computed using the formula `sqrt(2 / (fan_in + fan_out))`.\n\n4. **Array Generation**: A NumPy array is generated using `np.random.normal` with mean 0 and the calculated standard deviation, ensuring the array has the requested shape.\n\nThis implementation ensures that the generated weights are initialized according to the Glorot Xavier Normal Initialization method, which helps in maintaining a balanced flow of gradients during neural network training."}
{"task_id": 263, "completion_id": 0, "completion": "To implement the forward pass of a fully-connected neural network, we need to iterate through each layer, compute the pre-activation values, apply the specified activation function, and finally return the output of the network. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-z))\n\ndef relu(z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, z)\n\ndef linear(z):\n    \"\"\"Linear activation function (identity).\"\"\"\n    return z\n\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    # Convert input to numpy array if it's not already\n    a = np.array(x)\n    \n    # Define a dictionary to map activation function names to functions\n    activation_functions = {\n        \"sigmoid\": sigmoid,\n        \"relu\": relu,\n        \"linear\": linear\n    }\n    \n    # Iterate over each layer\n    for W, activation in zip(weights, activations):\n        # Prepend the bias term\n        a = np.insert(a, 0, 1)\n        \n        # Compute the pre-activation\n        z = np.dot(W, a)\n        \n        # Apply the activation function\n        a = activation_functions[activation](z)\n    \n    # Round the final output to 4 decimal places\n    a_rounded = np.round(a, 4)\n    \n    # If the output is a single value, return it as a scalar\n    if a_rounded.size == 1:\n        return a_rounded.item()\n    \n    # Otherwise, return the output as a list\n    return a_rounded.tolist()\n\n# Example usage:\n# x = [0.5, 0.3]\n# weights = [\n#     [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]],\n#     [[0.7, 0.8, 0.9]]\n# ]\n# activations = [\"relu\", \"sigmoid\"]\n# output = feedforward_predict(x, weights, activations)\n# print(output)\n```\n\n### Explanation:\n1. **Activation Functions**: We define separate functions for each activation function: `sigmoid`, `relu`, and `linear`.\n\n2. **Forward Pass**:\n   - We start with the input vector `x` and convert it to a numpy array.\n   - For each layer, we prepend the bias term to the activations from the previous layer.\n   - We compute the pre-activation values by multiplying the weight matrix with the activations.\n   - We apply the specified activation function to the pre-activation values.\n   - We update the activations for the next layer.\n\n3. **Output**:\n   - We round the final output to 4 decimal places.\n   - If the output is a single value, we return it as a scalar. Otherwise, we return it as a list.\n\nThis implementation handles the forward pass for a fully-connected neural network with specified activation functions for each layer."}
{"task_id": 265, "completion_id": 0, "completion": "To implement the `king_loss_fn` function according to the given specifications, we need to evaluate the input `x` against the defined piece-wise conditions and compute the corresponding loss value. Here's the complete implementation:\n\n```python\ndef king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:   L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:  L(x) = 0.003726653172066108\n\n    The result must be rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        loss = -0.25 * x + 82.50372665317208\n    elif 250 < x <= 600:\n        loss = 20.00372665317208\n    elif 600 < x <= 700:\n        loss = -0.2 * x + 140.00372665317207\n    else:  # x > 700\n        loss = 0.003726653172066108\n    \n    return round(loss, 4)\n\n# Example usage:\nprint(king_loss_fn(100))  # Should evaluate the first condition\nprint(king_loss_fn(300))  # Should evaluate the second condition\nprint(king_loss_fn(650))  # Should evaluate the third condition\nprint(king_loss_fn(750))  # Should evaluate the fourth condition\n```\n\n### Explanation:\n- The function checks the value of `x` against the specified conditions using `if`, `elif`, and `else` statements.\n- For each condition, it calculates the loss using the corresponding formula.\n- The result is rounded to four decimal places using `round(value, 4)` before returning.\n- The function handles both integer and float inputs, as specified in the type hint `x: int | float`."}
{"task_id": 266, "completion_id": 0, "completion": "To solve the problem of building an adjacency list for an undirected graph, we need to follow these steps:\n\n1. **Initialize the adjacency list**: Create a dictionary where each vertex from `V` is a key, and the value is an empty list that will hold its neighbors.\n\n2. **Populate the adjacency list**: Iterate over the edge list `E` and for each edge `(u, v)`, add `v` to the adjacency list of `u` and `u` to the adjacency list of `v`. This accounts for the undirected nature of the graph.\n\n3. **Remove duplicates and sort neighbors**: For each vertex, remove duplicate neighbors and sort them according to their order of appearance in `V`.\n\n4. **Convert the dictionary to a list of lists**: Finally, convert the adjacency list from a dictionary to a list of lists, preserving the order of vertices as given in `V`.\n\nHere's the implementation of the function:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    # Initialize the adjacency list as a dictionary\n    adj_dict = {vertex: [] for vertex in V}\n    \n    # Populate the adjacency list\n    for u, v in E:\n        if v not in adj_dict[u]:\n            adj_dict[u].append(v)\n        if u not in adj_dict[v]:\n            adj_dict[v].append(u)\n    \n    # Convert the adjacency list to a list of lists\n    adj_list = []\n    for vertex in V:\n        # Sort neighbors according to their order in V\n        neighbors = adj_dict[vertex]\n        sorted_neighbors = sorted(neighbors, key=lambda x: V.index(x))\n        adj_list.append(sorted_neighbors)\n    \n    return adj_list\n\n# Example usage:\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('A', 'C'), ('B', 'C'), ('C', 'D'), ('A', 'B')]\nprint(build_adj_list(V, E))\n```\n\n### Explanation:\n\n- **Initialization**: We start by creating a dictionary `adj_dict` where each vertex in `V` maps to an empty list.\n\n- **Populating the adjacency list**: We iterate over each edge `(u, v)` in `E`. Since the graph is undirected, we add `v` to the list of neighbors for `u` and `u` to the list of neighbors for `v`. We ensure no duplicates are added by checking if the neighbor is already present in the list.\n\n- **Sorting and removing duplicates**: For each vertex, we sort its list of neighbors based on their order in `V`. This ensures the output is deterministic and easy to test.\n\n- **Conversion to list of lists**: Finally, we convert the dictionary to a list of lists, maintaining the order of vertices as given in `V`.\n\nThis implementation efficiently constructs the adjacency list while adhering to the constraints provided."}
{"task_id": 267, "completion_id": 0, "completion": "To solve the problem of finding the optimal weighted decision stump, we need to iterate over each feature and each unique value of that feature to determine the best threshold and polarity that minimizes the weighted classification error. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\n        \"feature_index\": None,\n        \"threshold\": None,\n        \"polarity\": None,\n        \"weighted_error\": float('inf')\n    }\n    \n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        \n        for threshold in unique_values:\n            for polarity in [1, -1]:\n                predictions = np.ones(n_samples)\n                if polarity == 1:\n                    predictions[feature_values >= threshold] = -1\n                else:\n                    predictions[feature_values < threshold] = -1\n                \n                misclassified = predictions != y\n                weighted_error = np.sum(sample_weights[misclassified])\n                \n                if weighted_error < best_stump[\"weighted_error\"]:\n                    best_stump[\"feature_index\"] = feature_index\n                    best_stump[\"threshold\"] = round(threshold, 4)\n                    best_stump[\"polarity\"] = polarity\n                    best_stump[\"weighted_error\"] = round(weighted_error, 4)\n    \n    return best_stump\n\n# Example usage:\n# X = np.array([[2.5, 3.0], [1.0, 2.0], [3.5, 4.0]])\n# y = np.array([1, -1, 1])\n# sample_weights = np.array([0.2, 0.5, 0.3])\n# print(train_decision_stump(X, y, sample_weights))\n```\n\n### Explanation:\n1. **Iterate Over Features**: We loop through each feature in the dataset.\n2. **Unique Thresholds**: For each feature, we consider all unique values as potential thresholds.\n3. **Polarity**: We test both polarities (1 and -1) for each threshold.\n4. **Prediction and Error Calculation**: For each combination of feature, threshold, and polarity, we calculate the predictions and the weighted classification error.\n5. **Update Best Stump**: If the current stump configuration results in a lower weighted error than previously found, we update the best stump information.\n6. **Return Best Stump**: After evaluating all possibilities, we return the best stump configuration.\n\nThis approach ensures that we find the optimal decision stump that minimizes the weighted classification error across all samples."}
{"task_id": 268, "completion_id": 0, "completion": "To implement the Erd\u0151s\u2013R\u00e9nyi \\( G(n, p) \\) model for generating a random graph, we need to consider both directed and undirected cases. The adjacency matrix will be a nested list where each element is either 0 or 1, indicating the absence or presence of an edge, respectively. Here's how you can complete the function:\n\n```python\nimport numpy as np\nfrom itertools import combinations, permutations\n\ndef random_unweighted_graph(n_vertices: int, edge_prob: float = 0.5, directed: bool = False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool):  Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    # Initialize an n_vertices x n_vertices matrix with zeros\n    adjacency_matrix = [[0] * n_vertices for _ in range(n_vertices)]\n    \n    # Choose the appropriate iterator based on whether the graph is directed\n    if directed:\n        edge_iterator = permutations(range(n_vertices), 2)\n    else:\n        edge_iterator = combinations(range(n_vertices), 2)\n    \n    # Iterate over all possible edges\n    for i, j in edge_iterator:\n        if np.random.rand() <= edge_prob:\n            adjacency_matrix[i][j] = 1\n            if not directed:\n                adjacency_matrix[j][i] = 1\n    \n    return adjacency_matrix\n\n# Example usage:\n# np.random.seed(42)  # For reproducibility\n# print(random_unweighted_graph(5, 0.5, directed=False))\n```\n\n### Explanation:\n\n1. **Initialization**: We start by creating an `n_vertices x n_vertices` matrix filled with zeros. This will be our adjacency matrix.\n\n2. **Edge Iteration**:\n   - If the graph is directed, we use `permutations` to consider all possible ordered pairs of vertices (i, j) where \\( i \\neq j \\).\n   - If the graph is undirected, we use `combinations` to consider all possible unordered pairs of vertices (i, j) where \\( i < j \\).\n\n3. **Edge Formation**:\n   - For each possible edge, we generate a random number using `np.random.rand()`.\n   - If this random number is less than or equal to `edge_prob`, we add the edge to the graph by setting the corresponding entry in the adjacency matrix to 1.\n   - In the undirected case, we ensure the matrix is symmetric by setting both `adjacency_matrix[i][j]` and `adjacency_matrix[j][i]` to 1.\n\n4. **Return**: The function returns the adjacency matrix as a nested list.\n\nThis implementation ensures that the graph is generated according to the Erd\u0151s\u2013R\u00e9nyi model, with the specified properties for directed and undirected graphs."}
{"task_id": 269, "completion_id": 0, "completion": "To calculate the total number of trainable parameters in the described two-layer DQN, we need to compute the number of parameters for each fully-connected layer and then sum them up.\n\nHere's the breakdown:\n\n1. **First Layer:**\n   - Input features: `state_dimensions`\n   - Output features (hidden neurons): 164\n   - Trainable parameters: \n     - Weights: `state_dimensions * 164`\n     - Biases: `164`\n   - Total for the first layer: `(state_dimensions * 164) + 164`\n\n2. **Second Layer:**\n   - Input features: 164 (from the first layer)\n   - Output features: `action_dimensions`\n   - Trainable parameters:\n     - Weights: `164 * action_dimensions`\n     - Biases: `action_dimensions`\n   - Total for the second layer: `(164 * action_dimensions) + action_dimensions`\n\nFinally, sum the parameters from both layers to get the total number of trainable parameters.\n\nHere's the implementation:\n\n```python\ndef count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    # First layer parameters\n    first_layer_params = (state_dimensions * 164) + 164\n    \n    # Second layer parameters\n    second_layer_params = (164 * action_dimensions) + action_dimensions\n    \n    # Total trainable parameters\n    total_params = first_layer_params + second_layer_params\n    \n    return total_params\n```\n\nThis function will correctly compute the total number of trainable parameters for the given DQN architecture based on the provided `state_dimensions` and `action_dimensions`."}
{"task_id": 270, "completion_id": 0, "completion": "To solve this problem, we need to calculate the expected reward for each arm using the given context and parameter matrices. The expected reward for each arm is computed as the dot product of the corresponding context vector and parameter vector. Once we have the expected rewards for all arms, we identify the arm with the highest reward, rounding the rewards to four decimal places. If there are ties, we select the arm with the smallest index.\n\nHere's the implementation of the `oracle_payoff` function:\n\n```python\nimport numpy as np\n\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    \"\"\"Determine the best arm for a contextual linear bandit.\n\n    Each column *k* of *context* (shape D\u00d7K) is a context vector x_k \u2208 \u211d^D.\n    Each column *k* of *thetas*  (shape D\u00d7K) is the corresponding parameter\n    vector \u03b8_k \u2208 \u211d^D.\n\n    The expected reward of arm *k* is x_k^T \u03b8_k.\n\n    The function must return the maximal expected reward rounded to four\n    decimals and the index (0-based) of the arm that achieves it.  If more\n    than one arm attains the maximal reward (after rounding), return the\n    smallest index.\n\n    Args:\n        context: numpy.ndarray of shape (D, K)\n        thetas : numpy.ndarray of shape (D, K)\n\n    Returns:\n        Tuple containing (best_reward, best_arm).\n    \"\"\"\n    # Calculate the expected rewards for each arm\n    expected_rewards = np.sum(context * thetas, axis=0)\n    \n    # Round the rewards to four decimal places\n    rounded_rewards = np.round(expected_rewards, 4)\n    \n    # Find the index of the arm with the maximum rounded reward\n    best_arm = np.argmax(rounded_rewards)\n    \n    # Get the best reward\n    best_reward = rounded_rewards[best_arm]\n    \n    return best_reward, best_arm\n\n# Example usage\ncontext = np.array([[0.5, 1.0],\n                    [1.5, 0.2]])\nthetas  = np.array([[0.1, 0.3],\n                    [0.4, 0.2]])\n\nprint(oracle_payoff(context, thetas))  # Output: (0.65, 0)\n```\n\n### Explanation:\n1. **Calculate Expected Rewards**: We compute the expected reward for each arm by taking the dot product of the context and parameter vectors. This is done using element-wise multiplication followed by summation along the appropriate axis.\n\n2. **Round Rewards**: We round the computed rewards to four decimal places to ensure precision as specified.\n\n3. **Identify Best Arm**: We use `np.argmax` to find the index of the arm with the highest rounded reward. In case of ties, `np.argmax` returns the first occurrence, which satisfies the requirement to return the smallest index in case of ties.\n\n4. **Return Result**: The function returns the highest rounded reward and the index of the corresponding arm."}
{"task_id": 271, "completion_id": 0, "completion": "To implement the `xgboost_split_gain` function, we need to follow these steps:\n\n1. Calculate the gradients for the left and right nodes.\n2. Sum the gradients to get \\( G_L \\) and \\( G_R \\).\n3. Calculate the hessians for the left and right nodes, which are simply the counts of the samples since the hessian is always 1.\n4. Compute the score for the left and right nodes using the formula \\( \\frac{G^2}{H} \\).\n5. Calculate the score for the parent node.\n6. Compute the gain using the formula provided.\n7. Return the gain rounded to 4 decimal places, ensuring that if the gain is exactly 0, it returns 0.0.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef xgboost_split_gain(\n    left_true: list[float],\n    left_pred: list[float],\n    right_true: list[float],\n    right_pred: list[float],\n) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n    # Calculate gradients for left and right nodes\n    left_gradients = np.array(left_pred) - np.array(left_true)\n    right_gradients = np.array(right_pred) - np.array(right_true)\n    \n    # Sum of gradients\n    G_L = np.sum(left_gradients)\n    G_R = np.sum(right_gradients)\n    \n    # Hessians (counts of samples)\n    H_L = len(left_true)\n    H_R = len(right_true)\n    \n    # Score calculations\n    score_L = (G_L ** 2) / H_L\n    score_R = (G_R ** 2) / H_R\n    \n    # Parent node calculations\n    G_P = G_L + G_R\n    H_P = H_L + H_R\n    score_P = (G_P ** 2) / H_P\n    \n    # Gain calculation\n    gain = 0.5 * (score_L + score_R - score_P)\n    \n    # Return the gain rounded to 4 decimal places\n    return round(gain, 4) if gain != 0 else 0.0\n\n```\n\nThis function computes the gain for a prospective split in an XGBoost model using squared-error loss, ensuring the result is rounded to four decimal places and handling the case where the gain is exactly zero."}
{"task_id": 273, "completion_id": 0, "completion": "To solve the problem of finding the optimal numerical threshold for a decision-tree split based on information gain, we need to follow these steps:\n\n1. **Sort the feature values** and identify distinct values to determine candidate thresholds.\n2. **Calculate the entropy** of the parent node and each child node for every candidate threshold.\n3. **Compute the information gain** for each candidate threshold.\n4. **Select the threshold** that maximizes the information gain, ensuring to return the smallest threshold in case of ties.\n\nHere's the implementation of the `best_split` function:\n\n```python\nimport math\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0\n    label_counts = Counter(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / n\n        entropy_value -= probability * math.log2(probability)\n    return entropy_value\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Combine feature and target into a list of tuples and sort by feature values\n    data = sorted(zip(feature, target))\n    sorted_features = [x[0] for x in data]\n    sorted_targets = [x[1] for x in data]\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(sorted_targets)\n    \n    # Initialize variables to track the best threshold and maximum information gain\n    best_threshold = None\n    max_information_gain = 0.0\n    \n    # Iterate over possible split points\n    for i in range(1, len(sorted_features)):\n        if sorted_features[i] != sorted_features[i - 1]:\n            # Calculate the candidate threshold\n            threshold = (sorted_features[i] + sorted_features[i - 1]) / 2\n            \n            # Split the data into left and right based on the threshold\n            left_targets = sorted_targets[:i]\n            right_targets = sorted_targets[i:]\n            \n            # Calculate the entropy of the left and right nodes\n            left_entropy = entropy(left_targets)\n            right_entropy = entropy(right_targets)\n            \n            # Calculate the information gain\n            n = len(sorted_targets)\n            information_gain = parent_entropy - (len(left_targets) / n) * left_entropy - (len(right_targets) / n) * right_entropy\n            \n            # Update the best threshold if the current information gain is higher\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_threshold = threshold\n            elif information_gain == max_information_gain and best_threshold is not None:\n                best_threshold = min(best_threshold, threshold)\n    \n    # Round the results to 4 decimal places\n    if best_threshold is not None:\n        best_threshold = round(best_threshold, 4)\n    max_information_gain = round(max_information_gain, 4)\n    \n    # Return the best threshold and maximum information gain\n    return (best_threshold, max_information_gain)\n\n# Example usage:\n# feature = [2.0, 3.0, 1.0, 4.0]\n# target = [0, 1, 0, 1]\n# print(best_split(feature, target))  # Output: (2.5, 0.3113)\n```\n\n### Explanation:\n- **Entropy Calculation**: The `entropy` function computes the Shannon entropy for a given list of class labels.\n- **Sorting and Threshold Calculation**: The feature values are sorted, and candidate thresholds are calculated as the midpoint between consecutive distinct values.\n- **Information Gain Calculation**: For each candidate threshold, the data is split into left and right subsets, and the information gain is computed.\n- **Selection of Best Threshold**: The threshold with the highest information gain is selected, with ties resolved by choosing the smallest threshold.\n- **Output**: The function returns the best threshold and the corresponding information gain, both rounded to 4 decimal places."}
{"task_id": 274, "completion_id": 0, "completion": "To implement the vector clipping function, we need to iterate over each element in the input list or NumPy array and apply the clipping logic. We'll use Python's built-in `min` and `max` functions to ensure each element is within the specified range \\([-5, 5]\\). Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n    \"\"\"\n    # Ensure the input is a NumPy array for easy manipulation\n    if isinstance(values, list):\n        values = np.array(values)\n    \n    # Clip the values using np.clip, which efficiently handles the clipping\n    clipped_values = np.clip(values, -5, 5)\n    \n    # Convert the result back to a list and return\n    return clipped_values.tolist()\n\n# Example usage:\n# input_list = [10, -6, 3, 0, 7, -10]\n# print(small_norm_clip(input_list))  # Output: [5, -5, 3, 0, 5, -5]\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input is a list and converts it to a NumPy array for easier manipulation. This ensures that the function can handle both lists and NumPy arrays seamlessly.\n\n2. **Clipping Logic**: The `np.clip` function is used to clip the values within the specified range \\([-5, 5]\\). This function efficiently handles the clipping operation for each element in the array.\n\n3. **Output Conversion**: After clipping, the result is converted back to a Python list using the `tolist()` method, ensuring the output meets the specified constraints.\n\nThis implementation is efficient and leverages NumPy's capabilities to handle numeric operations effectively."}
{"task_id": 276, "completion_id": 0, "completion": "To implement the additive N-gram language model with smoothing, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport math\nimport string\nfrom collections import Counter, defaultdict\n\ndef tokenize(sentence):\n    \"\"\"Tokenize a sentence into words, removing leading/trailing punctuation.\"\"\"\n    return [word.strip(string.punctuation).lower() for word in sentence.split()]\n\ndef pad_sentence(sentence):\n    \"\"\"Pad a sentence with <bol> and <eol> tokens.\"\"\"\n    return ['<bol>'] + sentence + ['<eol>']\n\ndef generate_ngrams(tokens, N):\n    \"\"\"Generate N-grams from a list of tokens.\"\"\"\n    return [tuple(tokens[i:i+N]) for i in range(len(tokens)-N+1)]\n\ndef build_ngram_counts(corpus, N, unk):\n    \"\"\"Build N-gram counts from the corpus.\"\"\"\n    vocab = set()\n    ngram_counts = Counter()\n    history_counts = Counter()\n    \n    for sentence in corpus:\n        tokens = tokenize(sentence)\n        vocab.update(tokens)\n        padded_tokens = pad_sentence(tokens)\n        ngrams = generate_ngrams(padded_tokens, N)\n        \n        for ngram in ngrams:\n            ngram_counts[ngram] += 1\n            history_counts[ngram[:-1]] += 1\n    \n    if unk:\n        vocab.add('<unk>')\n    \n    return ngram_counts, history_counts, vocab\n\ndef map_to_unk(tokens, vocab):\n    \"\"\"Map tokens not in the vocabulary to <unk>.\"\"\"\n    return [token if token in vocab else '<unk>' for token in tokens]\n\ndef compute_sentence_probability(ngram_counts, history_counts, vocab, sentence, N, k):\n    \"\"\"Compute the log probability of a sentence using the N-gram model.\"\"\"\n    tokens = tokenize(sentence)\n    padded_tokens = pad_sentence(tokens)\n    ngrams = generate_ngrams(padded_tokens, N)\n    \n    if '<unk>' in vocab:\n        padded_tokens = map_to_unk(padded_tokens, vocab)\n    \n    V = len(vocab)\n    log_prob = 0.0\n    \n    for ngram in ngrams:\n        history = ngram[:-1]\n        word = ngram[-1]\n        \n        count_hw = ngram_counts[ngram] + k\n        count_h = history_counts[history] + k * V\n        \n        prob = count_hw / count_h\n        log_prob += math.log10(prob)\n    \n    return log_prob\n\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float = 1.0, unk: bool = True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\"\"\"\n    ngram_counts, history_counts, vocab = build_ngram_counts(corpus, N, unk)\n    log_prob = compute_sentence_probability(ngram_counts, history_counts, vocab, sentence, N, k)\n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox is quick.\"\n]\nsentence = \"The quick brown fox.\"\nN = 2\nk = 1.0\nunk = True\n\nprint(additive_ngram_log_prob(corpus, sentence, N, k, unk))\n```\n\n### Explanation:\n\n1. **Tokenization and Padding**: Sentences are tokenized by splitting on whitespace and removing leading/trailing punctuation. Each sentence is padded with `<bol>` and `<eol>` tokens.\n\n2. **N-gram Generation**: N-grams are generated from the padded tokens.\n\n3. **N-gram Counts**: We count occurrences of each N-gram and their histories in the corpus.\n\n4. **Vocabulary Handling**: If `unk` is `True`, we add `<unk>` to the vocabulary and map tokens not in the vocabulary to `<unk>`.\n\n5. **Probability Calculation**: For each N-gram in the target sentence, we calculate the smoothed probability using the formula provided, and sum the logarithms of these probabilities.\n\n6. **Return**: The final log probability is rounded to 4 decimal places and returned.\n\nThis implementation should correctly compute the log probability of a sentence using an additive-smoothed N-gram model."}
{"task_id": 277, "completion_id": 0, "completion": "To implement the `is_tuple` function, we need to check the types of the values associated with the keys `\"action_space\"` and `\"observation_space\"` in the given dictionary `env`. Specifically, we need to determine if these values are either a `tuple` or a `dict`, which would classify them as composite spaces according to the problem statement.\n\nHere's how you can implement the function:\n\n```python\ndef is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    # Check if the action_space is a tuple or dict\n    tuple_action = isinstance(env.get(\"action_space\"), (tuple, dict))\n    \n    # Check if the observation_space is a tuple or dict\n    tuple_obs = isinstance(env.get(\"observation_space\"), (tuple, dict))\n    \n    return tuple_action, tuple_obs\n```\n\n### Explanation:\n\n1. **Type Checking**: \n   - We use `isinstance()` to check if `env[\"action_space\"]` and `env[\"observation_space\"]` are instances of either `tuple` or `dict`.\n   - `isinstance()` is a built-in Python function that checks if an object is an instance of a specified class or a tuple of classes.\n\n2. **Accessing Dictionary Values**:\n   - We use `env.get(\"action_space\")` and `env.get(\"observation_space\")` to safely access the values associated with these keys. This method returns `None` if the key is not found, but since the problem guarantees these keys exist, this is more of a safe practice.\n\n3. **Return Statement**:\n   - The function returns a tuple containing two boolean values: `tuple_action` and `tuple_obs`, which indicate whether the respective spaces are composite.\n\nThis implementation efficiently checks the composite nature of the spaces and returns the required boolean values."}
{"task_id": 278, "completion_id": 0, "completion": "To traverse the decision tree and return the predicted value at the reached leaf, you can implement the function `evaluate_decision_tree` as follows:\n\n```python\ndef evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    current_node = tree\n    \n    while 'value' not in current_node:\n        feature_i = current_node['feature_i']\n        threshold = current_node['threshold']\n        \n        if sample[feature_i] <= threshold:\n            current_node = current_node['true_branch']\n        else:\n            current_node = current_node['false_branch']\n    \n    return current_node['value']\n```\n\n### Explanation:\n1. **Initialization**: Start with the root node of the tree.\n2. **Traversal**: Use a loop to traverse the tree until a leaf node is reached. At each internal node:\n   - Retrieve the `feature_i` and `threshold`.\n   - Compare the sample's feature at index `feature_i` with the `threshold`.\n   - Move to the `true_branch` if the condition is met, otherwise move to the `false_branch`.\n3. **Leaf Node**: Once a leaf node is reached (indicated by the presence of the `value` key), return the value stored in the leaf.\n\nThis function will correctly traverse the decision tree and return the predicted value for the given sample."}
{"task_id": 279, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `mse_loss` function that calculates the Mean Squared Error, its gradient, and the classification accuracy based on a 0.5 threshold:\n\n```python\nimport numpy as np\n\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n          * The MSE value (float)\n          * The gradient list (list[float])\n          * The accuracy (float)\n\n    Notes\n    -----\n    The gradient is calculated analytically as 2/N * (y_pred \u2212 y_true),\n    where N is the number of samples. All returned values are rounded to\n    four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Number of samples\n    N = len(y_true)\n    \n    # Calculate Mean Squared Error\n    mse = np.mean((y_pred - y_true) ** 2)\n    \n    # Calculate the gradient\n    gradient = (2 / N) * (y_pred - y_true)\n    \n    # Calculate classification accuracy\n    y_pred_class = (y_pred >= 0.5).astype(int)\n    accuracy = np.mean(y_pred_class == y_true)\n    \n    # Round results to four decimal places\n    mse = round(mse, 4)\n    gradient = [round(g, 4) for g in gradient]\n    accuracy = round(accuracy, 4)\n    \n    return mse, gradient, accuracy\n\n# Example usage:\ny_true = [0, 1, 0, 1]\ny_pred = [0.2, 0.8, 0.4, 0.6]\nresult = mse_loss(y_true, y_pred)\nprint(result)  # Output: (0.09, [-0.15, 0.15, -0.1, 0.1], 1.0)\n```\n\n### Explanation:\n1. **Mean Squared Error (MSE):** Calculated using the formula \\(\\text{MSE} = \\frac{1}{N} \\sum (y_{\\text{pred}} - y_{\\text{true}})^2\\).\n\n2. **Gradient:** The gradient of MSE with respect to predictions is calculated as \\(\\frac{2}{N} (y_{\\text{pred}} - y_{\\text{true}})\\).\n\n3. **Classification Accuracy:** Predictions are converted to binary classes using a threshold of 0.5. The accuracy is the proportion of correctly classified samples.\n\nAll results are rounded to four decimal places as required."}
{"task_id": 280, "completion_id": 0, "completion": "To implement the `l2_regularization` function, we need to compute either the L2 regularization term or its gradient based on the `return_grad` flag. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool = False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    if return_grad:\n        # Compute the gradient of the L2 regularization term\n        gradient = alpha * w\n        # Round each element to 4 decimal places\n        return np.round(gradient, 4)\n    else:\n        # Compute the L2 regularization value\n        regularization_value = 0.5 * alpha * np.sum(w**2)\n        # Round the result to 4 decimal places\n        return round(regularization_value, 4)\n\n# Example usage:\nw = np.array([1.0, -2.0, 3.0])\nalpha = 0.1\n\nprint(l2_regularization(w, alpha))            # \u279c 0.7\nprint(l2_regularization(w, alpha, True))      # \u279c array([ 0.1, -0.2,  0.3])\n```\n\n### Explanation:\n1. **Regularization Value**: When `return_grad` is `False`, the function calculates the L2 regularization term using the formula `0.5 * alpha * np.sum(w**2)`. This computes the sum of squares of all elements in `w`, multiplies by `alpha`, and then by 0.5. The result is rounded to four decimal places.\n\n2. **Gradient**: When `return_grad` is `True`, the function computes the gradient of the L2 regularization term, which is simply `alpha * w`. This operation preserves the shape of `w`, and each element of the resulting array is rounded to four decimal places.\n\nThe function handles arbitrary shapes of `w` and ensures the output is correctly formatted according to the requirements."}
{"task_id": 281, "completion_id": 0, "completion": "To implement the L1 regularization (Lasso penalty) as described, we need to create a class `L1Regularization` that can compute both the L1 penalty and its gradient for a given weight vector `w`. Here's how you can implement this:\n\n```python\nimport numpy as np\n\nclass L1Regularization:\n    def __init__(self, alpha: float):\n        \"\"\"Initialize the L1 regularization with a given alpha.\"\"\"\n        if alpha < 0:\n            raise ValueError(\"Alpha must be a non-negative float.\")\n        self.alpha = alpha\n\n    def __call__(self, w: np.ndarray) -> float:\n        \"\"\"Calculate the L1 penalty value for the weight vector w.\"\"\"\n        if self.alpha == 0:\n            return 0.0\n        return self.alpha * np.sum(np.abs(w))\n\n    def grad(self, w: np.ndarray) -> np.ndarray:\n        \"\"\"Calculate the gradient of the L1 penalty with respect to w.\"\"\"\n        if self.alpha == 0:\n            return np.zeros_like(w)\n        return self.alpha * np.sign(w)\n\n# Example usage:\n# alpha = 0.1\n# l1 = L1Regularization(alpha)\n# w = np.array([1.0, -2.0, 3.0])\n# penalty = l1(w)\n# gradient = l1.grad(w)\n# print(\"Penalty:\", penalty)\n# print(\"Gradient:\", gradient)\n```\n\n### Explanation:\n\n1. **Initialization (`__init__` method):**\n   - The constructor takes a single parameter `alpha`, which controls the strength of the regularization. It must be a non-negative float.\n   - If `alpha` is negative, a `ValueError` is raised to ensure the input is valid.\n\n2. **L1 Penalty Calculation (`__call__` method):**\n   - This method calculates the L1 penalty for a given weight vector `w`.\n   - If `alpha` is zero, the penalty is zero, as regularization is effectively turned off.\n   - Otherwise, it computes the L1 norm of `w` (sum of absolute values of all elements) and multiplies it by `alpha`.\n\n3. **Gradient Calculation (`grad` method):**\n   - This method computes the gradient of the L1 penalty with respect to `w`.\n   - If `alpha` is zero, the gradient is a zero array of the same shape as `w`.\n   - Otherwise, it returns `alpha` times the sign of each element in `w`, where the sign function returns -1 for negative numbers, 1 for positive numbers, and 0 for zero.\n\nThis implementation ensures that both the penalty and its gradient are computed correctly for any shape of the input array `w`."}
{"task_id": 282, "completion_id": 0, "completion": "To implement the `running_stats` function using Welford's online algorithm, we will maintain a running count of the number of samples, a running mean, and a running sum of squares of differences from the current mean. This approach allows us to compute the mean, variance, and standard deviation in a single pass over the data, which is efficient and numerically stable.\n\nHere's the implementation:\n\n```python\nimport math\n\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation must be *online*: iterate over the data once while\n    keeping only a constant amount of memory (do not call numpy.mean,\n    numpy.var, statistics.mean, etc.).  Implement Welford's method as\n    explained in the task description.  All three returned numbers must\n    be rounded to 4 decimal places.  If the input list is empty return\n    (0.0, 0.0, 0.0).\n    \"\"\"\n    n = 0\n    m = 0.0\n    s = 0.0\n\n    for x in data:\n        n += 1\n        delta = x - m\n        m += delta / n\n        s += delta * (x - m)\n\n    if n > 1:\n        variance = s / (n - 1)\n    else:\n        variance = 0.0\n\n    std_dev = math.sqrt(variance)\n\n    return round(m, 4), round(variance, 4), round(std_dev, 4)\n\n# Example usage:\n# data = [1, 2, 3, 4, 5]\n# print(running_stats(data))  # Output: (3.0, 2.5, 1.5811)\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing `n` (the count of samples) to 0, `m` (the running mean) to 0.0, and `s` (the sum of squares of differences from the current mean) to 0.0.\n\n2. **Iteration**: For each new data point `x`:\n   - Increment the sample count `n`.\n   - Compute the difference `delta` between the new data point and the current mean.\n   - Update the mean `m` using the formula `m += delta / n`.\n   - Update the sum of squares `s` using the formula `s += delta * (x - m)`.\n\n3. **Final Calculation**:\n   - If `n > 1`, compute the sample variance as `s / (n - 1)`. If `n` is 1 or less, the variance is 0.0.\n   - Compute the standard deviation as the square root of the variance.\n\n4. **Return**: The function returns the mean, variance, and standard deviation, each rounded to four decimal places.\n\nThis implementation efficiently computes the required statistics in a single pass over the data, making it suitable for real-time analytics and other scenarios where data is processed sequentially."}
{"task_id": 283, "completion_id": 0, "completion": "To implement the function `binary_log_loss_metrics`, we need to compute the gradients and Hessians for each sample, then use these to calculate the leaf value and gain. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    # Compute predicted probabilities using the sigmoid function\n    p = 1 / (1 + np.exp(-predicted))\n    \n    # Compute gradients and Hessians\n    g = p - actual\n    h = p * (1 - p)\n    \n    # Compute sums of gradients and Hessians\n    sum_g = np.sum(g)\n    sum_h = np.sum(h)\n    \n    # Compute leaf value and gain\n    leaf_value = sum_g / (sum_h + regularization)\n    gain = 0.5 * (sum_g ** 2) / (sum_h + regularization)\n    \n    # Round results to 4 decimal places\n    leaf_value = round(leaf_value, 4)\n    gain = round(gain, 4)\n    \n    return [leaf_value, gain]\n\n# Example usage:\n# actual = np.array([0, 1, 0, 1])\n# predicted = np.array([0.2, 0.8, 0.4, 0.6])\n# regularization = 1.0\n# print(binary_log_loss_metrics(actual, predicted, regularization))\n```\n\n### Explanation:\n1. **Sigmoid Function**: We convert the raw scores (`predicted`) into probabilities (`p`) using the sigmoid function.\n2. **Gradient and Hessian Calculation**: For each sample, compute the gradient (`g_i`) and Hessian (`h_i`) using the formulas provided.\n3. **Summation**: Sum the gradients and Hessians across all samples.\n4. **Leaf Value and Gain Calculation**: Use the summed gradients and Hessians to compute the leaf value and gain, incorporating the regularization term.\n5. **Rounding**: Round the results to 4 decimal places before returning them.\n\nThis function will give you the approximate leaf value and gain for binary cross-entropy loss, which are essential metrics in gradient boosting algorithms."}
{"task_id": 284, "completion_id": 0, "completion": "To implement the `iht_get_index` function according to the specified requirements, we need to handle several scenarios based on whether the table is full, whether the object is already in the table, and whether the function is in read-only mode. Here's how you can implement this function:\n\n```python\ndef iht_get_index(\n    obj: object,\n    size: int,\n    table: dict,\n    overfull_count: list[int],\n    readonly: bool = False,\n) -> int | None:\n    \"\"\"Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of *stored* entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n    \"\"\"\n    # Check if the object is already in the table\n    if obj in table:\n        return table[obj]\n\n    # If readonly is True and the object is not in the table, return None\n    if readonly:\n        return None\n\n    # If the table is not full, add the object with the next available index\n    if len(table) < size:\n        index = len(table)\n        table[obj] = index\n        return index\n\n    # If the table is full, calculate the index using hash and increment overfull_count\n    index = hash(obj) % size\n    overfull_count[0] += 1\n    return index\n```\n\n### Explanation:\n\n1. **Check if the object is already in the table**: If the object is already mapped to an index, return that index immediately. This ensures that we don't modify the table or the collision count unnecessarily.\n\n2. **Handle read-only mode**: If `readonly` is `True` and the object is not in the table, return `None`. This prevents any modification to the table or the collision count.\n\n3. **Insert new objects when the table is not full**: If the table has not reached its capacity, assign the next available index to the object and store it in the table.\n\n4. **Handle table full scenario**: When the table is full, compute the index using `hash(obj) % size` and increment the `overfull_count` to track the collision. This ensures that even when the table is full, we can still provide a consistent index for the object.\n\nThis implementation ensures that the function behaves correctly under all specified conditions and efficiently manages the index hash table."}
{"task_id": 285, "completion_id": 0, "completion": "To implement the linear kernel function as described, we need to handle both one-dimensional and two-dimensional inputs, ensure the feature dimensions match, and compute the matrix product. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    # Reshape x if it is one-dimensional\n    if x.ndim == 1:\n        x = x.reshape(1, -1)\n    \n    # Reshape y if it is one-dimensional\n    if y.ndim == 1:\n        y = y.reshape(1, -1)\n    \n    # Check if the feature dimensions match\n    if x.shape[1] != y.shape[1]:\n        return -1\n    \n    # Compute the linear kernel (Gram matrix)\n    kernel_matrix = x @ y.T\n    \n    # Return the result as a nested Python list\n    return kernel_matrix.tolist()\n\n# Example usage\nx = np.array([[1, 2], [3, 4]])\ny = np.array([[5, 6], [7, 8]])\nprint(linear_kernel(x, y))  # Output: [[17, 23], [39, 53]]\n```\n\n### Explanation:\n1. **Reshape Inputs**: If either `x` or `y` is one-dimensional, it is reshaped to a row vector using `reshape(1, -1)`. This ensures that the matrix multiplication can be performed correctly.\n\n2. **Dimension Check**: We check if the feature dimensions (number of columns) of `x` and `y` match. If they don't, the function returns `-1`.\n\n3. **Matrix Multiplication**: If the dimensions match, we compute the matrix product `x @ y.T`, which is the linear kernel (Gram matrix).\n\n4. **Return Format**: The result is converted to a nested Python list using `tolist()` before returning.\n\nThis implementation handles both single and multiple samples and ensures the feature dimensions are compatible for matrix multiplication."}
{"task_id": 286, "completion_id": 0, "completion": "To implement the `get_initializer` function and the initializer functions, we need to ensure that each initializer function returns a matrix of the specified shape and that `get_initializer` correctly retrieves the function based on the name provided. Here's the complete implementation:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    rows, cols = shape\n    return [[random.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage:\nname = \"ones_init\"\nshape = (2, 2)\ninit_fn = get_initializer(name)  # returns the function ones_init\noutput = init_fn(shape)          # [[1.0, 1.0], [1.0, 1.0]]\nprint(output)\n```\n\n### Explanation:\n\n1. **Initializer Functions**:\n   - `zeros_init`: Creates a matrix of zeros with the specified shape.\n   - `ones_init`: Creates a matrix of ones with the specified shape.\n   - `random_uniform_init`: Creates a matrix with random values uniformly distributed between `low` and `high`. The `seed` ensures deterministic results.\n\n2. **`get_initializer` Function**:\n   - Uses `globals()` to retrieve the object by name from the global namespace.\n   - Checks if the retrieved object is callable.\n   - Returns the callable if it exists; otherwise, raises a `ValueError` with the specified message.\n\nThis implementation allows dynamic retrieval of initializer functions based on their names, ensuring flexibility and ease of use in a deep-learning context."}
{"task_id": 287, "completion_id": 0, "completion": "To implement the forward and backward pass of a 2-D average-pooling layer, we need to follow these steps:\n\n1. **Forward Pass**: Compute the pooled output by sliding the pooling window over the input feature map and calculating the average of the elements within each window.\n\n2. **Backward Pass**: Distribute the gradient equally to each element that contributed to the pooled output during the forward pass.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate the dimensions of the output\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    \n    # Initialize the output and gradient input arrays\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n    \n    # Forward pass: Compute the pooled output\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    \n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, i, j] = np.mean(window)\n    \n    # Backward pass: Distribute the gradient\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    \n                    # Gradient to be distributed equally\n                    grad = accum_grad[n, c, i, j] / (p_h * p_w)\n                    \n                    # Distribute the gradient to the input\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += grad\n    \n    # Round to the nearest 4-th decimal and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n```\n\n### Explanation:\n\n- **Forward Pass**: We iterate over each batch, channel, and spatial position to apply the pooling window. The mean of the elements within the window is computed and stored in the `pooled_output`.\n\n- **Backward Pass**: For each position in the pooled output, we distribute the incoming gradient equally to all elements in the corresponding window of the input. This is done by dividing the gradient by the number of elements in the window (`p_h * p_w`) and adding it to the corresponding positions in `grad_input`.\n\n- **Output Formatting**: Both the pooled output and the gradient input are rounded to the nearest 4th decimal and converted to Python lists using `tolist()`."}
{"task_id": 288, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error. Return -1 for length mismatches or empty iterables.\n\n    All results must be rounded to 4 decimal places.\n    \"\"\"\n    # Check if both inputs are single numbers (int or float)\n    if isinstance(actual, (int, float)) and isinstance(predicted, (int, float)):\n        # Calculate squared difference\n        result = (actual - predicted) ** 2\n        return round(result, 4)\n    \n    # Check if both inputs are one-dimensional iterables\n    elif isinstance(actual, (list, tuple, np.ndarray)) and isinstance(predicted, (list, tuple, np.ndarray)):\n        # Check if both iterables have the same length and are not empty\n        if len(actual) == len(predicted) and len(actual) > 0:\n            # Calculate mean squared error\n            squared_diffs = [(a - p) ** 2 for a, p in zip(actual, predicted)]\n            mse = np.mean(squared_diffs)\n            return round(mse, 4)\n        else:\n            # Return -1 for length mismatches or empty iterables\n            return -1\n    \n    # If inputs are not valid, return -1\n    return -1\n```\n\n### Explanation:\n1. **Single Number Inputs**: The function first checks if both `actual` and `predicted` are single numbers (either `int` or `float`). If so, it calculates the squared difference and returns the result rounded to 4 decimal places.\n\n2. **Iterable Inputs**: If both inputs are one-dimensional iterables (like lists, tuples, or NumPy arrays), the function checks if they have the same length and are not empty. If these conditions are met, it calculates the mean squared error by iterating over the pairs of elements, computing the squared differences, and then taking the mean of these differences. The result is rounded to 4 decimal places.\n\n3. **Error Handling**: If the inputs are either mismatched in length or empty, or if they don't fit the expected types, the function returns `-1`."}
{"task_id": 289, "completion_id": 0, "completion": "```python\ndef format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    # Check if the entries list is empty\n    if not entries:\n        return \"\"\n\n    # Format each entry and join them with a newline\n    formatted_entries = [f'{field}: \"{value}\"' for field, value in entries]\n    return \"\\n\".join(formatted_entries)\n```\n\nThis function processes the list of tuples, formats each tuple according to the specified pattern, and joins them into a single string separated by newline characters. If the list is empty, it returns an empty string."}
{"task_id": 290, "completion_id": 0, "completion": "To solve the task of comparing two decision trees recursively, we need to check both the structure and the values of the nodes and leaves. Here's how you can implement the `compare_trees` function:\n\n```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # If both are leaves, compare their values\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    \n    # If both are nodes, compare their features and thresholds, and recursively their children\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    \n    # If one is a leaf and the other is a node, they are not equivalent\n    return False\n```\n\n### Explanation:\n1. **Leaf Comparison**: If both nodes are leaves, we use `np.allclose` to compare their values with a tolerance of `1e-8`.\n\n2. **Node Comparison**: If both nodes are internal nodes, we first check if their `feature` indices are the same. Then, we check if their `threshold` values are close enough using `np.isclose` with the same tolerance. If both checks pass, we recursively compare their left and right children.\n\n3. **Type Mismatch**: If one node is a leaf and the other is an internal node, they are not equivalent, so we return `False`.\n\nThis recursive approach ensures that the entire structure and values of the trees are compared correctly."}
{"task_id": 291, "completion_id": 0, "completion": "Here's the implementation of the `pca_transform` function based on the provided task description:\n\n```python\nimport numpy as np\n\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d) where *m* is the number of samples and *d*\n        the number of features.\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals.  If *n_components* is\n        invalid the function must return -1.\n    \"\"\"\n    # Get the number of features (d)\n    _, d = X.shape\n    \n    # Validate n_components\n    if not (1 <= n_components <= d):\n        return -1\n    \n    # Step 2: Compute the covariance matrix\n    covariance_matrix = np.cov(X, rowvar=False)\n    \n    # Step 3: Find eigenvalues and eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eig(covariance_matrix)\n    \n    # Step 4: Order the eigenpairs from largest to smallest eigenvalue\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Keep the first n eigenvectors\n    principal_components = sorted_eigenvectors[:, :n_components]\n    \n    # Ensure deterministic sign for eigenvectors\n    for i in range(n_components):\n        if principal_components[0, i] < 0:\n            principal_components[:, i] *= -1\n    \n    # Step 6: Project X onto the selected components\n    X_projected = X @ principal_components\n    \n    # Round the result to 4 decimal places and convert to list\n    X_projected_rounded = np.round(X_projected, 4).tolist()\n    \n    return X_projected_rounded\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if `n_components` is within the valid range `[1, d]`. If not, it returns `-1`.\n\n2. **Covariance Matrix**: The covariance matrix of `X` is computed using `np.cov` with `rowvar=False` to ensure that each column represents a feature.\n\n3. **Eigen Decomposition**: The eigenvalues and eigenvectors of the covariance matrix are computed using `np.linalg.eig`.\n\n4. **Sorting Eigenpairs**: The eigenvalues and corresponding eigenvectors are sorted in descending order of eigenvalues.\n\n5. **Selecting Principal Components**: The first `n_components` eigenvectors are selected. To ensure a deterministic sign, each eigenvector is multiplied by `-1` if its first element is negative.\n\n6. **Projection**: The data `X` is projected onto the selected principal components.\n\n7. **Output Formatting**: The projected data is rounded to 4 decimal places and converted to a Python list before being returned."}
{"task_id": 292, "completion_id": 0, "completion": "To implement the single-point column crossover for neural-network weights, we can use NumPy for efficient matrix operations and slicing. Here's the complete function based on your requirements:\n\n```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to NumPy arrays for efficient operations\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    \n    # Get the number of columns\n    num_columns = parent1_np.shape[1]\n    \n    # Create children matrices by performing the crossover\n    child1_np = np.hstack((parent1_np[:, :cutoff], parent2_np[:, cutoff:]))\n    child2_np = np.hstack((parent2_np[:, :cutoff], parent1_np[:, cutoff:]))\n    \n    # Convert the NumPy arrays back to lists\n    child1 = child1_np.tolist()\n    child2 = child2_np.tolist()\n    \n    return (child1, child2)\n\n# Example usage:\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(children)\n```\n\n### Explanation:\n1. **Input Conversion**: The function first converts the input lists to NumPy arrays for efficient slicing and operations.\n2. **Shape Validation**: It checks if the shapes of the two parent matrices are identical. If not, it returns `-1`.\n3. **Crossover Operation**: Using NumPy's slicing capabilities, it creates two new children matrices by swapping columns after the specified `cutoff`.\n4. **Output Conversion**: The resulting NumPy arrays are converted back to Python lists using the `tolist()` method.\n5. **Return**: The function returns a tuple containing the two children matrices as lists.\n\nThis implementation efficiently handles the crossover operation and ensures the output is in the required format."}
{"task_id": 293, "completion_id": 0, "completion": "To solve this task, we need to create a function that maps the given agent name to its corresponding environment and access type based on the provided table. The function should handle case insensitivity and ignore any leading or trailing spaces in the input. If the agent name is not recognized, the function should return -1.\n\nHere's how you can implement this function:\n\n```python\ndef map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    # Normalize the agent name by stripping spaces and converting to lowercase\n    normalized_agent_name = agent_name.strip().lower()\n    \n    # Define the mapping from agent names to (environment, access type)\n    agent_environment_map = {\n        'dqn': ('CartPole-v0', 'unwrapped'),\n        'ddpg': ('Pendulum-v0', 'env'),\n        'a3c': ('Pendulum-v0', 'unwrapped'),\n        'a2c': ('CartPole-v0', 'env'),\n        'a2c_multi': ('CartPole-v0', 'raw'),\n        'trpo': ('Pendulum-v0', 'unwrapped')\n    }\n    \n    # Return the corresponding tuple if the agent is recognized, otherwise return -1\n    return agent_environment_map.get(normalized_agent_name, -1)\n\n# Example usage:\n# print(map_agent_environment(\"  DQN  \"))  # Output: ('CartPole-v0', 'unwrapped')\n# print(map_agent_environment(\"a3c\"))      # Output: ('Pendulum-v0', 'unwrapped')\n# print(map_agent_environment(\"unknown\"))  # Output: -1\n```\n\n### Explanation:\n1. **Normalization**: The input `agent_name` is normalized by stripping any leading or trailing spaces and converting it to lowercase. This ensures that the function is case-insensitive and ignores extra spaces.\n\n2. **Mapping**: A dictionary `agent_environment_map` is used to map each normalized agent name to its corresponding environment and access type.\n\n3. **Lookup**: The function uses the `get` method of the dictionary to retrieve the tuple for the given agent name. If the agent name is not found in the dictionary, `get` returns `-1` by default.\n\nThis implementation efficiently handles the requirements and constraints specified in the task."}
{"task_id": 294, "completion_id": 0, "completion": "To convert the custom graph representation into a plain adjacency dictionary, we need to carefully handle both directed and undirected graphs, ensuring that the adjacency lists are sorted alphabetically. Here's how you can implement the `to_networkx` function:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G['is_directed']\n    vertex_to_index = G['_V2I']\n    graph_edges = G['_G']\n    \n    # Initialize the adjacency dictionary with empty lists for each vertex\n    adj = {vertex: [] for vertex in vertex_to_index.keys()}\n    \n    # Iterate over each vertex's edges\n    for index, edges in enumerate(graph_edges):\n        source_label = list(vertex_to_index.keys())[index]\n        for source, target, weight in edges:\n            # Add the edge to the adjacency list of the source vertex\n            adj[source].append((target, weight))\n            if not is_directed:\n                # Add the reverse edge for undirected graphs\n                adj[target].append((source, weight))\n    \n    # Sort the adjacency lists alphabetically by the neighbour label\n    for vertex in adj:\n        adj[vertex].sort(key=lambda x: x[0])\n    \n    return adj\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing an empty adjacency list for each vertex in the graph. This ensures that even vertices without edges are included in the result.\n\n2. **Edge Processing**: We iterate over the list of edges for each vertex. For directed graphs, we simply add the edge to the adjacency list of the source vertex. For undirected graphs, we also add the reverse edge to the adjacency list of the target vertex.\n\n3. **Sorting**: After processing all edges, we sort each vertex's adjacency list alphabetically by the neighbour label to ensure deterministic output.\n\n4. **Return**: Finally, we return the constructed adjacency dictionary.\n\nThis implementation handles both directed and undirected graphs correctly and ensures that the adjacency lists are sorted as required."}
{"task_id": 296, "completion_id": 0, "completion": "To solve the task of verifying whether all elements in a NumPy array are binary (either `0` or `1`), we can utilize NumPy's capabilities to efficiently check the conditions across the entire array. Here's the implementation of the `is_binary` function:\n\n```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array if it is not already one\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# x = np.array([0, 1, 1, 0])\n# print(is_binary(x))  # Output: True\n\n# x = np.array([0, 1, 2, 0])\n# print(is_binary(x))  # Output: False\n```\n\n### Explanation:\n1. **Conversion to NumPy Array**: The function first ensures that the input is a NumPy array using `np.asarray(x)`. This allows the function to handle array-like inputs seamlessly.\n\n2. **Element-wise Condition Check**: The expression `(x == 0) | (x == 1)` creates a boolean array where each element is `True` if the corresponding element in `x` is either `0` or `1`. The `|` operator is used for element-wise logical OR.\n\n3. **Overall Condition Check**: `np.all(...)` checks if all elements in the boolean array are `True`. If they are, it means all elements in the original array are binary, and the function returns `True`. Otherwise, it returns `False`.\n\nThis approach efficiently checks the binary condition across arrays of any shape and type, including integer, float, and boolean arrays."}
{"task_id": 297, "completion_id": 0, "completion": "To implement the Min\u2013Max scaling function as described, we need to follow the given requirements and handle edge cases such as invalid feature ranges and constant columns. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple = (0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``. The\n        default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  Returns ``-1`` if\n        ``feature_range`` is invalid (i.e. lower >= upper).\n    \"\"\"\n    # Unpack the feature range\n    a, b = feature_range\n    \n    # Check if the feature range is valid\n    if a >= b:\n        return -1\n    \n    # Convert the data to a NumPy array for easier manipulation\n    data_array = np.array(data, dtype=float)\n    \n    # Calculate the min and max for each column\n    min_vals = np.min(data_array, axis=0)\n    max_vals = np.max(data_array, axis=0)\n    \n    # Calculate the range for each column, treating constant columns as having a range of 1\n    ranges = np.where(max_vals - min_vals == 0, 1, max_vals - min_vals)\n    \n    # Perform the Min-Max scaling\n    scaled_data = (data_array - min_vals) / ranges * (b - a) + a\n    \n    # Replace any nan, inf, or -inf with 0.0\n    scaled_data = np.nan_to_num(scaled_data)\n    \n    # Round the results to four decimal places\n    scaled_data = np.round(scaled_data, 4)\n    \n    # Convert the NumPy array back to a Python list\n    return scaled_data.tolist()\n\n# Example usage:\ndata = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nfeature_range = (0, 1)\nscaled_data = min_max_scale(data, feature_range)\nprint(scaled_data)\n```\n\n### Explanation:\n\n1. **Feature Range Check**: The function first checks if the provided `feature_range` is valid. If `a >= b`, it returns `-1`.\n\n2. **Data Conversion**: The input data is converted to a NumPy array for easier manipulation.\n\n3. **Min and Max Calculation**: The minimum and maximum values for each column are calculated.\n\n4. **Range Calculation**: The range for each column is calculated. If a column is constant (i.e., `max == min`), its range is set to `1` to avoid division by zero.\n\n5. **Scaling**: The Min\u2013Max scaling formula is applied to each element in the data array.\n\n6. **Handling Special Values**: Any `nan`, `inf`, or `-inf` values are replaced with `0.0` using `numpy.nan_to_num`.\n\n7. **Rounding and Conversion**: The scaled data is rounded to four decimal places and converted back to a Python list using `tolist()`.\n\nThis implementation should meet all the specified requirements and handle edge cases appropriately."}
{"task_id": 298, "completion_id": 0, "completion": "To implement the Maximum Likelihood Estimation (MLE) N-gram language model, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus and query\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    tokenized_query = query.split()\n\n    # Check if the query is too short for the requested N\n    if len(tokenized_query) < N:\n        return float('-inf')\n\n    # Pad the sentences for N > 1\n    if N > 1:\n        tokenized_corpus = [['<bol>'] * (N - 1) + tokens + ['<eol>'] for tokens in tokenized_corpus]\n        tokenized_query = ['<bol>'] * (N - 1) + tokenized_query + ['<eol>']\n\n    # Count N-grams and (N-1)-gram prefixes in the corpus\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n\n    for tokens in tokenized_corpus:\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            prefix = tuple(tokens[i:i + N - 1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n\n    # Calculate the log-probability of the query\n    log_prob = 0.0\n\n    for i in range(len(tokenized_query) - N + 1):\n        ngram = tuple(tokenized_query[i:i + N])\n        prefix = tuple(tokenized_query[i:i + N - 1])\n\n        # Calculate the probability\n        if N == 1:\n            # Unigram case\n            count_ngram = ngram_counts[ngram]\n            total_tokens = sum(ngram_counts.values())\n            probability = count_ngram / total_tokens if total_tokens > 0 else 0\n        else:\n            count_ngram = ngram_counts[ngram]\n            count_prefix = prefix_counts[prefix]\n            probability = count_ngram / count_prefix if count_prefix > 0 else 0\n\n        # If the probability is zero, return negative infinity\n        if probability == 0:\n            return float('-inf')\n\n        # Add the log-probability\n        log_prob += math.log(probability)\n\n    # Round the result to 4 decimal places\n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\n### Explanation:\n1. **Tokenization**: We split each sentence in the corpus and the query into tokens.\n2. **Padding**: For N-grams where \\( N > 1 \\), we pad the token sequences with `<bol>` at the beginning and `<eol>` at the end.\n3. **Counting**: We count the occurrences of N-grams and their (N-1)-gram prefixes using `Counter`.\n4. **Probability Calculation**: We compute the MLE probability for each N-gram in the query. If any N-gram has zero probability, we return `float('-inf')`.\n5. **Log-Probability**: We sum the natural logarithms of the probabilities and round the result to 4 decimal places."}
{"task_id": 299, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom __future__ import annotations\n\ndef k_means(X: np.ndarray, k: int, max_iterations: int = 500) -> list[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    m, n = X.shape\n    \n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    # Initialize cluster assignments\n    cluster_assignments = np.zeros(m, dtype=int)\n    \n    for iteration in range(max_iterations):\n        # Step 1: Assign samples to the closest centroid\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centroids, axis=1)\n            cluster_assignments[i] = np.argmin(distances)\n        \n        # Step 2: Recompute centroids\n        new_centroids = np.zeros((k, n))\n        for j in range(k):\n            # Get all samples assigned to cluster j\n            cluster_samples = X[cluster_assignments == j]\n            if len(cluster_samples) > 0:\n                # Compute the mean of the samples in the cluster\n                new_centroids[j] = np.mean(cluster_samples, axis=0)\n            else:\n                # If a cluster is empty, keep its centroid unchanged\n                new_centroids[j] = centroids[j]\n        \n        # Check for convergence (if centroids do not change)\n        if np.allclose(centroids, new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    return cluster_assignments.tolist()\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(k_means(X, k))\n```\n\n### Explanation:\n1. **Initialization**: The centroids are initialized using the first `k` samples from the dataset `X`. This ensures deterministic behavior.\n\n2. **Assignment Step**: Each sample is assigned to the nearest centroid based on Euclidean distance. This is done by calculating the distance from each sample to all centroids and choosing the closest one.\n\n3. **Update Step**: The centroids are updated by calculating the mean of all samples assigned to each cluster. If a cluster has no samples assigned, its centroid remains unchanged.\n\n4. **Convergence Check**: The algorithm stops if the centroids do not change between iterations or if the maximum number of iterations is reached.\n\n5. **Return**: The function returns a list of cluster indices corresponding to each sample in the dataset.\n\nThis implementation handles the case where a cluster becomes empty by keeping its centroid unchanged, ensuring the algorithm remains deterministic and avoids division-by-zero errors."}
{"task_id": 300, "completion_id": 0, "completion": "To solve this problem, we can utilize Python's `heapq` module to maintain a heap of size `k` while iterating through the input sequence. Depending on whether we want the largest or smallest elements, we will use a min-heap or max-heap strategy. Here's how we can implement the `top_k_elements` function:\n\n```python\nimport heapq\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef top_k_elements(sequence: List[Number], k: int, order: str = \"largest\") -> List[Number]:\n    \"\"\"Keeps only the k largest or k smallest numbers from *sequence*.\n\n    The function must visit each element exactly once and store no more than\n    *k* items at any time by making use of the heapq module (binary heap).\n\n    Args:\n        sequence: A list of integers or floats representing the data stream.\n        k: The number of extreme values to keep.\n        order: \"largest\" to retain the k biggest values, \"smallest\" to retain\n            the k smallest.\n\n    Returns:\n        A list with at most k numbers sorted according to *order*.\n    \"\"\"\n    if k <= 0 or not sequence:\n        return []\n\n    if k >= len(sequence):\n        return sorted(sequence, reverse=(order == \"largest\"))\n\n    if order == \"largest\":\n        # Use a min-heap to keep track of the k largest elements\n        heap = []\n        for num in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, num)\n            else:\n                heapq.heappushpop(heap, num)\n        return sorted(heap, reverse=True)\n    \n    elif order == \"smallest\":\n        # Use a max-heap to keep track of the k smallest elements\n        # We invert the numbers to use heapq as a max-heap\n        heap = []\n        for num in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, -num)\n            else:\n                heapq.heappushpop(heap, -num)\n        return sorted((-x for x in heap))\n    \n    else:\n        raise ValueError(\"Order must be either 'largest' or 'smallest'.\")\n\n# Example usage:\n# sequence = [3, 1, 5, 12, 2, 11]\n# print(top_k_elements(sequence, 3, \"largest\"))  # Output: [12, 11, 5]\n# print(top_k_elements(sequence, 3, \"smallest\")) # Output: [1, 2, 3]\n```\n\n### Explanation:\n\n1. **Input Validation**: We first check if `k` is less than or equal to zero or if the sequence is empty. In such cases, we return an empty list.\n\n2. **Handling Large `k`**: If `k` is greater than or equal to the length of the sequence, we simply return the entire sequence sorted according to the specified order.\n\n3. **Heap Strategy**:\n   - For the \"largest\" order, we maintain a min-heap of size `k`. This allows us to efficiently keep track of the k largest elements. We use `heapq.heappushpop` to push a new element and pop the smallest element if the heap exceeds size `k`.\n   - For the \"smallest\" order, we simulate a max-heap by pushing the negative of each number into the heap. This way, the smallest elements (in terms of magnitude) are effectively the largest in the heap.\n\n4. **Sorting the Result**: After processing the sequence, we sort the heap to return the elements in the required order.\n\nThis approach ensures that we only store up to `k` elements at any time, maintaining an efficient memory footprint and processing time."}
{"task_id": 301, "completion_id": 0, "completion": "To solve this task, we need to implement a binary search tree (BST) using Node objects and perform an in-order traversal to retrieve the keys in ascending order based on their values. Let's start by defining the Node class and then implement the `inorder_keys` function.\n\nHere's the complete solution:\n\n```python\nclass Node:\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.left = None\n        self.right = None\n\n    def __lt__(self, other):\n        return self.val < other.val\n\n    def __ge__(self, other):\n        return self.val >= other.val\n\ndef inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n    if not pairs:\n        return []\n\n    # Helper function to insert a node into the BST\n    def insert(root, node):\n        if node < root:\n            if root.left is None:\n                root.left = node\n            else:\n                insert(root.left, node)\n        else:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n\n    # Helper function for in-order traversal\n    def inorder_traversal(node, result):\n        if node is not None:\n            inorder_traversal(node.left, result)\n            result.append(node.key)\n            inorder_traversal(node.right, result)\n\n    # Build the BST\n    root = Node(*pairs[0])\n    for key, val in pairs[1:]:\n        insert(root, Node(key, val))\n\n    # Perform in-order traversal\n    result = []\n    inorder_traversal(root, result)\n    return result\n```\n\n### Explanation:\n\n1. **Node Class**: \n   - The `Node` class is defined with attributes `key`, `val`, `left`, and `right`.\n   - Comparison operators `<` and `>=` are implemented based on the `val` attribute.\n\n2. **Insert Function**:\n   - The `insert` function recursively inserts a new node into the BST. It uses the comparison operators to decide whether to go left or right.\n\n3. **In-order Traversal Function**:\n   - The `inorder_traversal` function recursively visits nodes in in-order (left, root, right) and appends the keys to the result list.\n\n4. **Main Function**:\n   - The `inorder_keys` function checks if the input list is empty and returns an empty list if true.\n   - It initializes the BST with the first pair and inserts subsequent pairs using the `insert` function.\n   - Finally, it performs an in-order traversal to collect the keys in sorted order and returns them.\n\nThis solution efficiently constructs the BST and retrieves the keys in the desired order using in-order traversal."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples = X.shape[0]\n\n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n\n    # Step 2: Compute the graph Laplacian L = D - W\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n\n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    idx = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, idx]\n\n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):  # Maximum of 100 iterations\n        # Assign labels based on closest centroid\n        for i in range(n_samples):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        for j in range(k):\n            cluster_points = E[labels == j]\n            if len(cluster_points) > 0:\n                new_centroids[j] = cluster_points.mean(axis=0)\n            else:\n                # Re-initialize empty cluster centroid with a random row of E\n                new_centroids[j] = E[np.random.choice(n_samples)]\n\n        # Check for convergence\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n\n    return labels.tolist()\n```\n\nThis implementation follows the steps outlined in the task description. It constructs the weighted adjacency matrix, computes the graph Laplacian, extracts the eigenvectors, and performs k-means clustering on the eigenvectors. The k-means implementation is deterministic due to the initial centroids being the first k rows of the eigenvector matrix, and it handles empty clusters by reinitializing their centroids with random rows from the eigenvector matrix."}
{"task_id": 303, "completion_id": 0, "completion": "To implement the `err_fmt` function according to the specified format, we need to carefully construct the debugging string using the provided parameters. Here's the complete implementation:\n\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    # Determine the previous index, ensuring it doesn't go below 0\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract previous and current elements\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    \n    # Construct the formatted string\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_str\n```\n\n### Explanation:\n1. **Index Handling**: We calculate `prev_ix` using `max(ix - 1, 0)` to ensure that when `ix` is 0, we still refer to the first element as the \"previous\" one.\n\n2. **String Construction**: We use formatted string literals (f-strings) to insert values into the debugging string. This ensures that the values are placed correctly and the format is maintained.\n\n3. **Warn String**: The `warn_str` is appended directly to the end of the \"Theirs [<curr_label>]\" section, exactly as provided, which may include leading newlines or other formatting.\n\n4. **Exact Formatting**: The number of dashes and line breaks are precisely controlled to match the required format. This ensures the output is consistent with the task description.\n\nThis function will return a string formatted exactly as specified, making it useful for debugging purposes by comparing the current output with the expected output."}
{"task_id": 304, "completion_id": 0, "completion": "To implement the function `bayesian_posterior_mean`, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    N, M = X.shape\n    \n    # Handle prior mean mu\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Handle prior scale V\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple, np.ndarray)) and len(V) == M:\n        V_inv = np.diag(1.0 / np.array(V))\n    else:\n        V_inv = np.linalg.inv(V)\n    \n    # Compute posterior covariance up to \u03c3\u00b2\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    \n    # Compute posterior mean of the coefficients\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    # Round the coefficients to 4 decimal places\n    return np.round(mu_b, 4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# result = bayesian_posterior_mean(X, y, mu=0.0, V=1.0, fit_intercept=True)\n# print(result)\n```\n\n### Explanation:\n1. **Intercept Handling**: If `fit_intercept` is `True`, we prepend a column of ones to `X` to account for the intercept term.\n\n2. **Prior Mean (`mu`)**: If `mu` is a scalar, it is broadcasted to a vector of length `M` (or `M+1` if intercept is fitted).\n\n3. **Prior Scale (`V`)**: \n   - If `V` is `None`, it defaults to the identity matrix.\n   - If `V` is a scalar, it is treated as `scalar * identity`.\n   - If `V` is a list or tuple, it is treated as a diagonal matrix.\n   - If `V` is a full matrix, we compute its inverse directly.\n\n4. **Posterior Computation**:\n   - Compute `Sigma_b`, the posterior covariance up to `\u03c3\u00b2`.\n   - Compute `mu_b`, the posterior mean of the coefficients.\n\n5. **Output**: The coefficients are rounded to 4 decimal places and returned as a list."}
{"task_id": 305, "completion_id": 0, "completion": "To implement a numerically stable sigmoid function, we need to handle different input types and apply the stable formulation for the sigmoid function based on the value of each element. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    # Convert input to a NumPy array for easy element-wise operations\n    x_array = np.array(x, dtype=np.float64)\n    \n    # Apply the numerically stable sigmoid function\n    # Use np.where to apply conditions element-wise\n    sigmoid_values = np.where(\n        x_array >= 0,\n        1 / (1 + np.exp(-x_array)),\n        np.exp(x_array) / (1 + np.exp(x_array))\n    )\n    \n    # Round the results to 4 decimal places\n    rounded_values = np.round(sigmoid_values, 4)\n    \n    # Convert the result to a Python list and return\n    return rounded_values.tolist()\n\n# Example usage:\n# print(sigmoid([-1000, 0, 1000, 0.5, -0.5]))\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts various input types (scalar, list, tuple, or NumPy array) and converts them into a NumPy array for uniform processing.\n\n2. **Numerically Stable Sigmoid Calculation**: \n   - For elements where `x >= 0`, the standard sigmoid formula `1 / (1 + np.exp(-x))` is used.\n   - For elements where `x < 0`, the alternative formulation `np.exp(x) / (1 + np.exp(x))` is used to prevent overflow issues.\n\n3. **Rounding**: The computed sigmoid values are rounded to 4 decimal places using `np.round`.\n\n4. **Output**: The rounded values are converted to a Python list before returning.\n\nThis implementation ensures numerical stability and meets the requirements of handling different input types and rounding the results appropriately."}
{"task_id": 307, "completion_id": 0, "completion": "To implement the `bootstrap_sample` function, we need to follow these steps:\n\n1. Determine the number of samples, `n_samples`, from the shape of the input feature matrix `X`.\n2. Generate an array of indices by randomly sampling `n_samples` indices with replacement from the range `[0, n_samples-1]`.\n3. Use these indices to create the bootstrap samples for both `X` and `y`.\n4. Return the sampled `X` and `y` arrays, ensuring they have the same shape as the input arrays.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector (or array) of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        ``(X_sample, y_sample)`` where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    n_samples = X.shape[0]\n    # Generate random indices with replacement\n    idxs = np.random.choice(n_samples, size=n_samples, replace=True)\n    # Create bootstrap samples\n    X_sample = X[idxs]\n    y_sample = y[idxs]\n    return X_sample, y_sample\n```\n\n### Explanation:\n\n- **`np.random.choice`**: This function is used to generate random indices. The `size` parameter is set to `n_samples` to ensure we draw the same number of samples as the original dataset. The `replace=True` parameter allows for sampling with replacement.\n- **Indexing**: We use the generated indices to index into `X` and `y`, creating the bootstrap samples `X_sample` and `y_sample`.\n- **Return**: The function returns the bootstrap samples, which have the same shape as the input arrays.\n\nThis implementation ensures that the function is reproducible if `np.random.seed` is set before calling it, as it relies solely on NumPy's global random number generator."}
{"task_id": 308, "completion_id": 0, "completion": "To construct the Mel filterbank matrix, we need to follow the steps outlined in the task description. Here's the implementation:\n\n```python\nimport numpy as np\n\ndef hz_to_mel(f: float) -> float:\n    \"\"\"Convert frequency in Hertz to Mel scale.\"\"\"\n    return 2595 * np.log10(1 + f / 700)\n\ndef mel_to_hz(mel: float) -> float:\n    \"\"\"Convert frequency in Mel scale to Hertz.\"\"\"\n    return 700 * (10**(mel / 2595) - 1)\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    # Convert frequency limits to Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate equally spaced points on the Mel scale\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel points back to Hertz\n    hz_points = mel_to_hz(mel_points)\n\n    # Convert Hertz to DFT bin numbers\n    bin_points = np.floor((N + 1) * hz_points / fs).astype(int)\n\n    # Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    # Construct the filters\n    for i in range(1, n_filters + 1):\n        # Left and right slopes\n        left = bin_points[i - 1]\n        center = bin_points[i]\n        right = bin_points[i + 1]\n\n        for k in range(left, center):\n            filterbank[i - 1, k] = (k - left) / (center - left)\n        for k in range(center, right):\n            filterbank[i - 1, k] = (right - k) / (right - center)\n\n        # Normalize the filter if required\n        if normalize:\n            filterbank[i - 1] *= 2 / (hz_points[i + 1] - hz_points[i - 1])\n\n    # Round the values to 4 decimal places and convert to list\n    return np.round(filterbank, 4).tolist()\n\n# Example usage:\n# mel_filters = mel_filterbank(N=1024, n_filters=20, fs=44100)\n# print(mel_filters)\n```\n\n### Explanation:\n1. **Conversion Functions**: We define helper functions `hz_to_mel` and `mel_to_hz` to convert between Hertz and Mel scales.\n\n2. **Frequency Limits**: We convert the minimum and maximum frequencies to the Mel scale.\n\n3. **Mel Points**: We generate `n_filters + 2` equally spaced points on the Mel scale and convert them back to Hertz.\n\n4. **DFT Bin Points**: We calculate the corresponding DFT bin numbers for these Hertz values.\n\n5. **Filter Construction**: For each filter, we compute the triangular shape by calculating the left and right slopes. The filter values are computed based on the position of the DFT bin within the triangle.\n\n6. **Normalization**: If normalization is enabled, we scale the filter to ensure its area in Mel space equals 1.\n\n7. **Output**: The filterbank matrix is rounded to 4 decimal places and returned as a list of lists.\n\nThis implementation should match the behavior of the reference implementation and produce a Mel filterbank matrix suitable for audio processing tasks."}
{"task_id": 309, "completion_id": 0, "completion": "To implement the Factorization Machine prediction formula, we need to compute the prediction for each sample in the feature matrix `X` using the given bias `w0`, linear weights `w`, and factor matrix `v`. Let's break down the formula and implement it step-by-step.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"Return Factorization Machine predictions for all samples in *X*.\n\n    The function must implement the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v* and return a Python list\n    of floats rounded to four decimal places.\n    \"\"\"\n    # Number of samples\n    m = X.shape[0]\n    # Number of factors\n    k = v.shape[1]\n    \n    # Initialize the list to store predictions\n    predictions = []\n    \n    # Iterate over each sample\n    for i in range(m):\n        x_i = X[i]\n        \n        # Linear term: w0 + <w, x_i>\n        linear_term = w0 + np.dot(w, x_i)\n        \n        # Interaction term: 0.5 * sum over factors\n        interaction_term = 0.0\n        for f in range(k):\n            v_f = v[:, f]\n            x_v_f = np.dot(x_i, v_f)\n            x_squared_v_squared = np.dot(x_i**2, v_f**2)\n            interaction_term += (x_v_f**2 - x_squared_v_squared)\n        \n        interaction_term *= 0.5\n        \n        # Total prediction for the sample\n        y_i = linear_term + interaction_term\n        \n        # Append the rounded prediction to the list\n        predictions.append(round(y_i, 4))\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Linear Term Calculation**:\n   - For each sample `x_i`, compute the linear term using the bias `w0` and the dot product of `w` and `x_i`.\n\n2. **Interaction Term Calculation**:\n   - For each factor `f`, compute the interaction term using the formula:\n     - \\( (x_i^T v_{\\*f})^2 \\) is the square of the dot product between `x_i` and the `f`-th column of `v`.\n     - \\( (x_i^{\\odot 2})^T v_{\\*f}^{\\odot 2} \\) is the dot product of the element-wise square of `x_i` and the element-wise square of the `f`-th column of `v`.\n   - Sum these values for all factors and multiply by 0.5.\n\n3. **Combine Terms**:\n   - Add the linear term and interaction term to get the prediction for each sample.\n\n4. **Rounding**:\n   - Round each prediction to four decimal places before adding it to the result list.\n\nThis implementation efficiently computes the FM predictions for all samples in the input matrix `X`."}
{"task_id": 310, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `root_mean_squared_error` function that calculates the RMSE between two numeric sequences:\n\n```python\nimport numpy as np\n\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns ``-1`` if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or ``-1`` on invalid\n        input.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are lists\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Validate that both arrays have the same non-zero length\n    if actual.shape != predicted.shape or actual.size == 0:\n        return -1\n    \n    # Calculate the squared differences\n    squared_diffs = (actual - predicted) ** 2\n    \n    # Compute the mean of the squared differences\n    mean_squared_diff = np.mean(squared_diffs)\n    \n    # Calculate the RMSE\n    rmse = np.sqrt(mean_squared_diff)\n    \n    # Round the RMSE to 4 decimal places\n    return round(rmse, 4)\n\n# Example usage:\nactual_values = [3.0, -0.5, 2.0, 7.0]\npredicted_values = [2.5, 0.0, 2.0, 8.0]\nprint(root_mean_squared_error(actual_values, predicted_values))  # Output: 0.6124\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the `actual` and `predicted` arrays have the same shape and are non-empty. If not, it returns `-1`.\n2. **Conversion to NumPy Arrays**: If the inputs are lists, they are converted to NumPy arrays for efficient numerical operations.\n3. **RMSE Calculation**:\n   - Compute the squared differences between corresponding elements of `actual` and `predicted`.\n   - Calculate the mean of these squared differences.\n   - Take the square root of the mean to get the RMSE.\n4. **Rounding**: The RMSE is rounded to 4 decimal places before returning.\n\nThis implementation efficiently computes the RMSE using NumPy's array operations, ensuring both correctness and performance."}
{"task_id": 311, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef clip_non_negative(arr):\n    \"\"\"Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    # Convert the input to a NumPy array if it is a list\n    if isinstance(arr, list):\n        arr = np.array(arr, dtype=float)\n    else:\n        arr = arr.astype(float)  # Ensure the array is of float type\n\n    # Use NumPy's clip method to replace negative values with 0.0\n    clipped_arr = np.clip(arr, a_min=0.0, a_max=None)\n\n    # Convert the clipped array back to a list\n    return clipped_arr.tolist()\n\n# Example usage:\n# input_list = [[-1, 2, -3], [4, -5, 6]]\n# input_array = np.array([[-1, 2, -3], [4, -5, 6]])\n# print(clip_non_negative(input_list))\n# print(clip_non_negative(input_array))\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input is a list. If it is, it converts it to a NumPy array with `dtype=float` to ensure all elements are treated as floating-point numbers. If the input is already a NumPy array, it ensures the array is of float type using `astype(float)`.\n\n2. **Clipping**: The function uses NumPy's `clip` method to replace all negative values with `0.0`. The `a_min` parameter is set to `0.0`, and `a_max` is set to `None`, which means no upper limit is applied.\n\n3. **Output Conversion**: Finally, the clipped NumPy array is converted back to a Python list using the `tolist()` method, ensuring the output maintains the same nested structure as the input.\n\nThis approach leverages NumPy's vectorized operations to efficiently handle the replacement of negative values without explicit loops, adhering to the task requirements."}
{"task_id": 312, "completion_id": 0, "completion": "To implement the Blackman\u2013Harris window generator, we need to follow the mathematical definition provided and handle the special cases. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    # Special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # Coefficients for the Blackman-Harris window\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n\n    # Determine N based on symmetric or periodic\n    N = window_len - 1 if symmetric else window_len\n\n    # Generate the window\n    n = np.arange(window_len)\n    window = (a0 \n              - a1 * np.cos(2 * np.pi * n / N) \n              + a2 * np.cos(4 * np.pi * n / N) \n              - a3 * np.cos(6 * np.pi * n / N))\n\n    # Round to 4 decimal places and convert to list\n    return np.round(window, 4).tolist()\n\n# Example usage:\nprint(blackman_harris(5, symmetric=True))\nprint(blackman_harris(5, symmetric=False))\n```\n\n### Explanation:\n1. **Special Cases**: \n   - If `window_len <= 0`, return an empty list.\n   - If `window_len == 1`, return `[1.0]`.\n\n2. **Coefficients**: The fixed coefficients `a0`, `a1`, `a2`, and `a3` are used in the formula.\n\n3. **N Calculation**: \n   - For symmetric windows, `N = L - 1`.\n   - For periodic windows, `N = L`.\n\n4. **Window Calculation**: \n   - Use `numpy` to efficiently compute the window values using the formula provided.\n\n5. **Rounding and Conversion**: \n   - Round each value to 4 decimal places using `np.round`.\n   - Convert the result to a Python list using `tolist()`.\n\nThis implementation should correctly generate the Blackman\u2013Harris window for both symmetric and periodic forms, handling all specified special cases."}
{"task_id": 313, "completion_id": 0, "completion": "To solve this problem, we need to implement the digamma function and use it to compute the expected logarithm of a Dirichlet component. The digamma function can be approximated using recursion for small values and an asymptotic expansion for larger values. Let's implement this step-by-step.\n\nHere's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function \u03c8(x) using recursion and asymptotic expansion.\"\"\"\n    # Use recursion to shift x to a larger value\n    if x <= 0:\n        raise ValueError(\"Digamma function is not defined for non-positive values.\")\n    \n    # Recursion to increase x to a moderate value\n    result = 0\n    while x < 6:\n        result -= 1 / x\n        x += 1\n    \n    # Asymptotic expansion for large x\n    # \u03c8(x) \u2248 ln(x) - 1/(2x) - 1/(12x\u00b2) + 1/(120x\u2074) - 1/(252x\u2076)\n    result += math.log(x) - 1/(2*x) - 1/(12*x**2) + 1/(120*x**4) - 1/(252*x**6)\n    \n    return result\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Convert gamma to a NumPy array if it's a list\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    \n    # Extract the relevant parameters\n    gamma_dt = gamma[d, t]\n    gamma_d_sum = np.sum(gamma[d, :])\n    \n    # Compute the expected log using the digamma function\n    expected_log = digamma(gamma_dt) - digamma(gamma_d_sum)\n    \n    # Return the result rounded to 4 decimal places\n    return round(expected_log, 4)\n\n# Example usage:\n# gamma = [[0.5, 1.5, 2.5], [1.0, 2.0, 3.0]]\n# print(expected_log_dirichlet(gamma, 0, 1))  # Example call\n```\n\n### Explanation:\n\n1. **Digamma Function Implementation**:\n   - We use recursion to increase `x` to a moderate value (at least 6) by subtracting `1/x` and incrementing `x`.\n   - For large `x`, we apply the asymptotic expansion to approximate the digamma function.\n\n2. **Expected Logarithm Calculation**:\n   - We extract the relevant parameters from the `gamma` matrix.\n   - We compute the expected log using the formula: `\u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:]))`.\n   - Finally, we round the result to four decimal places and return it.\n\nThis implementation should work efficiently for the given task constraints."}
{"task_id": 315, "completion_id": 0, "completion": "To implement the `get_loss` function, we need to define the three loss functions (MAE, MSE, and Binary Cross Entropy) and create a mechanism to map the input name to the correct function. We'll use a dictionary to handle the mapping, and we'll ensure that the input name is processed to be case-insensitive and ignore underscores. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef mae(y_true, y_pred):\n    \"\"\"Calculate Mean Absolute Error.\"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    error = np.abs(y_true - y_pred)\n    return round(np.mean(error), 4)\n\ndef mse(y_true, y_pred):\n    \"\"\"Calculate Mean Squared Error.\"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    error = (y_true - y_pred) ** 2\n    return round(np.mean(error), 4)\n\ndef binary_cross_entropy(y_true, y_pred):\n    \"\"\"Calculate Binary Cross Entropy.\"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    # Clip predictions to avoid log(0)\n    y_pred = np.clip(y_pred, 1e-15, 1 - 1e-15)\n    error = -y_true * np.log(y_pred) - (1 - y_true) * np.log(1 - y_pred)\n    return round(np.mean(error), 4)\n\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\"\"\"\n    # Normalize the name: lower case and remove underscores\n    normalized_name = name.lower().replace('_', '')\n    \n    # Dictionary mapping normalized names to loss functions\n    loss_functions = {\n        'mae': mae,\n        'meanabsoluteerror': mae,\n        'mse': mse,\n        'meansquarederror': mse,\n        'crossentropy': binary_cross_entropy,\n        'logloss': binary_cross_entropy,\n        'ce': binary_cross_entropy\n    }\n    \n    # Retrieve the loss function or raise ValueError if not found\n    if normalized_name in loss_functions:\n        return loss_functions[normalized_name]\n    else:\n        raise ValueError(\"Invalid loss function.\")\n\n# Example usage:\n# loss_fn = get_loss(\"mean_absolute_error\")\n# result = loss_fn([1, 2, 3], [1, 2, 3.5])\n# print(result)  # Output: 0.1667\n```\n\n### Explanation:\n1. **Loss Functions**: We define three functions (`mae`, `mse`, and `binary_cross_entropy`) to calculate the respective loss values. Each function converts the input lists to NumPy arrays, computes the error, and returns the mean rounded to four decimal places.\n\n2. **Normalization**: The input name is normalized by converting it to lowercase and removing underscores. This ensures that the function is case-insensitive and ignores extra underscores.\n\n3. **Mapping**: A dictionary `loss_functions` maps normalized names to the corresponding loss functions. This allows easy retrieval of the correct function based on the input name.\n\n4. **Error Handling**: If the normalized name is not found in the dictionary, a `ValueError` is raised with the message \"Invalid loss function.\"\n\nThis implementation provides a flexible and robust way to retrieve and use standard loss functions by name."}
{"task_id": 316, "completion_id": 0, "completion": "To implement the function that computes the Euclidean distance between two vectors, we need to follow these steps:\n\n1. Check if the vectors have the same length. If not, return -1.\n2. Convert the input vectors to NumPy arrays for efficient computation.\n3. Compute the Euclidean distance using the formula provided.\n4. Round the result to four decimal places and return it.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    # Check if the vectors have the same length\n    if len(x) != len(y):\n        return -1\n    \n    # Convert inputs to NumPy arrays\n    x_array = np.array(x)\n    y_array = np.array(y)\n    \n    # Compute the Euclidean distance\n    distance = np.sqrt(np.sum((x_array - y_array) ** 2))\n    \n    # Return the result rounded to four decimal places\n    return round(distance, 4)\n\n# Example usage:\n# print(euclidean([1, 2, 3], [4, 5, 6]))  # Output: 5.1962\n# print(euclidean((1, 2), (1, 2, 3)))     # Output: -1\n```\n\nThis function will correctly compute the Euclidean distance between two vectors, handling both lists/tuples and NumPy arrays, and will return -1 if the vectors are of unequal lengths."}
{"task_id": 317, "completion_id": 0, "completion": "To tackle this task, we need to construct a formatted debug report based on the given inputs. The function `err_fmt` will take a list of prediction-label pairs, a dictionary of gold standard texts, an index to focus on, and an optional warning string. The output will be a multi-line string formatted according to the specified requirements.\n\nHere's how we can implement the function:\n\n```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the previous index, ensuring it doesn't go below 0\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract the previous and current prediction-label pairs\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Retrieve the corresponding gold texts from the golds dictionary\n    prev_gold = golds.get(prev_label, \"\")\n    curr_gold = golds.get(curr_label, \"\")\n    \n    # Construct the formatted debug string\n    debug_report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_report\n```\n\n### Explanation:\n\n1. **Index Handling**: We calculate `prev_ix` as `max(ix - 1, 0)` to ensure we don't go out of bounds when `ix` is 0.\n\n2. **Data Extraction**: We extract the prediction and label for both the current and previous indices. We also fetch the corresponding gold texts from the `golds` dictionary using these labels.\n\n3. **String Construction**: We construct the debug report string using formatted string literals (f-strings) to insert the extracted data into the specified format. The `warn_str` is appended directly after the current \"Theirs\" block.\n\n4. **Return**: The function returns the fully constructed debug report string.\n\nThis implementation ensures that the output matches the required format exactly, including all specified dashes and newlines."}
{"task_id": 318, "completion_id": 0, "completion": "To implement the AdaBoost algorithm from scratch using decision stumps, we need to follow these steps:\n\n1. Initialize weights for each training sample.\n2. For each boosting round, find the best decision stump that minimizes the weighted error.\n3. Calculate the weight of the stump in the final model.\n4. Update the sample weights based on the stump's performance.\n5. After training, use the ensemble of stumps to predict the labels for the test set.\n\nHere's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize weights\n    weights = np.ones(n_samples) / n_samples\n    # Store the stumps and their weights\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_estimators):\n        # Find the best decision stump\n        best_stump = None\n        best_error = float('inf')\n        best_predictions = None\n\n        for feature in range(n_features):\n            feature_values = X_train[:, feature]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(feature_values - threshold)\n                    error = np.sum(weights[y_train != predictions])\n\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature, threshold, polarity)\n                        best_predictions = predictions\n\n        # Calculate the weight of the stump\n        epsilon = best_error / np.sum(weights)\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * best_predictions)\n        weights /= np.sum(weights)  # Normalize\n\n        # Store the stump and its weight\n        stumps.append(best_stump)\n        stump_weights.append(alpha)\n\n    # Predict on the test set\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, (feature, threshold, polarity) in zip(stump_weights, stumps):\n        predictions = polarity * np.sign(X_test[:, feature] - threshold)\n        final_predictions += alpha * predictions\n\n    # Return the sign of the final predictions\n    return list(np.sign(final_predictions).astype(int))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1, 2], [3, 4]])\n# print(adaboost_predict(X_train, y_train, X_test, n_estimators=10))\n```\n\n### Explanation:\n- **Weights Initialization**: We start with equal weights for all samples.\n- **Decision Stump Selection**: For each feature and threshold, we evaluate the weighted error and select the stump with the lowest error.\n- **Stump Weight Calculation**: The weight of each stump is calculated using the formula provided, which depends on the error rate.\n- **Weights Update**: We update the sample weights to focus more on misclassified samples.\n- **Prediction**: The final prediction is the sign of the weighted sum of all stumps' predictions.\n\nThis implementation uses only `numpy` and `math` as required, and returns predictions as a list of integers `-1` or `1`."}
{"task_id": 319, "completion_id": 0, "completion": "To implement the Stochastic Gradient Descent (SGD) for linear regression, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float = 0.01, epochs: int = 1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    The function must:\n      \u2022 prepend a bias column of ones to `X`;\n      \u2022 initialise the weight vector \u03b8 with zeros;\n      \u2022 perform `epochs` passes of SGD exactly as detailed in the task description;\n      \u2022 return \u03b8 rounded to 4 decimal places as a Python list.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 can be a NumPy array or a Python list of lists.\n        y: Target vector (m,) or (m,1) \u2013 can be a NumPy array or a Python list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n].\n    \"\"\"\n    # Convert input to numpy arrays if they are lists\n    if isinstance(X, list):\n        X = np.array(X)\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    # Ensure y is a flat array\n    y = y.flatten()\n    \n    # Add a bias column of ones to X\n    m, n = X.shape\n    X_bias = np.hstack((np.ones((m, 1)), X))\n    \n    # Initialize the weight vector \u03b8 with zeros\n    theta = np.zeros(n + 1)\n    \n    # Perform SGD for the specified number of epochs\n    for epoch in range(epochs):\n        for i in range(m):\n            # Get the i-th sample\n            x_i = X_bias[i]\n            y_i = y[i]\n            \n            # Compute the prediction\n            y_pred = np.dot(theta, x_i)\n            \n            # Compute the error\n            error = y_pred - y_i\n            \n            # Update the weights\n            theta -= learning_rate * error * x_i\n    \n    # Return \u03b8 rounded to 4 decimal places as a Python list\n    return list(np.round(theta, 4))\n\n# Example usage:\n# X = [[1, 2], [2, 3], [3, 4]]\n# y = [5, 6, 7]\n# print(stochastic_gradient_descent(X, y))\n```\n\n### Explanation:\n1. **Data Conversion**: The function first checks if the inputs `X` and `y` are lists and converts them to NumPy arrays for efficient computation.\n\n2. **Bias Addition**: A column of ones is added to the feature matrix `X` to account for the bias term `\u03b8\u2080`.\n\n3. **Initialization**: The weight vector `\u03b8` is initialized to zeros, with a size of `n+1` to include the bias term.\n\n4. **SGD Loop**: The function iterates over the dataset for the specified number of epochs. For each sample, it computes the prediction, calculates the error, and updates the weights using the gradient descent update rule.\n\n5. **Return**: After training, the learned weights are rounded to four decimal places and returned as a standard Python list.\n\nThis implementation should work for any number of features and is designed to be numerically stable for linear regression tasks."}
{"task_id": 321, "completion_id": 0, "completion": "To implement the Genetic Algorithm (GA) for evolving a population of candidate strings toward a user-defined target string, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport string\n\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    np.random.seed(42)\n    \n    # Define the valid characters and their indices\n    valid_chars = ' ' + string.ascii_letters\n    char_to_index = {char: idx for idx, char in enumerate(valid_chars)}\n    \n    # Function to calculate fitness\n    def calculate_fitness(individual):\n        return 1.0 / (sum(abs(char_to_index[individual[i]] - char_to_index[target[i]]) for i in range(len(target))) + 1e-6)\n    \n    # Function to create a random individual\n    def create_random_individual():\n        return ''.join(np.random.choice(list(valid_chars), len(target)))\n    \n    # Function to perform roulette-wheel selection\n    def select_parents(population, fitness_scores):\n        total_fitness = sum(fitness_scores)\n        selection_probs = [f / total_fitness for f in fitness_scores]\n        parents_indices = np.random.choice(range(population_size), size=2, replace=False, p=selection_probs)\n        return population[parents_indices[0]], population[parents_indices[1]]\n    \n    # Function to perform crossover\n    def crossover(parent1, parent2):\n        if len(parent1) <= 1:\n            return parent1, parent2\n        crossover_point = np.random.randint(1, len(parent1))\n        child1 = parent1[:crossover_point] + parent2[crossover_point:]\n        child2 = parent2[:crossover_point] + parent1[crossover_point:]\n        return child1, child2\n    \n    # Function to perform mutation\n    def mutate(individual):\n        individual_list = list(individual)\n        for i in range(len(individual_list)):\n            if np.random.rand() < mutation_rate:\n                individual_list[i] = np.random.choice(list(valid_chars))\n        return ''.join(individual_list)\n    \n    # Initialize population\n    population = [create_random_individual() for _ in range(population_size)]\n    best_individual = None\n    best_fitness = -1\n    \n    for _ in range(iterations):\n        # Evaluate fitness\n        fitness_scores = [calculate_fitness(individual) for individual in population]\n        \n        # Check for the best individual\n        for i, fitness in enumerate(fitness_scores):\n            if fitness > best_fitness:\n                best_fitness = fitness\n                best_individual = population[i]\n        \n        # Early stopping if target is found\n        if best_individual == target:\n            break\n        \n        # Selection and reproduction\n        new_population = []\n        while len(new_population) < population_size:\n            parent1, parent2 = select_parents(population, fitness_scores)\n            child1, child2 = crossover(parent1, parent2)\n            new_population.extend([mutate(child1), mutate(child2)])\n        \n        # Replace the old population with the new one\n        population = new_population[:population_size]\n    \n    return best_individual\n```\n\n### Explanation:\n\n1. **Population Initialization**: We create a population of random strings, each of the same length as the target string.\n\n2. **Fitness Evaluation**: We calculate the fitness of each individual based on how close it is to the target string using the provided formula.\n\n3. **Selection**: We use roulette-wheel selection to choose two parents based on their fitness scores.\n\n4. **Crossover**: We perform a single-point crossover to produce two children from two parents.\n\n5. **Mutation**: Each character in the children has a chance to be replaced by a random character based on the mutation rate.\n\n6. **Replacement**: The new generation replaces the old one.\n\n7. **Termination**: The process repeats for a specified number of iterations or stops early if the target string is found.\n\nThis implementation should effectively evolve a population of strings towards the target string using a genetic algorithm."}
{"task_id": 322, "completion_id": 0, "completion": "To implement the binary cross-entropy loss function, we need to follow these steps:\n\n1. Clip the predicted probabilities to avoid numerical issues with logarithms of 0 or 1.\n2. Compute the binary cross-entropy loss using the given formula.\n3. Calculate the mean of the loss values.\n4. Round the result to four decimal places and return it.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\nEPS = 1e-15  # small constant for numerical stability\n\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    # Clip predicted values to avoid log(0) or log(1)\n    predicted_clipped = np.clip(predicted, EPS, 1 - EPS)\n    \n    # Compute the binary cross-entropy loss\n    loss = - (actual * np.log(predicted_clipped) + (1 - actual) * np.log(1 - predicted_clipped))\n    \n    # Calculate the mean loss\n    mean_loss = np.mean(loss)\n    \n    # Round the result to four decimal places\n    return round(mean_loss, 4)\n\n# Example usage:\n# actual = np.array([0, 1, 0, 1])\n# predicted = np.array([0.1, 0.9, 0.2, 0.8])\n# print(binary_crossentropy(actual, predicted))  # Output should be a float rounded to 4 decimal places\n```\n\nThis function will compute the mean binary cross-entropy loss for the given `actual` and `predicted` arrays, ensuring numerical stability by clipping the predicted probabilities."}
{"task_id": 324, "completion_id": 0, "completion": "To implement bilinear interpolation for image sampling, we need to calculate the interpolated pixel values at given floating-point coordinates `(x, y)` in a 2-D image. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    \"\"\"Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n        lists `x` and `y` differ in length the function must return an empty\n        list.\n    \"\"\"\n    if len(x) != len(y):\n        return []\n\n    rows, cols, channels = X.shape\n    interpolated_values = []\n\n    for xi, yi in zip(x, y):\n        # Clip coordinates to be within the image boundaries\n        xi = np.clip(xi, 0, cols - 1)\n        yi = np.clip(yi, 0, rows - 1)\n\n        # Calculate the integer coordinates surrounding the point\n        x0, x1 = int(np.floor(xi)), int(np.ceil(xi))\n        y0, y1 = int(np.floor(yi)), int(np.ceil(yi))\n\n        # Ensure x1 and y1 are within bounds\n        x1 = min(x1, cols - 1)\n        y1 = min(y1, rows - 1)\n\n        # Calculate the interpolation weights\n        dx = xi - x0\n        dy = yi - y0\n\n        # Perform bilinear interpolation for each channel\n        interpolated_pixel = []\n        for c in range(channels):\n            # Get the values at the corners\n            Q11 = X[y0, x0, c]\n            Q21 = X[y0, x1, c]\n            Q12 = X[y1, x0, c]\n            Q22 = X[y1, x1, c]\n\n            # Interpolate\n            R1 = (1 - dx) * Q11 + dx * Q21\n            R2 = (1 - dx) * Q12 + dx * Q22\n            P = (1 - dy) * R1 + dy * R2\n\n            # Round to 4 decimal places\n            interpolated_pixel.append(round(P, 4))\n\n        interpolated_values.append(interpolated_pixel)\n\n    return interpolated_values\n\n# Example usage:\n# X = np.random.rand(5, 5, 3)  # Random image with shape (5, 5, 3)\n# x = [1.2, 3.7]\n# y = [2.5, 4.1]\n# result = bilinear_interpolate(X, x, y)\n# print(result)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the lengths of `x` and `y` are equal. If not, it returns an empty list.\n\n2. **Clipping Coordinates**: The coordinates `(xi, yi)` are clipped to ensure they fall within the valid range of the image dimensions.\n\n3. **Interpolation Weights**: The weights for interpolation are calculated based on the fractional part of the coordinates.\n\n4. **Bilinear Interpolation**: For each channel, the function calculates the interpolated value using the bilinear interpolation formula, which involves the values at the four surrounding integer grid points.\n\n5. **Rounding**: Each interpolated value is rounded to 4 decimal places.\n\n6. **Output**: The function returns a list of lists, where each inner list contains the interpolated values for each channel at the given `(x, y)` position."}
{"task_id": 326, "completion_id": 0, "completion": "To implement the `svm_predict` function, we need to compute the decision function for each sample in `X` using the specified kernel. Let's go through the implementation step-by-step:\n\n1. **Import numpy**: We'll use numpy for efficient numerical computations.\n2. **Define the function**: We'll define `svm_predict` with the specified parameters.\n3. **Set default gamma**: If `gamma` is not provided, we'll set it to `1 / n_features`.\n4. **Kernel functions**: Implement the three kernel functions: linear, polynomial, and RBF.\n5. **Compute decision values**: For each sample in `X`, compute the decision value using the support vectors, their labels, Lagrange multipliers, and the chosen kernel.\n6. **Predict labels**: Convert the decision values to class labels (-1 or 1) based on the sign of the decision value.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef svm_predict(\n    X: list[list[float]],\n    support_vectors: list[list[float]],\n    lagr_multipliers: list[float],\n    support_vector_labels: list[int],\n    intercept: float,\n    kernel: str = \"rbf\",\n    power: int = 3,\n    gamma: float | None = None,\n    coef: float = 1.0,\n) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample *x* is\n        f(x) = \u03a3 \u03b1_i y_i K(x_i, x) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers \u03b1_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term *b*.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in *X*.\n    \"\"\"\n    X = np.array(X)\n    support_vectors = np.array(support_vectors)\n    n_features = X.shape[1]\n    \n    if gamma is None:\n        gamma = 1.0 / n_features\n    \n    def linear_kernel(u, v):\n        return np.dot(u, v)\n    \n    def polynomial_kernel(u, v):\n        return (gamma * np.dot(u, v) + coef) ** power\n    \n    def rbf_kernel(u, v):\n        return np.exp(-gamma * np.linalg.norm(u - v) ** 2)\n    \n    kernel_function = {\n        \"linear\": linear_kernel,\n        \"polynomial\": polynomial_kernel,\n        \"rbf\": rbf_kernel\n    }.get(kernel)\n    \n    if kernel_function is None:\n        raise ValueError(f\"Unsupported kernel: {kernel}\")\n    \n    predictions = []\n    for x in X:\n        decision_value = sum(\n            alpha_i * y_i * kernel_function(x_i, x)\n            for alpha_i, y_i, x_i in zip(lagr_multipliers, support_vector_labels, support_vectors)\n        ) + intercept\n        \n        # Predict label based on the decision value\n        label = 1 if decision_value >= 0 else -1\n        predictions.append(label)\n    \n    return predictions\n```\n\n### Explanation:\n- **Kernel Functions**: We define three kernel functions corresponding to linear, polynomial, and RBF kernels.\n- **Decision Value Calculation**: For each sample `x`, we compute the decision value using the formula provided, iterating over the support vectors.\n- **Label Prediction**: We predict the label based on the sign of the decision value, returning 1 if the decision value is non-negative, and -1 otherwise. If the decision value is exactly 0, we default to returning 1 as specified."}
{"task_id": 328, "completion_id": 0, "completion": "To solve this task, we need to iterate through the list of words (the corpus) and check each word to see if its first character is an uppercase letter. If we find such a word, we return it in a one-element list. If no such word is found by the end of the list, we return an empty list.\n\nHere's how you can implement this function:\n\n```python\nfrom typing import List\n\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        if word and word[0].isupper():\n            return [word]\n    return []\n\n# Example usage:\n# print(first_capitalized_word([\"hello\", \"world\", \"Python\", \"is\", \"great\"]))  # Output: [\"Python\"]\n# print(first_capitalized_word([\"hello\", \"world\"]))  # Output: []\n# print(first_capitalized_word([]))  # Output: []\n```\n\n### Explanation:\n\n1. **Iteration**: We iterate over each word in the `corpus` list.\n2. **Check for Capitalization**: For each word, we check if it is non-empty and if its first character is uppercase using `word[0].isupper()`.\n3. **Return the First Match**: As soon as we find a word that meets the criteria, we return it in a one-element list.\n4. **Return an Empty List**: If no capitalized word is found after checking all words, we return an empty list.\n\nThis solution efficiently finds the first capitalized word, if it exists, and handles edge cases such as an empty corpus or words that do not start with an uppercase letter."}
{"task_id": 329, "completion_id": 0, "completion": "To implement the function `dft_bins`, we need to calculate the frequency for each DFT bin based on the given formula. We'll use NumPy to help with the calculations, especially for the case when `positive_only` is `False`, where we need to mimic the behavior of `numpy.fft.fftfreq`. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    # Frequency resolution\n    delta_f = fs / N\n\n    if positive_only:\n        # Calculate non-negative frequencies\n        freqs = np.arange(0, N//2 + 1) * delta_f\n    else:\n        # Calculate full frequency list using numpy's fftfreq\n        freqs = np.fft.fftfreq(N, d=1/fs)\n\n    # Round to 4 decimal places and convert to list\n    return np.round(freqs, 4).tolist()\n\n# Example usage:\nprint(dft_bins(8, 44000, True))  # Positive frequencies\nprint(dft_bins(8, 44000, False)) # Full frequency list\n```\n\n### Explanation:\n1. **Input Validation**: We first check if `N` or `fs` is non-positive. If either is, we return an empty list.\n\n2. **Frequency Resolution**: We calculate the frequency resolution `delta_f` as `fs / N`.\n\n3. **Positive Frequencies**: If `positive_only` is `True`, we calculate frequencies from `0` to `N//2` using `np.arange`.\n\n4. **Full Frequency List**: If `positive_only` is `False`, we use `np.fft.fftfreq` to generate the full list of frequencies, which includes negative frequencies.\n\n5. **Rounding and Conversion**: We round the frequencies to 4 decimal places using `np.round` and convert the NumPy array to a Python list using `tolist()`.\n\nThis implementation efficiently handles both modes and ensures the output is correctly formatted and rounded."}
{"task_id": 330, "completion_id": 0, "completion": "To implement the `update_kernel_settings` function, we need to follow these steps:\n\n1. Create new dictionaries for `parameters` and `hyperparameters` to ensure the originals are not mutated.\n2. Flatten the `summary_dict` by merging any nested dictionaries under the keys `\"parameters\"` and `\"hyperparameters\"` into the top level.\n3. Update the new dictionaries with values from the flattened `summary_dict`, but only for keys that exist in the original dictionaries.\n\nHere's the implementation:\n\n```python\ndef update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    \"\"\"Update kernel parameters and hyperparameters.\n\n    The function must not modify the input dictionaries.  It should return two\n    *new* dictionaries in which the supplied `summary_dict` updates have been\n    applied following the rules explained in the task description.\n\n    Args:\n        parameters (dict):      Existing kernel parameters.\n        hyperparameters (dict): Existing kernel hyperparameters.\n        summary_dict (dict):    Dictionary that may contain the keys\n            \"parameters\" and/or \"hyperparameters\" whose values are dictionaries\n            of updates.  Any top-level keys are also treated as updates.\n\n    Returns:\n        tuple[dict, dict]: `(new_parameters, new_hyperparameters)` \u2013 the\n        updated dictionaries.\n    \"\"\"\n    # Create new dictionaries to avoid mutating the originals\n    new_parameters = parameters.copy()\n    new_hyperparameters = hyperparameters.copy()\n\n    # Flatten the summary_dict\n    flattened_updates = summary_dict.copy()\n    if \"parameters\" in summary_dict:\n        flattened_updates.update(summary_dict[\"parameters\"])\n        del flattened_updates[\"parameters\"]\n    if \"hyperparameters\" in summary_dict:\n        flattened_updates.update(summary_dict[\"hyperparameters\"])\n        del flattened_updates[\"hyperparameters\"]\n\n    # Update new_parameters and new_hyperparameters with flattened updates\n    for key, value in flattened_updates.items():\n        if key in new_parameters:\n            new_parameters[key] = value\n        elif key in new_hyperparameters:\n            new_hyperparameters[key] = value\n\n    return new_parameters, new_hyperparameters\n```\n\n### Explanation:\n\n- **Copying Dictionaries**: We start by copying the `parameters` and `hyperparameters` dictionaries to `new_parameters` and `new_hyperparameters` respectively. This ensures that the original dictionaries are not modified.\n\n- **Flattening `summary_dict`**: We create a copy of `summary_dict` called `flattened_updates`. If `summary_dict` contains keys `\"parameters\"` or `\"hyperparameters\"`, we merge their contents into `flattened_updates` and remove these keys.\n\n- **Updating New Dictionaries**: We iterate over the `flattened_updates` dictionary. If a key exists in `new_parameters`, we update its value. Similarly, if a key exists in `new_hyperparameters`, we update its value. Keys not found in either dictionary are ignored.\n\nThis approach ensures that the function adheres to the requirements and correctly updates the dictionaries based on the provided `summary_dict`."}
{"task_id": 331, "completion_id": 0, "completion": "To compute the out-of-bag mean squared error (OOB-MSE) for a Random Forest regressor, we need to follow these steps:\n\n1. For each sample, identify which trees are out-of-bag (OOB) using the `oob_mask`.\n2. For samples with at least one OOB prediction, calculate the average of these OOB predictions.\n3. Compute the squared error between this average and the true target value for each sample.\n4. Calculate the mean of these squared errors over all samples that have at least one OOB prediction.\n5. If no sample has an OOB prediction, return -1.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask)\n    \n    n_samples = y_true.shape[0]\n    oob_squared_errors = []\n    \n    for i in range(n_samples):\n        # Get the OOB predictions for the i-th sample\n        oob_predictions = predictions[i, oob_mask[i]]\n        \n        if oob_predictions.size > 0:\n            # Calculate the average of OOB predictions\n            oob_pred_mean = np.mean(oob_predictions)\n            # Calculate the squared error\n            squared_error = (oob_pred_mean - y_true[i]) ** 2\n            oob_squared_errors.append(squared_error)\n    \n    if len(oob_squared_errors) == 0:\n        return -1\n    \n    # Calculate the mean of the squared errors\n    oob_mse_value = np.mean(oob_squared_errors)\n    \n    # Return the OOB-MSE rounded to 4 decimal places\n    return round(oob_mse_value, 4)\n```\n\n### Explanation:\n- We iterate over each sample to check if it has any OOB predictions.\n- If a sample has OOB predictions, we compute the mean of these predictions and then calculate the squared error with respect to the true target value.\n- We collect all squared errors and compute their mean to get the OOB-MSE.\n- If no sample has OOB predictions, we return -1 as specified."}
{"task_id": 332, "completion_id": 0, "completion": "To construct an FP-Tree without using classes, we need to follow the steps outlined in the task description. Here's the implementation:\n\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree. Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_support = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        item_support.update(unique_items)\n\n    # Step 2: Discard items with support less than min_support\n    frequent_items = {item for item, support in item_support.items() if support >= min_support}\n\n    # Step 3: Create a global ordering of the remaining items\n    ordered_items = sorted(frequent_items, key=lambda item: (-item_support[item], item))\n\n    # Step 4: Build the FP-Tree\n    def insert_transaction(tree, transaction):\n        current_node = tree\n        current_node['support'] += 1\n        for item in transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n\n    # Initialize the root of the FP-Tree\n    fp_tree = {'support': 0, 'children': {}}\n\n    for transaction in transactions:\n        # Remove duplicates and keep only frequent items, reorder them\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        ordered_transaction = sorted(filtered_transaction, key=lambda item: ordered_items.index(item))\n        # Insert the ordered transaction into the FP-Tree\n        insert_transaction(fp_tree, ordered_transaction)\n\n    return fp_tree\n\n# Example usage:\ntransactions = [\n    ['a', 'b', 'c'],\n    ['a', 'c'],\n    ['a', 'b', 'd'],\n    ['b', 'c', 'e'],\n    ['a', 'b', 'c', 'e']\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\n### Explanation:\n1. **Support Calculation**: We use `Counter` to calculate the support for each item across all transactions.\n2. **Filter Items**: We filter out items that do not meet the minimum support threshold.\n3. **Global Ordering**: We sort the items first by decreasing support and then alphabetically to break ties.\n4. **Tree Construction**: We initialize the FP-Tree with a root node having support 0. For each transaction, we filter and reorder items, then insert them into the tree, updating the support of each node along the path.\n\nThis code will construct the FP-Tree as specified, using nested dictionaries to represent the tree structure."}
{"task_id": 333, "completion_id": 0, "completion": "To implement logistic regression from scratch using batch gradient descent, we need to follow the steps outlined in your task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float = 0.1, num_iter: int = 10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    # Number of samples\n    m = X.shape[0]\n    \n    # Standardize the feature matrix\n    X_std = (X - np.mean(X, axis=0)) / (np.std(X, axis=0) + 1e-8)\n    \n    # Add bias column of ones\n    X_augmented = np.hstack((np.ones((m, 1)), X_std))\n    \n    # Initialize parameters (theta) with zeros\n    theta = np.zeros(X_augmented.shape[1])\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Gradient descent\n    for _ in range(num_iter):\n        # Compute the hypothesis\n        h_theta = sigmoid(np.dot(X_augmented, theta))\n        \n        # Compute the gradient\n        gradient = np.dot(X_augmented.T, (h_theta - y)) / m\n        \n        # Update the parameters\n        theta -= alpha * gradient\n    \n    # Compute the final probabilities\n    probabilities = sigmoid(np.dot(X_augmented, theta))\n    \n    # Convert probabilities to class labels with a 0.5 cut-off\n    predicted_labels = (probabilities >= 0.5).astype(int)\n    \n    # Return the predicted labels as a standard Python list\n    return predicted_labels.tolist()\n\n# Example usage:\n# X = np.array([[...], [...], ...])  # Your feature matrix\n# y = np.array([...])  # Your binary labels\n# predictions = logistic_regression(X, y)\n# print(predictions)\n```\n\n### Explanation:\n1. **Standardization**: Each feature column in `X` is standardized using z-score normalization. A small constant `1e-8` is added to the standard deviation to prevent division by zero.\n\n2. **Augmentation**: A column of ones is added to `X` to account for the bias term in the logistic regression model.\n\n3. **Initialization**: The parameter vector `theta` is initialized to zeros.\n\n4. **Gradient Descent**: The model parameters are updated iteratively using the gradient descent update rule. The sigmoid function is used to compute the hypothesis.\n\n5. **Prediction**: After training, the probabilities are computed using the final `theta`, and these probabilities are converted to class labels using a threshold of 0.5.\n\n6. **Return**: The predicted labels are returned as a standard Python list.\n\nThis implementation should correctly classify linearly separable test cases as specified."}
{"task_id": 334, "completion_id": 0, "completion": "To implement the Noam learning-rate scheduler, we need to follow the formula provided in the task description. Let's break down the implementation step by step:\n\n1. **Check for invalid step**: If the `step` is less than 1, return 0 as the learning rate.\n2. **Calculate the learning rate**: Use the formula provided to compute the learning rate based on the current `step`, `model_dim`, `scale_factor`, and `warmup_steps`.\n3. **Round the result**: Round the computed learning rate to 9 decimal places before returning it.\n\nHere's the complete implementation:\n\n```python\nimport math\n\ndef noam_learning_rate(step: int,\n                       model_dim: int = 512,\n                       scale_factor: float = 1.0,\n                       warmup_steps: int = 4000) -> float:\n    \"\"\"Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n    \"\"\"\n    if step < 1:\n        return 0.0\n    \n    # Calculate the learning rate using the Noam schedule formula\n    lr = scale_factor * (model_dim ** -0.5) * min(step ** -0.5, step * warmup_steps ** -1.5)\n    \n    # Round the learning rate to 9 decimal places\n    return round(lr, 9)\n\n# Example usage:\n# print(noam_learning_rate(1))  # Example call to the function\n```\n\n### Explanation:\n- **Step Check**: The function first checks if the `step` is less than 1. If so, it returns 0.0 because the learning rate is not defined for such steps.\n- **Learning Rate Calculation**: The learning rate is calculated using the formula provided. The `min` function is used to determine whether the learning rate should be increasing (during warm-up) or decreasing (after warm-up).\n- **Rounding**: The result is rounded to 9 decimal places using Python's `round` function to ensure precision as required by the task.\n\nThis implementation should meet the requirements and constraints specified in the task description."}
{"task_id": 335, "completion_id": 0, "completion": "To implement the `get_initializer` function, we need to define a factory function that returns different initializers based on the provided strategy name. Each initializer will be a callable that generates a numpy array according to the specified strategy. Let's go through the implementation step-by-step:\n\n1. **Import numpy**: We'll use numpy for array creation and random number generation.\n2. **Define the `get_initializer` function**: This function will take a string `name` and return the corresponding initializer callable.\n3. **Implement each strategy**:\n   - **Zeros**: Return an array of zeros with the specified shape.\n   - **Ones**: Return an array of ones, scaled by the `scale` parameter.\n   - **Normal**: Return an array with values drawn from a normal distribution with mean 0 and standard deviation equal to `scale`.\n   - **Glorot Uniform**: Implement the Glorot/Xavier uniform initialization. This requires calculating the limit based on the shape and scale, and then drawing samples from a uniform distribution within that limit.\n4. **Error handling**: Raise a `ValueError` if an unsupported strategy name is provided or if the shape is not suitable for the \"glorot_uniform\" strategy.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        - \"zeros\"\n        - \"ones\"\n        - \"normal\"\n        - \"glorot_uniform\"\n\n    If *name* is not recognised the function must raise `ValueError`.\n    \"\"\"\n    \n    name = name.lower()\n    \n    if name == \"zeros\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.zeros(shape)\n    \n    elif name == \"ones\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.ones(shape) * scale\n    \n    elif name == \"normal\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.random.normal(loc=0.0, scale=scale, size=shape)\n    \n    elif name == \"glorot_uniform\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            if len(shape) < 2:\n                raise ValueError(\"Glorot uniform initialization requires at least two dimensions.\")\n            fan_in, fan_out = shape[0], shape[1]\n            limit = scale * np.sqrt(6 / (fan_in + fan_out))\n            return np.random.uniform(low=-limit, high=limit, size=shape)\n    \n    else:\n        raise ValueError(f\"Unsupported initialization strategy: {name}\")\n    \n    return initializer\n```\n\n### Explanation:\n- **Zeros and Ones**: These are straightforward, using `np.zeros` and `np.ones` respectively.\n- **Normal**: Uses `np.random.normal` to generate values from a normal distribution.\n- **Glorot Uniform**: Calculates the limit using the formula provided and uses `np.random.uniform` to generate values within the range `[-limit, limit]`.\n- **Error Handling**: Raises `ValueError` for unsupported strategies and for invalid shapes in the \"glorot_uniform\" strategy."}
{"task_id": 336, "completion_id": 0, "completion": "To implement the `linear_kernel` function, we need to handle both lists and NumPy arrays as inputs, perform the necessary validation checks, and compute the kernel matrix. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", \n                  Y: list[list[int | float]] | \"np.ndarray\" | None = None, \n                  c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # If X is empty, return an empty list\n    if X.shape[0] == 0:\n        return []\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the result to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result to a list of lists\n    return K_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(linear_kernel(X, Y, c0=1))\n```\n\n### Explanation:\n\n1. **Input Conversion**: We first convert the input lists to NumPy arrays to leverage efficient numerical operations. This is done using `np.array()` with `dtype=float` to ensure floating-point precision.\n\n2. **Validation**: We check if the number of columns in `X` and `Y` match. If not, we return `-1`.\n\n3. **Empty Input Handling**: If `X` is empty, we return an empty list as specified.\n\n4. **Kernel Matrix Calculation**: We compute the dot product using `np.dot(X, Y.T)` and add the constant `c0`.\n\n5. **Rounding**: The resulting matrix is rounded to 4 decimal places using `np.round()`.\n\n6. **Output Conversion**: Finally, we convert the NumPy array back to a list of lists using `.tolist()` for the output format.\n\nThis implementation efficiently handles both lists and NumPy arrays, performs necessary checks, and computes the kernel matrix as required."}
{"task_id": 337, "completion_id": 0, "completion": "To implement the Nearest-Neighbour interpolation on a 2-D grid, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float|int], y: list[float|int]) -> list:\n    \"\"\"Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    # Check if the coordinate lists are empty\n    if not x or not y:\n        return []\n\n    # Get the dimensions of the image\n    rows, cols, channels = X.shape\n\n    # Round the coordinates to the nearest integer using np.around\n    x_rounded = np.around(x).astype(int)\n    y_rounded = np.around(y).astype(int)\n\n    # Clip the rounded indices to ensure they are within the image bounds\n    x_clipped = np.clip(x_rounded, 0, cols - 1)\n    y_clipped = np.clip(y_rounded, 0, rows - 1)\n\n    # Fetch the pixel values at the clipped coordinates\n    interpolated_pixels = X[y_clipped, x_clipped]\n\n    # Convert the result to a Python list\n    return interpolated_pixels.tolist()\n\n# Example usage:\n# image = np.random.rand(5, 5, 3)  # Example image with shape (5, 5, 3)\n# x_coords = [1.2, 3.7, 4.5]\n# y_coords = [0.5, 2.3, 4.8]\n# result = nn_interpolate_2D(image, x_coords, y_coords)\n# print(result)\n```\n\n### Explanation:\n1. **Input Validation**: We first check if the coordinate lists `x` and `y` are empty. If they are, we return an empty list immediately.\n\n2. **Rounding and Clipping**:\n   - We use `np.around` to round the floating-point coordinates to the nearest integer, following the banker\u2019s rounding rule.\n   - We then clip these rounded indices using `np.clip` to ensure they fall within the valid range of the image dimensions.\n\n3. **Pixel Fetching**:\n   - Using the clipped indices, we fetch the pixel values from the image array `X` for all channels.\n\n4. **Conversion to List**:\n   - Finally, we convert the resulting NumPy array to a Python list using the `.tolist()` method and return it.\n\nThis implementation efficiently handles the interpolation task and ensures that the coordinates are safely bounded within the image dimensions."}
{"task_id": 338, "completion_id": 0, "completion": "To implement the closed-form solution for Ridge Regression, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef ridge_regression(X, y, reg_factor):\n    \"\"\"Compute the Ridge Regression weights using the closed-form solution.\"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Get the number of samples (n) and features (d)\n    n, d = X.shape\n    \n    # Append a column of ones to X for the bias term\n    X_bar = np.hstack((np.ones((n, 1)), X))\n    \n    # Create the identity matrix of size (d+1) x (d+1)\n    I = np.eye(d + 1)\n    \n    # Compute the Ridge Regression weights using the closed-form solution\n    # w = (X\u0304^T X\u0304 + \u03b1 I)^{-1} X\u0304^T y\n    X_bar_T = X_bar.T\n    A = X_bar_T @ X_bar + reg_factor * I\n    b = X_bar_T @ y\n    w = np.linalg.inv(A) @ b\n    \n    # Round each coefficient to 4 decimal places\n    w_rounded = np.round(w, 4)\n    \n    # Return the weights as a Python list\n    return w_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4], [5, 6]]\n# y = [1, 2, 3]\n# reg_factor = 0.1\n# print(ridge_regression(X, y, reg_factor))\n```\n\n### Explanation:\n1. **Input Conversion**: Ensure that `X` and `y` are NumPy arrays for matrix operations.\n2. **Bias Term**: Add a column of ones to `X` to account for the bias/intercept term.\n3. **Identity Matrix**: Create an identity matrix of size `(d+1) x (d+1)` to match the dimensions of the augmented feature matrix.\n4. **Closed-Form Solution**: Compute the weights using the formula provided, which involves matrix multiplication and inversion.\n5. **Rounding**: Round each coefficient to 4 decimal places for the final output.\n6. **Return**: Convert the weights to a list and return them.\n\nThis function should work for any valid input feature matrix `X`, target vector `y`, and regularization factor `reg_factor`."}
{"task_id": 339, "completion_id": 0, "completion": "To solve the problem of finding the most frequent label in a given iterable `y`, we can utilize Python's `collections.Counter` to count the occurrences of each element. Then, we can determine the element with the highest frequency. In case of a tie, we will return the element that appears first in the iterable. Here's how you can implement this:\n\n```python\nfrom collections import Counter\n\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n    \n    # Count the occurrences of each element in y\n    counts = Counter(y)\n    \n    # Find the maximum frequency\n    max_count = max(counts.values())\n    \n    # Find the first element in y with the maximum frequency\n    for element in y:\n        if counts[element] == max_count:\n            return element\n\n# Example usage:\n# print(most_common_label(['a', 'b', 'a', 'c', 'b', 'a']))  # Output: 'a'\n# print(most_common_label(['a', 'b', 'b', 'c', 'c']))       # Output: 'b'\n# print(most_common_label([]))                              # Output: None\n```\n\n### Explanation:\n1. **Check for Empty Input**: We first check if the input list `y` is empty. If it is, we return `None` immediately.\n\n2. **Count Elements**: We use `Counter` from the `collections` module to count the occurrences of each element in the list.\n\n3. **Determine Maximum Frequency**: We find the maximum frequency of any element using `max(counts.values())`.\n\n4. **Resolve Ties by Order of Appearance**: We iterate over the original list `y` and return the first element that has the maximum frequency. This ensures that in case of a tie, the element that appears first is returned.\n\nThis approach efficiently handles the requirements and constraints specified in the task."}
{"task_id": 340, "completion_id": 0, "completion": "To implement the single-step Adam optimizer, we need to follow the update rules provided in the task description. Here's the complete function:\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    # Update biased first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update biased second raw moment estimate\n    v_t = beta2 * v + (1 - beta2) * grad**2\n    \n    # Compute bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - beta1**t)\n    \n    # Compute bias-corrected second raw moment estimate\n    v_hat_t = v_t / (1 - beta2**t)\n    \n    # Update parameters\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Convert results to lists and round to 8 decimal places\n    updated_param = np.round(param_t, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n    \n    return updated_param, new_m, new_v\n```\n\n### Explanation:\n1. **Moment Updates**: We update the first (`m_t`) and second (`v_t`) moment estimates using the exponential decay rates `beta1` and `beta2`.\n\n2. **Bias Correction**: The bias-corrected estimates `m_hat_t` and `v_hat_t` are computed to counteract the initialization bias.\n\n3. **Parameter Update**: The parameter `param_t` is updated using the Adam update rule, which involves dividing the bias-corrected first moment by the square root of the bias-corrected second moment plus a small constant `eps` to prevent division by zero.\n\n4. **Output**: The updated parameter, new moment, and new variance are returned as lists, rounded to 8 decimal places."}
{"task_id": 342, "completion_id": 0, "completion": "To implement the `manhattan` function, we need to calculate the Manhattan distance between two vectors, ensuring that the vectors are of equal length. If they are not, the function should return -1. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n    \"\"\"\n    # Check if the vectors have the same length\n    if len(x) != len(y):\n        return -1\n    \n    # Compute the Manhattan distance\n    distance = sum(abs(x_i - y_i) for x_i, y_i in zip(x, y))\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1.0, 2.0, 3.0]\n# y = [4.0, 5.0, 6.0]\n# print(manhattan(x, y))  # Output: 9.0\n```\n\n### Explanation:\n1. **Length Check**: The function first checks if the lengths of the two input lists `x` and `y` are equal. If not, it returns -1.\n\n2. **Distance Calculation**: If the lengths are equal, it calculates the Manhattan distance using a generator expression inside the `sum` function. This expression iterates over pairs of elements from `x` and `y`, computes the absolute difference for each pair, and sums these differences.\n\n3. **Rounding**: The result is rounded to 4 decimal places using the `round` function before being returned.\n\nThis implementation efficiently computes the Manhattan distance while adhering to the specified constraints."}
{"task_id": 343, "completion_id": 0, "completion": "To implement the core numerical step of the Cross-Entropy Method (CEM), we need to follow these steps:\n\n1. Sort the `theta_samples` based on the `rewards` in descending order.\n2. Retain the top `retain_prcnt` fraction of samples.\n3. Compute the mean and variance for each dimension of the retained samples.\n4. Return the mean and variance as lists, rounded to four decimal places.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Convert rewards to a numpy array if it's not already\n    rewards = np.array(rewards)\n    \n    # Determine the number of samples to retain\n    num_retain = int(retain_prcnt * len(rewards))\n    \n    # Get indices of the top rewards\n    top_indices = np.argsort(rewards)[-num_retain:]\n    \n    # Select the top samples based on the indices\n    elite_samples = theta_samples[top_indices]\n    \n    # Compute mean and variance for each dimension\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places and convert to lists\n    mean_rounded = np.round(mean, 4).tolist()\n    variance_rounded = np.round(variance, 4).tolist()\n    \n    return mean_rounded, variance_rounded\n```\n\n### Explanation:\n- **Sorting and Selection**: We use `np.argsort` to get the indices that would sort the rewards in ascending order, and then select the last `num_retain` indices to get the top rewards.\n- **Mean and Variance Calculation**: We calculate the mean and variance along the columns (axis=0) of the retained samples.\n- **Rounding**: We use `np.round` to ensure the results are rounded to four decimal places before converting them to lists for the final output."}
{"task_id": 344, "completion_id": 0, "completion": "To implement the Huffman coding algorithm, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport heapq\nfrom collections import Counter, defaultdict\n\nclass Node:\n    def __init__(self, token, frequency):\n        self.token = token\n        self.frequency = frequency\n        self.left = None\n        self.right = None\n\n    def __lt__(self, other):\n        # Compare nodes first by frequency, then by token lexicographically\n        if self.frequency == other.frequency:\n            return self.token < other.token\n        return self.frequency < other.frequency\n\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping **every** unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n    \"\"\"\n    if not tokens:\n        return {}\n\n    # Count the frequency of each token\n    frequency = Counter(tokens)\n\n    # Create a priority queue (min-heap) of nodes\n    heap = [Node(token, freq) for token, freq in frequency.items()]\n    heapq.heapify(heap)\n\n    # Handle the case with only one unique token\n    if len(heap) == 1:\n        return {heap[0].token: '0'}\n\n    # Build the Huffman tree\n    while len(heap) > 1:\n        # Pop the two nodes with the smallest frequencies\n        left = heapq.heappop(heap)\n        right = heapq.heappop(heap)\n\n        # Create a new parent node with combined frequency\n        merged = Node(\"\", left.frequency + right.frequency)\n        merged.left = left\n        merged.right = right\n\n        # Push the parent node back into the heap\n        heapq.heappush(heap, merged)\n\n    # Traverse the tree to generate Huffman codes\n    root = heap[0]\n    huffman_codes = {}\n\n    def generate_codes(node, current_code):\n        if node is None:\n            return\n        if node.token:  # It's a leaf node\n            huffman_codes[node.token] = current_code\n        generate_codes(node.left, current_code + '0')\n        generate_codes(node.right, current_code + '1')\n\n    generate_codes(root, \"\")\n\n    return huffman_codes\n\n# Example usage:\ntokens = [\"a\", \"b\", \"c\", \"a\", \"b\", \"a\"]\nprint(huffman_encode(tokens))\n```\n\n### Explanation:\n\n1. **Node Class**: We define a `Node` class to represent each node in the Huffman tree. Each node has a token, frequency, and pointers to left and right children. The `__lt__` method is overridden to ensure nodes are compared first by frequency and then lexicographically by token.\n\n2. **Frequency Count**: We use `Counter` from the `collections` module to count the frequency of each token.\n\n3. **Min-Heap Construction**: We create a list of `Node` objects and use `heapq.heapify` to turn it into a min-heap.\n\n4. **Single Token Case**: If there's only one unique token, we directly return a dictionary with that token mapped to \"0\".\n\n5. **Huffman Tree Construction**: We repeatedly pop the two nodes with the smallest frequencies, merge them into a new node, and push the new node back into the heap until only one node remains.\n\n6. **Code Generation**: We traverse the Huffman tree recursively to generate the binary codes for each token. The traversal uses '0' for left edges and '1' for right edges.\n\nThis implementation efficiently constructs the Huffman tree and generates prefix-free binary codes for the tokens."}
{"task_id": 345, "completion_id": 0, "completion": "To implement Bayesian linear regression with a conjugate Normal prior for the weights, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        mu0: np.ndarray,\n        omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\n\n    The function must add an intercept, compute the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and return the predictions for\n    every sample in X_test rounded to four decimals.\n\n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n    # Add intercept column to X_train and X_test\n    X_train_intercept = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test_intercept = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    \n    # Compute posterior mean of the weight vector\n    XT_X = X_train_intercept.T @ X_train_intercept\n    XT_y = X_train_intercept.T @ y_train\n    \n    # Posterior mean calculation\n    posterior_mean = np.linalg.inv(XT_X + omega0) @ (XT_y + omega0 @ mu0)\n    \n    # Predict using the posterior mean\n    predictions = X_test_intercept @ posterior_mean\n    \n    # Round predictions to four decimals and convert to list\n    return list(np.round(predictions, 4))\n\n# Example usage:\n# X_train = np.array([[1, 2], [3, 4], [5, 6]])\n# y_train = np.array([1, 2, 3])\n# X_test = np.array([[7, 8], [9, 10]])\n# mu0 = np.array([0, 0, 0])\n# omega0 = np.eye(3)\n# predictions = bayesian_linear_regression_predict(X_train, y_train, X_test, mu0, omega0)\n# print(predictions)\n```\n\n### Explanation:\n1. **Intercept Addition**: We add a column of ones to both the training and test design matrices to account for the intercept term in the linear model.\n\n2. **Posterior Mean Calculation**: We compute the posterior mean of the weight vector using the formula provided:\n   \\[\n   \\mu\u2099 = (X\u1d40X + \u03a9\u2080)\u207b\u00b9 (X\u1d40y + \u03a9\u2080\u03bc\u2080)\n   \\]\n   This involves matrix operations such as transposition, multiplication, and inversion.\n\n3. **Prediction**: We use the posterior mean to make predictions on the test set by multiplying the test design matrix (with intercept) by the posterior mean vector.\n\n4. **Output Formatting**: The predictions are rounded to four decimal places and returned as a standard Python list.\n\nThis implementation assumes that the input matrices and vectors are correctly shaped and compatible with the operations performed."}
{"task_id": 346, "completion_id": 0, "completion": "To compute the Shannon entropy of a given set of class labels, we need to calculate the proportion of each unique label and then apply the entropy formula. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for easier manipulation\n    y = np.array(y)\n    \n    # Find unique labels and their counts\n    unique_labels, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the total number of samples\n    total_samples = len(y)\n    \n    # Calculate the proportions for each unique label\n    proportions = counts / total_samples\n    \n    # Compute the entropy using the formula\n    entropy_value = -np.sum(proportions * np.log2(proportions))\n    \n    # Round the result to 4 decimal places\n    return round(entropy_value, 4)\n\n# Example usage:\n# labels = [0, 1, 1, 2, 2, 2]\n# print(entropy(labels))  # Output: 1.4591\n```\n\n### Explanation:\n1. **Input Conversion**: The input `y` is converted to a NumPy array to facilitate operations like finding unique elements and their counts.\n\n2. **Unique Labels and Counts**: We use `np.unique` with `return_counts=True` to get both the unique labels and their respective counts in the input array.\n\n3. **Proportions Calculation**: The proportion of each label is calculated by dividing its count by the total number of samples.\n\n4. **Entropy Calculation**: The entropy is computed using the formula \\( H(Y) = -\\Sigma p_i \\cdot \\log_2(p_i) \\), where \\( p_i \\) is the proportion of each label.\n\n5. **Rounding**: The result is rounded to 4 decimal places using Python's `round` function.\n\nThis function will correctly compute the Shannon entropy for any set of non-negative integer labels, adhering to the specified behavior requirements."}
{"task_id": 347, "completion_id": 0, "completion": "To implement the WGAN-GP loss function, we need to compute the loss for both the critic and the generator based on the given formulas. Let's go through the implementation step-by-step:\n\n1. **Critic Loss (`L_C`)**: This involves three components:\n   - The expectation of the critic scores on fake samples.\n   - The expectation of the critic scores on real samples.\n   - The gradient penalty term, which involves the gradients of the critic outputs with respect to interpolated samples.\n\n2. **Generator Loss (`L_G`)**: This is simply the negative expectation of the critic scores on fake samples.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef wgan_gp_loss(\n        Y_fake: np.ndarray,\n        module: str,\n        Y_real: np.ndarray | None = None,\n        gradInterp: np.ndarray | None = None,\n        lambda_: float = 10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    if module == \"C\":\n        if Y_real is None or gradInterp is None:\n            raise ValueError(\"Y_real and gradInterp must be provided for critic loss.\")\n        \n        # Calculate the critic loss\n        loss_fake = np.mean(Y_fake)\n        loss_real = np.mean(Y_real)\n        gradient_penalty = np.mean((np.linalg.norm(gradInterp, axis=1) - 1) ** 2)\n        \n        loss_critic = loss_fake - loss_real + lambda_ * gradient_penalty\n        return round(loss_critic, 4)\n    \n    elif module == \"G\":\n        # Calculate the generator loss\n        loss_generator = -np.mean(Y_fake)\n        return round(loss_generator, 4)\n    \n    else:\n        raise ValueError(\"Invalid module specified. Use 'C' for critic or 'G' for generator.\")\n\n```\n\n### Explanation:\n- **Critic Loss (`L_C`)**:\n  - `loss_fake`: The mean of the critic scores for fake samples.\n  - `loss_real`: The mean of the critic scores for real samples.\n  - `gradient_penalty`: The mean of the squared difference between the norm of the gradients and 1, scaled by the gradient penalty coefficient `lambda_`.\n  - The critic loss is computed as the difference between `loss_fake` and `loss_real`, plus the gradient penalty term.\n\n- **Generator Loss (`L_G`)**:\n  - Simply the negative mean of the critic scores for fake samples.\n\n- **Error Handling**: If the critic loss is requested but `Y_real` or `gradInterp` is not provided, a `ValueError` is raised. Similarly, if an invalid module is specified, a `ValueError` is raised.\n\nThis implementation ensures that the loss is computed correctly for both the critic and the generator, and returns the result rounded to four decimal places."}
{"task_id": 348, "completion_id": 0, "completion": "To solve the problem of checking whether a given real square matrix is both symmetric and positive-definite, we can follow these steps:\n\n1. **Check if the matrix is square**: A matrix must be square (i.e., the number of rows equals the number of columns) to be symmetric and positive-definite.\n\n2. **Check for symmetry**: A matrix is symmetric if it is equal to its transpose. We can use `np.allclose` with a tolerance to account for numerical precision issues.\n\n3. **Check for positive-definiteness**: A symmetric matrix is positive-definite if all its eigenvalues are positive. We can use `np.linalg.eigvalsh`, which is optimized for symmetric matrices, to compute the eigenvalues and then check if all are greater than a small positive threshold (e.g., `1e-8`).\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    # Check if the matrix is square\n    if X.ndim != 2 or X.shape[0] != X.shape[1]:\n        return False\n    \n    # Check if the matrix is symmetric\n    if not np.allclose(X, X.T, atol=1e-8):\n        return False\n    \n    # Compute the eigenvalues\n    eigenvalues = np.linalg.eigvalsh(X)\n    \n    # Check if all eigenvalues are greater than the tolerance\n    if np.all(eigenvalues > 1e-8):\n        return True\n    else:\n        return False\n```\n\n### Explanation:\n\n- **Square Check**: We first ensure that the input matrix `X` is two-dimensional and square by checking `X.ndim != 2` and `X.shape[0] != X.shape[1]`.\n\n- **Symmetry Check**: We use `np.allclose(X, X.T, atol=1e-8)` to verify that `X` is approximately equal to its transpose within a tolerance of `1e-8`.\n\n- **Positive-Definiteness Check**: We compute the eigenvalues using `np.linalg.eigvalsh(X)`, which is efficient for symmetric matrices. We then check if all eigenvalues are greater than `1e-8` using `np.all(eigenvalues > 1e-8)`.\n\nThis function will return `True` if the matrix is both symmetric and positive-definite, and `False` otherwise."}
{"task_id": 350, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_ridge_regression(X: list[float | int],\n                                y: list[float | int],\n                                degree: int,\n                                reg_factor: float) -> list[float]:\n    \"\"\"Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non-negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n    \"\"\"\n    # Convert X and y to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n\n    # Number of samples\n    n_samples = len(X)\n\n    # Construct the design matrix\n    # Each row is [1, x, x\u00b2, ..., x\u1d48]\n    X_design = np.vander(X, N=degree+1, increasing=True)\n\n    # Compute X\u1d40\u00b7X\n    XtX = X_design.T @ X_design\n\n    # Compute X\u1d40\u00b7y\n    Xty = X_design.T @ y\n\n    # Regularization term \u03bbI\n    lambda_I = reg_factor * np.eye(degree+1)\n\n    # Compute the ridge regression coefficients using the closed-form solution\n    w = np.linalg.inv(XtX + lambda_I) @ Xty\n\n    # Round the coefficients to 4 decimal places\n    w_rounded = np.round(w, 4)\n\n    return w_rounded.tolist()\n```\n\n### Explanation:\n\n1. **Design Matrix Construction**: The design matrix `X_design` is constructed using `np.vander` with `increasing=True` to ensure the columns are `[1, x, x\u00b2, ..., x\u1d48]`.\n\n2. **Matrix Operations**: \n   - `XtX` is the result of `X_design.T @ X_design`, which computes \\(X^T \\cdot X\\).\n   - `Xty` is the result of `X_design.T @ y`, which computes \\(X^T \\cdot y\\).\n\n3. **Regularization**: The regularization term `lambda_I` is created using `reg_factor * np.eye(degree+1)`, which generates a diagonal matrix scaled by the regularization factor.\n\n4. **Closed-Form Solution**: The coefficients `w` are computed using the formula \\(w = (X^T \\cdot X + \\lambda I)^{-1} \\cdot X^T \\cdot y\\).\n\n5. **Rounding**: The coefficients are rounded to 4 decimal places using `np.round`.\n\nThis implementation efficiently computes the polynomial ridge regression coefficients using the closed-form solution, ensuring the results are rounded as specified."}
{"task_id": 351, "completion_id": 0, "completion": "To implement the 2-D max pooling operation, we need to iterate over each image in the batch, each channel, and apply the pooling operation over the height and width of the image using the specified pooling window and stride. Here's how you can implement this in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    \n    # Calculate output dimensions\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n    \n    # Initialize the output array\n    pooled = np.zeros((N, C, out_h, out_w))\n    \n    # Perform max pooling\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    # Define the current window\n                    h_start = i * stride\n                    h_end = h_start + p_h\n                    w_start = j * stride\n                    w_end = w_start + p_w\n                    \n                    # Extract the window and apply max pooling\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled[n, c, i, j] = np.max(window)\n    \n    # Convert the result to a nested list\n    return pooled.tolist()\n\n# Example usage:\n# X = np.random.rand(2, 3, 5, 5)  # Example input\n# pool_shape = (2, 2)\n# stride = 2\n# result = max_pool2d(X, pool_shape, stride)\n# print(result)\n```\n\n### Explanation:\n- **Input Dimensions**: The function takes a 4-D NumPy array `X` with dimensions `(N, C, H, W)`, where `N` is the batch size, `C` is the number of channels, `H` is the height, and `W` is the width of the images.\n- **Pooling Parameters**: `pool_shape` specifies the dimensions of the pooling window, and `stride` specifies how far the window moves in each step.\n- **Output Dimensions**: The output dimensions are calculated using the formula provided, ensuring that the pooling window fits perfectly within the image dimensions.\n- **Pooling Operation**: The function iterates over each image, channel, and position in the output dimensions, extracts the corresponding window from the input, and computes the maximum value within that window.\n- **Output Conversion**: The pooled result is converted to a nested Python list using `tolist()` before returning.\n\nThis implementation efficiently performs max pooling using NumPy operations and adheres to the constraints provided in the task description."}
{"task_id": 353, "completion_id": 0, "completion": "To implement the `entropy` function, we need to calculate the probabilities of each unique class label in the input sequence and then compute the Shannon entropy using the formula provided. Here's the complete implementation:\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Convert labels to a list if it's not already one\n    if isinstance(labels, np.ndarray):\n        labels = labels.tolist()\n    \n    # Handle the special case where the input is empty\n    if not labels:\n        return 0.0\n    \n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    \n    # Calculate the probabilities of each label\n    probabilities = [count / total_count for count in label_counts.values()]\n    \n    # Calculate the entropy using the formula\n    entropy_value = -sum(p * math.log2(p) for p in probabilities if p > 0)\n    \n    # Round the result to 5 decimal places\n    return round(entropy_value, 5)\n\n# Example usage:\n# labels = ['a', 'b', 'a', 'a', 'b', 'c']\n# print(entropy(labels))  # Output: 1.45914\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input is a NumPy array and converts it to a list. This ensures compatibility with different iterable types.\n\n2. **Empty Input**: If the input is empty, the function returns `0.0` immediately.\n\n3. **Counting Labels**: We use `Counter` from the `collections` module to count occurrences of each label.\n\n4. **Probability Calculation**: We calculate the probability of each label by dividing its count by the total number of labels.\n\n5. **Entropy Calculation**: We compute the entropy using the formula provided, ensuring that we only consider probabilities greater than zero to avoid math domain errors.\n\n6. **Rounding**: The final entropy value is rounded to five decimal places before returning.\n\nThis implementation efficiently calculates the Shannon entropy for a given sequence of class labels, handling special cases as specified."}
{"task_id": 354, "completion_id": 0, "completion": "To implement the 2-D convolution using the `im2col` method, we need to follow these steps:\n\n1. **Padding**: Adjust the input array based on the padding specification.\n2. **Dilation**: Modify the kernel to account for dilation by inserting zeros between kernel elements.\n3. **im2col Transformation**: Convert the input image into columns so that each column represents a region of the image that the kernel will convolve with.\n4. **Matrix Multiplication (GEMM)**: Perform a matrix multiplication between the transformed input and the reshaped kernel.\n5. **Reshape the Result**: Convert the result back to the desired output shape.\n6. **Return as List**: Convert the final NumPy array to a Python list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Handle padding\n    if isinstance(pad, int):\n        pr1 = pr2 = pc1 = pc2 = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pr1 = pr2 = pad[0]\n        pc1 = pc2 = pad[1]\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pr1, pr2, pc1, pc2 = pad\n    elif pad == 'same':\n        pr1 = pr2 = (kernel_rows - 1) // 2\n        pc1 = pc2 = (kernel_cols - 1) // 2\n    else:\n        raise ValueError(\"Invalid padding specification\")\n\n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n\n    # Calculate output dimensions\n    out_rows = (in_rows + pr1 + pr2 - (kernel_rows - 1) * (dilation + 1) - 1) // stride + 1\n    out_cols = (in_cols + pc1 + pc2 - (kernel_cols - 1) * (dilation + 1) - 1) // stride + 1\n\n    # Dilation\n    if dilation > 0:\n        dilated_kernel_rows = kernel_rows + (kernel_rows - 1) * dilation\n        dilated_kernel_cols = kernel_cols + (kernel_cols - 1) * dilation\n        W_dilated = np.zeros((dilated_kernel_rows, dilated_kernel_cols, in_ch, out_ch))\n        for i in range(kernel_rows):\n            for j in range(kernel_cols):\n                W_dilated[i * (dilation + 1), j * (dilation + 1)] = W[i, j]\n        W = W_dilated\n        kernel_rows, kernel_cols = dilated_kernel_rows, dilated_kernel_cols\n\n    # im2col transformation\n    i0 = np.repeat(np.arange(kernel_rows), kernel_cols)\n    i0 = np.tile(i0, in_ch)\n    i1 = stride * np.repeat(np.arange(out_rows), out_cols)\n    j0 = np.tile(np.arange(kernel_cols), kernel_rows * in_ch)\n    j1 = stride * np.tile(np.arange(out_cols), out_rows)\n    i = i0.reshape(-1, 1) + i1.reshape(1, -1)\n    j = j0.reshape(-1, 1) + j1.reshape(1, -1)\n    k = np.repeat(np.arange(in_ch), kernel_rows * kernel_cols).reshape(-1, 1)\n\n    cols = X_padded[:, i, j, k]\n    cols = cols.transpose(1, 2, 0).reshape(kernel_rows * kernel_cols * in_ch, -1)\n\n    # Reshape W for matrix multiplication\n    W_reshaped = W.reshape(-1, out_ch)\n\n    # Perform matrix multiplication\n    out = W_reshaped.T @ cols\n    out = out.reshape(out_ch, out_rows, out_cols, n_ex)\n    out = out.transpose(3, 1, 2, 0)\n\n    # Convert to list\n    return out.tolist()\n```\n\nThis implementation handles different padding specifications, dilation, and performs the convolution using the `im2col` method followed by a matrix multiplication. The result is reshaped to the desired output dimensions and returned as a Python list."}
{"task_id": 355, "completion_id": 0, "completion": "To implement the PCA with deterministic sign fix, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    mean_centered_data = data - np.mean(data, axis=0)\n    \n    if solver == \"svd\":\n        # Step 2: Use SVD to obtain principal directions\n        U, S, Vt = np.linalg.svd(mean_centered_data, full_matrices=False)\n        components = Vt[:n_components]\n        explained_variance = (S**2) / (data.shape[0] - 1)\n    elif solver == \"eigen\":\n        # Step 2: Compute covariance matrix and use eigen-decomposition\n        covariance_matrix = np.cov(mean_centered_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n        # Sort eigenvalues and eigenvectors in descending order\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        components = eigenvectors[:, sorted_indices[:n_components]].T\n        explained_variance = eigenvalues[sorted_indices]\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'.\")\n\n    # Step 3: Sort directions by explained variance and keep the first n_components\n    explained_variance_ratio = explained_variance / np.sum(explained_variance)\n    explained_variance_ratio = explained_variance_ratio[:n_components]\n\n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        first_non_zero_index = np.argmax(np.abs(components[i]) > 1e-10)\n        if components[i, first_non_zero_index] < 0:\n            components[i] = -components[i]\n\n    # Step 5: Project the centred data onto the retained directions\n    scores = mean_centered_data @ components.T\n\n    # Step 6: Return the scores and explained variance ratio\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance_ratio, 4).tolist()\n\n    return scores, explained_variance_ratio\n```\n\n### Explanation:\n1. **Standardization**: We subtract the mean of each feature from the data to center it.\n2. **SVD Solver**: We use `np.linalg.svd` to decompose the centered data and obtain the principal components.\n3. **Eigen Solver**: We compute the covariance matrix and use `np.linalg.eigh` to get eigenvalues and eigenvectors.\n4. **Sorting and Selection**: We sort the components based on the explained variance and select the top `n_components`.\n5. **Sign Fix**: We ensure the sign of each component is deterministic by checking the first non-zero element.\n6. **Projection**: We project the data onto the selected components and return the scores and explained variance ratio, both rounded to 4 decimal places."}
{"task_id": 356, "completion_id": 0, "completion": "To complete the `leaf_predict` function, we need to handle two scenarios based on the `classifier` flag. If `classifier` is `True`, we should return the index of the largest probability from the `value` attribute of the `Leaf` instance. If `classifier` is `False`, we should return the scalar value directly.\n\nHere's the implementation:\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the largest probability\n        return int(numpy.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value directly\n        return leaf.value\n```\n\n### Explanation:\n- **Classification**: When `classifier` is `True`, we use `numpy.argmax` to find the index of the maximum value in the `leaf.value` list or tuple. This index corresponds to the predicted class.\n- **Regression**: When `classifier` is `False`, we simply return the `leaf.value` as it is, since it represents the mean of the target values in that region.\n\nMake sure to import `numpy` at the beginning of your script if it's not already imported:\n\n```python\nimport numpy\n```\n\nThis implementation assumes that `leaf.value` is either a list/tuple of probabilities for classification or a single scalar for regression."}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Step 1: Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign samples to the nearest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        closest_centroids = np.argmin(distances, axis=1)\n        \n        # Step 3: Recompute centroids\n        new_centroids = np.array([\n            data[closest_centroids == k].mean(axis=0) if np.any(closest_centroids == k) else centroids[k]\n            for k in range(K)\n        ])\n        \n        # Check for convergence\n        if np.allclose(new_centroids, centroids, atol=1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 4: Sort centroids lexicographically and round to four decimals\n    sorted_centroids = sorted(centroids.tolist())\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n    \n    return rounded_centroids\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))  # Output: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```\n\n### Explanation:\n1. **Initialization**: The centroids are initialized using the first `K` samples from the data.\n2. **Assignment**: Each sample is assigned to the nearest centroid using Euclidean distance.\n3. **Update**: Centroids are updated to be the mean of the samples assigned to them. If a centroid loses all its samples, it remains unchanged.\n4. **Convergence Check**: The algorithm stops early if centroids do not change significantly (within a tolerance of `1e-6`).\n5. **Sorting and Rounding**: The final centroids are sorted lexicographically and rounded to four decimal places before returning."}
{"task_id": 358, "completion_id": 0, "completion": "To implement the `accuracy` function, we need to compare the elements of the two input sequences, `y_true` and `y_pred`. If the sequences have different lengths, the function should return -1. Otherwise, it should calculate the proportion of elements that match between the two sequences and return this value rounded to four decimal places.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    The function should return the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, return -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    # Check if the lengths of the sequences are equal\n    if len(y_true) != len(y_pred):\n        return -1\n    \n    # Convert inputs to numpy arrays if they are not already\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate the number of correct predictions\n    correct_predictions = np.sum(y_true == y_pred)\n    \n    # Calculate accuracy\n    accuracy_value = correct_predictions / len(y_true)\n    \n    # Return the accuracy rounded to four decimal places\n    return round(accuracy_value, 4)\n\n# Example usage:\n# y_true = [1, 0, 1, 1, 0]\n# y_pred = [1, 0, 0, 1, 0]\n# print(accuracy(y_true, y_pred))  # Output: 0.8\n```\n\n### Explanation:\n\n1. **Length Check**: The function first checks if the lengths of `y_true` and `y_pred` are equal. If not, it returns -1.\n\n2. **Conversion to NumPy Arrays**: The inputs are converted to NumPy arrays to leverage efficient element-wise operations.\n\n3. **Correct Predictions**: The number of correct predictions is calculated using `np.sum(y_true == y_pred)`, which counts the number of `True` values in the boolean array resulting from the comparison.\n\n4. **Accuracy Calculation**: The accuracy is computed as the ratio of correct predictions to the total number of predictions.\n\n5. **Rounding**: The result is rounded to four decimal places using Python's built-in `round` function.\n\nThis implementation efficiently computes the accuracy and handles potential input mismatches gracefully."}
{"task_id": 359, "completion_id": 0, "completion": "To implement the `cross_entropy` function, we need to compute the cross-entropy loss and its gradient as described. Let's go through the implementation step-by-step:\n\n1. **Import necessary modules**: We'll use NumPy for numerical operations.\n2. **Define the function**: The function will take `y`, `y_pred`, and `derivative` as inputs.\n3. **Compute the loss**: When `derivative` is `False`, compute the cross-entropy loss using the formula provided. Add a small constant `eps` to avoid issues with `log(0)`.\n4. **Compute the gradient**: When `derivative` is `True`, compute the gradient as `y_pred - y`.\n5. **Round the results**: Ensure all numerical results are rounded to 4 decimal places.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility (starter code).\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    eps = np.finfo(float).eps\n    \n    if derivative:\n        # Compute the gradient\n        gradient = y_pred - y\n        # Round the gradient to 4 decimal places\n        rounded_gradient = np.round(gradient, 4)\n        # Convert to list of lists\n        return rounded_gradient.tolist()\n    else:\n        # Compute the cross-entropy loss\n        loss = -np.sum(y * np.log(y_pred + eps))\n        # Round the loss to 4 decimal places\n        return round(loss, 4)\n\n# Example usage:\n# y = np.array([[0, 1], [1, 0]])\n# y_pred = np.array([[0.4, 0.6], [0.7, 0.3]])\n# print(cross_entropy(y, y_pred))  # Loss\n# print(cross_entropy(y, y_pred, derivative=True))  # Gradient\n```\n\n### Explanation:\n- **Loss Calculation**: The loss is computed by summing over the negative log probabilities of the correct classes, which are indicated by the one-hot encoded `y`.\n- **Gradient Calculation**: The gradient is simply the difference between the predicted probabilities `y_pred` and the true labels `y`.\n- **Rounding**: Both the loss and gradient are rounded to 4 decimal places to meet the output constraints.\n\nThis implementation should work correctly for any batch of samples and classes, provided the inputs are correctly formatted as NumPy arrays."}
{"task_id": 360, "completion_id": 0, "completion": "To implement the one-dimensional Discrete Cosine Transform of type II (DCT-II) in Python, we can follow the mathematical definition provided. We'll compute each coefficient using the formula and apply orthonormal scaling if required. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef dct(frame: np.ndarray | list[float], orthonormal: bool = True) -> list[float]:\n    \"\"\"Compute the 1-D DCT-II of *frame*.\n\n    The function must:\n    1. Accept a one-dimensional NumPy array (or any array-like object)\n       containing *N* real samples.\n    2. Implement the DCT-II formula directly (no calls to external DCT helpers).\n    3. Support optional orthonormal scaling when *orthonormal* is ``True``.\n    4. Return the coefficients rounded to 4 decimal places as a Python list.\n\n    Args:\n        frame: Input signal of length *N*.\n        orthonormal: Whether to apply orthonormal scaling.\n\n    Returns:\n        A list with *N* DCT-II coefficients.\n    \"\"\"\n    # Ensure the input is a NumPy array\n    frame = np.asarray(frame)\n    N = len(frame)\n    coefficients = np.zeros(N)\n\n    # Compute DCT-II coefficients\n    for k in range(N):\n        sum_value = 0\n        for n in range(N):\n            sum_value += frame[n] * np.cos(np.pi * k * (2 * n + 1) / (2 * N))\n        coefficients[k] = 2 * sum_value\n\n    # Apply orthonormal scaling if required\n    if orthonormal:\n        coefficients[0] *= np.sqrt(1 / (4 * N))\n        coefficients[1:] *= np.sqrt(1 / (2 * N))\n\n    # Round coefficients to 4 decimal places and return as a list\n    return np.round(coefficients, 4).tolist()\n\n# Example usage:\nframe = [0.0, 1.0, 2.0, 3.0]\ndct_coefficients = dct(frame)\nprint(dct_coefficients)\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts a one-dimensional NumPy array or any array-like object and converts it to a NumPy array for consistent processing.\n\n2. **Coefficient Calculation**: For each coefficient \\( c_k \\), we compute the sum using the DCT-II formula. The cosine term is calculated using the formula provided.\n\n3. **Orthonormal Scaling**: If `orthonormal` is `True`, we scale the coefficients according to the specified rules. The first coefficient is scaled differently from the others.\n\n4. **Rounding and Output**: The coefficients are rounded to four decimal places using `np.round` and returned as a list using `tolist()`.\n\nThis implementation directly follows the mathematical definition and ensures the output is correctly formatted and scaled."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input data to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row by its sum\n    normalized_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round each element to 4 decimal places\n    rounded_matrix = np.round(normalized_matrix, 4)\n    \n    # Convert the result to a native Python list\n    return rounded_matrix.tolist()\n\n# Example usage:\ndata = [[0.5, 0.5], [1, 2, 3], [0, 0, 0]]\nresult = row_stochastic_matrix(data)\nprint(result)  # Output: [[0.5, 0.5], [0.1667, 0.3333, 0.5], -1]\n```\n\nThis function first converts the input data into a NumPy array of floats, ensuring that all calculations are performed with floating-point precision. It then calculates the sum of each row and checks if any row has a sum of zero, returning `-1` if normalization is impossible. Otherwise, it normalizes each row by dividing its elements by the row sum, rounds the results to four decimal places, and converts the final matrix back to a native Python list using `tolist()`."}
{"task_id": 363, "completion_id": 0, "completion": "To implement the `is_continuous` function, we need to check the type of the spaces in the environment and determine if they are continuous based on the given flags. Here's how you can complete the function:\n\n```python\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def is_space_continuous(space, is_tuple):\n        if isinstance(space, Box):\n            return True\n        elif is_tuple and isinstance(space, (Tuple, Dict)):\n            return all(isinstance(sub_space, Box) for sub_space in space.spaces.values() if isinstance(space, Dict)) or \\\n                   all(isinstance(sub_space, Box) for sub_space in space.spaces if isinstance(space, Tuple))\n        return False\n\n    cont_action = is_space_continuous(env.action_space, tuple_action)\n    cont_obs = is_space_continuous(env.observation_space, tuple_obs)\n\n    return cont_action, cont_obs\n```\n\n### Explanation:\n\n1. **Helper Function `is_space_continuous`:**\n   - This function checks if a given space is continuous.\n   - If the space is a `Box`, it is directly considered continuous.\n   - If the space is composite (`Tuple` or `Dict`) and the corresponding flag (`is_tuple`) is `True`, it checks if all sub-spaces are `Box`.\n   - For `Dict`, it iterates over the values of the dictionary, and for `Tuple`, it iterates over the elements of the tuple.\n\n2. **Main Function Logic:**\n   - We use the helper function to check both `action_space` and `observation_space` based on the flags `tuple_action` and `tuple_obs`.\n   - Return a tuple `(cont_action, cont_obs)` indicating the continuity of the action and observation spaces.\n\nThis implementation correctly handles the composite spaces and checks for continuity based on the provided flags."}
{"task_id": 364, "completion_id": 0, "completion": "To implement the sign function as described, we need to evaluate the input number \\(x\\) and return the appropriate integer based on its value. Here's how you can implement this function:\n\n```python\ndef sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0\n```\n\n### Explanation:\n- **If \\(x > 0\\):** The function returns `1` because the number is positive.\n- **If \\(x < 0\\):** The function returns `-1` because the number is negative.\n- **If \\(x = 0\\):** The function returns `0` because the number is zero.\n\nThis implementation handles both integer and floating-point inputs, as required."}
{"task_id": 366, "completion_id": 0, "completion": "To compute the pair-wise squared Euclidean distance matrix in a fully vectorized manner, we can leverage the properties of matrix operations. The squared Euclidean distance between two vectors \\( \\mathbf{x}_i \\) and \\( \\mathbf{x}_j \\) can be expanded as:\n\n\\[ d(i, j) = \\sum_k (X[i, k] - X[j, k])^2 = \\sum_k X[i, k]^2 + \\sum_k X[j, k]^2 - 2 \\sum_k X[i, k] X[j, k] \\]\n\nThis can be efficiently computed using matrix operations:\n\n1. Compute the squared norms of each sample, which is the sum of squares of each row.\n2. Use the dot product to compute the cross term.\n3. Combine these to get the squared distances.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n    \"\"\"\n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # If there's only one sample, return [[0.0]]\n    if n_samples == 1:\n        return [[0.0]]\n    \n    # Compute the squared norms of each row (sample)\n    squared_norms = np.sum(X**2, axis=1)\n    \n    # Compute the distance matrix using the expanded formula\n    # D[i, j] = ||X[i]||^2 + ||X[j]||^2 - 2 * X[i] . X[j]\n    D = squared_norms[:, np.newaxis] + squared_norms[np.newaxis, :] - 2 * np.dot(X, X.T)\n    \n    # Clamp small negative values to 0 due to numerical precision issues\n    np.clip(D, 0, None, out=D)\n    \n    # Ensure the diagonal is exactly 0.0\n    np.fill_diagonal(D, 0.0)\n    \n    # Convert the result to a list of lists and return\n    return D.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# print(l2_distance(X))\n```\n\n### Explanation:\n- **Squared Norms**: We calculate the squared norm of each sample using `np.sum(X**2, axis=1)`.\n- **Distance Matrix**: We use broadcasting to compute the pairwise squared distances without explicit loops.\n- **Clamping**: We use `np.clip` to ensure no negative values due to floating-point precision errors.\n- **Diagonal**: We explicitly set the diagonal to zero using `np.fill_diagonal`.\n- **Output**: Finally, we convert the NumPy array to a list of lists for the required output format."}
{"task_id": 367, "completion_id": 0, "completion": "To implement the `initialize_kernel` function, we need to handle different types of input representations and convert them into instances of the appropriate kernel classes. Let's break down the task and implement the function step by step.\n\n1. **None**: If the input is `None`, we return a default `LinearKernel`.\n\n2. **Kernel object**: If the input is already an instance of `KernelBase`, we return it unchanged.\n\n3. **String**: We need to parse the string to determine which kernel to create and extract any parameters specified within parentheses.\n\n4. **Dictionary**: We need to check for the `\"hyperparameters\"` key and use the `\"id\"` to determine which kernel to create, passing any additional parameters to the constructor.\n\nHere's the implementation of the `initialize_kernel` function:\n\n```python\nimport re\nfrom typing import Any, Dict, Optional\n\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get(\"hyperparameters\", {})\n        self.params.update({k: v for k, v in hp.items() if k != \"id\"})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {\"hyperparameters\": {\"id\": self.__class__.__name__, **self.params}}\n\n\nclass LinearKernel(KernelBase):\n    def __init__(self):\n        super().__init__()\n\n\nclass PolynomialKernel(KernelBase):\n    def __init__(self, degree: int = 3, coef0: float = 1.0):\n        super().__init__(degree=degree, coef0=coef0)\n\n\nclass RBFKernel(KernelBase):\n    def __init__(self, gamma: float = 1.0):\n        super().__init__(gamma=gamma)\n\n\ndef initialize_kernel(param: Optional[Any] = None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n            string description such as 'RBF(gamma=0.5)', or a dictionary with a\n            'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n    \"\"\"\n    if param is None:\n        return LinearKernel()\n    \n    if isinstance(param, KernelBase):\n        return param\n    \n    if isinstance(param, str):\n        # Match the kernel name and parameters\n        match = re.match(r\"(\\w+)\\((.*)\\)\", param)\n        if match:\n            kernel_name, params_str = match.groups()\n            params = {}\n            if params_str:\n                # Convert parameters to a dictionary\n                params = dict(re.findall(r\"(\\w+)\\s*=\\s*([^,]+)\", params_str))\n                # Convert values to appropriate types\n                for key, value in params.items():\n                    try:\n                        params[key] = eval(value)\n                    except:\n                        pass\n        else:\n            kernel_name = param\n            params = {}\n\n        kernel_name = kernel_name.lower()\n        if kernel_name == \"linear\":\n            return LinearKernel()\n        elif kernel_name == \"polynomial\":\n            return PolynomialKernel(**params)\n        elif kernel_name == \"rbf\":\n            return RBFKernel(**params)\n        else:\n            raise NotImplementedError(f\"Unknown kernel: {kernel_name}\")\n\n    if isinstance(param, dict):\n        hyperparams = param.get(\"hyperparameters\")\n        if not hyperparams:\n            raise ValueError(\"Dictionary must contain 'hyperparameters' key.\")\n        \n        kernel_id = hyperparams.get(\"id\")\n        if not kernel_id:\n            raise ValueError(\"Dictionary 'hyperparameters' must contain 'id' key.\")\n        \n        kernel_id = kernel_id.lower()\n        params = {k: v for k, v in hyperparams.items() if k != \"id\"}\n        \n        if kernel_id == \"linearkernel\":\n            return LinearKernel()\n        elif kernel_id == \"polynomialkernel\":\n            return PolynomialKernel(**params)\n        elif kernel_id == \"rbfkernel\":\n            return RBFKernel(**params)\n        else:\n            raise NotImplementedError(f\"Unknown kernel: {kernel_id}\")\n\n    raise ValueError(\"Invalid parameter type for kernel initialization.\")\n```\n\nThis implementation handles all specified input types and raises appropriate exceptions for unknown kernels or missing keys. The string parsing uses regular expressions to extract kernel names and parameters, converting them to the correct types before passing them to the kernel constructors."}
{"task_id": 368, "completion_id": 0, "completion": "To implement the Minkowski distance calculator, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or \u20111 when\n               input validation fails.\n    \"\"\"\n    # Convert lists to numpy arrays if necessary\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    # Validate inputs\n    if x.shape != y.shape or p <= 0:\n        return -1\n    \n    # Compute Minkowski distance\n    distance = np.sum(np.abs(x - y) ** p) ** (1 / p)\n    \n    # Round the result to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 2, 3]\n# y = [4, 5, 6]\n# p = 2\n# print(minkowski(x, y, p))  # Output: 5.1962\n```\n\n### Explanation:\n1. **Input Conversion**: We first check if the inputs `x` and `y` are lists and convert them to NumPy arrays if necessary. This ensures that we can use NumPy operations on them.\n\n2. **Validation**: We check if the shapes of `x` and `y` are identical and if `p` is strictly positive. If either condition fails, we return `-1`.\n\n3. **Distance Calculation**: We compute the Minkowski distance using the formula provided. The expression `np.abs(x - y) ** p` calculates the absolute difference raised to the power of `p`, and `np.sum(...) ** (1 / p)` computes the sum and then takes the `p`-th root.\n\n4. **Rounding**: Finally, we round the computed distance to four decimal places before returning it.\n\nThis implementation should work correctly for any valid input vectors and positive `p`."}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    if regression:\n        # For regression, return the running prediction rounded to 4 decimals\n        return np.round(running_pred, 4)\n    else:\n        # For classification, apply softmax and return the predicted class indices\n        exp_logits = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# updates = [np.array([[0.1, 0.2], [0.3, 0.4]]), np.array([[0.05, 0.1], [0.15, 0.2]])]\n# learning_rate = 0.1\n# regression = False\n# print(gradient_boosting_predict(updates, learning_rate, regression))\n```\n\n### Explanation:\n1. **Initialization**: The function starts by initializing `running_pred` with zeros, matching the shape of the first update array.\n2. **Aggregation**: It iterates over each update in the `updates` list, subtracting the scaled update from `running_pred`.\n3. **Regression**: If `regression` is `True`, the function rounds the `running_pred` to 4 decimal places and returns it.\n4. **Classification**: If `regression` is `False`, it applies the softmax function to convert logits to probabilities and uses `argmax` to determine the predicted class indices. The softmax is computed in a numerically stable way by subtracting the maximum value in each row before exponentiation."}
{"task_id": 370, "completion_id": 0, "completion": "To implement the multivariate Gaussian density function, we need to compute the density for each sample in the input array `X`. The formula involves calculating the determinant and inverse of the covariance matrix, as well as performing matrix operations to compute the exponent term. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    # Number of dimensions\n    n = mu.shape[0]\n    \n    # Calculate the determinant and inverse of the covariance matrix\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    \n    # Precompute the normalization constant\n    norm_const = 1 / np.sqrt((2 * np.pi) ** n * cov_det)\n    \n    # Initialize a list to store the density values\n    densities = []\n    \n    # Calculate the density for each sample in X\n    for x in X:\n        # Compute the difference between the sample and the mean\n        diff = x - mu\n        \n        # Compute the exponent term\n        exponent = -0.5 * np.dot(diff.T, np.dot(cov_inv, diff))\n        \n        # Calculate the density\n        density = norm_const * np.exp(exponent)\n        \n        # Append the rounded density to the list\n        densities.append(round(density, 4))\n    \n    return densities\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# mu = np.array([0, 0])\n# cov = np.array([[1, 0], [0, 1]])\n# print(multivariate_gaussian(X, mu, cov))\n```\n\n### Explanation:\n1. **Normalization Constant**: The normalization constant is calculated using the determinant of the covariance matrix and the dimensionality `n`. This ensures the density integrates to 1 over the entire space.\n\n2. **Exponent Calculation**: For each sample `x`, we compute the difference `x - mu`, and then use matrix multiplication to compute the exponent term `-0.5 * (x - mu)\u1d40\u03a3\u207b\u00b9(x - mu)`.\n\n3. **Density Calculation**: The density for each sample is computed using the normalization constant and the exponent term.\n\n4. **Rounding**: Each density value is rounded to 4 decimal places before being added to the result list.\n\nThis function efficiently computes the multivariate Gaussian density for each sample in `X` using NumPy's linear algebra capabilities."}
{"task_id": 371, "completion_id": 0, "completion": "To implement the 1-D cross-correlation with support for batches, multiple channels, strides, padding, and dilation, we need to carefully handle each of these features. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Calculate effective kernel width with dilation\n    effective_kernel_width = (kernel_width - 1) * (dilation + 1) + 1\n    \n    # Determine padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding value\")\n    \n    # Pad the input signal\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant', constant_values=0)\n    \n    # Calculate output length\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n    \n    # Initialize output\n    output = np.zeros((n_examples, output_length, out_channels))\n    \n    # Perform cross-correlation\n    for example in range(n_examples):\n        for out_channel in range(out_channels):\n            for i in range(output_length):\n                start = i * stride\n                end = start + effective_kernel_width\n                for in_channel in range(in_channels):\n                    # Extract the relevant segment from the padded input\n                    segment = X_padded[example, start:end:dilation+1, in_channel]\n                    # Perform element-wise multiplication and sum\n                    output[example, i, out_channel] += np.sum(segment * W[:, in_channel, out_channel])\n    \n    return output.tolist()\n\n# Example usage:\n# X = np.random.rand(2, 10, 3)  # 2 examples, signal length 10, 3 input channels\n# W = np.random.rand(3, 3, 4)   # kernel width 3, 3 input channels, 4 output channels\n# result = conv1D(X, W, stride=1, pad=\"same\", dilation=0)\n# print(result)\n```\n\n### Explanation:\n1. **Padding Calculation**: The function supports three types of padding: integer, tuple, and \"same\". The \"same\" padding is calculated to ensure the output length matches the input length divided by the stride.\n\n2. **Dilation**: The effective kernel width is calculated considering the dilation, which inserts zeros between kernel elements.\n\n3. **Cross-Correlation**: The function iterates over each example, output channel, and position in the output signal, extracting the relevant segment from the padded input and performing element-wise multiplication with the kernel.\n\n4. **Output**: The result is returned as a nested Python list using `ndarray.tolist()`."}
{"task_id": 373, "completion_id": 0, "completion": "To calculate the Gini impurity of a sequence of integer labels, we need to determine the relative frequency of each class in the sequence and use these frequencies to compute the impurity. Here's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # If the input sequence is empty, return 0.0\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert input to a NumPy array if it's not already\n    y = np.array(y)\n    \n    # Calculate the total number of samples\n    N = len(y)\n    \n    # Find the unique classes and their counts\n    unique, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the relative frequencies (probabilities) of each class\n    probabilities = counts / N\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\n# labels = [0, 1, 0, 1, 1, 0, 2, 2]\n# print(gini(labels))  # Output: 0.6250\n```\n\n### Explanation:\n1. **Empty Input Handling**: If the input sequence is empty, the function returns `0.0` as specified.\n2. **Conversion to NumPy Array**: The input is converted to a NumPy array to facilitate operations like finding unique elements and their counts.\n3. **Unique Classes and Counts**: `np.unique` is used to find the unique class labels and their respective counts in the sequence.\n4. **Relative Frequencies**: The relative frequency of each class is calculated by dividing the count of each class by the total number of samples.\n5. **Gini Impurity Calculation**: The Gini impurity is computed using the formula \\(1 - \\sum p_c^2\\), where \\(p_c\\) is the relative frequency of class \\(c\\).\n6. **Rounding**: The result is rounded to 4 decimal places before returning.\n\nThis implementation efficiently calculates the Gini impurity for a given sequence of labels, adhering to the specified requirements."}
{"task_id": 374, "completion_id": 0, "completion": "To implement a multiple linear regression model using batch gradient descent, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the input data are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Perform gradient descent\n    for _ in range(n_iterations):\n        # Compute predictions\n        y_hat = X.dot(theta) + b\n        \n        # Compute gradients\n        error = y_hat - y\n        dw = (2/m) * X.T.dot(error)\n        db = (2/m) * np.sum(error)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the results to 4 decimal places\n    theta_rounded = np.round(theta, 4).tolist()\n    b_rounded = round(b, 4)\n    \n    return (theta_rounded, b_rounded)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([5, 7, 9])\n# weights, bias = linear_regression_gd(X, y)\n# print(weights, bias)\n```\n\n### Explanation:\n\n1. **Input Validation**: We first check if the number of samples in `X` and `y` are consistent. If not, we return `-1`.\n\n2. **Initialization**: We initialize the weight vector `theta` with zeros and the bias `b` with zero. The dimensions of `theta` are determined by the number of features `n` in `X`.\n\n3. **Gradient Descent Loop**: We iterate for a specified number of iterations (`n_iterations`):\n   - Compute the predicted values `y_hat` using the current `theta` and `b`.\n   - Calculate the error between the predicted values and the actual target values `y`.\n   - Compute the gradients `dw` and `db` for the weights and bias, respectively.\n   - Update the weights `theta` and bias `b` using the computed gradients and the specified `learning_rate`.\n\n4. **Rounding**: After completing the iterations, we round the learned parameters to 4 decimal places before returning them.\n\nThis implementation will train a multiple linear regression model using batch gradient descent and return the learned weights and bias."}
{"task_id": 375, "completion_id": 0, "completion": "To solve this problem, we need to calculate the padding required for a \"same\" convolution in a 2D setting. The goal is to ensure that the output dimensions match the desired dimensions specified by the user. Let's implement the function `calc_pad_dims_2D` to achieve this.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef calc_pad_dims_2D(X_shape: tuple,\n                     out_dim: tuple,\n                     kernel_shape: tuple,\n                     stride: int,\n                     dilation: int = 0) -> tuple:\n    \"\"\"Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor ``(n_ex, in_rows, in_cols, in_ch)``.\n    out_dim : tuple\n        Desired output height and width ``(out_rows, out_cols)``.\n    kernel_shape : tuple\n        Height and width of the convolution kernel ``(fr, fc)``.\n    stride : int\n        Stride used by the convolution.\n    dilation : int, optional (default=0)\n        Dilation factor (number of inserted zeros between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple ``(top, bottom, left, right)`` indicating how many zero rows\n        and columns must be added to the **top**, **bottom**, **left**, and\n        **right** sides of the input volume.\n    \"\"\"\n    # Validate input types\n    if not (isinstance(X_shape, tuple) and len(X_shape) == 4):\n        raise ValueError(\"X_shape must be a tuple of length 4.\")\n    if not (isinstance(out_dim, tuple) and len(out_dim) == 2):\n        raise ValueError(\"out_dim must be a tuple of length 2.\")\n    if not (isinstance(kernel_shape, tuple) and len(kernel_shape) == 2):\n        raise ValueError(\"kernel_shape must be a tuple of length 2.\")\n    if not isinstance(stride, int) or stride <= 0:\n        raise ValueError(\"stride must be a positive integer.\")\n    if not isinstance(dilation, int) or dilation < 0:\n        raise ValueError(\"dilation must be a non-negative integer.\")\n\n    # Extract dimensions\n    _, in_rows, in_cols, _ = X_shape\n    out_rows, out_cols = out_dim\n    fr, fc = kernel_shape\n\n    # Calculate effective filter size\n    _fr = fr + (fr - 1) * dilation\n    _fc = fc + (fc - 1) * dilation\n\n    # Calculate total padding needed\n    total_pad_rows = max(0, (out_rows - 1) * stride + _fr - in_rows)\n    total_pad_cols = max(0, (out_cols - 1) * stride + _fc - in_cols)\n\n    # Calculate padding for each side\n    up_pad = total_pad_rows // 2\n    down_pad = total_pad_rows - up_pad\n    left_pad = total_pad_cols // 2\n    right_pad = total_pad_cols - left_pad\n\n    # Return the padding as a tuple\n    return (up_pad, down_pad, left_pad, right_pad)\n```\n\n### Explanation:\n\n1. **Input Validation**: We first check that the input arguments are of the correct type and have valid values. This includes checking the shapes of the input tensor, output dimensions, kernel dimensions, stride, and dilation.\n\n2. **Effective Filter Size**: The effective filter size is calculated using the formula provided, which accounts for dilation.\n\n3. **Total Padding Calculation**: We calculate the total padding required for rows and columns to achieve the desired output dimensions. This is based on the standard convolution formula.\n\n4. **Padding Distribution**: The total padding is distributed evenly between the top/bottom and left/right sides. If the total padding is odd, the extra padding is added to the bottom or right side, as specified.\n\n5. **Return**: The function returns a tuple with the calculated padding values for each side.\n\nThis implementation ensures that the output dimensions match the desired dimensions by appropriately padding the input tensor."}
{"task_id": 376, "completion_id": 0, "completion": "To solve the problem of checking whether a given 2-D numeric array is symmetric with respect to its main diagonal, we can follow these steps:\n\n1. **Check if the matrix is square**: A matrix is square if the number of rows is equal to the number of columns.\n2. **Check symmetry**: For a matrix to be symmetric, the element at position (i, j) must be equal to the element at position (j, i) for all valid indices i and j. Given the potential for floating-point precision issues, we will use NumPy's `allclose` function to compare the elements.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Check if the matrix is square\n    if not X or len(X) != len(X[0]):\n        return False\n    \n    # Convert the list of lists to a NumPy array for easier manipulation\n    matrix = np.array(X)\n    \n    # Check if the matrix is equal to its transpose using allclose for floating-point comparison\n    return np.allclose(matrix, matrix.T, atol=1e-8)\n\n# Example usage:\n# matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n# print(is_symmetric(matrix))  # Output: True\n```\n\n### Explanation:\n\n- **Square Check**: The function first checks if the matrix is square by comparing the number of rows and columns. If they are not equal, the function returns `False`.\n- **Symmetry Check**: The function uses NumPy to convert the list of lists into an array, which allows us to easily compute the transpose of the matrix. It then uses `np.allclose` to compare the matrix with its transpose, allowing for a small tolerance (`atol=1e-8`) to account for floating-point inaccuracies.\n- **Return Value**: The function returns `True` if the matrix is symmetric and `False` otherwise."}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient for logistic loss used in Gradient Boosting for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: Negative gradients rounded to four decimal places, or -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    # Check if all elements in y are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to {-1, 1}\n    y_prime = [2 * label - 1 for label in y]\n    \n    # Calculate negative gradients\n    gradients = []\n    for y_i, f_i in zip(y_prime, f):\n        gradient = y_i / (1 + np.exp(y_i * f_i))\n        gradients.append(round(gradient, 4))\n    \n    return gradients\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if all elements in the `y` list are either 0 or 1. If not, it returns `-1`.\n\n2. **Label Conversion**: The binary labels are converted to the set {-1, 1} using the transformation `y' = 2y - 1`.\n\n3. **Gradient Calculation**: For each pair of `y'` and `f`, the negative gradient is calculated using the formula `g\u1d62 = y\u2032\u1d62 / (1 + exp(y\u2032\u1d62 f\u1d62))`.\n\n4. **Rounding**: Each calculated gradient is rounded to four decimal places before being added to the result list.\n\n5. **Return**: The function returns the list of rounded negative gradients."}
{"task_id": 378, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `indicator` function based on the given task description:\n\n```python\ndef indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    return 1 if flag == 1 else 0\n```\n\nThis function uses a simple conditional expression to check if the `flag` is equal to 1. If it is, the function returns 1; otherwise, it returns 0."}
{"task_id": 379, "completion_id": 0, "completion": "To implement the `sort_priority_nodes` function, we can use Python's built-in sorting capabilities. Specifically, we'll use the `sorted` function with a custom sorting key that adheres to the rules specified for ordering the nodes. Here's how you can implement the function:\n\n```python\ndef sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n                fields ``'key'``, ``'val'``, ``'priority'`` and\n                ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    # Sort nodes based on priority and entry_id\n    sorted_nodes = sorted(nodes, key=lambda node: (node['priority'], node['entry_id']))\n    \n    # Extract the keys from the sorted nodes\n    sorted_keys = [node['key'] for node in sorted_nodes]\n    \n    return sorted_keys\n```\n\n### Explanation:\n1. **Sorting**: We use the `sorted` function with a lambda function as the key. The lambda function returns a tuple `(node['priority'], node['entry_id'])`, which ensures that nodes are first sorted by `priority` and then by `entry_id` in case of ties.\n\n2. **Extracting Keys**: After sorting, we extract the `key` values from the sorted list of nodes using a list comprehension.\n\n3. **Return**: Finally, we return the list of sorted keys.\n\nThis implementation ensures that the nodes are sorted according to the specified rules without modifying the original list."}
{"task_id": 380, "completion_id": 0, "completion": "To implement the SELU activation function and its derivatives, we need to handle both scalar and array inputs, compute the SELU function, and calculate its first and second derivatives. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to numpy array for easier manipulation\n    x = np.asarray(x)\n    \n    # Compute SELU activation\n    if order == 0:\n        selu_result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    \n    # Compute first derivative of SELU\n    elif order == 1:\n        selu_result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    \n    # Compute second derivative of SELU\n    elif order == 2:\n        selu_result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    \n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    rounded_result = np.round(selu_result, 4)\n    \n    # Return as list if input was array-like, or as scalar if input was scalar\n    if np.isscalar(x):\n        return rounded_result.item()\n    else:\n        return rounded_result.tolist()\n\n# Example usage:\n# print(selu([1.0, -1.0, 0.0], order=0))\n# print(selu([1.0, -1.0, 0.0], order=1))\n# print(selu([1.0, -1.0, 0.0], order=2))\n```\n\n### Explanation:\n- **SELU Activation**: For `order = 0`, the SELU function is computed using the formula provided. It uses the ELU function for negative values and scales the result.\n- **First Derivative**: For `order = 1`, the derivative is `scale` for positive values and `scale * alpha * exp(x)` for negative values.\n- **Second Derivative**: For `order = 2`, the second derivative is `0` for positive values and `scale * alpha * exp(x)` for negative values.\n- **Handling Input**: The function uses `np.asarray` to handle both scalar and array inputs uniformly. It preserves the input shape and returns results rounded to 4 decimal places.\n- **Output**: The result is converted to a list using `tolist()` for array inputs, and returned as a scalar for scalar inputs."}
{"task_id": 382, "completion_id": 0, "completion": "To implement the Gaussian Naive Bayes predictor, we need to follow these steps:\n\n1. Calculate the prior probabilities for each class.\n2. Compute the mean and variance for each feature within each class.\n3. For each test sample, calculate the posterior probability for each class using the Gaussian likelihood formula.\n4. Assign the test sample to the class with the highest posterior probability.\n\nHere's the implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef gaussian_naive_bayes_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray) -> list:\n    \"\"\"Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n\n    The implementation must use the formulae described in the task statement,\n    assume that every feature follows an independent Gaussian distribution\n    inside each class and return the predicted labels as a Python list.\n    \"\"\"\n    # Unique classes and their counts\n    classes, counts = np.unique(y_train, return_counts=True)\n    \n    # Calculate priors\n    priors = {c: count / len(y_train) for c, count in zip(classes, counts)}\n    \n    # Calculate mean and variance for each feature in each class\n    mean_var = {}\n    for c in classes:\n        X_c = X_train[y_train == c]\n        mean_var[c] = {\n            'mean': np.mean(X_c, axis=0),\n            'var': np.var(X_c, axis=0)\n        }\n    \n    # Small constant to avoid division by zero\n    epsilon = 1e-4\n    \n    # Function to calculate Gaussian likelihood\n    def gaussian_likelihood(x, mean, var):\n        return (1 / np.sqrt(2 * np.pi * var + epsilon)) * np.exp(-((x - mean) ** 2) / (2 * var + epsilon))\n    \n    # Predicting labels for X_test\n    predictions = []\n    for x in X_test:\n        posteriors = []\n        for c in classes:\n            # Calculate the posterior probability for class c\n            prior = priors[c]\n            likelihood = np.prod(gaussian_likelihood(x, mean_var[c]['mean'], mean_var[c]['var']))\n            posterior = prior * likelihood\n            posteriors.append(posterior)\n        \n        # Choose the class with the highest posterior probability\n        predicted_class = classes[np.argmax(posteriors)]\n        predictions.append(predicted_class)\n    \n    return predictions\n```\n\n### Explanation:\n\n- **Prior Calculation**: We calculate the prior probability for each class using the formula \\(P(Y=c)= \\frac{\\#\\text{samples of }c}{\\#\\text{total samples}}\\).\n\n- **Mean and Variance Calculation**: For each class, we compute the mean and variance for each feature.\n\n- **Gaussian Likelihood**: We define a function `gaussian_likelihood` to compute the likelihood of a feature value given the class using the Gaussian distribution formula.\n\n- **Posterior Calculation and Prediction**: For each test sample, we calculate the posterior probability for each class and select the class with the highest posterior probability.\n\nThis implementation efficiently handles the Gaussian Naive Bayes prediction task using the provided formulae and assumptions."}
{"task_id": 383, "completion_id": 0, "completion": "To implement the `find_bounds` function, we need to follow the rules provided for calculating the feasible interval [L, H] based on the relationship between the labels `y_i` and `y_j`. Here's the complete implementation:\n\n```python\ndef find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n    \n    # Round the results to 4 decimal places\n    L = round(L, 4)\n    H = round(H, 4)\n    \n    return [L, H]\n\n# Example usage:\n# print(find_bounds(1, -1, 0.5, 0.3, 1.0))  # Output: [0.0, 0.8]\n# print(find_bounds(1, 1, 0.5, 0.3, 1.0))   # Output: [0.0, 0.8]\n```\n\n### Explanation:\n- **Different Labels (`y_i \u2260 y_j`)**: \n  - `L` is calculated as the maximum of 0 and the difference `alpha_j - alpha_i`.\n  - `H` is calculated as the minimum of `C` and the expression `C - alpha_i + alpha_j`.\n\n- **Same Labels (`y_i = y_j`)**:\n  - `L` is calculated as the maximum of 0 and the expression `alpha_i + alpha_j - C`.\n  - `H` is calculated as the minimum of `C` and the sum `alpha_i + alpha_j`.\n\n- The results are rounded to four decimal places before returning them as a list `[L, H]`."}
{"task_id": 384, "completion_id": 0, "completion": "To solve the problem of finding the smallest Laplacian eigenvectors, we need to follow these steps:\n\n1. **Check the validity of `k`:** Ensure that `k` is not larger than the number of rows/columns in the matrix `L`. If it is, return `-1`.\n\n2. **Compute eigenvalues and eigenvectors:** Use a numerical routine to compute the eigenvalues and eigenvectors of the matrix `L`.\n\n3. **Select the smallest eigenvalues:** Identify the indices of the `k` smallest eigenvalues.\n\n4. **Normalize eigenvectors:** Normalize each selected eigenvector to unit length using the L2 norm.\n\n5. **Ensure deterministic signs:** Flip each eigenvector so that the first non-zero entry is positive.\n\n6. **Round and format:** Round each entry of the eigenvectors to 4 decimal places and convert the result to a regular Python list.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef get_eigvecs(L: list[list[int | float]], k: int):\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal\n        places. Returns -1 if *k* is invalid.\n    \"\"\"\n    # Convert L to a NumPy array\n    L = np.array(L, dtype=float)\n    \n    # Check if k is valid\n    n = L.shape[0]\n    if k > n:\n        return -1\n    \n    # Compute eigenvalues and eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eig(L)\n    \n    # Use only the real part of eigenvalues and eigenvectors\n    eigenvalues = np.real(eigenvalues)\n    eigenvectors = np.real(eigenvectors)\n    \n    # Get indices of the k smallest eigenvalues\n    smallest_indices = np.argsort(eigenvalues)[:k]\n    \n    # Select the corresponding eigenvectors\n    selected_eigenvectors = eigenvectors[:, smallest_indices]\n    \n    # Normalize each eigenvector to unit length\n    for i in range(k):\n        norm = np.linalg.norm(selected_eigenvectors[:, i])\n        if norm != 0:\n            selected_eigenvectors[:, i] /= norm\n    \n    # Flip eigenvectors to ensure the first non-zero entry is positive\n    for i in range(k):\n        for j in range(n):\n            if selected_eigenvectors[j, i] != 0:\n                if selected_eigenvectors[j, i] < 0:\n                    selected_eigenvectors[:, i] = -selected_eigenvectors[:, i]\n                break\n    \n    # Round each entry to 4 decimal places\n    selected_eigenvectors = np.round(selected_eigenvectors, 4)\n    \n    # Convert to a regular Python list\n    return selected_eigenvectors.tolist()\n\n# Example usage\nL = [[1, -1],\n     [-1, 1]]\n\nk = 1\n\nprint(get_eigvecs(L, k))  # Output: [[0.7071], [0.7071]]\n```\n\nThis function will correctly compute the `k` smallest eigenvectors of the Laplacian matrix `L`, ensuring they are normalized, have deterministic signs, and are rounded to 4 decimal places."}
{"task_id": 385, "completion_id": 0, "completion": "To implement Linear Discriminant Analysis (LDA) for dimensionality reduction, we need to follow the steps outlined in the task description. Here's a complete implementation of the `lda_transform` function:\n\n```python\nimport numpy as np\n\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"Projects the dataset X onto its first k Linear Discriminant components.\"\"\"\n    \n    # Convert input lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Get the number of samples and features\n    n_samples, n_features = X.shape\n    \n    # Get the unique class labels and the number of classes\n    class_labels = np.unique(y)\n    n_classes = len(class_labels)\n    \n    # Compute the overall mean of the data\n    mean_overall = np.mean(X, axis=0)\n    \n    # Initialize the within-class scatter matrix Sw and between-class scatter matrix Sb\n    Sw = np.zeros((n_features, n_features))\n    Sb = np.zeros((n_features, n_features))\n    \n    # Compute Sw and Sb\n    for label in class_labels:\n        # Get all samples with the current class label\n        X_class = X[y == label]\n        \n        # Compute the mean of the current class\n        mean_class = np.mean(X_class, axis=0)\n        \n        # Compute the within-class scatter for the current class\n        Sw += np.dot((X_class - mean_class).T, (X_class - mean_class))\n        \n        # Compute the number of samples in the current class\n        n_class_samples = X_class.shape[0]\n        \n        # Compute the between-class scatter for the current class\n        mean_diff = (mean_class - mean_overall).reshape(n_features, 1)\n        Sb += n_class_samples * np.dot(mean_diff, mean_diff.T)\n    \n    # Solve the generalized eigenvalue problem for Sw^-1 Sb\n    # Use the pseudo-inverse in case Sw is singular\n    Sw_inv = np.linalg.pinv(Sw)\n    eigvals, eigvecs = np.linalg.eig(np.dot(Sw_inv, Sb))\n    \n    # Sort the eigenvectors by descending eigenvalues\n    sorted_indices = np.argsort(eigvals)[::-1]\n    eigvecs = eigvecs[:, sorted_indices]\n    \n    # Determine the number of components to use\n    k = min(k, n_classes - 1)\n    \n    # Select the first k eigenvectors\n    W = eigvecs[:, :k]\n    \n    # Normalize each eigenvector to unit length and ensure deterministic orientation\n    for i in range(W.shape[1]):\n        W[:, i] /= np.linalg.norm(W[:, i])\n        if W[0, i] < 0:\n            W[:, i] = -W[:, i]\n    \n    # Project the data onto the new k-dimensional space\n    X_lda = np.dot(X, W)\n    \n    # Round the projected data to 4 decimal places and convert to a nested list\n    return np.round(X_lda, 4).tolist()\n\n# Example usage:\n# X = [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\n# y = [0, 1, 0]\n# k = 1\n# print(lda_transform(X, y, k))\n```\n\nThis implementation follows the steps required to perform LDA for dimensionality reduction. It computes the within-class and between-class scatter matrices, solves the generalized eigenvalue problem, sorts the eigenvectors by eigenvalues, and projects the data onto the selected eigenvectors. The result is rounded to four decimal places and returned as a nested list."}
{"task_id": 386, "completion_id": 0, "completion": "To implement the Binary Cross-Entropy (BCE) loss function, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    # Clip predictions to avoid log(0)\n    epsilon = 1e-15\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute the BCE loss\n    bce_loss = -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    \n    # Return the result rounded to 4 decimal places\n    return round(bce_loss, 4)\n\n# Example usage:\n# y_true = np.array([0, 1, 1, 0])\n# y_pred = np.array([0.1, 0.9, 0.8, 0.3])\n# print(binary_crossentropy(y_true, y_pred))  # Output: 0.1643\n```\n\n### Explanation:\n1. **Clipping Predictions**: We use `np.clip` to ensure that the predicted probabilities are within the interval \\([\\varepsilon, 1-\\varepsilon]\\) where \\(\\varepsilon = 1 \\times 10^{-15}\\). This prevents taking the logarithm of 0, which would result in undefined values.\n\n2. **Computing BCE Loss**: The BCE loss is calculated using the formula provided. We use `np.mean` to compute the average loss over all samples.\n\n3. **Rounding**: Finally, the result is rounded to 4 decimal places using Python's `round` function.\n\nThis function can be used to compute the BCE loss for binary classification tasks, ensuring numerical stability and precision."}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    \n    # Initial prediction is the mean of the targets\n    y_pred = np.full(N, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort samples by x value\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        \n        # Initialize variables to find the best split\n        best_split = None\n        min_error = float('inf')\n        \n        # Evaluate possible splits\n        for i in range(1, N):\n            if x_sorted[i] == x_sorted[i - 1]:\n                continue\n            \n            # Calculate split point\n            split_point = (x_sorted[i] + x_sorted[i - 1]) / 2\n            \n            # Calculate mean residuals on both sides of the split\n            left_mask = x_sorted <= split_point\n            right_mask = ~left_mask\n            \n            r_L = np.mean(residuals_sorted[left_mask])\n            r_R = np.mean(residuals_sorted[right_mask])\n            \n            # Calculate sum of squared errors\n            error = np.sum((residuals_sorted[left_mask] - r_L) ** 2) + np.sum((residuals_sorted[right_mask] - r_R) ** 2)\n            \n            # Update best split if current error is smaller\n            if error < min_error:\n                min_error = error\n                best_split = split_point\n                best_r_L = r_L\n                best_r_R = r_R\n        \n        # If no valid split was found, use global mean residual\n        if best_split is None:\n            r_hat = np.mean(residuals)\n            y_pred += learning_rate * r_hat\n        else:\n            # Update predictions based on the best split\n            y_pred += learning_rate * np.where(x <= best_split, best_r_L, best_r_R)\n    \n    # Round predictions to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n```\n\nThis implementation follows the described procedure for gradient boosting with one-dimensional stumps. It iteratively updates predictions based on the best split found in each boosting round, using the mean residuals on either side of the split. The final predictions are rounded to four decimal places and returned as a Python list."}
{"task_id": 389, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    # Convert input to a NumPy array if it is not already\n    W = np.array(W)\n    \n    # Check if the matrix is square\n    if W.shape[0] != W.shape[1]:\n        return -1\n    \n    # Compute the degree matrix D\n    degree_matrix = np.diag(W.sum(axis=1))\n    \n    # Compute the Laplacian matrix L\n    L = degree_matrix - W\n    \n    # Round the result to 4 decimal places\n    L_rounded = np.round(L, 4)\n    \n    # Convert the result to a list of lists\n    return L_rounded.tolist()\n\n# Example usage:\n# W = [[0, 1, 2],\n#      [1, 0, 3],\n#      [2, 3, 0]]\n# print(compute_laplacian(W))\n```\n\nThis function first checks if the input matrix is square. If not, it returns `-1`. It then computes the degree matrix by summing each row of the adjacency matrix and placing these sums on the diagonal of a new matrix. The Laplacian matrix is calculated by subtracting the adjacency matrix from the degree matrix. Finally, the result is rounded to 4 decimal places and returned as a list of lists."}
{"task_id": 391, "completion_id": 0, "completion": "To implement the nearest-neighbour interpolation for a 1-D multi-channel signal, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the\n           original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal\n           should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples. The outer list\n        length equals ``len(t)``; each inner list has length ``in_channels``.\n    \"\"\"\n    # Step 1: Round the query positions to the nearest integer indices\n    rounded_indices = np.around(t).astype(int)\n    \n    # Step 2: Clip the indices to ensure they are within the valid range\n    clipped_indices = np.clip(rounded_indices, 0, X.shape[0] - 1)\n    \n    # Step 3: Retrieve the samples from X at the clipped indices\n    interpolated_samples = X[clipped_indices]\n    \n    # Convert the result to a plain Python list\n    return interpolated_samples.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n# t = [0.2, 1.5, 2.8, 3.6]\n# result = nn_interpolate_1D(X, t)\n# print(result)  # Output: [[1, 2], [3, 4], [5, 6], [7, 8]]\n```\n\n### Explanation:\n1. **Rounding**: We use `np.around()` to round each element in `t` to the nearest integer. This function handles ties by rounding to the nearest even integer, as specified.\n\n2. **Clipping**: We use `np.clip()` to ensure that all indices are within the valid range `[0, in_length-1]`. This prevents any out-of-bounds access when indexing into `X`.\n\n3. **Indexing**: We use the clipped indices to retrieve the corresponding samples from `X`. Since `X` is a NumPy array, indexing with an array of indices directly retrieves the rows at those indices.\n\n4. **Conversion to List**: Finally, we convert the resulting NumPy array to a plain Python list using the `tolist()` method, as required by the task.\n\nThis implementation efficiently handles the interpolation task and returns the expected output format."}
{"task_id": 392, "completion_id": 0, "completion": "To implement the pre-emphasis filter for a 1-D signal, we need to follow the steps outlined in the task description. The function will take a 1-D numeric sequence and a pre-emphasis coefficient \\(\\alpha\\), apply the pre-emphasis filter, and return the filtered signal as a list with each element rounded to four decimal places.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef preemphasis(x: \"list[float] | np.ndarray\", alpha: float) -> list[float]:\n    \"\"\"Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal. A one-dimensional array-like object containing the\n           samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval ``[0, 1)``.\n\n    Returns:\n        The filtered signal as a Python ``list`` with every element rounded to\n        four decimal places.\n    \"\"\"\n    # Ensure the input is a numpy array and flatten it\n    x = np.asarray(x).flatten()\n    \n    # Initialize the output array with the same shape as x\n    emphasized_signal = np.empty_like(x)\n    \n    # The first element remains unchanged\n    emphasized_signal[0] = x[0]\n    \n    # Apply the pre-emphasis filter to the rest of the signal\n    for t in range(1, len(x)):\n        emphasized_signal[t] = x[t] - alpha * x[t - 1]\n    \n    # Round the result to four decimal places and convert to a list\n    return list(np.round(emphasized_signal, 4))\n\n# Example usage:\n# signal = [0.5, 1.0, 0.75, 0.25, 0.0]\n# alpha = 0.95\n# filtered_signal = preemphasis(signal, alpha)\n# print(filtered_signal)\n```\n\n### Explanation:\n1. **Input Handling**: The input signal `x` is converted to a NumPy array and flattened to ensure it is a 1-D sequence.\n2. **Initialization**: An output array `emphasized_signal` is initialized with the same shape as `x`.\n3. **Filter Application**: \n   - The first element of the output is set to the first element of the input, as it remains unchanged.\n   - For each subsequent element, the pre-emphasis filter equation is applied: \\(\\hat x_t = x_t - \\alpha \\cdot x_{t-1}\\).\n4. **Rounding and Conversion**: The resulting array is rounded to four decimal places and converted to a Python list before returning.\n\nThis implementation efficiently applies the pre-emphasis filter to the input signal and meets the specified requirements."}
{"task_id": 394, "completion_id": 0, "completion": "Certainly! Below is the implementation of the RMSprop update step as described in your task:\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    \n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of squared gradients\n    Eg_next = rho * Eg + (1 - rho) * grad**2\n    \n    # Update the parameters\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n    \n    # Round to 4 decimal places and convert to regular Python lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    \n    return w_next_rounded, Eg_next_rounded\n\n# Example usage:\n# w = np.array([0.5, -0.3])\n# grad = np.array([0.1, -0.2])\n# Eg = None\n# learning_rate = 0.01\n# rho = 0.9\n# w_next, Eg_next = rmsprop_update(w, grad, Eg, learning_rate, rho)\n# print(w_next, Eg_next)\n```\n\n### Explanation:\n1. **Initialization**: If `Eg` is `None`, it is initialized to a zero array of the same shape as `grad`.\n2. **Running Average Update**: The running average of squared gradients `Eg_next` is updated using the formula provided.\n3. **Parameter Update**: The parameter vector `w_next` is updated using the RMSprop formula, which scales the gradient by the inverse square root of the running average plus a small constant `epsilon` for numerical stability.\n4. **Rounding and Conversion**: Both `w_next` and `Eg_next` are rounded to 4 decimal places and converted to regular Python lists before returning.\n\nThis implementation should meet all the requirements specified in your task."}
{"task_id": 395, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    # Create the formatted string according to the specified layout\n    formatted_string = (\n        \"**************************************************\\n\"\n        \"Beta:\\n\"\n        f\"{str(beta)}\\n\"\n        f\"Probability of sequence: {b_prob}\"\n    )\n    \n    return formatted_string\n```\n\nThis function constructs a formatted string that includes a header line of asterisks, the string representation of the `beta` matrix, and the probability of the sequence. The `str()` function is used to convert both the NumPy array and the floating-point number to their default string representations, ensuring the output adheres to the specified format."}
{"task_id": 396, "completion_id": 0, "completion": "To implement the `tanh_with_derivatives` function, we need to compute the hyperbolic tangent and its first and second derivatives for each element in the input list or NumPy array. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result must be rounded to 6 decimal places.\n    \u2022 The input must *not* be modified in-place.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x, dtype=float)\n    \n    # Compute tanh(x)\n    tanh_x = np.tanh(x)\n    \n    # Compute the first derivative: 1 - tanh(x)^2\n    first_derivative = 1 - tanh_x**2\n    \n    # Compute the second derivative: -2 * tanh(x) * (1 - tanh(x)^2)\n    second_derivative = -2 * tanh_x * first_derivative\n    \n    # Round results to 6 decimal places and convert to plain Python lists\n    tanh_x_rounded = np.round(tanh_x, 6).tolist()\n    first_derivative_rounded = np.round(first_derivative, 6).tolist()\n    second_derivative_rounded = np.round(second_derivative, 6).tolist()\n    \n    return [tanh_x_rounded, first_derivative_rounded, second_derivative_rounded]\n\n# Example usage:\nx = [0.0, 1.0, -1.0, 0.5, -0.5]\nresult = tanh_with_derivatives(x)\nprint(result)\n```\n\n### Explanation:\n1. **Conversion to NumPy Array**: The input is converted to a NumPy array to facilitate vectorized operations, which are efficient and concise.\n\n2. **Tanh Calculation**: We use `np.tanh` to compute the hyperbolic tangent for each element.\n\n3. **First Derivative**: The formula `1 - tanh(x)^2` is used to compute the first derivative.\n\n4. **Second Derivative**: The formula `-2 * tanh(x) * (1 - tanh(x)^2)` is used to compute the second derivative.\n\n5. **Rounding and Conversion**: Each result is rounded to six decimal places using `np.round` and then converted to a plain Python list using `.tolist()`.\n\nThis function will return a list containing three lists: the values of `tanh(x)`, its first derivative, and its second derivative, all rounded to six decimal places."}
{"task_id": 397, "completion_id": 0, "completion": "To implement the function `random_one_hot_matrix`, we need to generate a matrix where each row is a one-hot encoded vector. This means that for each row, one of the elements is randomly set to 1, and all other elements are set to 0. We can achieve this by randomly selecting an index for each row that will be set to 1.\n\nHere's how you can implement this function using NumPy:\n\n```python\nimport numpy as np\n\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    # Handle the case where n_examples is 0\n    if n_examples == 0:\n        return np.empty((0, n_classes))\n    \n    # Randomly choose one index per row to be set to 1\n    indices = np.random.choice(n_classes, size=n_examples)\n    \n    # Create a zero matrix of shape (n_examples, n_classes)\n    one_hot_matrix = np.zeros((n_examples, n_classes))\n    \n    # Set the chosen indices to 1\n    one_hot_matrix[np.arange(n_examples), indices] = 1\n    \n    return one_hot_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(0)\n    print(random_one_hot_matrix(5, 3))\n```\n\n### Explanation:\n1. **Handling Zero Examples**: If `n_examples` is 0, we return an empty array with shape `(0, n_classes)`.\n\n2. **Random Index Selection**: We use `np.random.choice` to select a random index for each row. This index will be the position of the 1 in the one-hot vector.\n\n3. **Matrix Initialization**: We initialize a matrix of zeros with shape `(n_examples, n_classes)`.\n\n4. **Setting One-Hot Values**: Using NumPy's advanced indexing, we set the selected indices to 1 for each row.\n\nThis implementation ensures that each row of the matrix is a valid one-hot encoded vector, and the selection of indices is uniform and random."}
{"task_id": 398, "completion_id": 0, "completion": "To implement the ELU activation function and its gradient, we can use NumPy for efficient element-wise operations. Here's the complete function:\n\n```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for efficient computation\n    x = np.array(x, dtype=float)\n    \n    if derivative:\n        # Compute the gradient of ELU\n        grad = np.where(x >= 0, 1, alpha * (np.exp(x) - 1) + alpha)\n        # Round each element to 4 decimal places\n        return np.round(grad, 4).tolist()\n    else:\n        # Compute the ELU activation\n        activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        # Round each element to 4 decimal places\n        return np.round(activation, 4).tolist()\n\n# Example usage:\nx = [-1.0, 0.0, 1.0, 2.0]\nalpha = 0.1\nprint(elu(x, alpha))  # ELU activation\nprint(elu(x, alpha, derivative=True))  # ELU gradient\n```\n\n### Explanation:\n1. **Input Handling**: The input `x` is converted to a NumPy array to leverage efficient element-wise operations.\n2. **ELU Activation**: For each element in `x`, if the element is non-negative, it remains unchanged. If it's negative, the ELU formula `\u03b1(e\u02e3 \u2212 1)` is applied.\n3. **Gradient Calculation**: For the gradient, if the element is non-negative, the derivative is `1`. If it's negative, the derivative is `ELU(x, \u03b1) + \u03b1`.\n4. **Rounding**: The results are rounded to 4 decimal places using `np.round` and converted back to a Python list with `tolist()`.\n\nThis function efficiently computes both the ELU activation and its gradient, adhering to the specified output constraints."}
{"task_id": 399, "completion_id": 0, "completion": "To solve this task, we need to compute the pairwise Euclidean distance between two sets of vectors represented by two 2-D NumPy arrays, `X` and `Y`. The Euclidean distance between two points \\( X_i \\) and \\( Y_j \\) in a d-dimensional space is given by:\n\n\\[ \\text{distance}(X_i, Y_j) = \\sqrt{\\sum_{k=1}^{d} (X_{ik} - Y_{jk})^2} \\]\n\nHere's how we can implement the function `pairwise_distances`:\n\n```python\nimport numpy as np\n\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    # Check if both X and Y are 2-D arrays\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    \n    # Check if the number of columns (features) in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Calculate the pairwise Euclidean distance\n    m, d = X.shape\n    n = Y.shape[0]\n    D = np.zeros((m, n))\n    \n    for i in range(m):\n        for j in range(n):\n            # Compute the Euclidean distance between X[i] and Y[j]\n            diff = X[i] - Y[j]\n            dist = np.sqrt(np.sum(diff ** 2))\n            D[i, j] = dist\n    \n    # Round the distances to four decimal places\n    D_rounded = np.round(D, 4)\n    \n    # Convert the NumPy array to a list of lists\n    return D_rounded.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# Y = np.array([[5, 6], [7, 8]])\n# print(pairwise_distances(X, Y))\n```\n\n### Explanation:\n1. **Input Validation**: We first check if both `X` and `Y` are 2-D arrays and if they have the same number of columns. If not, we return `-1`.\n\n2. **Distance Calculation**: We iterate over each pair of points from `X` and `Y`, compute the Euclidean distance, and store it in the matrix `D`.\n\n3. **Rounding and Conversion**: We round the distances to four decimal places and convert the resulting NumPy array to a list of lists before returning it.\n\nThis implementation efficiently computes the pairwise distances and handles the specified constraints."}
{"task_id": 400, "completion_id": 0, "completion": "To implement the Gaussian cumulative distribution function (CDF) in Python, we can use the mathematical formula provided. The error function `erf` is available in Python's `math` module, which makes the implementation straightforward. Here's how you can complete the function:\n\n```python\nimport math\n\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters\n        does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    if variance < 0:\n        raise ValueError(\"Variance must be non-negative\")\n    \n    if variance == 0:\n        if x < mean:\n            return 0.0\n        elif x == mean:\n            return 0.5\n        else:\n            return 1.0\n    \n    # Calculate the standard deviation\n    std_dev = math.sqrt(variance)\n    \n    # Calculate the CDF using the error function\n    z = (x - mean) / (std_dev * math.sqrt(2))\n    cdf = 0.5 * (1 + math.erf(z))\n    \n    # Return the result rounded to six decimal places\n    return round(cdf, 6)\n\n# Example usage:\n# print(gaussian_cdf(1.0, 0.0, 1.0))  # Example call to the function\n```\n\n### Explanation:\n- **Variance Check**: We first check if the variance is negative, which is not allowed for a Gaussian distribution. If it is zero, we handle the special case where the distribution collapses to a point mass at the mean.\n- **Standard Deviation**: We compute the standard deviation as the square root of the variance.\n- **Error Function**: We use the `math.erf` function to compute the error function value needed for the CDF calculation.\n- **Rounding**: Finally, we round the result to six decimal places as required.\n\nThis function should correctly compute the Gaussian CDF for any valid input parameters."}
{"task_id": 401, "completion_id": 0, "completion": "To implement the `to_one_hot` function, we need to handle different input scenarios and ensure the output is correctly formatted as a one-hot encoded matrix. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef to_one_hot(y: np.ndarray, num_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is\n        already one-hot encoded (shape (N, C) with rows summing to 1), the\n        function should return a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If ``None`` the number is inferred from ``y``.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype ``float``.\n    \"\"\"\n    # Check if the input is already one-hot encoded\n    if y.ndim == 2 and np.all(np.sum(y, axis=1) == 1):\n        return y.astype(float)\n\n    # Ensure y is a 1-D array\n    if y.ndim == 2:\n        y = y.flatten()\n\n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n\n    # Create the one-hot encoded matrix\n    one_hot = np.zeros((y.size, num_classes), dtype=float)\n    one_hot[np.arange(y.size), y] = 1.0\n\n    return one_hot\n```\n\n### Explanation:\n\n1. **Check if Already One-Hot Encoded**: \n   - If `y` is a 2-D array and each row sums to 1, it is assumed to be already one-hot encoded. We return a copy of `y` with `float` type.\n\n2. **Flatten the Input**:\n   - If `y` is a 2-D array with shape `(N, 1)`, we flatten it to a 1-D array for easier processing.\n\n3. **Determine Number of Classes**:\n   - If `num_classes` is not provided, we infer it as `max(y) + 1`.\n\n4. **Create One-Hot Matrix**:\n   - We initialize a zero matrix of shape `(N, num_classes)`.\n   - Using advanced indexing, we set the appropriate positions to 1.0 based on the class labels in `y`.\n\nThis implementation efficiently handles different input formats and ensures the output is a correctly formatted one-hot encoded matrix."}
{"task_id": 402, "completion_id": 0, "completion": "To implement the Gaussian Naive Bayes classifier from scratch, we need to follow these steps:\n\n1. **Estimate Class Priors**: Calculate the prior probability for each class.\n2. **Estimate Means and Variances**: For each class and feature, compute the mean and variance.\n3. **Compute Log-Posterior for Test Data**: For each test sample, compute the log-posterior probability for each class and predict the class with the highest probability.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float = 1e-6) -> np.ndarray:\n    \"\"\"Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n    \"\"\"\n    # Unique classes and their counts\n    classes, counts = np.unique(y_train, return_counts=True)\n    n_classes = len(classes)\n    n_features = X_train.shape[1]\n    \n    # Calculate class priors\n    priors = counts / len(y_train)\n    \n    # Initialize means and variances\n    means = np.zeros((n_classes, n_features))\n    variances = np.zeros((n_classes, n_features))\n    \n    # Calculate means and variances for each class\n    for idx, c in enumerate(classes):\n        X_c = X_train[y_train == c]\n        means[idx, :] = X_c.mean(axis=0)\n        variances[idx, :] = X_c.var(axis=0) + eps\n    \n    # Function to compute the log of the Gaussian probability density function\n    def log_gaussian(x, mean, var):\n        return -0.5 * (np.log(2.0 * np.pi * var) + ((x - mean) ** 2) / var)\n    \n    # Predict labels for X_test\n    predictions = []\n    for x in X_test:\n        log_posteriors = []\n        for idx, c in enumerate(classes):\n            # Compute the log-posterior for each class\n            log_prior = np.log(priors[idx])\n            log_likelihood = np.sum(log_gaussian(x, means[idx], variances[idx]))\n            log_posterior = log_prior + log_likelihood\n            log_posteriors.append(log_posterior)\n        \n        # Choose the class with the highest log-posterior\n        predicted_class = classes[np.argmax(log_posteriors)]\n        predictions.append(predicted_class)\n    \n    return np.array(predictions)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# print(gaussian_nb_predict(X_train, y_train, X_test))\n```\n\n### Explanation:\n\n- **Class Priors**: We calculate the prior probability of each class by dividing the number of samples in each class by the total number of samples.\n- **Means and Variances**: For each class, we calculate the mean and variance of each feature. We add a small constant `eps` to the variance to prevent division by zero.\n- **Log-Posterior Calculation**: For each test sample, we compute the log-posterior probability for each class using the Gaussian log-likelihood formula. The class with the highest log-posterior is chosen as the predicted class.\n\nThis implementation should work for any dataset that fits the assumptions of the Gaussian Naive Bayes classifier."}
{"task_id": 405, "completion_id": 0, "completion": "To implement the `apply_activation` function, we need to handle different activation functions based on the `param` argument. We'll use NumPy for efficient numerical operations and regular expressions to parse parameters for the \"leaky relu\" and \"affine\" functions. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport re\n\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    # Convert input to a NumPy array\n    x = np.array(x, dtype=float)\n    \n    # Default activation is identity\n    if param is None or param.lower() == \"identity\":\n        result = x\n    elif param.lower() == \"relu\":\n        result = np.maximum(0, x)\n    elif param.lower() == \"tanh\":\n        result = np.tanh(x)\n    elif param.lower() == \"sigmoid\":\n        result = 1 / (1 + np.exp(-x))\n    elif param.lower().startswith(\"leaky relu\"):\n        # Extract alpha value using regex\n        match = re.search(r'alpha=([0-9]*\\.?[0-9]+)', param)\n        alpha = float(match.group(1)) if match else 0.01\n        result = np.where(x > 0, x, alpha * x)\n    elif param.lower().startswith(\"affine\"):\n        # Extract slope and intercept using regex\n        slope_match = re.search(r'slope=([0-9]*\\.?[0-9]+)', param)\n        intercept_match = re.search(r'intercept=([0-9]*\\.?[0-9]+)', param)\n        if slope_match and intercept_match:\n            slope = float(slope_match.group(1))\n            intercept = float(intercept_match.group(1))\n            result = slope * x + intercept\n        else:\n            raise ValueError(f\"Invalid parameters for affine: {param}\")\n    else:\n        raise ValueError(f\"Unknown activation: {param}\")\n\n    # Round the result to 6 decimal places and convert to list\n    return np.round(result, 6).tolist()\n\n# Example usage:\n# x = [0.5, -1.5, 2.0]\n# print(apply_activation(x, \"relu\"))\n# print(apply_activation(x, \"leaky relu(alpha=0.1)\"))\n# print(apply_activation(x, \"affine(slope=2, intercept=1)\"))\n```\n\n### Explanation:\n\n1. **Identity Function**: If `param` is `None` or `\"identity\"`, the function returns the input as is.\n\n2. **ReLU**: Uses `np.maximum` to apply the ReLU function.\n\n3. **Tanh**: Uses `np.tanh` for the hyperbolic tangent.\n\n4. **Sigmoid**: Uses the logistic sigmoid formula.\n\n5. **Leaky ReLU**: Uses a regular expression to extract the `alpha` value. If not provided, defaults to `0.01`.\n\n6. **Affine Transformation**: Uses regular expressions to extract `slope` and `intercept`. Raises an error if these are not provided.\n\n7. **Error Handling**: Raises a `ValueError` for unknown activation functions.\n\n8. **Output**: The result is rounded to 6 decimal places and converted to a Python list using `tolist()`."}
{"task_id": 406, "completion_id": 0, "completion": "To implement the k-Nearest Neighbors (k-NN) prediction algorithm, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef knn_predict(X_train: \"np.ndarray\", y_train: \"np.ndarray\", X_test: \"np.ndarray\", k: int = 5) -> list[int]:\n    \"\"\"k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_train, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array with length n_train containing the class labels of the\n        training data. Labels have to be *non-negative* integers.\n    X_test : np.ndarray\n        2-D array with shape (n_test, n_features) containing the test samples\n        whose labels are to be predicted.\n    k : int, default=5\n        The number of nearest neighbours to use for the majority vote.\n\n    Returns\n    -------\n    list[int]\n        A Python list with one predicted label per test sample.\n    \"\"\"\n    # Initialize a list to store the predicted labels\n    predictions = []\n\n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Compute the Euclidean distance from the test sample to all training samples\n        distances = np.linalg.norm(X_train - test_sample, axis=1)\n\n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n\n        # Retrieve the labels of the k nearest neighbors\n        nearest_labels = y_train[nearest_indices]\n\n        # Count the occurrences of each label among the k nearest neighbors\n        label_counts = np.bincount(nearest_labels)\n\n        # Find the label with the highest count (in case of a tie, np.argmax returns the smallest label)\n        predicted_label = np.argmax(label_counts)\n\n        # Append the predicted label to the list of predictions\n        predictions.append(predicted_label)\n\n    return predictions\n```\n\n### Explanation:\n\n1. **Distance Calculation**: For each test sample, we calculate the Euclidean distance to all training samples using `np.linalg.norm`. This computes the norm (distance) along the specified axis (features).\n\n2. **Finding Nearest Neighbors**: We use `np.argsort` to sort the distances and retrieve the indices of the `k` smallest distances, which correspond to the nearest neighbors.\n\n3. **Majority Voting**: We use `np.bincount` to count the occurrences of each label among the nearest neighbors. `np.argmax` is then used to find the label with the highest count, resolving ties by choosing the smallest label value.\n\n4. **Prediction**: The predicted label for each test sample is appended to the `predictions` list, which is returned at the end.\n\nThis implementation efficiently handles the k-NN prediction task using NumPy operations for distance calculation and label counting."}
{"task_id": 410, "completion_id": 0, "completion": "To implement the `parse_activation` function, we can use regular expressions to match the different activation function descriptions and extract any parameters. Here's the complete implementation:\n\n```python\nimport re\n\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    # Match simple activation functions\n    if act_str in [\"ReLU\", \"Sigmoid\", \"Tanh\"]:\n        return {\"type\": act_str}\n    \n    # Match Affine activation function\n    affine_match = re.match(r\"^Affine\\(slope=(-?\\d*\\.?\\d+), intercept=(-?\\d*\\.?\\d+)\\)$\", act_str)\n    if affine_match:\n        slope = float(affine_match.group(1))\n        intercept = float(affine_match.group(2))\n        return {\"type\": \"Affine\", \"slope\": slope, \"intercept\": intercept}\n    \n    # Match Leaky ReLU activation function\n    leaky_relu_match = re.match(r\"^Leaky ReLU\\(alpha=(-?\\d*\\.?\\d+)\\)$\", act_str)\n    if leaky_relu_match:\n        alpha = float(leaky_relu_match.group(1))\n        return {\"type\": \"Leaky ReLU\", \"alpha\": alpha}\n    \n    # If no valid pattern is matched, return -1\n    return -1\n\n# Example usage:\nprint(parse_activation(\"ReLU\"))  # {'type': 'ReLU'}\nprint(parse_activation(\"Affine(slope=0.5, intercept=-1.2)\"))  # {'type': 'Affine', 'slope': 0.5, 'intercept': -1.2}\nprint(parse_activation(\"Leaky ReLU(alpha=0.01)\"))  # {'type': 'Leaky ReLU', 'alpha': 0.01}\nprint(parse_activation(\"Invalid\"))  # -1\n```\n\n### Explanation:\n- **Simple Activations**: For \"ReLU\", \"Sigmoid\", and \"Tanh\", we simply check if the input string matches one of these and return the corresponding dictionary.\n- **Affine Activation**: We use a regular expression to match the pattern `Affine(slope=<number>, intercept=<number>)`. If matched, we extract the slope and intercept values, convert them to floats, and return them in the dictionary.\n- **Leaky ReLU Activation**: Similarly, we use a regular expression to match `Leaky ReLU(alpha=<number>)`, extract the alpha value, convert it to a float, and return it in the dictionary.\n- **Invalid Input**: If the input string does not match any of the valid patterns, we return `-1`."}
{"task_id": 411, "completion_id": 0, "completion": "To implement the `env_stats` function, we need to analyze the input lists of actions and observations to extract the required statistics. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze_data(data):\n        # Check if data is multi-dimensional\n        is_tuple = any(isinstance(item, (list, tuple, np.ndarray)) for item in data)\n        \n        # Flatten the data for easier analysis\n        if is_tuple:\n            flattened_data = np.array(data)\n        else:\n            flattened_data = np.array(data).reshape(-1, 1)\n        \n        # Determine dimensionality\n        dim = flattened_data.shape[1]\n        \n        # Check if data is continuous\n        is_continuous = np.any(flattened_data % 1 != 0)\n        \n        # Calculate unique values per dimension\n        unique_values_per_dim = [np.unique(flattened_data[:, i]) for i in range(dim)]\n        \n        # Number of unique values per dimension\n        n_unique_per_dim = [len(unique_values) for unique_values in unique_values_per_dim]\n        \n        # Sorted list of unique values per dimension\n        sorted_unique_values = [sorted(unique_values) for unique_values in unique_values_per_dim]\n        \n        return {\n            'is_tuple': is_tuple,\n            'is_multidim': dim > 1,\n            'is_continuous': is_continuous,\n            'n_unique_per_dim': n_unique_per_dim,\n            'dim': dim,\n            'sorted_unique_values': sorted_unique_values\n        }\n    \n    # Analyze actions\n    action_stats = analyze_data(actions)\n    \n    # Analyze observations\n    observation_stats = analyze_data(observations)\n    \n    # Construct the result dictionary\n    result = {\n        'tuple_actions': action_stats['is_tuple'],\n        'tuple_observations': observation_stats['is_tuple'],\n        'multidim_actions': action_stats['is_multidim'],\n        'multidim_observations': observation_stats['is_multidim'],\n        'continuous_actions': action_stats['is_continuous'],\n        'continuous_observations': observation_stats['is_continuous'],\n        'n_actions_per_dim': action_stats['n_unique_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': observation_stats['n_unique_per_dim'],\n        'obs_dim': observation_stats['dim'],\n        'action_ids': action_stats['sorted_unique_values'],\n        'obs_ids': observation_stats['sorted_unique_values']\n    }\n    \n    return result\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\n### Explanation:\n1. **Data Analysis**: The function `analyze_data` is used to analyze either the actions or observations. It checks if the data is multi-dimensional, continuous, and calculates the number of unique values per dimension.\n\n2. **Dimensionality**: The dimensionality is determined by the shape of the flattened data. If the data is a scalar, it is reshaped to a 1-D array.\n\n3. **Continuous Check**: The function checks if any value in the data is a non-integer float to determine if the data is continuous.\n\n4. **Unique Values**: It calculates the unique values for each dimension and sorts them.\n\n5. **Result Construction**: The results from analyzing actions and observations are combined into a dictionary with the specified keys.\n\nThis implementation should correctly compute the required statistics for any given lists of actions and observations."}
{"task_id": 412, "completion_id": 0, "completion": "```python\ndef get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n    \n    def accuracy(y_true, y_pred):\n        correct_predictions = sum(t == p for t, p in zip(y_true, y_pred))\n        total_predictions = len(y_true)\n        return round(correct_predictions / total_predictions, 4)\n\n    def precision(y_true, y_pred):\n        tp = sum(t == 1 and p == 1 for t, p in zip(y_true, y_pred))\n        fp = sum(t == 0 and p == 1 for t, p in zip(y_true, y_pred))\n        if tp + fp == 0:\n            return 0.0\n        return round(tp / (tp + fp), 4)\n\n    def recall(y_true, y_pred):\n        tp = sum(t == 1 and p == 1 for t, p in zip(y_true, y_pred))\n        fn = sum(t == 1 and p == 0 for t, p in zip(y_true, y_pred))\n        if tp + fn == 0:\n            return 0.0\n        return round(tp / (tp + fn), 4)\n\n    def f1(y_true, y_pred):\n        prec = precision(y_true, y_pred)\n        rec = recall(y_true, y_pred)\n        if prec == 0 and rec == 0:\n            return 0.0\n        return round(2 * (prec * rec) / (prec + rec), 4)\n\n    metrics = {\n        'accuracy': accuracy,\n        'precision': precision,\n        'recall': recall,\n        'f1': f1\n    }\n\n    return metrics.get(name, -1)\n```\n\nThis code defines four functions for calculating common binary classification metrics: accuracy, precision, recall, and F1 score. Each function takes two iterables, `y_true` and `y_pred`, and returns the computed metric rounded to four decimal places. The `get_metric` function returns the appropriate metric function based on the provided name or `-1` if the name is invalid."}
{"task_id": 413, "completion_id": 0, "completion": "To implement a simplified Gradient Boosting Decision Tree (GBDT) regressor from scratch, we need to follow the steps outlined in the task description. Here's a complete implementation:\n\n```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def fit_tree(X, y, max_depth):\n        # Fit a simple regression tree to the data\n        if max_depth == 0 or len(np.unique(y)) == 1:\n            return np.mean(y)\n        \n        best_split = None\n        best_mse = float('inf')\n        best_left_indices = None\n        best_right_indices = None\n        \n        for feature_index in range(X.shape[1]):\n            for split_value in np.unique(X[:, feature_index]):\n                left_indices = X[:, feature_index] <= split_value\n                right_indices = X[:, feature_index] > split_value\n                \n                if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                    continue\n                \n                left_mean = np.mean(y[left_indices])\n                right_mean = np.mean(y[right_indices])\n                \n                mse = (mean_squared_error(y[left_indices], left_mean) * np.sum(left_indices) +\n                       mean_squared_error(y[right_indices], right_mean) * np.sum(right_indices)) / len(y)\n                \n                if mse < best_mse:\n                    best_mse = mse\n                    best_split = (feature_index, split_value)\n                    best_left_indices = left_indices\n                    best_right_indices = right_indices\n        \n        if best_split is None:\n            return np.mean(y)\n        \n        left_tree = fit_tree(X[best_left_indices], y[best_left_indices], max_depth - 1)\n        right_tree = fit_tree(X[best_right_indices], y[best_right_indices], max_depth - 1)\n        \n        return (best_split, left_tree, right_tree)\n    \n    def predict_tree(tree, X):\n        if not isinstance(tree, tuple):\n            return np.full(X.shape[0], tree)\n        \n        feature_index, split_value = tree[0]\n        left_tree, right_tree = tree[1], tree[2]\n        \n        left_indices = X[:, feature_index] <= split_value\n        right_indices = X[:, feature_index] > split_value\n        \n        predictions = np.empty(X.shape[0])\n        predictions[left_indices] = predict_tree(left_tree, X[left_indices])\n        predictions[right_indices] = predict_tree(right_tree, X[right_indices])\n        \n        return predictions\n    \n    # Initial prediction is the mean of the training targets\n    initial_prediction = np.mean(y_train)\n    predictions = np.full(y_train.shape, initial_prediction)\n    \n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = fit_tree(X_train, residuals, max_depth)\n        predictions += learning_rate * predict_tree(tree, X_train)\n    \n    final_predictions = initial_prediction + learning_rate * predict_tree(tree, X_test)\n    return list(np.round(final_predictions, 4))\n\n# Example usage:\n# X_train = np.array([[1], [2], [3], [4], [5]])\n# y_train = np.array([1, 2, 3, 4, 5])\n# X_test = np.array([[1.5], [2.5], [3.5]])\n# print(gbdt_regression(X_train, y_train, X_test))\n```\n\n### Explanation:\n1. **Initial Prediction**: Start with the mean of the training targets.\n2. **Residual Calculation**: Compute residuals as the difference between actual targets and current predictions.\n3. **Tree Fitting**: Fit a regression tree to the residuals using binary splits based on mean squared error.\n4. **Prediction Update**: Update predictions by adding the tree's output scaled by the learning rate.\n5. **Final Prediction**: After all iterations, predict on the test set using the accumulated model.\n\nThis implementation uses a simple recursive approach to build regression trees and predict values. The tree fitting function finds the best split by evaluating all possible splits across all features, and the prediction function traverses the tree to make predictions."}
{"task_id": 414, "completion_id": 0, "completion": "To implement the exponential learning-rate scheduler, we need to follow the given specifications and handle the invalid input cases. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef exponential_scheduler(step: int,\n                          initial_lr: float = 0.01,\n                          stage_length: int = 500,\n                          staircase: bool = False,\n                          decay: float = 0.1) -> float:\n    \"\"\"Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as::\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length*\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal\n        places, or ``-1`` if an invalid argument is supplied.\n    \"\"\"\n    # Check for invalid input conditions\n    if step < 0 or stage_length <= 0 or decay <= 0:\n        return -1\n    \n    # Calculate the current stage based on the staircase flag\n    if staircase:\n        curr_stage = step // stage_length\n    else:\n        curr_stage = step / stage_length\n    \n    # Calculate the learning rate using exponential decay\n    lr = initial_lr * decay ** curr_stage\n    \n    # Return the learning rate rounded to 6 decimal places\n    return round(lr, 6)\n\n# Example usage:\n# print(exponential_scheduler(1000, initial_lr=0.01, stage_length=500, staircase=False, decay=0.1))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks for invalid input conditions:\n   - `step` must be non-negative.\n   - `stage_length` must be a positive integer.\n   - `decay` must be positive.\n\n   If any of these conditions are not met, the function returns `-1`.\n\n2. **Stage Calculation**:\n   - If `staircase` is `True`, the current stage is calculated using integer division (`step // stage_length`).\n   - If `staircase` is `False`, the current stage is calculated using real division (`step / stage_length`).\n\n3. **Learning Rate Calculation**: The learning rate is calculated using the formula `lr = initial_lr * decay ** curr_stage`.\n\n4. **Rounding**: The learning rate is rounded to 6 decimal places before returning.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 415, "completion_id": 0, "completion": "To implement the one-dimensional Type-II Discrete Cosine Transform (DCT-II) using NumPy, we need to follow the mathematical definition provided. The DCT-II is a transformation that converts a sequence of real numbers into a sequence of coefficients, which can be useful in various applications such as signal processing and data compression.\n\nHere's how you can implement the DCT-II in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"Implement the un-normalised 1-D DCT-II described in the task.\"\"\"\n    N = len(frame)\n    if N == 0:\n        return []\n    \n    # Convert the input list to a NumPy array for efficient computation\n    x = np.array(frame, dtype=float)\n    \n    # Initialize an array to store the DCT-II coefficients\n    X = np.zeros(N, dtype=float)\n    \n    # Compute the DCT-II coefficients\n    for k in range(N):\n        # Calculate the sum for each coefficient X_k\n        sum_value = 0.0\n        for n in range(N):\n            sum_value += x[n] * np.cos(np.pi / N * (n + 0.5) * k)\n        X[k] = sum_value\n    \n    # Round the coefficients to four decimal places\n    X_rounded = np.round(X, 4)\n    \n    # Convert the NumPy array back to a list and return\n    return X_rounded.tolist()\n\n# Example usage:\n# frame = [1.0, 2.0, 3.0, 4.0]\n# print(dct2(frame))\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input list is empty. If it is, it returns an empty list immediately.\n\n2. **NumPy Array Conversion**: The input list is converted to a NumPy array to leverage efficient numerical operations.\n\n3. **Coefficient Calculation**: For each coefficient \\( X_k \\), we compute the sum as defined by the DCT-II formula. This involves iterating over each element of the input signal and applying the cosine transformation.\n\n4. **Rounding**: The resulting coefficients are rounded to four decimal places using `np.round`.\n\n5. **Output**: The rounded coefficients are converted back to a list and returned.\n\nThis implementation efficiently computes the DCT-II using basic NumPy operations, adhering to the constraints and requirements specified in the task."}
{"task_id": 416, "completion_id": 0, "completion": "To implement the probability density function (PDF) of a multivariate Gaussian distribution, we need to follow the mathematical definition provided. We'll use NumPy for matrix operations and math for constants like \u03c0. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the PDF of a multivariate Gaussian distribution for given data points.\n\n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution (length n_features).\n    cov (np.ndarray): The covariance matrix of shape (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is a 2D array\n    if X.ndim == 1:\n        X = X[:, np.newaxis]\n    \n    n_samples, n_features = X.shape\n    \n    # Calculate the determinant and inverse of the covariance matrix\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    \n    # Calculate the normalization constant\n    norm_const = 1 / math.sqrt((2 * math.pi) ** n_features * cov_det)\n    \n    pdf_values = []\n    \n    for i in range(n_samples):\n        x = X[i]\n        # Calculate the difference from the mean\n        diff = x - mean\n        \n        # Calculate the exponent term\n        exponent = -0.5 * np.dot(np.dot(diff.T, cov_inv), diff)\n        \n        # Calculate the PDF value\n        pdf_value = norm_const * math.exp(exponent)\n        \n        # Append the rounded PDF value to the list\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# mean = np.array([0, 0])\n# cov = np.array([[1, 0], [0, 1]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```\n\n### Explanation:\n1. **Input Handling**: We ensure that `X` is treated as a 2D array, even if it's provided as a 1D array.\n2. **Matrix Operations**: We compute the determinant and inverse of the covariance matrix using NumPy's `linalg.det` and `linalg.inv`.\n3. **Normalization Constant**: The normalization constant is calculated using the determinant and the dimensionality of the data.\n4. **PDF Calculation**: For each sample in `X`, we compute the difference from the mean, apply the matrix operations to calculate the exponent, and then compute the PDF value.\n5. **Rounding**: Each PDF value is rounded to four decimal places before being added to the result list.\n\nThis implementation should correctly compute the PDF values for a multivariate Gaussian distribution given the input data, mean, and covariance matrix."}
{"task_id": 417, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca(data: np.ndarray, k: int = 1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    # Step 1: Center the data\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n\n    # Step 2: Build the unbiased covariance matrix\n    n_samples = centered_data.shape[0]\n    covariance_matrix = np.dot(centered_data.T, centered_data) / (n_samples - 1)\n\n    # Step 3: Perform eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n\n    # Step 4: Sort eigenvectors by descending eigenvalue magnitude\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n\n    # Step 5: Enforce deterministic orientation for each retained eigenvector\n    for i in range(k):\n        if sorted_eigenvectors[:, i][np.argmax(np.abs(sorted_eigenvectors[:, i]))] < 0:\n            sorted_eigenvectors[:, i] = -sorted_eigenvectors[:, i]\n\n    # Step 6: Project the centered data onto the selected eigenvectors\n    selected_eigenvectors = sorted_eigenvectors[:, :k]\n    low_dimensional_representation = np.dot(centered_data, selected_eigenvectors)\n\n    # Step 7: Reconstruct the data back in the original space\n    reconstructed_data = np.dot(low_dimensional_representation, selected_eigenvectors.T) + mean\n\n    # Step 8: Round both matrices to 4 decimal places\n    low_dimensional_representation_rounded = np.round(low_dimensional_representation, 4)\n    reconstructed_data_rounded = np.round(reconstructed_data, 4)\n\n    # Step 9: Return the two rounded matrices as Python lists\n    return low_dimensional_representation_rounded.tolist(), reconstructed_data_rounded.tolist()\n```\n\nThis function performs PCA using pure NumPy operations, following the steps outlined in the task description. It handles the case where `k` is greater than or equal to the number of features by simply retaining all eigenvectors. The function returns the low-dimensional representation and the reconstructed data, both rounded to 4 decimal places and converted to Python lists."}
{"task_id": 418, "completion_id": 0, "completion": "To compute the sample covariance matrix as described, we need to follow the steps outlined in the task. Here's the implementation of the `calculate_covariance_matrix` function:\n\n```python\nimport numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal\n        places.\n    \"\"\"\n    # Convert X to a NumPy array if it is a list\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Get the number of samples (n) and features (d)\n    n, d = X.shape\n    \n    # If the number of samples is less than 2, return a zero matrix of size d x d\n    if n < 2:\n        return np.zeros((d, d)).tolist()\n    \n    # Calculate the mean of each feature\n    means = np.mean(X, axis=0)\n    \n    # Center the data by subtracting the mean of each feature\n    X_centered = X - means\n    \n    # Calculate the covariance matrix using the formula\n    covariance_matrix = (X_centered.T @ X_centered) / (n - 1)\n    \n    # Round the elements of the covariance matrix to 4 decimal places\n    covariance_matrix_rounded = np.round(covariance_matrix, 4)\n    \n    # Convert the covariance matrix to a nested Python list and return\n    return covariance_matrix_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4], [5, 6]]\n# print(calculate_covariance_matrix(X))\n```\n\n### Explanation:\n1. **Conversion to NumPy Array**: If the input `X` is a list, we convert it to a NumPy array for easier manipulation and computation.\n\n2. **Handling Small Sample Size**: If the number of samples `n` is less than 2, we return a zero matrix of size `d x d`, where `d` is the number of features.\n\n3. **Mean Calculation**: We calculate the mean of each feature using `np.mean(X, axis=0)`.\n\n4. **Centering the Data**: We subtract the mean from each feature to center the data.\n\n5. **Covariance Matrix Calculation**: We compute the covariance matrix using the formula provided, which involves matrix multiplication of the centered data.\n\n6. **Rounding**: We round each element of the covariance matrix to 4 decimal places using `np.round`.\n\n7. **Conversion to List**: Finally, we convert the rounded covariance matrix to a nested Python list using `tolist()` and return it.\n\nThis function should meet all the requirements specified in the task description."}
{"task_id": 419, "completion_id": 0, "completion": "To implement Bayesian linear regression with a conjugate Gaussian prior and known observation variance, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    \n    # Determine the number of features\n    M = X.shape[1]\n    \n    # Handle the prior mean `mu`\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Handle the prior covariance `V`\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif V.ndim == 1:\n        V = np.diag(V)\n    \n    # Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean\n    y_pred = X_new @ mu_p\n    \n    # Round the predictions to 4 decimal places and return as a list\n    return list(np.round(y_pred, 4))\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# X_new = np.array([[7, 8], [9, 10]])\n# predictions = bayesian_linear_regression_pred(X, y, X_new, mu=0.0, sigma=1.0, V=None, fit_intercept=True)\n# print(predictions)\n```\n\n### Explanation:\n1. **Intercept Handling**: If `fit_intercept` is `True`, we add a column of ones to both `X` and `X_new` to account for the intercept term in the linear model.\n\n2. **Prior Mean (`mu`)**: If `mu` is a scalar, it is expanded to a vector of length `M` (or `M + 1` if intercept is fitted).\n\n3. **Prior Covariance (`V`)**: \n   - If `V` is `None`, it defaults to the identity matrix.\n   - If `V` is a scalar, it is treated as a multiple of the identity matrix.\n   - If `V` is a 1-D array, it forms the diagonal of the covariance matrix.\n\n4. **Posterior Calculation**: We compute the posterior mean `mu_p` using the formula provided, which involves matrix operations with the prior and the data.\n\n5. **Prediction**: The predictive mean for new data `X_new` is calculated using the posterior mean `mu_p`.\n\n6. **Output**: The predictions are rounded to 4 decimal places and returned as a list."}
{"task_id": 420, "completion_id": 0, "completion": "To implement the `get_split_mask` function, we need to create two Boolean masks based on the specified column and threshold value. We'll use NumPy's array operations to efficiently generate these masks and then convert them to Python lists using the `tolist` method. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n    \"\"\"\n    # Check if the column index is valid\n    if column < 0 or column >= X.shape[1]:\n        return [], []\n\n    # Generate the masks\n    left_mask = (X[:, column] < value).tolist()\n    right_mask = (X[:, column] >= value).tolist()\n\n    return left_mask, right_mask\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# column = 1\n# value = 4\n# left_mask, right_mask = get_split_mask(X, column, value)\n# print(left_mask)  # Output: [True, False, False]\n# print(right_mask) # Output: [False, True, True]\n```\n\n### Explanation:\n1. **Column Index Validation**: We first check if the provided column index is within the valid range. If not, we return two empty lists.\n\n2. **Mask Generation**:\n   - `left_mask`: This mask is generated by checking if each element in the specified column is less than the given value.\n   - `right_mask`: This mask is generated by checking if each element in the specified column is greater than or equal to the given value.\n\n3. **Conversion to Python Lists**: We use the `tolist()` method to convert the NumPy boolean arrays to Python lists, ensuring compatibility with code that expects standard Python lists.\n\nThis function efficiently handles the task using NumPy's vectorized operations, which are both fast and concise."}
{"task_id": 421, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow these steps:\n\n1. **Identify Core Points**: A point is a core point if it has at least `min_samples` points within the `eps` radius.\n2. **Expand Clusters**: Starting from a core point, recursively find all points that are density-reachable and assign them to the same cluster.\n3. **Label Noise**: Points that are not density-reachable from any core point are labeled as noise.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Implement the DBSCAN algorithm **without** using external machine-learning\n    libraries (e.g. scikit-learn). The function should assign a cluster label to\n    every point in *data* based on the provided *eps* and *min_samples*\n    parameters.\n\n    Args:\n        data: NumPy array of shape (n_samples, n_features) containing the data\n            points to be clustered.\n        eps: Maximum distance two points can be apart to be considered\n            neighbours.\n        min_samples: Minimum number of points required to form a dense region\n            (core point).\n\n    Returns:\n        A list of integers where the *i-th* value is the cluster label of the\n        *i-th* sample in *data*. Noise points must be labelled **-1**, while\n        clusters must be numbered 1, 2, 3, \u2026 in the order they are discovered\n        during the scan over the data set.\n    \"\"\"\n    def region_query(point_idx):\n        \"\"\"Find neighbors within eps distance.\"\"\"\n        distances = np.linalg.norm(data - data[point_idx], axis=1)\n        return np.where(distances <= eps)[0]\n\n    def expand_cluster(point_idx, neighbors, cluster_id):\n        \"\"\"Expand the cluster from a core point.\"\"\"\n        labels[point_idx] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_idx = neighbors[i]\n            if labels[neighbor_idx] == -1:  # Previously marked as noise\n                labels[neighbor_idx] = cluster_id\n            elif labels[neighbor_idx] == 0:  # Unvisited\n                labels[neighbor_idx] = cluster_id\n                new_neighbors = region_query(neighbor_idx)\n                if len(new_neighbors) >= min_samples:\n                    neighbors = np.concatenate((neighbors, new_neighbors))\n            i += 1\n\n    n_samples = data.shape[0]\n    labels = [0] * n_samples  # 0 means unvisited\n    cluster_id = 0\n\n    for point_idx in range(n_samples):\n        if labels[point_idx] != 0:  # Already visited\n            continue\n\n        neighbors = region_query(point_idx)\n        if len(neighbors) < min_samples:\n            labels[point_idx] = -1  # Mark as noise\n        else:\n            cluster_id += 1\n            expand_cluster(point_idx, neighbors, cluster_id)\n\n    return labels\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4], [8, 7], [8, 8], [25, 80]])\neps = 1.5\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n- **region_query**: This function calculates the distance from a given point to all other points and returns the indices of points within the `eps` distance.\n- **expand_cluster**: This function expands the cluster starting from a core point. It marks the point as part of the current cluster and recursively adds all density-reachable points.\n- **Main Loop**: Iterates over each point, checks if it's a core point, and either expands a new cluster or marks it as noise.\n\nThis implementation should correctly label clusters and noise points according to the DBSCAN algorithm."}
{"task_id": 422, "completion_id": 0, "completion": "To implement the SoftPlus activation function and its derivatives, we can follow the given task description. Here's the complete code:\n\n```python\nimport numpy as np\n\ndef softplus(x: \"np.ndarray | list | tuple | float | int\", order: int = 0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    # Convert input to a NumPy array\n    x = np.array(x, dtype=np.float64)\n    \n    if order == 0:\n        # SoftPlus(x) = ln(1 + e^x)\n        result = np.log1p(np.exp(x))\n    elif order == 1:\n        # SoftPlus'(x) = e^x / (1 + e^x)\n        result = np.exp(x) / (1 + np.exp(x))\n    elif order == 2:\n        # SoftPlus''(x) = e^x / (1 + e^x)^2\n        exp_x = np.exp(x)\n        result = exp_x / (1 + exp_x)**2\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places and convert to regular Python types\n    return np.round(result, 4).tolist()\n\n# Example usage:\n# print(softplus([0, 1, 2], order=0))  # SoftPlus values\n# print(softplus([0, 1, 2], order=1))  # First derivative values\n# print(softplus([0, 1, 2], order=2))  # Second derivative values\n```\n\n### Explanation:\n1. **Input Conversion**: The input `x` is converted to a NumPy array to handle various input types like lists, tuples, floats, and integers uniformly.\n\n2. **SoftPlus Function**:\n   - For `order == 0`, we compute the SoftPlus function using `np.log1p(np.exp(x))`, which is numerically stable for large values of `x`.\n\n3. **First Derivative**:\n   - For `order == 1`, the first derivative is computed as `np.exp(x) / (1 + np.exp(x))`, which is the logistic sigmoid function.\n\n4. **Second Derivative**:\n   - For `order == 2`, the second derivative is computed as `np.exp(x) / (1 + np.exp(x))**2`.\n\n5. **Invalid Order**:\n   - If the `order` is not 0, 1, or 2, the function returns `-1`.\n\n6. **Output Conversion**:\n   - The result is rounded to 4 decimal places using `np.round(result, 4)` and converted to standard Python types using `.tolist()` before returning.\n\nThis implementation ensures that the function handles various input types and returns results in the expected format."}
{"task_id": 423, "completion_id": 0, "completion": "To implement the Root Mean Squared Logarithmic Error (RMSLE) calculator, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    \n    # Step 1: Validate inputs\n    if len(actual) != len(predicted):\n        return -1\n    \n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Step 2: Compute RMSLE\n    log_diffs = [np.log1p(p) - np.log1p(a) for a, p in zip(actual, predicted)]\n    squared_log_diffs = [diff ** 2 for diff in log_diffs]\n    mean_squared_log_error = np.mean(squared_log_diffs)\n    rmsle = np.sqrt(mean_squared_log_error)\n    \n    # Step 3: Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage:\n# actual = [3, 5, 2.5, 7]\n# predicted = [2.5, 5, 4, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Output should be a float rounded to 4 decimal places\n```\n\n### Explanation:\n\n1. **Input Validation**:\n   - We first check if the lengths of `actual` and `predicted` lists are the same. If not, we return `-1`.\n   - We then check if all elements in both lists are non-negative. If any element is negative, we return `-1`.\n\n2. **RMSLE Calculation**:\n   - We compute the logarithmic differences using `np.log1p`, which calculates `log(1 + x)`. This is done for each pair of actual and predicted values.\n   - We square these differences and compute their mean.\n   - Finally, we take the square root of the mean to get the RMSLE.\n\n3. **Rounding**:\n   - The result is rounded to four decimal places using Python's built-in `round` function.\n\nThis implementation ensures that the function adheres to the task requirements and handles edge cases appropriately."}
{"task_id": 424, "completion_id": 0, "completion": "To compute the Shannon entropy of a label sequence, we need to determine the relative frequency of each distinct label in the sequence and then apply the entropy formula. Here's how you can implement this in Python using `numpy`:\n\n```python\nimport numpy as np\n\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    # Convert the list to a numpy array for efficient computation\n    y_array = np.array(y)\n    \n    # Find the unique labels and their counts\n    unique_labels, counts = np.unique(y_array, return_counts=True)\n    \n    # Calculate the probabilities (relative frequencies) of each label\n    probabilities = counts / counts.sum()\n    \n    # Compute the Shannon entropy using the formula\n    entropy_value = -np.sum(probabilities * np.log2(probabilities))\n    \n    # Return the entropy rounded to 4 decimal places\n    return round(entropy_value, 4)\n\n# Example usage:\n# labels = [0, 1, 1, 0, 2, 2, 2]\n# print(entropy(labels))  # Output should be the entropy value rounded to 4 decimal places\n```\n\n### Explanation:\n1. **Convert to Numpy Array**: We convert the input list to a numpy array for efficient computation.\n2. **Unique Labels and Counts**: We use `np.unique` with `return_counts=True` to get the unique labels and their respective counts in the sequence.\n3. **Calculate Probabilities**: The relative frequency (probability) of each label is calculated by dividing the count of each label by the total number of labels.\n4. **Compute Entropy**: We apply the Shannon entropy formula using `numpy` operations to compute the sum of `-p_i * log2(p_i)` for each unique label.\n5. **Round the Result**: Finally, we round the computed entropy to 4 decimal places before returning it.\n\nThis function efficiently computes the Shannon entropy for any non-empty list of non-negative integers representing class labels."}
{"task_id": 425, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"\n    Calculate the Shannon entropy of a one-dimensional collection of non-negative integers.\n    \n    Parameters:\n    p (list[int] | np.ndarray): A list or numpy array of non-negative integers.\n    \n    Returns:\n    float: The Shannon entropy rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a numpy array if it is a list\n    if isinstance(p, list):\n        p = np.array(p)\n    \n    # Check if the input contains only a single unique value\n    unique_values = np.unique(p)\n    if len(unique_values) == 1:\n        return 0.0\n    \n    # Calculate the frequency of each unique value\n    value_counts = np.bincount(p)\n    \n    # Calculate the probabilities (relative frequencies)\n    probabilities = value_counts[value_counts > 0] / len(p)\n    \n    # Calculate the Shannon entropy using the natural logarithm\n    entropy = -np.sum(probabilities * np.log(probabilities))\n    \n    # Return the entropy rounded to 4 decimal places\n    return round(entropy, 4)\n```\n\n### Explanation:\n\n1. **Input Handling**: The function accepts either a list or a NumPy array. If the input is a list, it is converted to a NumPy array for easier manipulation.\n\n2. **Unique Value Check**: If the input contains only one unique value, the entropy is defined as 0.0, since there is no uncertainty in the data.\n\n3. **Frequency Calculation**: The `np.bincount` function is used to count occurrences of each integer in the array, which helps in calculating the relative frequencies (probabilities).\n\n4. **Probability Calculation**: The probabilities are calculated by dividing the count of each unique value by the total number of elements.\n\n5. **Entropy Calculation**: The Shannon entropy is computed using the formula provided, utilizing the natural logarithm (`np.log`).\n\n6. **Rounding**: The result is rounded to 4 decimal places before being returned."}
{"task_id": 426, "completion_id": 0, "completion": "```python\ndef classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    # Check if the input lists are of the same length and not empty\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    \n    # Calculate the number of correct predictions\n    correct_predictions = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)\n    \n    # Calculate the accuracy\n    accuracy = correct_predictions / len(y_true)\n    \n    # Return the accuracy rounded to 4 decimal places\n    return round(accuracy, 4)\n\n# Example usage:\n# y_true = [1, 0, 1, 1, 0]\n# y_pred = [1, 0, 0, 1, 0]\n# print(classification_accuracy(y_true, y_pred))  # Output: 0.8\n```\n\nThis function first checks if the input lists `y_true` and `y_pred` are of the same length and not empty. If they are not, it returns `-1`. Otherwise, it calculates the number of correct predictions by comparing each element in the two lists. The accuracy is then computed as the ratio of correct predictions to the total number of predictions, and the result is rounded to four decimal places before being returned."}
{"task_id": 427, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    # Convert input to a NumPy array if it is not already\n    z_array = np.array(z)\n    \n    # Compute the identity activation (which is the input itself)\n    activation = z_array\n    \n    # Compute the derivative (an array of ones with the same shape as the input)\n    derivative = np.ones_like(z_array)\n    \n    # Convert the results back to Python lists\n    activation_list = activation.tolist()\n    derivative_list = derivative.tolist()\n    \n    return (activation_list, derivative_list)\n\n# Example usage:\n# input_data = [1, 2, 3]\n# activation, derivative = identity_activation(input_data)\n# print(\"Activation:\", activation)\n# print(\"Derivative:\", derivative)\n```\n\nThis function takes any numeric input in the form of a list, tuple, or NumPy ndarray, computes the identity activation and its derivative, and returns both as Python lists. The conversion to a NumPy array allows for efficient computation, and the results are converted back to lists before returning."}
{"task_id": 428, "completion_id": 0, "completion": "To implement the Hann window generator, we need to follow the mathematical definition provided and handle the special cases as described. Here's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n\n    # Generate the Hann window\n    window = np.array([0.5 - 0.5 * math.cos(2 * math.pi * n / (N - 1)) for n in range(N)])\n\n    if not symmetric:\n        window = window[:-1]  # Discard the last sample for periodic window\n\n    # Round each coefficient to 4 decimal places\n    window = np.round(window, 4)\n\n    # Convert to a regular Python list before returning\n    return window.tolist()\n\n# Example usage:\nprint(hann(5, symmetric=True))  # Symmetric window\nprint(hann(5, symmetric=False)) # Periodic window\n```\n\n### Explanation:\n1. **Special Cases**:\n   - If `window_len <= 0`, return an empty list.\n   - If `window_len == 1`, return `[1.0]` regardless of the `symmetric` flag.\n\n2. **Window Length**:\n   - For a symmetric window, use `N = window_len`.\n   - For a periodic window, use `N = window_len + 1` to compute an extra sample and then discard the last sample.\n\n3. **Window Calculation**:\n   - Use the formula `hann(n) = 0.5 - 0.5 * cos(2 * \u03c0 * n / (N-1))` to compute each sample.\n   - Use a list comprehension to generate the window samples.\n\n4. **Rounding and Conversion**:\n   - Round each sample to 4 decimal places using `np.round`.\n   - Convert the NumPy array to a regular Python list before returning.\n\nThis implementation efficiently handles the requirements and special cases for generating a Hann window."}
{"task_id": 429, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm.  Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it.  If the\n        input context is invalid the function returns (-1, \u20111).\n    \"\"\"\n    # Check if context is a valid one-hot vector\n    if context.ndim != 1 or context.shape[0] != context_probs.shape[0] or np.sum(context) != 1 or not np.all(np.isin(context, [0, 1])):\n        return (-1, -1)\n    \n    # Find the active context index\n    context_index = np.argmax(context)\n    \n    # Get the probabilities for the active context\n    context_probabilities = context_probs[context_index]\n    \n    # Find the optimal arm and its reward\n    optimal_arm = np.argmax(context_probabilities)\n    optimal_rwd = np.round(context_probabilities[optimal_arm], 4)\n    \n    return (optimal_rwd, optimal_arm)\n```\n\n### Explanation:\n1. **Validation of Context Vector**: The function first checks if the `context` vector is a valid one-hot encoded vector. It ensures that:\n   - The vector is one-dimensional.\n   - The length of the vector matches the number of contexts (`D`).\n   - The vector contains exactly one `1`.\n   - All elements are either `0` or `1`.\n\n2. **Determine Active Context**: If the context is valid, the function identifies the active context by finding the index of the `1` in the `context` vector using `np.argmax`.\n\n3. **Optimal Arm and Reward**: It retrieves the probabilities for the active context from `context_probs`, finds the arm with the highest probability using `np.argmax`, and rounds the optimal reward to four decimal places using `np.round`.\n\n4. **Return Values**: The function returns the optimal reward and the index of the optimal arm. If the context is invalid, it returns `(-1, -1)`."}
{"task_id": 430, "completion_id": 0, "completion": "To solve the problem of deterministic topological sorting of a directed graph, we can use a depth-first search (DFS) approach. The key is to ensure that the exploration of vertices and their neighbors follows the deterministic order specified by the input list of vertices. Here's how you can implement this:\n\n```python\nfrom typing import List, Tuple, Dict, Set\n\ndef topological_sort(vertices: List, edges: List[Tuple]) -> List | None:\n    \"\"\"Determine a topological ordering of a directed graph.\n\n    The implementation **must** use depth-first search (DFS) and follow the\n    deterministic exploration rule described in the task description.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 ``None`` when the graph contains at least one directed cycle.\n    \"\"\"\n    # Create adjacency list from edges\n    adj_list: Dict = {vertex: [] for vertex in vertices}\n    for u, v in edges:\n        adj_list[u].append(v)\n    \n    # Initialize visited and recursion stack\n    visited: Set = set()\n    rec_stack: Set = set()\n    topological_order: List = []\n    \n    def dfs(vertex: str) -> bool:\n        \"\"\"Perform DFS and check for cycles.\"\"\"\n        if vertex in rec_stack:\n            return False  # Cycle detected\n        if vertex in visited:\n            return True  # Already visited, no cycle from this vertex\n        \n        # Mark the current node as visited and add to recursion stack\n        visited.add(vertex)\n        rec_stack.add(vertex)\n        \n        # Explore neighbors in deterministic order\n        for neighbor in adj_list[vertex]:\n            if not dfs(neighbor):\n                return False\n        \n        # Remove from recursion stack and add to topological order\n        rec_stack.remove(vertex)\n        topological_order.append(vertex)\n        return True\n    \n    # Perform DFS from each vertex\n    for vertex in vertices:\n        if vertex not in visited:\n            if not dfs(vertex):\n                return None  # Cycle detected\n    \n    # Reverse the topological order to get the correct order\n    topological_order.reverse()\n    return topological_order\n\n# Example usage:\nvertices = ['A', 'B', 'C', 'D', 'E']\nedges = [('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E')]\nprint(topological_sort(vertices, edges))  # Output: ['A', 'B', 'C', 'D', 'E']\n```\n\n### Explanation:\n1. **Adjacency List**: We first create an adjacency list from the given edges to represent the graph.\n\n2. **DFS Function**: The `dfs` function is used to explore each vertex. It checks for cycles using a recursion stack (`rec_stack`). If a vertex is revisited while still in the recursion stack, a cycle is detected.\n\n3. **Deterministic Exploration**: The neighbors of each vertex are explored in the order they appear in the adjacency list, which is constructed based on the order of vertices.\n\n4. **Cycle Detection**: If a cycle is detected during DFS, the function returns `None`.\n\n5. **Topological Order**: If no cycles are detected, the vertices are added to the `topological_order` list in post-order, which is then reversed to get the correct topological order.\n\nThis implementation ensures a deterministic topological sort by strictly following the order of vertices and their neighbors as specified in the input."}
{"task_id": 431, "completion_id": 0, "completion": "To implement the function that calculates the Euclidean distance between two vectors, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function must return -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x1 = np.array(x1)\n    x2 = np.array(x2)\n    \n    # Check if both vectors have the same length\n    if x1.shape != x2.shape:\n        return -1\n    \n    # Compute the Euclidean distance\n    distance = np.sqrt(np.sum((x1 - x2) ** 2))\n    \n    # Round the result to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# print(dist([1, 2, 3], [4, 5, 6]))  # Output: 5.1962\n# print(dist((1.5, 2.5), (3.5, 4.5)))  # Output: 2.8284\n# print(dist(np.array([1, 2]), np.array([1, 2, 3])))  # Output: -1\n```\n\n### Explanation:\n1. **Input Conversion**: We convert the input vectors to NumPy arrays to leverage efficient array operations.\n2. **Length Validation**: We check if the shapes of the two arrays are identical. If not, we return `-1`.\n3. **Distance Calculation**: We compute the Euclidean distance using the formula \\(\\sqrt{\\sum_{i=1}^{n}(x_{1i}-x_{2i})^{2}}\\).\n4. **Rounding**: The result is rounded to 4 decimal places using Python's `round()` function.\n\nThis implementation handles lists, tuples, and NumPy arrays seamlessly and ensures the output is correctly formatted according to the task requirements."}
{"task_id": 433, "completion_id": 0, "completion": "Below is the implementation for the `glorot_fan` function based on the provided rules. The function computes `fan_in` and `fan_out` as specified:\n\n```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # 4-D convolutional kernel\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # Other tensors\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n```\n\n### Explanation:\n1. **4-D Tensor (Convolutional Kernel):**\n   - The shape is expected to be `(out_channels, in_channels, kernel_height, kernel_width)`.\n   - The computation of `receptive_field_size` is done by multiplying `kernel_height` and `kernel_width`.\n   - `fan_in` is calculated as the product of `in_channels` and `receptive_field_size`.\n   - `fan_out` is calculated as the product of `out_channels` and `receptive_field_size`.\n\n2. **Non-4-D Tensors:**\n   - For all other tensor shapes, `fan_in` and `fan_out` are directly taken as the first two dimensions of the shape: `shape[0]` and `shape[1]`.\n\n3. **Return Type:**\n   - Both `fan_in` and `fan_out` are returned as floats, fulfilling the output constraint.\n\nThis method efficiently determines the `fan-in` and `fan-out` based on the shape of the tensor, accommodating both standard layers and convolutional layers."}
{"task_id": 434, "completion_id": 0, "completion": "To implement a numerically stable softmax function, we can use the trick of subtracting the maximum value from each row before computing the exponentials. This helps prevent overflow and underflow issues. Here's how you can implement this in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute a row-wise numerically stable softmax.\"\"\"\n    # Ensure logits is a 2D array for consistent processing\n    if logits.ndim == 1:\n        logits = logits.reshape(1, -1)\n    \n    # Subtract the maximum value from each row for numerical stability\n    max_logits = np.max(logits, axis=1, keepdims=True)\n    stable_logits = logits - max_logits\n    \n    # Compute the exponentials\n    exp_logits = np.exp(stable_logits)\n    \n    # Compute the sum of exponentials for each row\n    sum_exp_logits = np.sum(exp_logits, axis=1, keepdims=True)\n    \n    # Compute the softmax probabilities\n    softmax_probs = exp_logits / sum_exp_logits\n    \n    # Round the probabilities to 6 decimal places\n    rounded_probs = np.round(softmax_probs, 6)\n    \n    # Convert the result to a list of lists\n    return rounded_probs.tolist()\n\n# Example usage:\nlogits = np.array([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\nprint(softmax(logits))\n```\n\n### Explanation:\n1. **Reshape for Consistency**: If the input is a 1-D array, we reshape it to a 2-D array with one row to ensure consistent processing.\n\n2. **Numerical Stability**: We subtract the maximum value of each row from every element in that row. This helps in preventing large values from causing overflow when exponentiated.\n\n3. **Exponentials and Sum**: We compute the exponentials of the adjusted logits and then sum them row-wise.\n\n4. **Softmax Calculation**: The softmax probabilities are calculated by dividing the exponentials by their row-wise sums.\n\n5. **Rounding**: We round each probability to 6 decimal places to meet the output constraints.\n\n6. **Conversion to List**: Finally, we convert the NumPy array to a list of lists for the output format.\n\nThis implementation should handle both 1-D and 2-D input arrays correctly and return the desired output format."}
{"task_id": 435, "completion_id": 0, "completion": "To implement a tiny Gradient Boosting Regressor using ordinary least squares (OLS) linear regression as the weak learner, we can follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special case handling\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    \n    for t in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals from X\n        # Add intercept term to X\n        X_with_intercept = np.hstack((np.ones((X.shape[0], 1)), X))\n        \n        # Compute the coefficients using the normal equation\n        # (X^T X)^{-1} X^T y\n        coefficients = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ coefficients\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Round the final predictions to 4 decimal places and convert to a regular Python list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\ny = [3.0, 5.0, 7.0]\npredictions = gradient_boosting_regressor(X, y, n_estimators=10, learning_rate=0.1)\nprint(predictions)\n```\n\n### Explanation:\n1. **Data Conversion**: Convert the input lists `X` and `y` into NumPy arrays of type `float` for efficient numerical operations.\n\n2. **Special Cases**: If `n_estimators` is less than or equal to 0 or `learning_rate` is 0, return a list filled with the mean of `y`.\n\n3. **Initialization**: Start the prediction vector `y_pred` with the mean of `y`.\n\n4. **Iterative Boosting**:\n   - Compute residuals as the difference between actual values `y` and current predictions `y_pred`.\n   - Fit an OLS linear regression model to predict these residuals using the features `X`. This involves adding an intercept term to `X` and solving the normal equation to find the coefficients.\n   - Update the predictions by adding the scaled predictions from the weak learner to the current predictions.\n\n5. **Output**: Round each prediction to 4 decimal places and return as a regular Python list.\n\nThis implementation uses basic linear algebra operations provided by NumPy to fit the linear regression model and update predictions iteratively."}
{"task_id": 437, "completion_id": 0, "completion": "To implement the logistic sigmoid function and its derivatives, we need to handle different types of input (scalar, list, or NumPy array) and compute the appropriate result based on the `order` parameter. Here's how you can implement this function:\n\n```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to a NumPy array for easy manipulation\n    x_array = np.array(x, dtype=np.float64)\n    \n    # Compute the sigmoid function\n    sigmoid_value = 1 / (1 + np.exp(-x_array))\n    \n    if order == 0:\n        result = sigmoid_value\n    elif order == 1:\n        result = sigmoid_value * (1 - sigmoid_value)\n    elif order == 2:\n        result = sigmoid_value * (1 - sigmoid_value) * (1 - 2 * sigmoid_value)\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if np.isscalar(x):\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Should return 0.5\n# print(sigmoid([0, 1, 2], order=1))  # Should return [0.25, 0.1966, 0.1049]\n# print(sigmoid(np.array([0, 1, 2]), order=2))  # Should return [0.0, -0.0353, -0.0904]\n```\n\n### Explanation:\n- **Input Handling**: The input `x` is converted to a NumPy array to facilitate element-wise operations.\n- **Sigmoid Calculation**: The logistic sigmoid function is calculated as \\( \\sigma(x) = \\frac{1}{1 + e^{-x}} \\).\n- **Derivatives**:\n  - First derivative: \\( \\sigma(x)(1-\\sigma(x)) \\).\n  - Second derivative: \\( \\sigma(x)(1-\\sigma(x))(1-2\\sigma(x)) \\).\n- **Output Formatting**: The result is rounded to four decimal places. If the input is a scalar, a float is returned. Otherwise, the result is converted to a list using `tolist()`.\n- **Invalid Order Handling**: If the `order` is not 0, 1, or 2, the function returns -1."}
{"task_id": 438, "completion_id": 0, "completion": "To implement the `to_categorical` function, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert y to a NumPy array if it is a list\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    inferred_num_classes = max(y) + 1\n    if num_classes is None:\n        num_classes = inferred_num_classes\n    \n    # Check if num_classes is smaller than required\n    if num_classes < inferred_num_classes:\n        return -1\n    \n    # Create a zero matrix of shape (len(y), num_classes)\n    one_hot_matrix = np.zeros((len(y), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(len(y)), y] = 1\n    \n    # Convert the result to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\nprint(to_categorical([0, 1, 2, 1]))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\nprint(to_categorical([0, 1, 2, 1], num_classes=3))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\nprint(to_categorical([0, 1, 2, 1], num_classes=2))  # Output: -1\n```\n\n### Explanation:\n1. **Input Conversion**: We first ensure that `y` is a NumPy array, which simplifies indexing operations.\n2. **Determine `num_classes`**: If `num_classes` is not provided, we infer it as `max(y) + 1`.\n3. **Validation**: If the provided `num_classes` is less than the inferred number of classes, we return `-1`.\n4. **One-Hot Encoding**: We create a zero matrix of shape `(len(y), num_classes)` and set the appropriate indices to 1 using NumPy's advanced indexing.\n5. **Output Conversion**: Finally, we convert the NumPy array to a list of lists using `tolist()` and return it.\n\nThis implementation handles the constraints and requirements specified in the task description."}
{"task_id": 439, "completion_id": 0, "completion": "To implement the Apriori algorithm for frequent itemset mining, we need to follow the steps outlined in the task description. Here's a complete implementation:\n\n```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def get_support(itemset, transactions):\n        \"\"\"Calculate the support of an itemset in the transactions.\"\"\"\n        return sum(1 for transaction in transactions if itemset <= set(transaction)) / len(transactions)\n\n    def generate_candidates(prev_frequent_itemsets, k):\n        \"\"\"Generate candidate itemsets of size k from previous frequent itemsets of size k-1.\"\"\"\n        candidates = set()\n        for a in prev_frequent_itemsets:\n            for b in prev_frequent_itemsets:\n                union_set = a | b\n                if len(union_set) == k:\n                    candidates.add(union_set)\n        return candidates\n\n    def prune_candidates(candidates, prev_frequent_itemsets):\n        \"\"\"Prune candidates that contain any infrequent subset.\"\"\"\n        pruned_candidates = set()\n        for candidate in candidates:\n            if all(frozenset(subset) in prev_frequent_itemsets for subset in itertools.combinations(candidate, len(candidate) - 1)):\n                pruned_candidates.add(candidate)\n        return pruned_candidates\n\n    # Step 1: Find all single-item frequent itemsets\n    itemsets = [frozenset([item]) for transaction in transactions for item in transaction]\n    itemsets = set(itemsets)\n    frequent_itemsets = []\n    k = 1\n\n    while itemsets:\n        # Calculate support for each itemset and filter by min_sup\n        itemsets_with_support = [(itemset, get_support(itemset, transactions)) for itemset in itemsets]\n        itemsets = {itemset for itemset, support in itemsets_with_support if support >= min_sup}\n\n        # Add frequent itemsets to the result\n        frequent_itemsets.extend(itemsets)\n\n        # Generate candidates for the next level\n        k += 1\n        candidates = generate_candidates(itemsets, k)\n        itemsets = prune_candidates(candidates, itemsets)\n\n    # Convert to sorted list of tuples\n    result = [tuple(sorted(itemset)) for itemset in frequent_itemsets]\n    result.sort(key=lambda x: (len(x), x))\n    return result\n\n# Example usage:\ntransactions = [\n    ['milk', 'bread', 'butter'],\n    ['beer', 'bread'],\n    ['milk', 'bread', 'butter', 'beer'],\n    ['bread', 'butter']\n]\nmin_sup = 0.5\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\n### Explanation:\n1. **Support Calculation**: The `get_support` function calculates the support of an itemset by checking how many transactions contain the itemset.\n\n2. **Candidate Generation**: The `generate_candidates` function creates new candidate itemsets by joining pairs of frequent itemsets from the previous level.\n\n3. **Pruning**: The `prune_candidates` function removes candidates that have any infrequent subset, ensuring that only valid candidates are considered.\n\n4. **Main Loop**: The algorithm starts with single-item itemsets and iteratively generates larger itemsets until no more frequent itemsets can be found.\n\n5. **Sorting**: The final result is sorted by itemset length and lexicographically within each length.\n\nThis implementation should work efficiently for typical transactional datasets and correctly return the frequent itemsets as specified."}
{"task_id": 440, "completion_id": 0, "completion": "To solve this task, we need to process the nested list of predictions and compute the average probability for each class across all estimators for each sample. After averaging, we will round the probabilities to four decimal places and determine the predicted class by finding the index of the maximum probability for each sample. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    n_estimators = len(predictions)\n    n_samples = len(predictions[0])\n    n_classes = len(predictions[0][0])\n    \n    # Initialize a list to store the averaged probabilities\n    averaged_probabilities = [[0.0] * n_classes for _ in range(n_samples)]\n    \n    # Sum up the probabilities for each sample and class\n    for estimator in predictions:\n        for sample_idx, sample_probs in enumerate(estimator):\n            for class_idx, prob in enumerate(sample_probs):\n                averaged_probabilities[sample_idx][class_idx] += prob\n    \n    # Average the probabilities and round to 4 decimal places\n    for sample_idx in range(n_samples):\n        for class_idx in range(n_classes):\n            averaged_probabilities[sample_idx][class_idx] /= n_estimators\n            averaged_probabilities[sample_idx][class_idx] = round(averaged_probabilities[sample_idx][class_idx], 4)\n    \n    # Determine the predicted class for each sample\n    predicted_classes = [int(np.argmax(sample_probs)) for sample_probs in averaged_probabilities]\n    \n    return averaged_probabilities, predicted_classes\n\n# Example usage:\npredictions = [\n    [[0.1, 0.9], [0.8, 0.2]],\n    [[0.2, 0.8], [0.6, 0.4]],\n    [[0.3, 0.7], [0.7, 0.3]]\n]\n\naveraged_probs, predicted_classes = aggregate_predictions(predictions)\nprint(\"Averaged Probabilities:\", averaged_probs)\nprint(\"Predicted Classes:\", predicted_classes)\n```\n\n### Explanation:\n1. **Initialization**: We start by determining the number of estimators, samples, and classes. We then initialize a list to store the averaged probabilities for each sample.\n\n2. **Summing Probabilities**: We iterate over each estimator and each sample within that estimator, summing the probabilities for each class.\n\n3. **Averaging and Rounding**: After summing, we divide by the number of estimators to get the average and round each probability to four decimal places.\n\n4. **Predicting Classes**: We use `np.argmax` to find the index of the maximum probability for each sample, which gives us the predicted class.\n\nThis function will return the averaged probabilities and the predicted class indices as required."}
{"task_id": 441, "completion_id": 0, "completion": "To implement the Hamming window generator, we need to handle both symmetric and periodic variants based on the `symmetric` parameter. We'll use the mathematical formula provided to compute the window values, and ensure that the output is rounded to four decimal places. Let's go ahead and implement the function:\n\n```python\nimport numpy as np\n\ndef hamming(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return *window_len* samples of a Hamming window.\n    When *symmetric* is *False*, return the periodic variant (last sample of\n    the symmetric window removed).  Each value must be rounded to 4 decimals\n    and the result converted to a regular Python list.\n    \"\"\"\n    # Handle edge cases\n    if window_len == 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    \n    # Determine the length of the window based on the symmetric flag\n    N = window_len if symmetric else window_len + 1\n    \n    # Generate the Hamming window using the formula\n    window = [0.54 - 0.46 * np.cos((2 * np.pi * n) / (N - 1)) for n in range(window_len)]\n    \n    # Round each value to 4 decimal places\n    window = [round(value, 4) for value in window]\n    \n    return window\n\n# Example usage:\nprint(hamming(5, symmetric=True))  # Symmetric Hamming window\nprint(hamming(5, symmetric=False)) # Periodic Hamming window\n```\n\n### Explanation:\n1. **Edge Cases**: We handle the cases where `window_len` is 0 or 1 upfront, returning an empty list or `[1.0]` respectively.\n2. **Window Length**: For the symmetric window, we use the given `window_len`. For the periodic window, we compute the window as if it were of length `window_len + 1` and then use only the first `window_len` samples.\n3. **Window Calculation**: We use a list comprehension to calculate the Hamming window values using the formula provided.\n4. **Rounding**: Each value is rounded to four decimal places before returning the list.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 442, "completion_id": 0, "completion": "To implement a k-Nearest Neighbors (k-NN) classifier using a KD-Tree for acceleration, we need to follow these steps:\n\n1. **Build the KD-Tree**: This involves recursively splitting the data based on the median value along the axis with the highest variance. The tree is represented using nested tuples.\n\n2. **Query the KD-Tree**: For each test sample, traverse the KD-Tree to find the k nearest neighbors using Euclidean distance.\n\n3. **Predict the label**: Use majority voting to determine the predicted label for each test sample.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport heapq\n\ndef build_kdtree(points, depth=0):\n    if not points:\n        return None\n\n    k = points.shape[1]  # Number of dimensions\n    axis = depth % k\n\n    # Sort point list and choose median as pivot element\n    sorted_points = points[points[:, axis].argsort()]\n    median_index = len(sorted_points) // 2\n\n    # Create node and construct subtrees\n    return (\n        sorted_points[median_index],\n        build_kdtree(sorted_points[:median_index], depth + 1),\n        build_kdtree(sorted_points[median_index + 1:], depth + 1)\n    )\n\ndef euclidean_distance(point1, point2):\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef kdtree_knn_search(tree, point, k, depth=0):\n    if tree is None:\n        return []\n\n    k_dim = len(point)\n    axis = depth % k_dim\n\n    next_branch = None\n    opposite_branch = None\n\n    if point[axis] < tree[0][axis]:\n        next_branch = tree[1]\n        opposite_branch = tree[2]\n    else:\n        next_branch = tree[2]\n        opposite_branch = tree[1]\n\n    best = kdtree_knn_search(next_branch, point, k, depth + 1)\n\n    current_distance = euclidean_distance(point, tree[0])\n    heapq.heappush(best, (-current_distance, tree[0]))\n\n    if len(best) > k:\n        heapq.heappop(best)\n\n    if len(best) < k or abs(point[axis] - tree[0][axis]) < -best[0][0]:\n        best.extend(kdtree_knn_search(opposite_branch, point, k, depth + 1))\n        best = sorted(best, key=lambda x: x[0], reverse=True)[:k]\n\n    return best\n\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    # Build KD-Tree from training data\n    kd_tree = build_kdtree(X_train)\n\n    predictions = []\n    for test_point in X_test:\n        # Find k nearest neighbors\n        neighbors = kdtree_knn_search(kd_tree, test_point, k)\n        neighbor_indices = [np.where((X_train == neighbor[1]).all(axis=1))[0][0] for neighbor in neighbors]\n        neighbor_labels = y_train[neighbor_indices]\n\n        # Predict label by majority vote\n        predicted_label = np.argmax(np.bincount(neighbor_labels))\n        predictions.append(predicted_label)\n\n    return predictions\n```\n\n### Explanation:\n\n- **KD-Tree Construction**: The `build_kdtree` function recursively splits the dataset by choosing the median along the axis with the highest variance. This ensures a balanced tree.\n\n- **Distance Calculation**: The `euclidean_distance` function computes the Euclidean distance between two points.\n\n- **KD-Tree Search**: The `kdtree_knn_search` function traverses the KD-Tree to find the k nearest neighbors. It uses a max-heap to keep track of the closest points found so far.\n\n- **Majority Voting**: For each test point, the labels of the k nearest neighbors are used to predict the class by majority voting.\n\nThis implementation efficiently handles the k-NN classification using a KD-Tree, providing faster neighbor searches compared to a naive approach."}
{"task_id": 443, "completion_id": 0, "completion": "To implement the `divide_on_feature` function, we need to iterate over the rows of the input matrix `X` and check the value at the specified column index `feature_i` against the given `threshold`. Depending on whether the threshold is numeric or non-numeric, we will apply the appropriate condition to split the data into two subsets. Let's write the function:\n\n```python\nimport numpy as np\n\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n    \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n    \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*.\n    \"\"\"\n    # Determine if the threshold is numeric\n    if isinstance(threshold, (int, float)):\n        # Numeric threshold: use >= for the left subset\n        left_mask = X[:, feature_i] >= threshold\n    else:\n        # Non-numeric threshold: use == for the left subset\n        left_mask = X[:, feature_i] == threshold\n\n    # Create the left and right subsets using the masks\n    left_subset = X[left_mask]\n    right_subset = X[~left_mask]\n\n    return left_subset, right_subset\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n# feature_i = 0\n# threshold = 4\n# left, right = divide_on_feature(X, feature_i, threshold)\n# print(\"Left subset:\\n\", left)\n# print(\"Right subset:\\n\", right)\n```\n\n### Explanation:\n- **Threshold Check**: We first check if the `threshold` is numeric using `isinstance(threshold, (int, float))`. This helps us decide which condition to apply for splitting the data.\n- **Mask Creation**: We create a boolean mask `left_mask` that identifies which rows should go into the left subset based on the condition (`>=` for numeric, `==` for non-numeric).\n- **Subset Creation**: Using the boolean mask, we create the left and right subsets by indexing the original matrix `X`.\n- **Return**: Finally, we return the two subsets as a tuple.\n\nThis function efficiently partitions the dataset based on the specified feature and threshold, and it handles both numeric and non-numeric thresholds correctly."}
{"task_id": 444, "completion_id": 0, "completion": "To implement the Radial Basis Function (RBF) kernel matrix as described, we need to handle several tasks: input validation, computation of the kernel matrix, and rounding the results. Let's break down the implementation step by step.\n\n1. **Input Validation**: We need to ensure that the dimensions of the input matrices `X` and `Y` match, and that the `sigma` parameter is valid. If `sigma` is a list, its length must match the number of features. If `sigma` is a single float, it must be positive.\n\n2. **Default Sigma**: If `sigma` is `None`, we use the default value `\u221a(C/2)` where `C` is the number of features.\n\n3. **Kernel Computation**: For each pair of vectors from `X` and `Y`, compute the RBF kernel using the formula provided. This involves calculating the squared Euclidean distance, scaling it by `sigma`, and applying the exponential function.\n\n4. **Rounding and Output**: Round the results to four decimal places and return them as a nested list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert input lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Get the number of features\n    N, C = X.shape\n    M, C_Y = Y.shape\n    \n    # Validate feature dimensions\n    if C != C_Y:\n        return -1\n    \n    # Validate sigma\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif isinstance(sigma, list) or isinstance(sigma, np.ndarray):\n        sigma = np.array(sigma)\n        if len(sigma) != C or np.any(sigma <= 0):\n            return -1\n    else:\n        return -1\n    \n    # Compute the RBF kernel matrix\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            diff = (X[i] - Y[j]) / sigma\n            squared_distance = np.sum(diff ** 2)\n            kernel_matrix[i, j] = np.exp(-0.5 * squared_distance)\n    \n    # Round the results to 4 decimal places and convert to a nested list\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\n### Explanation:\n- **Input Conversion**: We convert the input lists `X` and `Y` to NumPy arrays for easier mathematical operations.\n- **Sigma Handling**: We handle different cases for `sigma` (single float, list, or `None`) and ensure it's valid.\n- **Kernel Calculation**: We iterate over all pairs of vectors from `X` and `Y`, compute the scaled squared distance, and apply the exponential function.\n- **Output**: The kernel matrix is rounded to four decimal places and returned as a nested list.\n\nThis implementation should meet the requirements and constraints specified in the task description."}
{"task_id": 446, "completion_id": 0, "completion": "To implement the `decision_stump` function, we need to calculate the information gain for each possible split and select the one with the highest gain. Here's a step-by-step breakdown of how to achieve this:\n\n1. **Calculate Entropy**: Define a function to calculate the Shannon entropy of a set of labels.\n\n2. **Determine Possible Thresholds**: For each feature, sort the values and determine possible thresholds as midpoints between successive distinct values.\n\n3. **Calculate Information Gain**: For each feature and each possible threshold, calculate the information gain using the formula provided.\n\n4. **Select Best Split**: Track the best split based on the highest information gain, applying tie-breaking rules as specified.\n\n5. **Return Result**: Return the best feature index, threshold, and majority labels for the left and right splits. If no split improves information gain, return the specified default tuple.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0\n    counts = Counter(labels)\n    probabilities = [count / n for count in counts.values()]\n    return -sum(p * np.log2(p) for p in probabilities if p > 0)\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate parent entropy\n    parent_entropy = entropy(y)\n    \n    # Initialize best split variables\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority_label = None\n    best_right_majority_label = None\n    \n    # Iterate over each feature\n    for j in range(n_features):\n        # Sort the feature values and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        \n        # Determine possible thresholds (midpoints between successive distinct values)\n        possible_thresholds = []\n        for i in range(1, n_samples):\n            if sorted_X[i] != sorted_X[i - 1]:\n                midpoint = (sorted_X[i] + sorted_X[i - 1]) / 2\n                possible_thresholds.append(midpoint)\n        \n        # Evaluate each threshold\n        for threshold in possible_thresholds:\n            # Split the data\n            left_indices = sorted_X <= threshold\n            right_indices = sorted_X > threshold\n            left_labels = sorted_y[left_indices]\n            right_labels = sorted_y[right_indices]\n            \n            # Calculate proportions\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            \n            # Calculate entropies\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            \n            # Calculate information gain\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            \n            # Check if this is the best gain\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(threshold, 4)\n                best_left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                best_right_majority_label = Counter(right_labels).most_common(1)[0][0]\n            elif gain == best_gain:\n                # Tie-breaking rules\n                if j < best_feature_index or (j == best_feature_index and threshold < best_threshold):\n                    best_feature_index = j\n                    best_threshold = round(threshold, 4)\n                    best_left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                    best_right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    \n    # If no split improves information gain, return default tuple\n    if best_gain == 0:\n        majority_label = Counter(y).most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, best_left_majority_label, best_right_majority_label)\n```\n\nThis implementation efficiently calculates the best decision stump by iterating over each feature and evaluating possible thresholds, ensuring that the split with the highest information gain is selected, while adhering to the specified tie-breaking rules."}
{"task_id": 447, "completion_id": 0, "completion": "To implement the `one` function that mimics the behavior of NumPy's `ones`, we can leverage NumPy's capabilities to create an array filled with ones and then convert it to a Python list using the `tolist()` method. This approach ensures that we handle the shape and dtype arguments correctly, and any errors that NumPy would raise (such as negative dimensions) will naturally propagate.\n\nHere's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    # Create a NumPy array filled with ones using the provided shape and kwargs\n    ones_array = np.ones(shape, **kwargs)\n    \n    # Convert the NumPy array to a Python list\n    ones_list = ones_array.tolist()\n    \n    return ones_list\n```\n\n### Explanation:\n\n1. **Import NumPy**: We start by importing the NumPy library, which is essential for creating arrays.\n\n2. **Function Definition**: The function `one` takes a `shape` argument and additional keyword arguments (`**kwargs`). The `shape` can be an integer or a tuple/list of integers, specifying the dimensions of the desired array.\n\n3. **Create NumPy Array**: We use `np.ones(shape, **kwargs)` to create a NumPy array filled with ones. The `**kwargs` allows users to specify additional options like `dtype`.\n\n4. **Convert to List**: The `tolist()` method is called on the NumPy array to convert it into a nested Python list.\n\n5. **Return the List**: Finally, the function returns the Python list.\n\nThis implementation ensures that the function behaves similarly to NumPy's `ones`, while returning a pure Python list as required."}
{"task_id": 448, "completion_id": 0, "completion": "To implement the mean baseline regressor as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places.  If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    # Check if y_train is empty\n    if len(y_train) == 0:\n        return []\n\n    # Compute the mean of y_train\n    mean_value = np.mean(y_train)\n\n    # Create an array of the mean value with the same length as the number of rows in X_test\n    predictions = np.full(shape=(X_test.shape[0],), fill_value=mean_value)\n\n    # Round each prediction to the nearest 4th decimal\n    rounded_predictions = np.round(predictions, 4)\n\n    # Convert the numpy array to a plain Python list and return\n    return rounded_predictions.tolist()\n```\n\n### Explanation:\n\n1. **Check for Empty `y_train`:** \n   - If `y_train` is empty, we immediately return an empty list since no mean can be computed.\n\n2. **Compute the Mean:**\n   - We use `np.mean(y_train)` to calculate the arithmetic mean of the target values.\n\n3. **Create Predictions:**\n   - We use `np.full` to create an array filled with the mean value. The length of this array is the same as the number of rows in `X_test`.\n\n4. **Round Predictions:**\n   - We round each element in the predictions array to 4 decimal places using `np.round`.\n\n5. **Return as List:**\n   - Finally, we convert the rounded NumPy array to a Python list using `.tolist()` and return it.\n\nThis implementation efficiently handles the task requirements and edge cases, such as an empty `y_train`."}
{"task_id": 449, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Gaussian Discriminant Analysis (GDA) for binary classification, following the specified learning rule:\n\n```python\nimport numpy as np\n\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are\n        required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n    # Separate the training data into two classes\n    X0, X1 = X_train[y_train == 0], X_train[y_train == 1]\n    \n    # Calculate the means of each class\n    Mu0, Mu1 = np.mean(X0, axis=0), np.mean(X1, axis=0)\n    \n    # Calculate the covariance matrix\n    X_sub_Mu = np.vstack([X0 - Mu0, X1 - Mu1])\n    m = X_train.shape[1]  # Number of features\n    Sigma = (1.0 / m) * np.dot(X_sub_Mu.T, X_sub_Mu)\n    \n    # Calculate the normal vector (w) and bias (b)\n    normal_vec = Mu1 - Mu0\n    normal_vec = normal_vec / np.sqrt(np.sum(normal_vec**2))  # Normalize to unit vector\n    w = normal_vec\n    b = -np.dot(w.T, (Mu0 + Mu1) / 2)\n    \n    # Determine the sign based on the position of Mu1\n    sign = int(np.dot(w.T, Mu1) + b > 0)\n    \n    # Predict the labels for the test set\n    predictions = (np.dot(X_test, w) + b > 0).astype(int) * sign\n    \n    # Return predictions as a list of integers\n    return predictions.tolist()\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[2, 2], [3, 3]])\n# print(gda(X_train, y_train, X_test))  # Output: [0, 1]\n```\n\nThis code implements the GDA model as described, using the specified learning rule. It calculates the class means, covariance matrix, normal vector, and bias, and then uses these to predict the labels for the test set. The predictions are returned as a list of integers, either `0` or `1`."}
{"task_id": 450, "completion_id": 0, "completion": "To implement the majority voting function, we will iterate over each sample's predictions, count the occurrences of each class label using `np.bincount`, and determine the class with the highest count. If there's a tie, `np.bincount` combined with `np.argmax` will naturally select the smallest class label. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n    \"\"\"\n    # Initialize a list to store the final class for each sample\n    final_classes = []\n    \n    # Iterate over each sample's predictions\n    for sample_preds in preds:\n        # Count occurrences of each class label\n        counts = np.bincount(sample_preds)\n        # Determine the class with the highest count (smallest label in case of tie)\n        majority_class = np.argmax(counts)\n        # Append the result to the final list\n        final_classes.append(majority_class)\n    \n    return final_classes\n```\n\n### Explanation:\n- **`np.bincount`**: This function counts the number of occurrences of each value in an array of non-negative integers. The result is an array where the index represents the class label and the value at that index represents the count of that class.\n- **`np.argmax`**: This function returns the index of the first occurrence of the maximum value in the array. When used on the output of `np.bincount`, it returns the smallest class label in case of a tie.\n- **Iterating over samples**: We loop through each row of the `preds` array, which represents the predictions for a single sample across all estimators.\n\nThis implementation efficiently handles the majority voting process and adheres to the rules specified in the task description."}
{"task_id": 451, "completion_id": 0, "completion": "To implement a k-nearest neighbors classifier using a KD-Tree, we need to follow these steps:\n\n1. **Build the KD-Tree**: This involves recursively splitting the data points into a binary tree based on the median of the data along alternating dimensions.\n\n2. **Query the KD-Tree**: For each test point, traverse the KD-Tree to find the k nearest neighbors using Euclidean distance.\n\n3. **Classify the Test Points**: Use the labels of the k nearest neighbors to determine the class of each test point, applying tie-breaking rules as necessary.\n\nHere's the implementation:\n\n```python\nimport math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\n\nclass KDTreeNode:\n    def __init__(self, point: np.ndarray, label: int, left: Optional['KDTreeNode'] = None, right: Optional['KDTreeNode'] = None):\n        self.point = point\n        self.label = label\n        self.left = left\n        self.right = right\n\ndef build_kdtree(points: np.ndarray, labels: np.ndarray, depth: int = 0) -> Optional[KDTreeNode]:\n    if len(points) == 0:\n        return None\n\n    k = points.shape[1]\n    axis = depth % k\n    sorted_indices = np.argsort(points[:, axis])\n    points = points[sorted_indices]\n    labels = labels[sorted_indices]\n\n    median_index = len(points) // 2\n\n    return KDTreeNode(\n        point=points[median_index],\n        label=labels[median_index],\n        left=build_kdtree(points[:median_index], labels[:median_index], depth + 1),\n        right=build_kdtree(points[median_index + 1:], labels[median_index + 1:], depth + 1)\n    )\n\ndef euclidean_distance(point1: np.ndarray, point2: np.ndarray) -> float:\n    return np.linalg.norm(point1 - point2)\n\ndef knn_search_kdtree(node: Optional[KDTreeNode], target: np.ndarray, k: int, depth: int = 0, heap: Optional[List[Tuple[float, int]]] = None) -> List[Tuple[float, int]]:\n    if node is None:\n        return heap\n\n    if heap is None:\n        heap = []\n\n    dist = euclidean_distance(target, node.point)\n    heapq.heappush(heap, (-dist, node.label))\n    if len(heap) > k:\n        heapq.heappop(heap)\n\n    axis = depth % len(target)\n    next_branch = None\n    opposite_branch = None\n\n    if target[axis] < node.point[axis]:\n        next_branch = node.left\n        opposite_branch = node.right\n    else:\n        next_branch = node.right\n        opposite_branch = node.left\n\n    heap = knn_search_kdtree(next_branch, target, k, depth + 1, heap)\n\n    if len(heap) < k or abs(target[axis] - node.point[axis]) < -heap[0][0]:\n        heap = knn_search_kdtree(opposite_branch, target, k, depth + 1, heap)\n\n    return heap\n\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    if X_train.size == 0 or k <= 0:\n        return []\n\n    kdtree = build_kdtree(X_train, y_train)\n    predictions = []\n\n    for test_point in X_test:\n        nearest_neighbors = knn_search_kdtree(kdtree, test_point, k)\n        labels = [label for _, label in nearest_neighbors]\n        most_common = Counter(labels).most_common()\n        most_common.sort(key=lambda x: (-x[1], x[0]))  # Sort by frequency, then by label\n        predictions.append(most_common[0][0])\n\n    return predictions\n```\n\n### Explanation:\n\n- **KD-Tree Construction**: The `build_kdtree` function recursively splits the dataset into a binary tree structure, choosing the median point along the current axis as the node and alternating axes at each depth.\n\n- **Distance Calculation**: The `euclidean_distance` function computes the Euclidean distance between two points.\n\n- **KD-Tree Search**: The `knn_search_kdtree` function traverses the KD-Tree to find the k nearest neighbors, using a max-heap to keep track of the closest points.\n\n- **Prediction**: The `knn_kdtree_predict` function uses the KD-Tree to classify each test point based on the majority label among its k nearest neighbors, with deterministic tie-breaking.\n\nThis implementation efficiently handles the k-NN classification using a KD-Tree, providing exact nearest neighbor searches and deterministic tie-breaking."}
{"task_id": 452, "completion_id": 0, "completion": "To implement the function `divide_on_feature`, we need to handle both numeric and categorical thresholds and ensure that the samples are split correctly based on the specified feature and threshold. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a numpy array if it's a list\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Initialize the two subsets\n    subset1 = []\n    subset2 = []\n    \n    # Determine the type of threshold and split accordingly\n    if isinstance(threshold, (int, float)):\n        # Numeric threshold: greater than or equal\n        for sample in X:\n            if sample[feature_i] >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n    else:\n        # Categorical threshold: exactly equal\n        for sample in X:\n            if sample[feature_i] == threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n    \n    # Convert subsets to lists and return\n    return [np.array(subset1).tolist(), np.array(subset2).tolist()]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n```\n\n### Explanation:\n- **Input Handling**: The function first checks if `X` is a list and converts it to a NumPy array for easier manipulation.\n- **Subset Initialization**: Two empty lists, `subset1` and `subset2`, are initialized to store the samples based on the threshold condition.\n- **Threshold Check**: The function checks the type of the threshold. If it's numeric (int or float), it uses the `>=` operator to partition the samples. If it's non-numeric, it uses the `==` operator.\n- **Sample Partitioning**: The samples are iterated over, and based on the condition, they are appended to either `subset1` or `subset2`.\n- **Return**: The subsets are converted to lists using `np.array(subset).tolist()` and returned as a list containing the two subsets.\n\nThis implementation ensures that the samples are split correctly and returned in their original order."}
{"task_id": 453, "completion_id": 0, "completion": "To solve this task, we need to implement a function that updates the Q-values for a batch of states based on the given parameters. The function will compute the target Q-values using the DQN update rule and replace the Q-value for the action taken in each state with the computed target. Let's go through the implementation step-by-step.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input validity\n    if not (0 <= gamma <= 1):\n        return -1\n    if not (len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones)):\n        return -1\n\n    # Initialize the target Q-values as a copy of the current Q-values\n    targets = Q.copy()\n\n    # Iterate over each sample in the batch\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        \n        # Update the Q-value for the action taken\n        targets[i, actions[i]] = target\n\n    # Round the targets to 4 decimal places and convert to a nested list\n    return np.round(targets, 4).tolist()\n```\n\n### Explanation:\n\n1. **Input Validation**: \n   - We first check if `gamma` is within the valid range [0, 1]. If not, we return -1.\n   - We also check if all input lists/arrays have the same length. If not, we return -1.\n\n2. **Initialize Targets**:\n   - We create a copy of the current Q-values (`Q`) to use as the base for our target Q-values.\n\n3. **Compute Targets**:\n   - For each sample in the batch, we check if the next state is terminal (`dones[i]`).\n   - If it is terminal, the target is simply the immediate reward (`rewards[i]`).\n   - If it is not terminal, the target is the immediate reward plus the discounted maximum Q-value of the next state (`rewards[i] + gamma * max(Q_next[i])`).\n\n4. **Update Q-values**:\n   - We update the Q-value for the action taken (`actions[i]`) with the computed target.\n\n5. **Round and Return**:\n   - We round the updated Q-values to 4 decimal places and convert the NumPy array to a nested Python list before returning.\n\nThis function will correctly compute the training targets for a DQN based on the given inputs."}
{"task_id": 454, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description.  All three results have to be\n    converted to Python lists via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    # Create the valid_half array with shape (n//2, 2) and every row [1, 0]\n    valid_half = np.tile([1, 0], (batch_size // 2, 1))\n    \n    # Create the fake_half array with shape (n//2, 2) and every row [0, 1]\n    fake_half = np.tile([0, 1], (batch_size // 2, 1))\n    \n    # Create the valid_full array with shape (n, 2) and every row [1, 0]\n    valid_full = np.tile([1, 0], (batch_size, 1))\n    \n    # Convert all arrays to Python lists using tolist()\n    return valid_half.tolist(), fake_half.tolist(), valid_full.tolist()\n\n# Example usage:\nbatch_size = 4\nvalid_half, fake_half, valid_full = generate_dcgan_labels(batch_size)\nprint(\"Valid Half:\", valid_half)\nprint(\"Fake Half:\", fake_half)\nprint(\"Valid Full:\", valid_full)\n```\n\nThis function generates the required one-hot label arrays for DCGAN training, ensuring that each array is converted to a Python list using the `tolist()` method. The function assumes the batch size is a positive even integer, as specified in the task description."}
{"task_id": 455, "completion_id": 0, "completion": "To implement the k-Nearest Neighbors (k-NN) classifier with the specified search strategies, we need to handle each strategy separately. Here's a complete implementation:\n\n```python\nimport math\nimport heapq\nimport numpy as np\nfrom collections import Counter\n\ndef euclidean_distance(point1, point2):\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef naive_search(X_train, y_train, X_query, k):\n    predictions = []\n    for query in X_query:\n        distances = [euclidean_distance(query, train_point) for train_point in X_train]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        most_common = Counter(nearest_labels).most_common()\n        # Resolve ties by choosing the smallest label\n        predictions.append(min([label for label, count in most_common if count == most_common[0][1]]))\n    return predictions\n\ndef heap_search(X_train, y_train, X_query, k):\n    predictions = []\n    for query in X_query:\n        heap = []\n        for i, train_point in enumerate(X_train):\n            dist = euclidean_distance(query, train_point)\n            if len(heap) < k:\n                heapq.heappush(heap, (-dist, y_train[i]))\n            else:\n                heapq.heappushpop(heap, (-dist, y_train[i]))\n        nearest_labels = [label for _, label in heap]\n        most_common = Counter(nearest_labels).most_common()\n        predictions.append(min([label for label, count in most_common if count == most_common[0][1]]))\n    return predictions\n\nclass KDTree:\n    def __init__(self, points, labels, depth=0):\n        self.axis = depth % points.shape[1]\n        sorted_indices = np.argsort(points[:, self.axis])\n        points = points[sorted_indices]\n        labels = labels[sorted_indices]\n        median_index = len(points) // 2\n        self.location = points[median_index]\n        self.label = labels[median_index]\n        self.left = KDTree(points[:median_index], labels[:median_index], depth + 1) if median_index > 0 else None\n        self.right = KDTree(points[median_index + 1:], labels[median_index + 1:], depth + 1) if median_index < len(points) - 1 else None\n\n    def query(self, point, k, heap):\n        dist = euclidean_distance(point, self.location)\n        if len(heap) < k:\n            heapq.heappush(heap, (-dist, self.label))\n        else:\n            heapq.heappushpop(heap, (-dist, self.label))\n        \n        axis_dist = point[self.axis] - self.location[self.axis]\n        first, second = (self.left, self.right) if axis_dist < 0 else (self.right, self.left)\n        \n        if first is not None:\n            first.query(point, k, heap)\n        \n        if second is not None and abs(axis_dist) < -heap[0][0]:\n            second.query(point, k, heap)\n\ndef kdtree_search(X_train, y_train, X_query, k):\n    tree = KDTree(np.array(X_train), np.array(y_train))\n    predictions = []\n    for query in X_query:\n        heap = []\n        tree.query(query, k, heap)\n        nearest_labels = [label for _, label in heap]\n        most_common = Counter(nearest_labels).most_common()\n        predictions.append(min([label for label, count in most_common if count == most_common[0][1]]))\n    return predictions\n\ndef knn_classifier(X_train, y_train, X_query, k, method=\"naive\"):\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_query = np.array(X_query)\n    \n    if method == \"naive\":\n        return naive_search(X_train, y_train, X_query, k)\n    elif method == \"heap\":\n        return heap_search(X_train, y_train, X_query, k)\n    elif method == \"kdtree\":\n        return kdtree_search(X_train, y_train, X_query, k)\n    else:\n        raise ValueError(\"Invalid method. Choose from 'naive', 'heap', or 'kdtree'.\")\n```\n\n### Explanation:\n1. **Naive Search**: Computes the distance from each query point to all training points and selects the k closest ones.\n2. **Heap Search**: Uses a max-heap to keep track of the k closest points efficiently.\n3. **KD-Tree Search**: Constructs a KD-Tree for efficient nearest neighbor search, recursively querying the tree to find the k closest points.\n\nThis implementation uses NumPy for efficient numerical operations and the Python standard library for data structures like heaps."}
{"task_id": 456, "completion_id": 0, "completion": "To solve this task, we need to implement a function that calculates the covariance matrix from scratch. The function should handle both the covariance of a single dataset and the cross-covariance between two datasets. Let's break down the steps required to achieve this:\n\n1. **Input Validation**: \n   - Check if the number of rows in `X` is less than 2. If so, return `-1`.\n   - If `Y` is provided, ensure it has the same number of rows as `X`. If not, return `-1`.\n\n2. **Mean Calculation**:\n   - Compute the mean of each column for both `X` and `Y` (if `Y` is provided).\n\n3. **Centering the Data**:\n   - Subtract the mean of each column from the respective column values in `X` and `Y`.\n\n4. **Covariance Calculation**:\n   - If `Y` is `None`, compute the covariance matrix of `X` with itself.\n   - If `Y` is provided, compute the cross-covariance matrix between `X` and `Y`.\n\n5. **Rounding and Conversion**:\n   - Round the resulting covariance matrix to 4 decimal places.\n   - Convert the matrix to a list of lists using NumPy's `tolist()` method.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 n_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]]\n        The covariance matrix rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # Check validity of input\n    n_samples, n_features = X.shape\n    if n_samples < 2:\n        return -1\n    if Y is not None and Y.shape[0] != n_samples:\n        return -1\n    \n    # Center the data\n    X_mean = np.mean(X, axis=0)\n    X_centered = X - X_mean\n    \n    if Y is None:\n        Y_centered = X_centered\n    else:\n        Y_mean = np.mean(Y, axis=0)\n        Y_centered = Y - Y_mean\n    \n    # Calculate the covariance matrix\n    covariance_matrix = (X_centered.T @ Y_centered) / (n_samples - 1)\n    \n    # Round to 4 decimal places and convert to list of lists\n    return np.round(covariance_matrix, 4).tolist()\n```\n\n### Explanation:\n- **Input Validation**: We first check if the input matrices meet the required conditions. If not, we return `-1`.\n- **Centering**: We subtract the mean of each column from the data to center it around zero.\n- **Covariance Calculation**: We use the formula for the sample covariance matrix, which involves matrix multiplication of the transposed centered matrix of `X` with the centered matrix of `Y`, divided by `n-1`.\n- **Rounding and Conversion**: Finally, we round the matrix to 4 decimal places and convert it to a list of lists for the output."}
{"task_id": 457, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    # Validate alpha\n    if not (0 <= alpha <= 1):\n        return -1\n    \n    # Convert weights to a NumPy array for vectorized operations\n    weights = np.array(weights)\n    \n    # Compute the L2 penalty component\n    l2_penalty = 0.5 * alpha * np.sum(weights ** 2)\n    \n    # Compute the L1 penalty component\n    l1_penalty = (1 - alpha) * np.sum(np.abs(weights))\n    \n    # Calculate the total penalty\n    total_penalty = l2_penalty + l1_penalty\n    \n    # Round the result to 4 decimal places\n    return round(total_penalty, 4)\n```\n\nThis function first checks if the `alpha` parameter is within the valid range [0, 1]. If not, it returns -1. It then converts the input `weights` to a NumPy array to facilitate vectorized computation. The function calculates the L2 and L1 components of the penalty separately, combines them according to the Elastic-Net formula, and finally rounds the result to 4 decimal places before returning it."}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Check for negative labels\n    if any(label < 0 for label in labels):\n        return -1\n    \n    # Infer num_classes if not provided\n    inferred_num_classes = max(labels) + 1\n    if num_classes is None:\n        num_classes = inferred_num_classes\n    \n    # Check if num_classes is valid\n    if num_classes < inferred_num_classes:\n        return -1\n    \n    # Create the one-hot encoded matrix\n    one_hot_matrix = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot_matrix.append(row)\n    \n    return one_hot_matrix\n```\n\n### Explanation:\n1. **Negative Label Check**: The function first checks if any label is negative. If so, it returns `-1` as per the requirements.\n\n2. **Inferring `num_classes`**: If `num_classes` is not provided, it is inferred as `max(labels) + 1`.\n\n3. **Validation of `num_classes`**: If the provided `num_classes` is smaller than the inferred number of classes, the function returns `-1`.\n\n4. **One-Hot Encoding**: The function constructs a list of lists where each inner list represents a one-hot encoded vector for the corresponding label. Each vector has a length equal to `num_classes`, with a `1` at the index corresponding to the label and `0`s elsewhere.\n\n5. **Return Type**: The function returns a list of lists containing integers, ensuring compliance with the output constraints."}
{"task_id": 459, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (k-NN) classifier using a max-heap for optimization, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport heapq\n\ndef knn_validate_heap(X_train: \"np.ndarray\",\n                      Y_train: \"np.ndarray\",\n                      X_val: \"np.ndarray\",\n                      Y_val: \"np.ndarray\",\n                      k: int) -> tuple[float, list[int]]:\n    \"\"\"Validate a k-NN classifier using a heap-based neighbour selection.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples with shape (n_train, n_features).\n    Y_train : np.ndarray\n        Integer class labels for the training samples.\n    X_val : np.ndarray\n        Validation samples with shape (n_val, n_features).\n    Y_val : np.ndarray\n        True labels for the validation samples.\n    k : int\n        Number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns\n    -------\n    tuple\n        (accuracy, predicted_labels) where accuracy is rounded to 4 decimals\n        and predicted_labels is a list of ints.\n    \"\"\"\n    n_val = X_val.shape[0]\n    predicted_labels = []\n\n    for i in range(n_val):\n        # Create a max-heap for the k smallest distances\n        heap = []\n        \n        for j in range(X_train.shape[0]):\n            # Compute the Euclidean distance\n            distance = np.linalg.norm(X_val[i] - X_train[j])\n            # Use negative distance to simulate a max-heap with heapq (which is a min-heap)\n            heapq.heappush(heap, (-distance, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n        \n        # Extract the indices of the k nearest neighbours\n        nearest_indices = [index for _, index in heap]\n        # Get the labels of the k nearest neighbours\n        nearest_labels = Y_train[nearest_indices]\n        # Perform a majority vote\n        vote_counts = np.bincount(nearest_labels)\n        predicted_label = np.argmax(vote_counts)\n        predicted_labels.append(predicted_label)\n\n    # Calculate accuracy\n    correct_predictions = np.sum(np.array(predicted_labels) == Y_val)\n    accuracy = correct_predictions / n_val\n    accuracy = round(accuracy, 4)\n\n    return accuracy, predicted_labels\n```\n\n### Explanation:\n\n1. **Distance Calculation**: For each validation sample, compute the Euclidean distance to each training sample using `np.linalg.norm`.\n\n2. **Max-Heap Maintenance**: Use a max-heap to keep track of the k smallest distances. Since `heapq` is a min-heap by default, we store negative distances to simulate a max-heap.\n\n3. **Majority Vote**: Extract the indices of the k nearest neighbors from the heap, retrieve their labels, and use `np.bincount` followed by `np.argmax` to determine the most frequent label.\n\n4. **Accuracy Calculation**: Compare the predicted labels with the true labels and compute the accuracy, rounding it to four decimal places.\n\nThis implementation efficiently handles the k-NN classification using heap optimization, ensuring that only the k closest neighbors are considered for each validation sample."}
{"task_id": 460, "completion_id": 0, "completion": "To solve the task of computing the Pearson correlation matrix between two data matrices \\(X\\) and \\(Y\\), we need to follow these steps:\n\n1. **Calculate the mean** of each column in both matrices.\n2. **Compute the covariance** between each pair of columns from \\(X\\) and \\(Y\\).\n3. **Calculate the standard deviation** for each column in both matrices.\n4. **Compute the correlation coefficient** using the formula provided.\n5. **Handle edge cases** where any column has a zero standard deviation, returning `-1` in such cases.\n6. **Round the results** to four decimal places and return them as a list of lists.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list | int:\n    \"\"\"Compute the Pearson correlation matrix between the columns of *X* and *Y*.\n\n    The function falls back to \u03c1(X, X) when *Y* is omitted. Zero standard\n    deviation in any column leads to an undefined correlation; the function\n    must then return `-1`.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four\n        decimals, or `-1` if the computation is not possible.\n    \"\"\"\n    if Y is None:\n        Y = X\n    \n    n, p = X.shape\n    _, q = Y.shape\n    \n    # Calculate means\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n    \n    # Calculate standard deviations\n    std_X = np.sqrt(np.mean((X - mean_X) ** 2, axis=0))\n    std_Y = np.sqrt(np.mean((Y - mean_Y) ** 2, axis=0))\n    \n    # Check for zero standard deviation\n    if np.any(std_X == 0) or np.any(std_Y == 0):\n        return -1\n    \n    # Calculate covariance and correlation matrix\n    correlation_matrix = []\n    for i in range(p):\n        row = []\n        for j in range(q):\n            covariance = np.mean((X[:, i] - mean_X[i]) * (Y[:, j] - mean_Y[j]))\n            correlation = covariance / (std_X[i] * std_Y[j])\n            row.append(round(correlation, 4))\n        correlation_matrix.append(row)\n    \n    return correlation_matrix\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# Y = np.array([[7, 8], [9, 10], [11, 12]])\n# print(calculate_correlation_matrix(X, Y))\n```\n\n### Explanation:\n- **Mean Calculation**: We compute the mean of each column using `np.mean`.\n- **Standard Deviation Calculation**: We use the formula for population standard deviation, which involves dividing by \\(n\\) (the number of samples).\n- **Covariance Calculation**: We compute the covariance using the formula provided, which involves the mean-centered product of the columns.\n- **Correlation Calculation**: The correlation coefficient is computed using the covariance divided by the product of standard deviations.\n- **Edge Case Handling**: If any column has a zero standard deviation, the function returns `-1` as the correlation is undefined.\n- **Rounding**: Each correlation coefficient is rounded to four decimal places before being added to the result list.\n\nThis implementation ensures that the correlation matrix is computed correctly and handles edge cases as specified."}
{"task_id": 461, "completion_id": 0, "completion": "To implement a gradient boosting regressor using decision stumps for one-dimensional regression data, we need to follow the algorithm described in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction is the mean of the targets\n    y_pred = np.full_like(y, np.mean(y), dtype=np.float64)\n    \n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # If all residuals are zero, stop early\n        if np.all(residuals == 0):\n            break\n        \n        # Find the best split\n        unique_x = np.unique(x)\n        best_sse = float('inf')\n        best_split = None\n        best_vL = best_vR = 0\n        \n        for t in unique_x[:-1]:  # Exclude the greatest value\n            left_mask = x <= t\n            right_mask = x > t\n            \n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            \n            vL = np.mean(residuals[left_mask])\n            vR = np.mean(residuals[right_mask])\n            \n            sse = np.sum((residuals[left_mask] - vL) ** 2) + np.sum((residuals[right_mask] - vR) ** 2)\n            \n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                best_vL = vL\n                best_vR = vR\n        \n        # If no valid split was found, use the mean residual\n        if best_split is None:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n        else:\n            # Update predictions based on the best split\n            y_pred += learning_rate * np.where(x <= best_split, best_vL, best_vR)\n    \n    return np.round(y_pred, 4).tolist()\n```\n\n### Explanation:\n\n1. **Initialization**: Start with predictions as the mean of the target values.\n\n2. **Iterative Boosting**:\n   - Compute residuals as the difference between actual and predicted values.\n   - For each unique value in `x` (except the greatest), consider it as a potential split point.\n   - Calculate the sum of squared errors (SSE) for each split and choose the one with the smallest SSE.\n   - If no valid split is found, use the mean of the residuals for the entire dataset.\n\n3. **Update Predictions**: Adjust the predictions using the learning rate and the best split found.\n\n4. **Return**: The final predictions are rounded to four decimal places.\n\nThis implementation follows the gradient boosting algorithm using decision stumps, handling special cases as described."}
{"task_id": 462, "completion_id": 0, "completion": "To implement the sinusoidal cepstral lifter, we need to apply the lifter function to each column of the MFCC matrix. The lifter function is defined as:\n\n\\[ \\text{lifter}(n) = 1 + \\frac{D}{2} \\sin\\left(\\frac{\\pi n}{D}\\right) \\]\n\nThis function is applied element-wise to each column of the MFCC matrix. If \\( D \\) is 0 or 1, the function should return the input matrix unchanged. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter. A value of 0 (or 1) should\n            return the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    # If D is 0 or 1, return the input unchanged\n    if D == 0 or D == 1:\n        return mfccs\n    \n    # Get the number of coefficients (C)\n    C = mfccs.shape[1]\n    \n    # Create the lifter array\n    n = np.arange(C)\n    lifter = 1 + (D / 2) * np.sin(np.pi * n / D)\n    \n    # Apply the lifter to each column of the MFCC matrix\n    liftered_mfccs = mfccs * lifter\n    \n    return liftered_mfccs\n```\n\n### Explanation:\n1. **Input Check**: The function first checks if \\( D \\) is 0 or 1. If so, it returns the input matrix unchanged, as the lifter function would not alter the coefficients in these cases.\n\n2. **Lifter Calculation**: The lifter values are calculated using the formula provided. We use `np.arange(C)` to generate an array of indices from 0 to \\( C-1 \\).\n\n3. **Element-wise Multiplication**: The lifter array is multiplied element-wise with the MFCC matrix. This operation is efficiently handled by NumPy, which broadcasts the lifter array across each row of the MFCC matrix.\n\n4. **Return**: The function returns the modified MFCC matrix, which has the same shape and dtype as the input matrix."}
{"task_id": 463, "completion_id": 0, "completion": "To implement the function `compute_ball_radius`, we need to calculate the Euclidean distance between the centroid and each point in the data matrix `X`. The Euclidean distance between two points in n-dimensional space is given by:\n\n\\[ \\text{distance} = \\sqrt{\\sum_{i=1}^{n} (p_i - q_i)^2} \\]\n\nwhere \\( p_i \\) and \\( q_i \\) are the coordinates of the two points.\n\nThe function will iterate over each point in `X`, compute the distance to the centroid, and keep track of the maximum distance found. If `X` is empty, the function will return `0.0`.\n\nHere's the implementation:\n\n```python\nimport math\n\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n    \"\"\"Compute the maximum Euclidean distance between *centroid* and the\n    points in *X* (i.e., the Ball-tree node radius), rounded to 4 decimals.\n    \"\"\"\n    if not X:\n        return 0.0\n    \n    max_distance = 0.0\n    \n    for point in X:\n        # Calculate the Euclidean distance between the centroid and the current point\n        distance = math.sqrt(sum((c - p) ** 2 for c, p in zip(centroid, point)))\n        # Update max_distance if the current distance is greater\n        max_distance = max(max_distance, distance)\n    \n    # Return the maximum distance rounded to 4 decimal places\n    return round(max_distance, 4)\n\n# Example usage:\ncentroid = [1.0, 2.0, 3.0]\nX = [[4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [1.0, 2.0, 3.0]]\nprint(compute_ball_radius(centroid, X))  # Output should be the maximum distance rounded to 4 decimals\n```\n\nThis function efficiently computes the radius of a Ball-tree node by iterating through each point in `X`, calculating the Euclidean distance to the centroid, and keeping track of the largest distance found. The result is rounded to four decimal places as required."}
{"task_id": 464, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (k-NN) validation helper, we need to calculate the Euclidean distance between each validation sample and all training samples, find the k closest training samples, and determine the majority label among them. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef knn_validate(X_train: np.ndarray,\n                 Y_train: np.ndarray,\n                 X_val: np.ndarray,\n                 Y_val: np.ndarray,\n                 k: int) -> tuple[float, list[int]]:\n    \"\"\"k-Nearest Neighbours (k-NN) validation helper.\n\n    The function must predict the label of every sample in *X_val* using the\n    k nearest neighbours found in *X_train*. It then compares the predictions\n    with *Y_val* and returns the classification accuracy (rounded to 4 decimal\n    places) together with the list of all predicted labels.\n\n    Args:\n        X_train: NumPy array of shape (n_train, n_features) containing the\n            training feature vectors.\n        Y_train: 1-D NumPy array with the corresponding integer class labels.\n        X_val: NumPy array of shape (n_val, n_features) with validation\n            samples.\n        Y_val: 1-D NumPy array with the true class labels for *X_val*.\n        k: The number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A tuple (accuracy, predictions) where\n          \u2022 accuracy is the fraction of correctly classified validation\n            samples, rounded to 4 decimals.\n          \u2022 predictions is a list containing the predicted integer labels for\n            each sample in *X_val*.\n    \"\"\"\n    predictions = []\n    \n    for val_sample in X_val:\n        # Calculate Euclidean distances from the validation sample to all training samples\n        distances = np.linalg.norm(X_train - val_sample, axis=1)\n        \n        # Get the indices of the k nearest neighbours\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbours\n        nearest_labels = Y_train[nearest_indices]\n        \n        # Determine the majority label (using bincount and argmax)\n        majority_label = np.argmax(np.bincount(nearest_labels))\n        \n        # Append the predicted label to the predictions list\n        predictions.append(majority_label)\n    \n    # Calculate accuracy\n    correct_predictions = np.sum(np.array(predictions) == Y_val)\n    accuracy = correct_predictions / len(Y_val)\n    \n    # Round accuracy to 4 decimal places\n    accuracy = round(accuracy, 4)\n    \n    return accuracy, predictions\n\n# Example usage\nX_train = np.array([[0, 0], [1, 1], [0, 1], [1, 0]])\nY_train = np.array([0, 0, 1, 1])\nX_val = np.array([[0.9, 0.9], [0.2, 0.8]])\nY_val = np.array([1, 0])\n\naccuracy, predictions = knn_validate(X_train, Y_train, X_val, Y_val, k=3)\nprint(f\"Accuracy: {accuracy}\")\nprint(f\"Predictions: {predictions}\")\n```\n\nThis code defines the `knn_validate` function, which calculates the Euclidean distance between each validation sample and all training samples, finds the k nearest neighbors, and determines the majority label among them. It then calculates the accuracy of the predictions and returns both the accuracy and the list of predicted labels."}
{"task_id": 465, "completion_id": 0, "completion": "To implement the Gaussian RBF kernel function, we need to create a higher-order function `rbf_kernel` that returns another function `f`. This function `f` will compute the RBF similarity between two vectors using the formula provided. Let's write the code:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                   (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n    \"\"\"\n    def f(x1, x2):\n        # Convert inputs to numpy arrays if they are not already\n        x1 = np.array(x1)\n        x2 = np.array(x2)\n        \n        # Compute the Euclidean norm squared\n        norm_squared = np.sum((x1 - x2) ** 2)\n        \n        # Compute the RBF similarity\n        similarity = np.exp(-gamma * norm_squared)\n        \n        # Round the result to four decimal places\n        return round(similarity, 4)\n    \n    return f\n\n# Example usage:\n# gamma = 0.5\n# kernel_function = rbf_kernel(gamma)\n# similarity = kernel_function([1, 2, 3], [4, 5, 6])\n# print(similarity)\n```\n\n### Explanation:\n1. **Input Conversion**: We ensure that `x1` and `x2` are NumPy arrays to facilitate vectorized operations.\n2. **Euclidean Norm Squared**: We compute the squared Euclidean norm using `np.sum((x1 - x2) ** 2)`.\n3. **RBF Similarity**: The similarity is calculated using the formula `exp(-gamma * ||x1 - x2||\u00b2)`.\n4. **Rounding**: The result is rounded to four decimal places using Python's built-in `round` function.\n5. **Return Function**: The function `f` is returned, which can be used to compute the RBF similarity between any two vectors.\n\nThis implementation ensures that the kernel function behaves correctly even when `gamma` is zero, as the exponent becomes zero, resulting in a similarity of 1."}
{"task_id": 466, "completion_id": 0, "completion": "To implement the `strip_punctuation` function, we will use the translation table `_PUNC_TABLE` to remove punctuation characters efficiently. After removing punctuation, we'll use the `strip()` method to remove any leading and trailing whitespace. Here's the complete implementation:\n\n```python\nimport string\n\n# Build the translation table once so it can be reused efficiently by every\n# call to ``strip_punctuation``.\n_PUNC_TABLE: dict[int, None] = str.maketrans('', '', string.punctuation)\n\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    # Remove punctuation using the translation table\n    no_punctuation = line.translate(_PUNC_TABLE)\n    \n    # Strip leading and trailing whitespace\n    stripped_line = no_punctuation.strip()\n    \n    return stripped_line\n\n# Example usage:\nprint(strip_punctuation(\"  Hello, World!  \"))  # Output: \"Hello World\"\nprint(strip_punctuation(\"!!!\"))                # Output: \"\"\nprint(strip_punctuation(\"   \"))                # Output: \"\"\n```\n\n### Explanation:\n1. **Translation Table**: `_PUNC_TABLE` is created using `str.maketrans('', '', string.punctuation)`, which maps all punctuation characters to `None`, effectively removing them when used with `translate()`.\n\n2. **Removing Punctuation**: `line.translate(_PUNC_TABLE)` removes all punctuation characters from the input string.\n\n3. **Stripping Whitespace**: `strip()` is used to remove any leading and trailing whitespace from the resulting string.\n\n4. **Edge Cases**: If the input string contains only punctuation and/or whitespace, the function will return an empty string after processing."}
{"task_id": 467, "completion_id": 0, "completion": "To implement the L1 and L2 regularization functions as described, we need to calculate both the penalty and the gradient for a given list of weights. Let's go through the implementation step-by-step:\n\n1. **L1 Regularization**:\n   - **Penalty**: Sum of the absolute values of the weights multiplied by the regularization strength `C`.\n   - **Gradient**: The sign of each weight multiplied by `C`.\n\n2. **L2 Regularization**:\n   - **Penalty**: Half of the sum of the squares of the weights multiplied by `C`.\n   - **Gradient**: Each weight multiplied by `C`.\n\n3. **Unsupported Norm**: Return `-1` if the norm is not \"l1\" or \"l2\".\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef regularization(weights: list[float | int], C: float = 0.01, norm: str = \"l2\") -> tuple[float, list[float]]:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    if norm == \"l1\":\n        penalty = C * sum(abs(w) for w in weights)\n        gradient = [C * np.sign(w) for w in weights]\n    elif norm == \"l2\":\n        penalty = 0.5 * C * sum(w**2 for w in weights)\n        gradient = [C * w for w in weights]\n    else:\n        return -1\n    \n    # Round the penalty and gradient to 4 decimal places\n    penalty = round(penalty, 4)\n    gradient = [round(g, 4) for g in gradient]\n    \n    return penalty, gradient\n\n# Example usage:\nweights = [0.5, -1.5, 2.0, -0.3]\nC = 0.01\nprint(regularization(weights, C, \"l1\"))  # L1 regularization\nprint(regularization(weights, C, \"l2\"))  # L2 regularization\n```\n\n### Explanation:\n- **Penalty Calculation**: For L1, we use the absolute value of each weight, and for L2, we use the square of each weight.\n- **Gradient Calculation**: For L1, we use the sign function, and for L2, we directly use the weight value.\n- **Rounding**: Both the penalty and each element of the gradient are rounded to 4 decimal places using Python's `round()` function.\n- **Unsupported Norm**: If the norm is not \"l1\" or \"l2\", the function returns `-1`."}
{"task_id": 468, "completion_id": 0, "completion": "To implement binary logistic regression from scratch using NumPy and gradient descent, we need to follow the steps outlined in your task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        num_iters: int = 10000) -> list[int]:\n    \"\"\"Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:      Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length *k* holding the predicted class (0 or 1) for every\n        test sample, in order.\n    \"\"\"\n    # Ensure y_train is a column vector\n    if y_train.ndim == 1:\n        y_train = y_train.reshape(-1, 1)\n    \n    # Get the number of samples and features\n    m, n = X_train.shape\n    \n    # Append a column of ones to X_train for the bias term\n    X_train_bias = np.hstack((np.ones((m, 1)), X_train))\n    \n    # Initialize weights (including bias) to zeros\n    W = np.zeros((n + 1, 1))\n    \n    # Gradient descent\n    for _ in range(num_iters):\n        # Compute the linear combination\n        z = np.dot(X_train_bias, W)\n        \n        # Apply the sigmoid function\n        h = 1 / (1 + np.exp(-z))\n        \n        # Compute the gradient\n        dW = np.dot(X_train_bias.T, (h - y_train)) / m\n        \n        # Update the weights\n        W -= learning_rate * dW\n    \n    # Prepare X_test by appending a column of ones\n    k = X_test.shape[0]\n    X_test_bias = np.hstack((np.ones((k, 1)), X_test))\n    \n    # Compute probabilities for X_test\n    z_test = np.dot(X_test_bias, W)\n    probabilities = 1 / (1 + np.exp(-z_test))\n    \n    # Convert probabilities to class labels\n    predictions = (probabilities >= 0.5).astype(int).flatten()\n    \n    # Return predictions as a list\n    return predictions.tolist()\n```\n\n### Explanation:\n\n1. **Data Preparation**: \n   - Ensure `y_train` is a column vector.\n   - Append a column of ones to `X_train` and `X_test` to account for the bias term.\n\n2. **Initialization**:\n   - Initialize the weights (including the bias) to zeros.\n\n3. **Gradient Descent**:\n   - For each iteration, compute the linear combination `z` using the current weights.\n   - Apply the sigmoid function to get the predicted probabilities `h`.\n   - Compute the gradient `dW` using the difference between predictions `h` and actual labels `y_train`.\n   - Update the weights using the gradient and learning rate.\n\n4. **Prediction**:\n   - Compute the probabilities for `X_test` using the learned weights.\n   - Convert probabilities to class labels based on the threshold of 0.5.\n\n5. **Return**:\n   - Return the predictions as a list of integers (0 or 1).\n\nThis implementation follows the task requirements closely, using NumPy for efficient matrix operations and ensuring the model is trained using gradient descent."}
{"task_id": 469, "completion_id": 0, "completion": "To implement the `linear_kernel` factory function as described, we need to create a function that returns another function capable of computing the dot product of two vectors. The inner function should handle input validation, including converting inputs to NumPy arrays and checking their lengths. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef linear_kernel(**kwargs):\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return \u20111.\n    \"\"\"\n    def f(x1, x2):\n        # Convert inputs to numpy arrays of float type\n        x1 = np.asarray(x1, dtype=float)\n        x2 = np.asarray(x2, dtype=float)\n        \n        # Check if the vectors have the same length\n        if x1.shape != x2.shape:\n            return -1\n        \n        # Compute and return the dot product as a Python float\n        return float(np.inner(x1, x2))\n    \n    return f\n```\n\n### Explanation:\n\n1. **Function Signature**: The `linear_kernel` function accepts any keyword arguments (`**kwargs`) but does not use them. This is to maintain compatibility with other kernel functions that might require parameters.\n\n2. **Inner Function `f`**:\n   - **Input Conversion**: The inputs `x1` and `x2` are converted to NumPy arrays of type `float` using `np.asarray`. This ensures that the inputs are in a consistent format for computation.\n   - **Length Check**: Before computing the dot product, the function checks if the two vectors have the same shape. If not, it returns `-1` immediately.\n   - **Dot Product Calculation**: If the vectors are of the same length, the dot product is computed using `np.inner`, and the result is converted to a Python `float` before returning.\n\nThis implementation ensures that the function behaves as specified, handling input validation and returning the correct types."}
{"task_id": 470, "completion_id": 0, "completion": "To implement the `get_scriptdir` function, we need to resolve the given path to its canonical form, which involves resolving symbolic links and normalizing the path by removing any redundant segments like `..` or `.`. We can achieve this using the `os` module's functions. Here's the complete implementation:\n\n```python\nimport os\n\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                    relative and may contain symlinks or redundant path\n                    elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    # Resolve the path to its canonical form\n    canonical_path = os.path.realpath(file_path)\n    \n    # Get the directory name of the canonical path\n    directory = os.path.dirname(canonical_path)\n    \n    return directory\n\n# Example usage:\n# print(get_scriptdir('/path/to/some/file.txt'))\n# print(get_scriptdir('/path/to/some/directory/'))\n```\n\n### Explanation:\n\n1. **`os.path.realpath(file_path)`**: This function resolves the given path to its absolute canonical form. It handles symbolic links and normalizes the path by removing any `..` or `.` segments.\n\n2. **`os.path.dirname(canonical_path)`**: This function extracts the directory part of the canonical path. It effectively returns the parent directory of the file specified in the path.\n\n3. **Return Value**: The function returns the absolute path to the directory containing the file, ensuring no trailing separator unless the directory is the root directory.\n\nThis implementation adheres to the constraints and requirements specified in the task description."}
{"task_id": 471, "completion_id": 0, "completion": "To implement the Expected SARSA TD(0) Q-Table update, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Calculate the expected value of Q for the next state\n        max_action_value = max(q_table[next_state])\n        greedy_actions = [a for a, q in enumerate(q_table[next_state]) if q == max_action_value]\n        greedy_action = greedy_actions[0]  # Resolve ties by taking the first greedy action\n        \n        expected_q = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_q += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_q += (epsilon / num_actions) * q_table[next_state][a]\n        \n        target = reward + gamma * expected_q\n    else:\n        # Terminal state\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round the Q-table to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```\n\n### Explanation:\n\n1. **Determine the Number of Actions**: We first determine the number of actions by checking the length of a row in the Q-table.\n\n2. **Expected Q Calculation**: If the next state is not terminal (`next_state` is not `None`), we calculate the expected Q value for the next state using the \u03b5-soft policy. We identify the greedy action(s) and compute the expected value based on the policy probabilities.\n\n3. **Target Calculation**: The target is calculated using the immediate reward and the expected Q value for the next state, discounted by `gamma`.\n\n4. **Q-Table Update**: We update the Q-value for the given state-action pair using the learning rate `lr`.\n\n5. **Rounding**: Finally, we round each entry in the Q-table to four decimal places before returning it.\n\nThis implementation follows the Expected SARSA algorithm as described, ensuring that the Q-table is updated correctly and returned with the specified precision."}
{"task_id": 472, "completion_id": 0, "completion": "To implement the numerically stable softmax function along with its gradient, we need to handle both one-dimensional and two-dimensional inputs. The softmax function will be applied along the last axis, which means for a two-dimensional input, it will be applied row-wise. The gradient of the softmax function is calculated for each element as specified.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef softmax(x: list | list[list]):\n    \"\"\"Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(probabilities, gradient)`` where both elements keep the same\n        shape as *x* and are rounded to 4 decimal places.\n    \"\"\"\n    def softmax_1d(arr):\n        max_val = max(arr)\n        exps = [np.exp(i - max_val) for i in arr]\n        sum_exps = sum(exps)\n        softmax_probs = [exp_i / sum_exps for exp_i in exps]\n        return softmax_probs\n\n    def gradient_1d(softmax_probs):\n        return [p * (1 - p) for p in softmax_probs]\n\n    if isinstance(x[0], list):  # Check if x is two-dimensional\n        probabilities = []\n        gradients = []\n        for row in x:\n            softmax_probs = softmax_1d(row)\n            grad = gradient_1d(softmax_probs)\n            probabilities.append([round(p, 4) for p in softmax_probs])\n            gradients.append([round(g, 4) for g in grad])\n    else:  # x is one-dimensional\n        softmax_probs = softmax_1d(x)\n        grad = gradient_1d(softmax_probs)\n        probabilities = [round(p, 4) for p in softmax_probs]\n        gradients = [round(g, 4) for g in grad]\n\n    return probabilities, gradients\n\n# Example usage:\nx_1d = [2.0, 1.0, 0.1]\nx_2d = [[2.0, 1.0, 0.1], [1.0, 2.0, 3.0]]\n\nprint(softmax(x_1d))\nprint(softmax(x_2d))\n```\n\n### Explanation:\n\n1. **Numerically Stable Softmax**:\n   - For each input (either a single list or each row of a nested list), we subtract the maximum value from each element before computing the exponential. This prevents overflow in the exponential calculation.\n   - We then compute the softmax probabilities by dividing each exponential by the sum of all exponentials.\n\n2. **Gradient Calculation**:\n   - The gradient for each element is calculated using the formula `grad_i = softmax(x_i) * (1 - softmax(x_i))`.\n\n3. **Handling Different Input Dimensions**:\n   - The function checks if the input is one-dimensional or two-dimensional and processes accordingly.\n   - For two-dimensional inputs, the softmax and gradient calculations are applied row-wise.\n\n4. **Rounding**:\n   - The results are rounded to four decimal places as required and returned as plain Python lists."}
{"task_id": 474, "completion_id": 0, "completion": "To implement the `generate_data` function, we need to address the issues mentioned in the task description and ensure the function is reusable and generates labels correctly for both training and validation sets. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    X_val = []\n    Y_train = []\n    Y_val = []\n\n    for i in range(m):\n        # Calculate the range for x and y based on the class index `i`\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n        \n        # Generate training samples\n        for _ in range(n_train):\n            x = random.uniform(x_min, x_max)\n            y = random.uniform(y_min, y_max)\n            X_train.append([round(x, 4), round(y, 4)])\n            Y_train.append((i - 0.5) * 2)\n        \n        # Generate validation samples\n        for _ in range(n_val):\n            x = random.uniform(x_min, x_max)\n            y = random.uniform(y_min, y_max)\n            X_val.append([round(x, 4), round(y, 4)])\n            Y_val.append((i - 0.5) * 2)\n\n    # Convert lists to NumPy arrays\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\n### Explanation:\n1. **Random Seed**: If a seed is provided, we set it using `random.seed(seed)` to ensure reproducibility.\n2. **Data Generation**: For each class index `i`, we calculate the range for `x` and `y` coordinates based on the given formulas. We then generate random samples within these ranges for both training and validation sets.\n3. **Labels**: The label for each class is calculated using `(i - 0.5) * 2`, which results in `-1` for the first class and `+1` for the second class.\n4. **Rounding**: Each coordinate is rounded to four decimal places using `round(x, 4)` and `round(y, 4)`.\n5. **Return**: The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`.\n\nThis implementation ensures the function is reusable, generates labels correctly for both training and validation sets, and adheres to the output constraints."}
{"task_id": 475, "completion_id": 0, "completion": "To implement the Adam optimizer's single-step update, we need to follow the formulae provided for updating the moments and the parameters. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zeros if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    # Update biased first moment estimate\n    m_new = b1 * m_prev + (1 - b1) * grad\n\n    # Update biased second raw moment estimate\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n\n    # Compute bias-corrected first moment estimate\n    m_hat = m_new / (1 - b1**t)\n\n    # Compute bias-corrected second raw moment estimate\n    v_hat = v_new / (1 - b2**t)\n\n    # Update parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_new, v_new\n```\n\n### Explanation:\n1. **Initialization**: If `m_prev` or `v_prev` is `None`, we initialize them to arrays of zeros with the same shape as `grad`.\n\n2. **Moment Updates**:\n   - `m_new` is the updated first moment, calculated using the exponential decay rate `b1`.\n   - `v_new` is the updated second moment, calculated using the exponential decay rate `b2`.\n\n3. **Bias Correction**:\n   - `m_hat` is the bias-corrected first moment.\n   - `v_hat` is the bias-corrected second moment.\n\n4. **Parameter Update**:\n   - `w_new` is the updated parameter, calculated using the learning rate, bias-corrected moments, and a small constant `eps` for numerical stability.\n\nThis implementation works for both scalars and NumPy arrays, ensuring the shapes are preserved and the calculations are accurate to at least 1 \u00d7 10\u207b\u2078."}
{"task_id": 477, "completion_id": 0, "completion": "To implement the A* search algorithm on a 2-D grid, we need to maintain a priority queue to explore the most promising nodes first, based on the A* priority function \\( f = g + h \\). Here's the complete implementation:\n\n```python\nimport heapq\nfrom typing import List, Tuple\n\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest:  (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or \u20111 if the destination is unreachable.\n    \"\"\"\n    # Directions for moving up, down, left, right\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Heuristic function: Manhattan distance\n    def heuristic(r, c):\n        return abs(r - dest[0]) + abs(c - dest[1])\n    \n    # Priority queue for A* search\n    open_set = []\n    heapq.heappush(open_set, (0 + heuristic(start[0], start[1]), 0, start))\n    \n    # Set to keep track of visited nodes\n    visited = set()\n    \n    while open_set:\n        # Get the node with the lowest f value\n        f, g, current = heapq.heappop(open_set)\n        \n        # If we reach the destination, return the cost\n        if current == dest:\n            return g\n        \n        # If current node is already visited, skip it\n        if current in visited:\n            continue\n        \n        # Mark current node as visited\n        visited.add(current)\n        \n        # Explore neighbors\n        for direction in directions:\n            neighbor = (current[0] + direction[0], current[1] + direction[1])\n            \n            # Check if neighbor is within bounds and is a free cell\n            if (0 <= neighbor[0] < len(grid) and\n                0 <= neighbor[1] < len(grid[0]) and\n                grid[neighbor[0]][neighbor[1]] == 0 and\n                neighbor not in visited):\n                \n                # Calculate new g value and push to priority queue\n                new_g = g + 1\n                heapq.heappush(open_set, (new_g + heuristic(neighbor[0], neighbor[1]), new_g, neighbor))\n    \n    # If we exhaust the search without finding the destination\n    return -1\n```\n\n### Explanation:\n1. **Directions**: We define possible movements (up, down, left, right) using tuples.\n2. **Heuristic Function**: The Manhattan distance is used as the heuristic to estimate the cost from the current node to the destination.\n3. **Priority Queue**: We use a min-heap to store nodes with their f-values, which are calculated as the sum of the actual cost to reach the node (g) and the heuristic estimate (h).\n4. **Visited Set**: This helps in avoiding revisiting nodes, which prevents cycles and redundant calculations.\n5. **Main Loop**: We repeatedly extract the node with the lowest f-value from the priority queue, check if it's the destination, and explore its neighbors if it's not visited.\n6. **Return Value**: If the destination is reached, we return the cost (g). If the queue is exhausted without reaching the destination, we return -1 indicating the destination is unreachable."}
{"task_id": 478, "completion_id": 0, "completion": "To solve the task of calculating the feature-wise population standard deviation, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    # Convert input to a NumPy array of type float\n    X = np.array(X, dtype=float)\n    \n    # Check if the input data set is empty\n    if X.size == 0:\n        return []\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # Calculate the mean of each feature (column)\n    means = np.mean(X, axis=0)\n    \n    # Calculate the variance for each feature\n    variances = np.sum((X - means) ** 2, axis=0) / n_samples\n    \n    # Calculate the standard deviation for each feature\n    std_devs = np.sqrt(variances)\n    \n    # Round each standard deviation to 4 decimal places\n    rounded_std_devs = np.round(std_devs, 4)\n    \n    # Convert the result to a regular Python list\n    return rounded_std_devs.tolist()\n\n# Example usage:\ndata = [\n    [1.0, 2.0, 3.0],\n    [4.0, 5.0, 6.0],\n    [7.0, 8.0, 9.0]\n]\n\nprint(calculate_std_dev(data))  # Output: [2.4495, 2.4495, 2.4495]\n```\n\n### Explanation:\n1. **Conversion to NumPy Array**: The input data is converted to a NumPy array of type `float` to facilitate numerical operations.\n\n2. **Empty Check**: We check if the input data set is empty. If it is, we return an empty list.\n\n3. **Mean Calculation**: We calculate the mean of each feature using `np.mean` with `axis=0` to operate column-wise.\n\n4. **Variance Calculation**: We compute the variance for each feature using the formula provided, iterating over each column.\n\n5. **Standard Deviation Calculation**: We take the square root of the variance to get the standard deviation.\n\n6. **Rounding**: Each standard deviation value is rounded to 4 decimal places using `np.round`.\n\n7. **Return**: The result is converted to a regular Python list using `tolist()` and returned.\n\nThis implementation handles edge cases such as empty datasets and constant features correctly, ensuring robustness and accuracy."}
{"task_id": 479, "completion_id": 0, "completion": "To implement the \u03b5-greedy multi-armed bandit simulation, we need to follow the algorithm described in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    num_arms = len(rewards[0])\n    num_steps = len(rewards)\n    \n    # Initialize estimated values and pull counters\n    estimated_values = [ev_prior] * num_arms\n    pull_counts = [0] * num_arms\n    \n    for t in range(num_steps):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.choice(num_arms)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(estimated_values)\n        \n        # Receive reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n        \n        # Update pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        \n        # Update the estimated value using incremental sample mean\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / pull_counts[chosen_arm]\n    \n    # Round the final estimated values to 4 decimal places\n    return [round(value, 4) for value in estimated_values]\n\n# Example usage:\nrewards = [\n    [0.1, 0.2, 0.3],\n    [0.4, 0.5, 0.6],\n    [0.7, 0.8, 0.9],\n    [0.1, 0.2, 0.3],\n    [0.4, 0.5, 0.6]\n]\nepsilon = 0.1\nev_prior = 0.5\nseed = 42\n\nfinal_estimates = epsilon_greedy_bandit(rewards, epsilon, ev_prior, seed)\nprint(final_estimates)\n```\n\n### Explanation:\n1. **Initialization**: We initialize the estimated values for each arm with `ev_prior` and set the pull counters to zero.\n2. **Simulation Loop**: For each time-step, we decide whether to explore or exploit based on the `epsilon` value. If exploring, we select a random arm; if exploiting, we select the arm with the highest estimated value.\n3. **Reward and Update**: We receive the reward for the chosen arm and update its estimated value using the incremental sample mean formula.\n4. **Return**: After all time-steps, we return the estimated values for each arm, rounded to four decimal places.\n\nThis implementation ensures that the \u03b5-greedy strategy is correctly applied to the multi-armed bandit problem, allowing for both exploration and exploitation based on the given `epsilon` parameter."}
{"task_id": 480, "completion_id": 0, "completion": "To implement the Mel spectrogram generation as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef mel_spectrogram(\n    x: \"np.ndarray\",\n    window_duration: float = 0.025,\n    stride_duration: float = 0.01,\n    mean_normalize: bool = True,\n    window: str = \"hamming\",\n    n_filters: int = 20,\n    center: bool = True,\n    alpha: float = 0.95,\n    fs: int = 44000,\n):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\"\"\"\n    \n    # Step 1: Pre-emphasis\n    x = np.append(x[0], x[1:] - alpha * x[:-1])\n    \n    # Step 2: Frame the signal\n    frame_length = int(round(window_duration * fs))\n    frame_step = int(round(stride_duration * fs))\n    \n    if center:\n        pad_width = frame_length // 2\n        x = np.pad(x, (pad_width, pad_width), mode='reflect')\n    \n    num_frames = 1 + int((len(x) - frame_length) / frame_step)\n    frames = np.lib.stride_tricks.as_strided(\n        x,\n        shape=(num_frames, frame_length),\n        strides=(x.strides[0] * frame_step, x.strides[0])\n    )\n    \n    # Step 3: Apply window function\n    if window == \"hamming\":\n        window_func = np.hamming(frame_length)\n    elif window == \"hann\":\n        window_func = np.hanning(frame_length)\n    elif window == \"blackman_harris\":\n        window_func = np.blackman(frame_length)\n    else:\n        raise ValueError(\"Unsupported window type\")\n    \n    frames *= window_func\n    \n    # Step 4: Power spectrum\n    NFFT = frame_length\n    power_spectrum = np.abs(np.fft.rfft(frames, NFFT))**2 / NFFT\n    \n    # Step 5: Build the Mel filter bank\n    def hz_to_mel(hz):\n        return 2595 * np.log10(1 + hz / 700.0)\n    \n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595.0) - 1)\n    \n    mel_points = np.linspace(hz_to_mel(0), hz_to_mel(fs / 2), n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    bin_points = np.floor((NFFT + 1) * hz_points / fs).astype(int)\n    \n    fbank = np.zeros((n_filters, NFFT // 2 + 1))\n    for i in range(1, n_filters + 1):\n        f_m_minus = bin_points[i - 1]\n        f_m = bin_points[i]\n        f_m_plus = bin_points[i + 1]\n        \n        for j in range(f_m_minus, f_m):\n            fbank[i - 1, j] = (j - bin_points[i - 1]) / (bin_points[i] - bin_points[i - 1])\n        for j in range(f_m, f_m_plus):\n            fbank[i - 1, j] = (bin_points[i + 1] - j) / (bin_points[i + 1] - bin_points[i])\n    \n    # Step 6: Project the power spectra onto the filter bank\n    filter_energies = np.dot(power_spectrum, fbank.T)\n    \n    # Step 7: Mean normalization\n    if mean_normalize:\n        filter_energies -= np.mean(filter_energies, axis=0)\n    \n    # Step 8: Replace zeros with eps\n    filter_energies[filter_energies == 0] = np.finfo(float).eps\n    \n    # Calculate energy per frame\n    energy_per_frame = np.sum(power_spectrum, axis=1)\n    \n    # Round and convert to lists\n    filter_energies = np.round(filter_energies, 4).tolist()\n    energy_per_frame = np.round(energy_per_frame, 4).tolist()\n    \n    return filter_energies, energy_per_frame\n```\n\nThis code follows the steps outlined in the task to compute the Mel spectrogram and energy per frame. It uses NumPy for all operations and ensures that the output is rounded to four decimal places and returned as Python lists."}
{"task_id": 481, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow the steps outlined in the task description. Here's a complete implementation:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    # Helper function to calculate Euclidean distance\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    # Helper function to find neighbors within eps distance\n    def region_query(point_idx):\n        neighbors = []\n        for idx in range(data.shape[0]):\n            if euclidean_distance(data[point_idx], data[idx]) <= eps:\n                neighbors.append(idx)\n        return neighbors\n\n    # Helper function to expand cluster\n    def expand_cluster(point_idx, neighbors, cluster_id):\n        cluster_labels[point_idx] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_idx = neighbors[i]\n            if cluster_labels[neighbor_idx] == -1:  # Previously marked as noise\n                cluster_labels[neighbor_idx] = cluster_id\n            elif cluster_labels[neighbor_idx] == 0:  # Unvisited\n                cluster_labels[neighbor_idx] = cluster_id\n                new_neighbors = region_query(neighbor_idx)\n                if len(new_neighbors) >= min_samples:\n                    neighbors += new_neighbors\n            i += 1\n\n    # Initialize cluster labels\n    cluster_labels = [0] * data.shape[0]  # 0 means unvisited\n    cluster_id = 0\n\n    for point_idx in range(data.shape[0]):\n        if cluster_labels[point_idx] != 0:  # Already visited\n            continue\n\n        neighbors = region_query(point_idx)\n        if len(neighbors) < min_samples:\n            cluster_labels[point_idx] = -1  # Mark as noise\n        else:\n            cluster_id += 1\n            expand_cluster(point_idx, neighbors, cluster_id)\n\n    # Adjust cluster labels to start from 0\n    cluster_labels = [label - 1 if label > 0 else label for label in cluster_labels]\n\n    return cluster_labels\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4], [8, 7], [8, 8], [25, 80]])\neps = 1.5\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n1. **Euclidean Distance Calculation**: We define a helper function `euclidean_distance` to compute the distance between two points.\n\n2. **Region Query**: The `region_query` function finds all points within `eps` distance from a given point.\n\n3. **Cluster Expansion**: The `expand_cluster` function grows a cluster from a core point, marking reachable points as part of the cluster.\n\n4. **Main Loop**: We iterate over each point, checking if it can start a new cluster or should be marked as noise.\n\n5. **Cluster Label Adjustment**: We adjust cluster labels to start from 0, marking noise points as -1.\n\nThis implementation follows the DBSCAN algorithm's logic and adheres to the task's constraints."}
{"task_id": 482, "completion_id": 0, "completion": "To implement the `to_categorical` function for one-hot encoding, we need to ensure that the function correctly handles the input labels and the optional `num_classes` parameter. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    \n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"Labels must be non-negative and less than num_classes.\")\n    \n    # Create a zero matrix of shape (len(y), num_classes)\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot[np.arange(len(y)), y] = 1\n    \n    return one_hot\n```\n\n### Explanation:\n\n1. **Input Conversion**: Convert the input `y` to a NumPy array of integers to ensure consistent processing.\n\n2. **Determine `num_classes`**: If `num_classes` is not provided, calculate it as `max(y) + 1`. This ensures that the number of columns in the output matrix matches the number of unique labels.\n\n3. **Validation**: Check if any label is negative or greater than or equal to `num_classes`. If so, raise a `ValueError`.\n\n4. **Matrix Creation**: Create a zero matrix of shape `(len(y), num_classes)`.\n\n5. **One-Hot Encoding**: Use NumPy's advanced indexing to set the appropriate positions in the matrix to 1, effectively creating the one-hot encoded representation.\n\nThis implementation efficiently handles the conversion of integer labels to one-hot encoded format, ensuring that the output is a 2-D array of integers (0s and 1s)."}
{"task_id": 483, "completion_id": 0, "completion": "To implement the `to_categorical` function, we need to convert each label into a one-hot encoded vector. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    # Convert labels to a numpy array if they aren't already\n    labels = np.array(labels)\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    \n    # Initialize the one-hot encoded list\n    one_hot_encoded = []\n    \n    # Create one-hot vectors for each label\n    for label in labels:\n        # Create a vector of zeros with length num_classes\n        one_hot_vector = [0] * num_classes\n        # Set the index corresponding to the label to 1\n        one_hot_vector[label] = 1\n        # Append the one-hot vector to the list\n        one_hot_encoded.append(one_hot_vector)\n    \n    return one_hot_encoded\n\n# Example usage:\nlabels = [0, 2, 1, 3]\nprint(to_categorical(labels))  # Output: [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]]\n```\n\n### Explanation:\n1. **Input Handling**: The function first ensures that the `labels` are in a numpy array format for easy manipulation.\n2. **Inferring `num_classes`**: If `num_classes` is not provided, it is inferred as `max(labels) + 1`, which ensures that the highest label has a corresponding index in the one-hot vector.\n3. **One-Hot Encoding**: For each label, a vector of zeros is created with a length equal to `num_classes`. The position corresponding to the label is set to 1, creating the one-hot encoded vector.\n4. **Output**: The function returns a list of these one-hot encoded vectors, adhering to the requirement of returning a list of lists containing only 0s and 1s."}
{"task_id": 484, "completion_id": 0, "completion": "To implement the Lasso regression using coordinate descent for polynomial feature expansion, we need to follow these steps:\n\n1. **Expand the Input Data**: Convert the one-dimensional input data into polynomial features up to the specified degree. This includes adding a bias term (a column of ones).\n\n2. **Coordinate Descent for Lasso**: Implement the coordinate descent algorithm to update the weights. For each weight, calculate the necessary values (`z_j` and `\u03c1_j`) and update the weights using the soft-thresholding operator.\n\n3. **Predict on Test Data**: Once the model is trained, use the learned weights to make predictions on the test data.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef lasso_regression_predict(\n    X_train: list[float | int],\n    y_train: list[float | int],\n    X_test: list[float | int],\n    degree: int,\n    reg_factor: float = 0.1,\n    n_iterations: int = 1000,\n) -> list[float]:\n    \"\"\"Fit a one-dimensional Lasso regression model and predict on new data.\n\n    Args:\n        X_train: List of scalar training inputs.\n        y_train: Target values corresponding to `X_train`.\n        X_test:  Inputs on which the trained model is evaluated.\n        degree:  Highest polynomial degree used for the feature expansion.\n        reg_factor: Non-negative regularisation strength (\u03bb).\n        n_iterations: Number of coordinate-descent sweeps.\n\n    Returns:\n        List of predictions for every element in `X_test`, each rounded to\n        the 4th decimal place.\n    \"\"\"\n    # Convert lists to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Expand the input data to polynomial features\n    def polynomial_features(X, degree):\n        n_samples = X.shape[0]\n        # Create a matrix with shape (n_samples, degree + 1)\n        X_poly = np.ones((n_samples, degree + 1))\n        for d in range(1, degree + 1):\n            X_poly[:, d] = X ** d\n        return X_poly\n    \n    # Create design matrices\n    Phi_train = polynomial_features(X_train, degree)\n    Phi_test = polynomial_features(X_test, degree)\n    \n    # Initialize weights\n    n_features = Phi_train.shape[1]\n    w = np.zeros(n_features)\n    \n    # Coordinate descent\n    for _ in range(n_iterations):\n        for j in range(n_features):\n            # Compute z_j\n            z_j = np.sum(Phi_train[:, j] ** 2)\n            \n            # Compute rho_j\n            residual = y_train - Phi_train @ w + Phi_train[:, j] * w[j]\n            rho_j = np.sum(Phi_train[:, j] * residual)\n            \n            # Update w_j\n            if j == 0:\n                w[j] = rho_j / z_j\n            else:\n                w[j] = np.sign(rho_j) * max(abs(rho_j) - reg_factor, 0) / z_j\n    \n    # Predict on the test set\n    predictions = Phi_test @ w\n    \n    # Round predictions to 4 decimal places\n    return [round(pred, 4) for pred in predictions]\n\n# Example usage:\n# X_train = [1, 2, 3, 4, 5]\n# y_train = [1.2, 1.9, 3.2, 4.1, 5.1]\n# X_test = [6, 7, 8]\n# degree = 2\n# predictions = lasso_regression_predict(X_train, y_train, X_test, degree)\n# print(predictions)\n```\n\n### Explanation:\n- **Polynomial Feature Expansion**: The `polynomial_features` function creates a design matrix where each column corresponds to a power of the input data, up to the specified degree.\n- **Coordinate Descent**: For each feature, we compute `z_j` and `\u03c1_j` and update the weight using the soft-thresholding operator. The bias term (`w_0`) is updated without regularization.\n- **Prediction**: After training, we use the learned weights to predict the outputs for the test data and round them to four decimal places."}
{"task_id": 485, "completion_id": 0, "completion": "To implement a univariate regression tree using the CART algorithm, we need to recursively split the data based on the feature values to minimize the sum of squared errors (SSE). Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    if not X_train:\n        return []\n\n    # Helper function to calculate SSE\n    def calculate_sse(y):\n        if len(y) == 0:\n            return 0\n        mean_y = np.mean(y)\n        return np.sum((y - mean_y) ** 2)\n\n    # Helper function to find the best split\n    def find_best_split(X, y):\n        best_sse = float('inf')\n        best_split = None\n        best_left = None\n        best_right = None\n        \n        for i in range(1, len(X)):\n            left_y = y[:i]\n            right_y = y[i:]\n            sse = calculate_sse(left_y) + calculate_sse(right_y)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = X[i]\n                best_left = (X[:i], left_y)\n                best_right = (X[i:], right_y)\n        \n        return best_split, best_left, best_right\n\n    # Recursive function to build the tree\n    def build_tree(X, y, depth):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        \n        split, (left_X, left_y), (right_X, right_y) = find_best_split(X, y)\n        \n        if split is None:\n            return np.mean(y)\n        \n        left_tree = build_tree(left_X, left_y, depth + 1)\n        right_tree = build_tree(right_X, right_y, depth + 1)\n        \n        return (split, left_tree, right_tree)\n\n    # Build the tree\n    tree = build_tree(X_train, y_train, 0)\n\n    # Helper function to make predictions\n    def predict(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split, left_tree, right_tree = tree\n        if x < split:\n            return predict(left_tree, x)\n        else:\n            return predict(right_tree, x)\n\n    # Make predictions for the test set\n    predictions = [predict(tree, x) for x in X_test]\n    \n    return predictions\n```\n\n### Explanation:\n1. **SSE Calculation**: The `calculate_sse` function computes the sum of squared errors for a given set of target values.\n2. **Best Split**: The `find_best_split` function iterates over possible split points in the feature values, calculating the SSE for each split and selecting the one that minimizes the SSE.\n3. **Tree Building**: The `build_tree` function recursively constructs the tree, stopping when the maximum depth is reached or when a node contains fewer than two samples. Each leaf node is labeled with the mean of the target values.\n4. **Prediction**: The `predict` function traverses the tree to make predictions for each test point.\n\nThis implementation handles the recursive splitting and prediction for a univariate regression tree without using external libraries."}
{"task_id": 486, "completion_id": 0, "completion": "To implement the `mean_squared_error` function, we need to handle different types of input sequences (lists, tuples, or NumPy arrays) and ensure they are of equal length and non-empty. If these conditions are met, we calculate the Mean Squared Error and return it rounded to four decimal places. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Compute the mean squared error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same\n    non-zero length. Otherwise, it returns the MSE rounded to 4 decimal\n    places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimals representing the MSE, or -1 on error.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Check if the inputs have the same length and are non-empty\n    if y_true.shape != y_pred.shape or y_true.size == 0:\n        return -1\n    \n    # Calculate the MSE\n    mse = np.mean((y_true - y_pred) ** 2)\n    \n    # Return the MSE rounded to 4 decimal places\n    return round(mse, 4)\n\n# Example usage:\n# y_true = [1, 2, 3]\n# y_pred = [1, 2, 4]\n# print(mean_squared_error(y_true, y_pred))  # Output: 0.3333\n```\n\n### Explanation:\n1. **Input Conversion**: We convert the inputs to NumPy arrays to leverage efficient numerical operations.\n2. **Validation**: We check if the shapes of the two arrays are identical and ensure they are non-empty. If not, we return `-1`.\n3. **MSE Calculation**: We compute the squared differences, take the mean, and round the result to four decimal places.\n4. **Return**: The function returns the rounded MSE value."}
{"task_id": 487, "completion_id": 0, "completion": "Certainly! Below is the implementation of the K-Means clustering algorithm from scratch, following the specified requirements:\n\n```python\nimport numpy as np\n\ndef k_means(X: np.ndarray, k: int, max_iters: int = 300, tol: float = 1e-4) -> list[int]:\n    \"\"\"Cluster the data contained in *X* into *k* groups using the K-Means algorithm.\n\n    Args:\n        X: NumPy array of shape (n_samples, n_features) containing the data points.\n        k: The desired number of clusters (1 \u2264 k \u2264 n_samples).\n        max_iters: Maximum number of iterations (default 300).\n        tol: Convergence tolerance. The algorithm stops when the L2-norm\n            between old and new centroids is smaller than *tol* (default 1e-4).\n\n    Returns:\n        A Python list containing the cluster index (0 \u2026 k-1) for every sample\n        in the original order of *X*.\n    \"\"\"\n    n_samples, n_features = X.shape\n    \n    # Step 1: Initialize centroids using the first k samples\n    centroids = X[:k].copy()\n    \n    # Step 2: Initialize variables\n    labels = np.zeros(n_samples, dtype=int)\n    for iteration in range(max_iters):\n        # Step 3: Assign samples to the nearest centroid\n        for i in range(n_samples):\n            distances = np.linalg.norm(X[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Step 4: Update centroids\n        new_centroids = np.zeros((k, n_features))\n        for j in range(k):\n            members = X[labels == j]\n            if len(members) > 0:\n                new_centroids[j] = members.mean(axis=0)\n            else:\n                new_centroids[j] = centroids[j]  # Leave unchanged if no members\n        \n        # Step 5: Check for convergence\n        centroid_shift = np.linalg.norm(new_centroids - centroids)\n        if centroid_shift < tol:\n            break\n        \n        centroids = new_centroids\n    \n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(k_means(X, k))\n```\n\n### Explanation:\n1. **Initialization**: The first `k` samples of `X` are used as the initial centroids.\n2. **Assignment**: Each sample is assigned to the nearest centroid based on Euclidean distance.\n3. **Update**: Centroids are updated to the mean of the samples assigned to them. If a centroid has no samples assigned, it remains unchanged.\n4. **Convergence**: The algorithm stops if the change in centroids is less than `tol` or if the maximum number of iterations (`max_iters`) is reached.\n5. **Return**: The function returns a list of cluster indices for each sample.\n\nThis implementation ensures that the algorithm is deterministic and easy to test, as the initial centroids are chosen from the first `k` samples."}
{"task_id": 488, "completion_id": 0, "completion": "To solve the problem of calculating the population variance for each feature in a two-dimensional dataset, we need to handle both list of lists and NumPy array inputs. We'll also ensure that the function adheres to the specified rules, including handling edge cases and rounding the results appropriately. Here's the implementation:\n\n```python\nimport numpy as np\n\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals. Returns -1 if the input is empty or not 2-D.\n    \"\"\"\n    # Check if X is empty or not 2-D\n    if not X or not isinstance(X, (list, np.ndarray)):\n        return -1\n    \n    # Convert list of lists to NumPy array for easier manipulation\n    if isinstance(X, list):\n        try:\n            X = np.array(X)\n        except:\n            return -1\n    \n    # Check if the array is 2-D\n    if X.ndim != 2:\n        return -1\n    \n    # Check if there is at least one sample\n    if X.shape[0] < 1:\n        return -1\n    \n    # Calculate the population variance for each feature (column)\n    variances = []\n    for feature in range(X.shape[1]):\n        column = X[:, feature]\n        mean = np.mean(column)\n        variance = np.sum((column - mean) ** 2) / len(column)\n        variances.append(round(variance, 4))\n    \n    return variances\n\n# Example usage:\n# X = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(calculate_variance(X))  # Output: [6.0, 6.0, 6.0]\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the input `X` is empty or not a valid 2-D structure. If `X` is a list, it attempts to convert it to a NumPy array. If the conversion fails or if the resulting array is not 2-D, it returns `-1`.\n\n2. **Variance Calculation**: For each feature (column), the function calculates the mean and then computes the population variance using the formula provided. The variance is rounded to four decimal places before being added to the result list.\n\n3. **Output**: The function returns a list of variances for each feature, rounded to four decimal places, or `-1` if the input is invalid."}
{"task_id": 489, "completion_id": 0, "completion": "To solve this task, we need to implement a function that checks each row of the input to ensure it is a valid one-hot encoded vector and then extracts the index of the '1' in each row. If any row is invalid, the function should return -1. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the\n        integer \u20111.\n    \"\"\"\n    # Convert input to a NumPy array if it is not already\n    if isinstance(one_hot, list):\n        one_hot = np.array(one_hot)\n    \n    # Check if the input is a 2-D array\n    if one_hot.ndim != 2:\n        return -1\n    \n    # Initialize the list to store nominal class labels\n    nominal_labels = []\n    \n    # Iterate over each row in the one-hot encoded array\n    for row in one_hot:\n        # Check if the row is a valid one-hot vector\n        if np.sum(row) != 1 or not np.all((row == 0) | (row == 1)):\n            return -1\n        \n        # Find the index of the '1' in the row\n        index_of_one = np.argmax(row)\n        nominal_labels.append(index_of_one)\n    \n    return nominal_labels\n\n# Example usage:\none_hot = [[0, 1, 0],\n           [1, 0, 0],\n           [0, 0, 1]]\nprint(to_nominal(one_hot))  # Output: [1, 0, 2]\n```\n\n### Explanation:\n1. **Input Conversion**: If the input is a list of lists, we convert it to a NumPy array for easier manipulation.\n2. **Dimensionality Check**: We ensure the input is a 2-D array. If not, we return -1.\n3. **Row Validation**: For each row, we check:\n   - The sum of the row should be exactly 1 (ensuring there's exactly one '1').\n   - All elements should be either 0 or 1.\n   If any row fails these checks, we return -1.\n4. **Index Extraction**: For valid rows, we use `np.argmax` to find the index of the '1' and append it to the result list.\n5. **Return Result**: If all rows are valid, we return the list of indices. Otherwise, we return -1 if any row is invalid."}
{"task_id": 490, "completion_id": 0, "completion": "To solve the task of converting a one-dimensional vector into a square diagonal matrix, we can utilize NumPy's capabilities to create a diagonal matrix and then convert it to a list of lists. Here's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert input to a NumPy array if it is not already\n    x_array = np.array(x)\n    \n    # Check if the input is empty\n    if x_array.size == 0:\n        return []\n    \n    # Create a diagonal matrix using NumPy's diag function\n    diagonal_matrix = np.diag(x_array)\n    \n    # Convert the NumPy array to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# vector = [1, 2, 3]\n# print(make_diagonal(vector))\n# Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```\n\n### Explanation:\n1. **Input Conversion**: The input is first converted to a NumPy array to handle different input types (list, tuple, or NumPy array) uniformly.\n\n2. **Empty Check**: We check if the input array is empty. If it is, we return an empty list as specified.\n\n3. **Diagonal Matrix Creation**: We use `np.diag(x_array)` to create a diagonal matrix where the elements of `x_array` are placed on the principal diagonal, and all off-diagonal elements are zeros.\n\n4. **Conversion to List of Lists**: Finally, we convert the resulting NumPy array to a list of lists using the `tolist()` method, which is the required output format.\n\nThis function efficiently handles the conversion and adheres to the constraints and requirements specified in the task description."}
{"task_id": 491, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow the two major stages: FP-tree construction and recursive mining. Below is the complete implementation of the FP-Growth algorithm in Python:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass FPNode:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\n    def increment(self, count):\n        self.count += count\n\nclass FPTree:\n    def __init__(self, transactions, min_sup):\n        self.min_sup = min_sup\n        self.header_table = defaultdict(list)\n        self.root = FPNode(None, 1, None)\n        self.build_tree(transactions)\n\n    def build_tree(self, transactions):\n        item_counts = Counter(itertools.chain.from_iterable(transactions))\n        item_counts = {item: count for item, count in item_counts.items() if count >= self.min_sup}\n        frequent_items = set(item_counts.keys())\n\n        for transaction in transactions:\n            transaction = [item for item in transaction if item in frequent_items]\n            transaction.sort(key=lambda item: (-item_counts[item], item))\n            self.insert_transaction(transaction)\n\n    def insert_transaction(self, transaction):\n        current_node = self.root\n        for item in transaction:\n            if item not in current_node.children:\n                new_node = FPNode(item, 1, current_node)\n                current_node.children[item] = new_node\n                self.header_table[item].append(new_node)\n            else:\n                current_node.children[item].increment(1)\n            current_node = current_node.children[item]\n\n    def mine_patterns(self):\n        def mine_tree(tree, prefix):\n            patterns = []\n            for item, nodes in sorted(tree.header_table.items()):\n                new_prefix = prefix + [item]\n                patterns.append(tuple(new_prefix))\n                conditional_tree = build_conditional_tree(nodes)\n                if conditional_tree:\n                    patterns.extend(mine_tree(conditional_tree, new_prefix))\n            return patterns\n\n        def build_conditional_tree(nodes):\n            conditional_transactions = []\n            for node in nodes:\n                path = []\n                current_node = node.parent\n                while current_node.item is not None:\n                    path.append(current_node.item)\n                    current_node = current_node.parent\n                for _ in range(node.count):\n                    conditional_transactions.append(path)\n            return FPTree(conditional_transactions, self.min_sup) if conditional_transactions else None\n\n        return mine_tree(self, [])\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    tree = FPTree(transactions, min_sup)\n    patterns = tree.mine_patterns()\n    patterns = [tuple(sorted(pattern)) for pattern in patterns]\n    patterns = sorted(patterns, key=lambda x: (len(x), x))\n    return patterns\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\n\nmin_sup = 3\nresult = fp_growth(transactions, min_sup)\nprint(result)\n```\n\n### Explanation:\n\n1. **FPNode Class**: Represents a node in the FP-tree. Each node has an item, a count, a parent, children, and a link to the next node with the same item.\n\n2. **FPTree Class**: Represents the FP-tree. It builds the tree from transactions and mines patterns using recursive mining.\n\n3. **FP-tree Construction**: \n   - Count item frequencies and filter items below `min_sup`.\n   - Sort items in each transaction by descending frequency and lexicographically.\n   - Insert transactions into the FP-tree.\n\n4. **Recursive Mining**:\n   - Generate conditional pattern bases from the header table.\n   - Build conditional FP-trees and mine recursively.\n   - If a conditional tree consists of a single path, enumerate all non-empty combinations of the items on that path.\n\n5. **fp_growth Function**: Initializes the FP-tree and mines frequent item-sets, returning them sorted by length and lexicographically.\n\nThis implementation efficiently mines frequent item-sets using the FP-Growth algorithm, adhering to the specified output constraints."}
{"task_id": 492, "completion_id": 0, "completion": "To implement the polynomial feature expansion, we need to generate all possible monomials of the features up to a given degree. We'll use `itertools.combinations_with_replacement` to generate combinations of feature indices that correspond to the exponents in the monomials. Here's how you can implement the function:\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    \n    X = np.array(X)\n    n_samples, n_features = X.shape\n    \n    # Start with the constant term (degree 0)\n    feature_indices = []\n    for total_degree in range(degree + 1):\n        for combination in combinations_with_replacement(range(n_features), total_degree):\n            feature_indices.append(combination)\n    \n    # Generate the polynomial features\n    poly_features = []\n    for sample in X:\n        sample_features = [1]  # Start with the constant term\n        for indices in feature_indices[1:]:  # Skip the first empty tuple for degree 0\n            product = np.prod([sample[i] for i in indices])\n            sample_features.append(product)\n        poly_features.append(sample_features)\n    \n    return poly_features\n\n# Example usage:\nX = [[2, 3], [4, 5]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the degree is negative, returning `-1` if so.\n\n2. **Feature Index Generation**: Using `combinations_with_replacement`, we generate all combinations of feature indices for each total degree from `0` to `degree`. This gives us the exponents for each monomial.\n\n3. **Polynomial Feature Calculation**: For each sample in `X`, we calculate the monomial values by taking the product of the features raised to the respective powers indicated by the combinations.\n\n4. **Output**: The function returns the enriched feature matrix as a list of lists.\n\nThis implementation efficiently generates polynomial features up to the specified degree, ensuring the correct order and combination of terms."}
{"task_id": 493, "completion_id": 0, "completion": "To implement the `mse` function, we need to calculate the mean of the input sample, compute the squared differences from the mean for each element, and then find the average of these squared differences. If the input sample is empty, we return -1. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Check if the input is empty\n    if len(y) == 0:\n        return -1\n    \n    # Convert input to a numpy array if it's a list\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    # Calculate the mean of the sample\n    mean_y = np.mean(y)\n    \n    # Calculate the squared differences from the mean\n    squared_diffs = (y - mean_y) ** 2\n    \n    # Calculate the mean of the squared differences (MSE)\n    mse_value = np.mean(squared_diffs)\n    \n    # Return the MSE rounded to 4 decimal places\n    return round(mse_value, 4)\n```\n\n### Explanation:\n1. **Input Check**: We first check if the input sequence `y` is empty. If it is, we return -1.\n2. **Conversion to NumPy Array**: If the input is a list, we convert it to a NumPy array for easier mathematical operations.\n3. **Mean Calculation**: We calculate the mean of the sample using `np.mean`.\n4. **Squared Differences**: We compute the squared differences from the mean for each element in the sample.\n5. **MSE Calculation**: We calculate the mean of these squared differences to get the MSE.\n6. **Rounding**: Finally, we round the MSE to four decimal places before returning it."}
{"task_id": 494, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Union\n\ndef aggregate_predictions(\n    preds: Union[List[List[Union[int, float]]], np.ndarray],\n    classifier: bool = True,\n) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model\n        and each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    # Convert preds to a NumPy array if it's a list\n    preds = np.array(preds)\n    \n    # Initialize the list to store final predictions\n    final_predictions = []\n    \n    # Iterate over each sample (column-wise)\n    for i in range(preds.shape[1]):\n        sample_predictions = preds[:, i]\n        \n        if classifier:\n            # Classification: Use majority voting\n            # Use numpy.bincount to count occurrences of each class label\n            # Use numpy.argmax to find the label with the highest count\n            final_label = np.argmax(np.bincount(sample_predictions))\n            final_predictions.append(final_label)\n        else:\n            # Regression: Use averaging\n            # Calculate the mean and round to 4 decimal places\n            mean_prediction = np.mean(sample_predictions)\n            rounded_prediction = round(mean_prediction, 4)\n            final_predictions.append(rounded_prediction)\n    \n    return final_predictions\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts either a list of lists or a NumPy array. If the input is a list, it is converted to a NumPy array for easier manipulation.\n\n2. **Classification**:\n   - For each sample (column in the array), the function uses `numpy.bincount` to count occurrences of each class label and `numpy.argmax` to find the label with the highest count, which naturally handles ties by choosing the smallest label.\n\n3. **Regression**:\n   - For each sample, the function calculates the mean of the predictions and rounds it to 4 decimal places.\n\n4. **Output**: The function returns a list of aggregated predictions, either as class labels for classification or rounded mean values for regression."}
{"task_id": 495, "completion_id": 0, "completion": "To accomplish the task of standardizing each column of a 2-D NumPy array, we can follow the algorithm you've outlined. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation. Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    # Compute the mean of each column\n    means = np.mean(X, axis=0)\n    \n    # Compute the population standard deviation of each column\n    stds = np.std(X, axis=0, ddof=0)\n    \n    # Create a new array for the standardized data\n    standardized_X = np.zeros_like(X, dtype=float)\n    \n    # Standardize each column\n    for i in range(X.shape[1]):\n        if stds[i] != 0:\n            standardized_X[:, i] = (X[:, i] - means[i]) / stds[i]\n        else:\n            standardized_X[:, i] = 0\n    \n    # Round the result to 4 decimal places and convert to a list\n    return np.round(standardized_X, 4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# print(standardize(X))\n```\n\n### Explanation:\n\n1. **Compute the Mean and Standard Deviation**: We use `np.mean` and `np.std` to compute the mean and standard deviation of each column. The `ddof=0` parameter ensures that we are calculating the population standard deviation.\n\n2. **Standardization**: We iterate over each column. If the standard deviation is non-zero, we standardize the column by subtracting the mean and dividing by the standard deviation. If the standard deviation is zero, we set the entire column to zero.\n\n3. **Avoid In-Place Modification**: We create a new array `standardized_X` to store the standardized values, ensuring that the original array `X` is not modified.\n\n4. **Rounding and Conversion**: Finally, we round the standardized values to 4 decimal places using `np.round` and convert the result to a Python list using `tolist()`.\n\nThis function will return the standardized dataset as a list of lists, with each element rounded to four decimal places."}
{"task_id": 496, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `apply_affine` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    else:\n        x = np.array(x)\n\n    # Calculate the affine activation\n    y = slope * x + intercept\n\n    # First derivative is constant and equal to slope\n    grad = np.full_like(x, slope)\n\n    # Second derivative is constant and equal to 0\n    grad2 = np.zeros_like(x)\n\n    # Round each element to 4 decimal places\n    y = np.round(y, 4).tolist()\n    grad = np.round(grad, 4).tolist()\n    grad2 = np.round(grad2, 4).tolist()\n\n    return y, grad, grad2\n\n# Example usage:\nx = [1, 2, 3]\nresult = apply_affine(x, slope=2, intercept=1)\nprint(result)  # Output: ([3.0, 5.0, 7.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\n### Explanation:\n1. **Input Handling**: The function checks if `x` is a scalar (either an integer or a float). If so, it converts it into a NumPy array with a single element. Otherwise, it ensures `x` is a NumPy array for consistent element-wise operations.\n\n2. **Affine Activation Calculation**: The affine function is applied element-wise using `slope * x + intercept`.\n\n3. **Derivatives**:\n   - The first derivative of an affine function is constant and equal to the `slope`.\n   - The second derivative of an affine function is always `0`.\n\n4. **Rounding**: Each element in the output lists is rounded to 4 decimal places using `np.round`.\n\n5. **Return**: The function returns a tuple containing three lists: the activation output, the first derivative, and the second derivative."}
{"task_id": 497, "completion_id": 0, "completion": "To implement the `exponential_activation` function, we need to handle both lists and NumPy arrays as inputs, compute the exponential function or its derivatives based on the `order` parameter, and ensure the output is a Python list with the same shape as the input. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef exponential_activation(x, order: int = 0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    # Convert input to a NumPy array for easier manipulation\n    x_array = np.array(x, dtype=float)\n    \n    # Check the order and compute the result\n    if order in [0, 1, 2]:\n        result = np.exp(x_array)\n    else:\n        return -1\n    \n    # Round the result to 6 decimal places\n    result_rounded = np.round(result, 6)\n    \n    # Convert the result back to a Python list\n    return result_rounded.tolist()\n\n# Example usage:\n# input_data = [[0, 1], [2, -1]]\n# print(exponential_activation(input_data, order=0))\n```\n\n### Explanation:\n\n1. **Input Handling**: The function accepts either a list or a NumPy array. We convert the input to a NumPy array to leverage NumPy's efficient element-wise operations.\n\n2. **Order Check**: We check if the `order` is 0, 1, or 2. Since the exponential function and its derivatives are the same, we compute `np.exp(x_array)` for all valid orders.\n\n3. **Invalid Order**: If the `order` is not 0, 1, or 2, the function returns `-1`.\n\n4. **Rounding**: We use `np.round` to round each element in the result to 6 decimal places.\n\n5. **Output Conversion**: Finally, we convert the NumPy array back to a Python list using `tolist()` to ensure the output matches the input's structure.\n\nThis implementation efficiently handles the requirements and constraints specified in the task."}
{"task_id": 498, "completion_id": 0, "completion": "To implement the Leaky ReLU activation function and its derivatives, we can use NumPy for efficient computation. The function will handle different types of input, including scalars, lists, and NumPy arrays, and will return the appropriate result based on the specified order. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float = 0.3, order: int = 0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n    \"\"\"\n    # Convert input to a NumPy array for consistent processing\n    x = np.asarray(x)\n    \n    if order == 0:\n        # Compute the Leaky ReLU function value\n        result = np.where(x > 0, x, alpha * x)\n    elif order == 1:\n        # Compute the first derivative of Leaky ReLU\n        result = np.where(x > 0, 1, alpha)\n    elif order == 2:\n        # The second derivative is zero everywhere\n        result = np.zeros_like(x)\n    else:\n        # Return an empty list for invalid order\n        return []\n    \n    # Convert the result to a list and return\n    return result.tolist()\n\n# Example usage:\n# print(leaky_relu([-2, -1, 0, 1, 2], alpha=0.3, order=0))\n# print(leaky_relu([-2, -1, 0, 1, 2], alpha=0.3, order=1))\n# print(leaky_relu([-2, -1, 0, 1, 2], alpha=0.3, order=2))\n```\n\n### Explanation:\n- **Input Handling**: The input `x` is converted to a NumPy array to facilitate vectorized operations.\n- **Order 0**: The function computes the Leaky ReLU value using `np.where`, which applies the condition element-wise.\n- **Order 1**: The first derivative is computed similarly, with the derivative being `1` for positive values and `alpha` for non-positive values.\n- **Order 2**: The second derivative is zero for all inputs, so a zero array of the same shape as `x` is returned.\n- **Invalid Order**: If the order is not 0, 1, or 2, an empty list is returned.\n- **Output**: The result is converted to a list using `tolist()` to meet the output constraints."}
{"task_id": 499, "completion_id": 0, "completion": "To implement the PCA dimensionality reduction routine from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Check if k is within the valid range\n    if not (1 <= k <= n_features):\n        return -1\n    \n    # Step 1: Standardise each feature\n    means = np.mean(data, axis=0)\n    std_devs = np.std(data, axis=0, ddof=0)  # Population standard deviation\n    \n    # Avoid division by zero for features with zero variance\n    std_devs[std_devs == 0] = 1\n    \n    standardized_data = (data - means) / std_devs\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Perform an eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors accordingly\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(sorted_eigenvectors.shape[1]):\n        max_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardized data on the first `k` eigenvectors\n    projection = standardized_data @ sorted_eigenvectors[:, :k]\n    \n    # Round the projected data to 4 decimal places and convert to a list\n    projected_data_rounded = np.round(projection, 4).tolist()\n    \n    return projected_data_rounded\n```\n\n### Explanation of the Code:\n\n1. **Standardization**: We standardize the data by subtracting the mean and dividing by the population standard deviation. If a feature has zero variance, we set its standard deviation to 1 to avoid division by zero.\n\n2. **Covariance Matrix**: We compute the sample covariance matrix using `np.cov` with `rowvar=False` to indicate that variables are represented by columns.\n\n3. **Eigen-decomposition**: We use `np.linalg.eigh` to perform eigen-decomposition, which is suitable for symmetric matrices like the covariance matrix.\n\n4. **Sorting Eigenvalues and Eigenvectors**: We sort the eigenvalues in descending order and rearrange the eigenvectors accordingly.\n\n5. **Fixing Eigenvector Signs**: We ensure the largest absolute value entry in each eigenvector is positive to remove sign ambiguity.\n\n6. **Projection**: We project the standardized data onto the first `k` eigenvectors and round the result to four decimal places.\n\nThis implementation should correctly perform PCA dimensionality reduction according to the specified requirements."}
{"task_id": 500, "completion_id": 0, "completion": "To implement a tiny Gradient Boosting binary classifier using decision stumps, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize the model with the average of the training labels\n    c = np.mean(y_train)\n    F_train = np.full(y_train.shape, c)\n\n    # List to store the stumps\n    stumps = []\n\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F_train\n\n        # Find the best decision stump\n        best_feature = None\n        best_threshold = None\n        best_left_value = None\n        best_right_value = None\n        best_error = float('inf')\n\n        # Iterate over all features\n        for feature_index in range(X_train.shape[1]):\n            feature_values = X_train[:, feature_index]\n            unique_values = np.unique(feature_values)\n\n            # Try splitting at each unique value\n            for threshold in unique_values:\n                left_mask = feature_values <= threshold\n                right_mask = feature_values > threshold\n\n                left_value = np.mean(residuals[left_mask]) if np.any(left_mask) else 0\n                right_value = np.mean(residuals[right_mask]) if np.any(right_mask) else 0\n\n                # Calculate squared error\n                error = np.sum((residuals[left_mask] - left_value) ** 2) + np.sum((residuals[right_mask] - right_value) ** 2)\n\n                # Update the best stump if this one is better\n                if error < best_error:\n                    best_feature = feature_index\n                    best_threshold = threshold\n                    best_left_value = left_value\n                    best_right_value = right_value\n                    best_error = error\n\n        # Store the best stump\n        stumps.append((best_feature, best_threshold, best_left_value, best_right_value))\n\n        # Update the model\n        feature_values = X_train[:, best_feature]\n        left_mask = feature_values <= best_threshold\n        right_mask = feature_values > best_threshold\n\n        F_train[left_mask] += learning_rate * best_left_value\n        F_train[right_mask] += learning_rate * best_right_value\n\n    # Predict on the test set\n    F_test = np.full(X_test.shape[0], c)\n    for best_feature, best_threshold, best_left_value, best_right_value in stumps:\n        feature_values = X_test[:, best_feature]\n        left_mask = feature_values <= best_threshold\n        right_mask = feature_values > best_threshold\n\n        F_test[left_mask] += learning_rate * best_left_value\n        F_test[right_mask] += learning_rate * best_right_value\n\n    # Convert regression scores to binary class labels\n    predictions = (F_test > 0.5).astype(int)\n\n    return predictions.tolist()\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the model with the average of the training labels, `c`, which serves as the initial prediction for all samples.\n\n2. **Decision Stump Learning**: For each boosting iteration, we compute residuals and find the best decision stump by iterating over all features and possible thresholds. The stump minimizes the squared error of the residuals.\n\n3. **Model Update**: After finding the best stump, we update the model's predictions on the training data using the learning rate.\n\n4. **Prediction**: Once the ensemble is built, we apply the learned stumps to the test data and convert the regression scores to binary class labels by thresholding at 0.5.\n\nThis implementation uses decision stumps as weak learners and optimizes the squared error loss, following the gradient boosting framework."}
{"task_id": 501, "completion_id": 0, "completion": "```python\ndef constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    # Write your code below this line\n    return initial_lr\n```"}
{"task_id": 502, "completion_id": 0, "completion": "To implement the `hard_sigmoid` function, we need to handle three different cases based on the `order` parameter: the activation function itself, its first derivative, and its second derivative. Let's go through the implementation step-by-step:\n\n```python\nimport numpy as np\n\ndef hard_sigmoid(z: np.ndarray, order: int = 0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array whose elements the activation (or its derivatives) will be\n        applied to.\n    order : int, optional (default = 0)\n        \u2022 0 \u2013 return Hard-Sigmoid values.\n        \u2022 1 \u2013 return first derivative.\n        \u2022 2 \u2013 return second derivative.\n\n    Returns\n    -------\n    list[float]\n        A list containing the computed values, rounded to 4 decimal places.\n        If an unsupported *order* is provided the function should return an\n        empty list.\n    \"\"\"\n    if order == 0:\n        # Compute Hard-Sigmoid activation\n        result = np.where(z < -2.5, 0, np.where(z > 2.5, 1, 0.2 * z + 0.5))\n    elif order == 1:\n        # Compute first derivative\n        result = np.where((-2.5 <= z) & (z <= 2.5), 0.2, 0)\n    elif order == 2:\n        # Compute second derivative (which is 0 everywhere)\n        result = np.zeros_like(z)\n    else:\n        # Unsupported order\n        return []\n\n    # Round the result to 4 decimal places and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage:\nz = np.array([-3, -2.5, 0, 2.5, 3])\nprint(hard_sigmoid(z, order=0))  # Activation values\nprint(hard_sigmoid(z, order=1))  # First derivative\nprint(hard_sigmoid(z, order=2))  # Second derivative\n```\n\n### Explanation:\n- **Activation Function (`order=0`)**: We use `np.where` to apply the piece-wise linear function. For values less than -2.5, the result is 0; for values greater than 2.5, the result is 1; and for values between -2.5 and 2.5, the result is `0.2 * z + 0.5`.\n- **First Derivative (`order=1`)**: The derivative is 0.2 for values between -2.5 and 2.5, and 0 otherwise.\n- **Second Derivative (`order=2`)**: The second derivative is 0 everywhere, so we use `np.zeros_like(z)` to create an array of zeros with the same shape as `z`.\n- **Unsupported Order**: If the `order` is not 0, 1, or 2, we return an empty list.\n- **Rounding and Conversion**: We use `np.round` to round the results to 4 decimal places and convert the array to a list using `.tolist()`."}
{"task_id": 503, "completion_id": 0, "completion": "To implement the `selective_update` function as described, we need to ensure that we handle the input dictionaries correctly, perform a deep copy of the `hparams` dictionary, and update only the keys that exist in both `hparams` and `updates`. Here's how you can achieve this:\n\n```python\nfrom copy import deepcopy\n\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    if hparams is None:\n        return -1\n    \n    # Create a deep copy of the hparams dictionary\n    hparams_copy = deepcopy(hparams)\n    \n    # If updates is not None, apply updates selectively\n    if updates is not None:\n        for key, value in updates.items():\n            if key in hparams_copy:\n                hparams_copy[key] = value\n    \n    return hparams_copy\n\n# Example usage\nhparams = {'lr': 0.1, 'momentum': 0.9}\nupdates = {'lr': 0.01, 'weight_decay': 0.0001}\nresult = selective_update(hparams, updates)\nprint(result)  # Output: {'lr': 0.01, 'momentum': 0.9}\n```\n\n### Explanation:\n1. **Check for `None`**: The function first checks if `hparams` is `None`. If it is, the function returns `-1` as specified.\n\n2. **Deep Copy**: We use `deepcopy` from the `copy` module to create a deep copy of the `hparams` dictionary. This ensures that the original dictionary is not modified.\n\n3. **Selective Update**: If `updates` is not `None`, we iterate over its key-value pairs. For each key in `updates`, we check if it exists in the copied `hparams` dictionary. If it does, we update the value in the copied dictionary.\n\n4. **Return**: Finally, we return the copied and potentially updated dictionary.\n\nThis implementation ensures that the function behaves in a purely functional manner, as it does not modify the original input dictionaries."}
{"task_id": 505, "completion_id": 0, "completion": "To implement the Contrastive Divergence (CD-k) update for a binary Restricted Boltzmann Machine (RBM), we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    # Compute the positive phase hidden probabilities\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n\n    # Initialize v_k_prob and h_k_prob\n    v_k_prob = X\n    h_k_prob = h0_prob\n\n    # Perform k Gibbs sampling steps\n    for _ in range(k):\n        # Compute visible probabilities given hidden states\n        v_k_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n        # Compute hidden probabilities given visible states\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n\n    # Compute positive and negative gradients\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n\n    # Round to 4 decimal places and convert to a list of lists\n    W_new_rounded = np.round(W_new, 4).tolist()\n\n    return W_new_rounded\n\ndef sigmoid(x):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))\n```\n\n### Explanation:\n\n1. **Sigmoid Function**: We define a helper function `sigmoid` to compute the sigmoid activation, which is used to calculate probabilities.\n\n2. **Positive Phase**: Compute the initial hidden probabilities `h0_prob` using the visible units `X`.\n\n3. **Gibbs Sampling**: Perform `k` Gibbs sampling steps. In each step, compute the visible probabilities `v_k_prob` from the hidden probabilities, and then update the hidden probabilities `h_k_prob` from the visible probabilities.\n\n4. **Gradients**: Calculate the positive gradient `pos_grad` and the negative gradient `neg_grad`.\n\n5. **Weight Update**: Update the weight matrix `W` using the learning rate and the difference between the positive and negative gradients, normalized by the batch size `m`.\n\n6. **Output**: Round the updated weight matrix to 4 decimal places and convert it to a list of lists for the final output.\n\nThis implementation follows the task requirements and handles the case of an empty mini-batch by returning an empty list."}
{"task_id": 508, "completion_id": 0, "completion": "To solve this task, we need to iterate over the dictionary and check if each key contains the given substring. If it does, we add the corresponding value to a list. Since dictionaries in Python 3.7+ maintain insertion order, we can rely on this behavior to preserve the order of values in our result list. Here's the implementation:\n\n```python\nfrom typing import Any, Dict, List\n\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n    \"\"\"\n    # Initialize an empty list to store the matching values\n    matching_values = []\n    \n    # Iterate over the dictionary items\n    for key, value in params.items():\n        # Check if the substring is in the key\n        if name in key:\n            # If it is, append the value to the list\n            matching_values.append(value)\n    \n    # Return the list of matching values\n    return matching_values\n```\n\n### Explanation:\n- We start by initializing an empty list `matching_values` to store the values of keys that contain the substring.\n- We iterate over the dictionary using `params.items()`, which gives us both the key and the value for each item.\n- For each key, we check if the substring `name` is present using the `in` operator.\n- If the substring is found in the key, we append the corresponding value to `matching_values`.\n- Finally, we return the list `matching_values`, which contains all the values whose keys contain the specified substring, preserving the original order."}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Compute the Chebyshev distance\n    chebyshev_distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(float(chebyshev_distance), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts both lists and NumPy arrays. If the inputs are lists, they are converted to NumPy arrays for easier manipulation.\n2. **Length Check**: The function checks if the two vectors have the same length using the `shape` attribute of NumPy arrays. If they differ, it returns `-1`.\n3. **Distance Calculation**: The Chebyshev distance is calculated using `np.max(np.abs(x - y))`, which computes the maximum of the absolute differences between corresponding elements of the vectors.\n4. **Output**: The result is rounded to four decimal places using Python's `round` function and returned as a standard Python float."}
{"task_id": 510, "completion_id": 0, "completion": "To implement the Variational Auto-Encoder (VAE) loss for Bernoulli visible units, we need to compute both the reconstruction loss and the KL divergence as described. Let's go through the implementation step-by-step:\n\n1. **Reconstruction Loss**: This is computed using binary cross-entropy between the true input `y` and the reconstructed output `y_pred`. We need to ensure numerical stability by clipping `y_pred` values to avoid taking the logarithm of 0 or 1.\n\n2. **KL Divergence**: This is computed using the formula provided, which involves the mean (`t_mean`) and log-variance (`t_log_var`) of the approximate posterior distribution.\n\n3. **Return the Average Loss**: Finally, we compute the average of the total loss over the mini-batch and round it to six decimal places.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Numerical stability for log operation\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute the reconstruction loss (binary cross-entropy)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=1)\n    \n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    \n    # Total loss for each sample in the batch\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Average loss over the batch\n    average_loss = np.mean(total_loss)\n    \n    # Return the average loss rounded to 6 decimal places\n    return round(average_loss, 6)\n```\n\n### Explanation:\n- **Clipping**: We use `np.clip` to ensure `y_pred` values are within `(epsilon, 1 - epsilon)` for numerical stability.\n- **Reconstruction Loss**: Calculated using binary cross-entropy formula.\n- **KL Divergence**: Calculated using the provided formula, which involves operations on `t_mean` and `t_log_var`.\n- **Average Loss**: We compute the mean of the total loss across the batch and round it to six decimal places before returning."}
{"task_id": 511, "completion_id": 0, "completion": "To implement the function `random_bernoulli_mab`, we will follow the steps outlined in the task description. Here's the complete code:\n\n```python\nimport numpy as np\n\ndef random_bernoulli_mab(n_arms: int = 10) -> list[float]:\n    \"\"\"Generate a list of success probabilities for a Bernoulli multi-armed bandit.\"\"\"\n    if n_arms < 1:\n        return []\n    \n    # Step 1: Draw n_arms independent samples from a continuous uniform distribution on [0,1)\n    samples = np.random.uniform(0, 1, n_arms)\n    \n    # Step 2: Normalize the drawn numbers by their sum to form a valid probability distribution\n    total_sum = np.sum(samples)\n    probabilities = samples / total_sum\n    \n    # Step 3: Round every probability to 4 decimal places\n    rounded_probabilities = np.round(probabilities, 4)\n    \n    # Convert to a list and return\n    return rounded_probabilities.tolist()\n\n# Example usage:\nprint(random_bernoulli_mab(5))\n```\n\n### Explanation:\n\n1. **Importing numpy**: We use `numpy` for generating random numbers and performing array operations efficiently.\n\n2. **Handling edge case**: If `n_arms` is less than 1, we return an empty list immediately.\n\n3. **Generating random samples**: We use `np.random.uniform(0, 1, n_arms)` to generate `n_arms` random numbers between 0 and 1.\n\n4. **Normalizing the samples**: We calculate the sum of the samples and divide each sample by this sum to ensure the probabilities add up to 1.\n\n5. **Rounding**: We use `np.round(probabilities, 4)` to round each probability to 4 decimal places.\n\n6. **Returning the result**: Finally, we convert the rounded probabilities to a list and return it.\n\nThis function will generate a list of probabilities that sum to 1, suitable for simulating a Bernoulli multi-armed bandit environment."}
{"task_id": 512, "completion_id": 0, "completion": "To solve the problem of computing the output shape of a pooling layer, we need to implement the mathematical formula provided and ensure that the conditions for a valid configuration are met. Here's the implementation:\n\n```python\ndef pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Calculate the spatial output dimensions of a 2-D pooling layer.\n\n    The function must implement the *no-padding* formula\n        out_h = (h - k_h) / s_h + 1\n        out_w = (w - k_w) / s_w + 1\n    and return ``(out_h, out_w)`` **only** when the result is an integer for\n    both dimensions *and* the kernel fits inside the input.  Otherwise return\n    ``-1``.\n\n    Args:\n        pool_shape: Tuple ``(k_h, k_w)`` pooling window size.\n        image_shape: Tuple ``(n, c, h, w)`` original tensor shape.\n        stride: Tuple ``(s_h, s_w)`` strides.\n\n    Returns:\n        Tuple of integers with the output height and width, or the integer\n        ``-1`` when the configuration is impossible.\n    \"\"\"\n    k_h, k_w = pool_shape\n    _, _, h, w = image_shape\n    s_h, s_w = stride\n\n    # Check if the kernel fits inside the input dimensions\n    if k_h > h or k_w > w:\n        return -1\n\n    # Calculate output dimensions\n    if (h - k_h) % s_h != 0 or (w - k_w) % s_w != 0:\n        return -1\n\n    out_h = (h - k_h) // s_h + 1\n    out_w = (w - k_w) // s_w + 1\n\n    return out_h, out_w\n```\n\n### Explanation:\n1. **Input Validation**: \n   - We first check if the kernel size is larger than the input dimensions. If `k_h > h` or `k_w > w`, the kernel cannot fit inside the input, so we return `-1`.\n\n2. **Divisibility Check**:\n   - We check if `(h - k_h)` is divisible by `s_h` and `(w - k_w)` is divisible by `s_w`. If either is not divisible, the configuration is invalid, and we return `-1`.\n\n3. **Output Calculation**:\n   - If the configuration is valid, we calculate the output dimensions using integer division and return the result as a tuple `(out_h, out_w)`.\n\nThis function ensures that the pooling layer configuration is valid and computes the output dimensions accordingly."}
{"task_id": 513, "completion_id": 0, "completion": "To implement the Factorization Machine regression prediction function, we will use `numpy` for efficient numerical computations. The function will compute predictions for each sample in the design matrix `X` using the given formula. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # Linear term: w0 + \u03a3\u2c7c w\u2c7c x\u2c7c\n    linear_term = w0 + np.dot(X, w)\n    \n    # Interaction term: \u00bd \u03a3_{f=1}^{k} [ (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2 \u2212 \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2 ]\n    interaction_term = np.zeros(n_samples)\n    k = V.shape[1]\n    \n    for f in range(k):\n        # Compute (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2\n        sum_Vx = np.dot(X, V[:, f])\n        sum_Vx_squared = sum_Vx ** 2\n        \n        # Compute \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2\n        V_squared = V[:, f] ** 2\n        sum_V_squared_x_squared = np.dot(X ** 2, V_squared)\n        \n        # Add to interaction term\n        interaction_term += 0.5 * (sum_Vx_squared - sum_V_squared_x_squared)\n    \n    # Total prediction\n    y_pred = linear_term + interaction_term\n    \n    # Round predictions to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# w0 = 0.5\n# w = [0.1, 0.2]\n# V = [[0.3, 0.4], [0.5, 0.6]]\n# predictions = fm_predict(X, w0, w, V)\n# print(predictions)\n```\n\n### Explanation:\n1. **Input Conversion**: We convert the input lists `X`, `w`, and `V` into `numpy` arrays for efficient matrix operations.\n2. **Linear Term Calculation**: We compute the linear term using the dot product of `X` and `w`, adding the bias `w0`.\n3. **Interaction Term Calculation**: For each latent factor `f`, we compute the sum of interactions and adjust it according to the formula. This involves calculating both `(\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2` and `\u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2`.\n4. **Prediction Calculation**: The final prediction for each sample is the sum of the linear and interaction terms.\n5. **Rounding**: We round the predictions to 4 decimal places before returning them.\n\nThis function efficiently computes predictions for all samples in the design matrix `X` using the Factorization Machine model."}
{"task_id": 514, "completion_id": 0, "completion": "```python\ndef switch_phase(current_phase: str,\n                 set_train: bool | None = None,\n                 set_test: bool | None = None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"training\".\n        ``False`` \u2192 \"testing\".\n    set_test : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"testing\".\n        ``False`` \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\").  Returns -1 for\n        invalid inputs.\n    \"\"\"\n    # Check for invalid current_phase\n    if current_phase not in [\"training\", \"testing\"]:\n        return -1\n    \n    # Check for invalid input: both switches supplied or non-Boolean values\n    if (set_train is not None and set_test is not None) or \\\n       (set_train is not None and not isinstance(set_train, bool)) or \\\n       (set_test is not None and not isinstance(set_test, bool)):\n        return -1\n    \n    # Update phase based on set_train\n    if set_train is not None:\n        return \"training\" if set_train else \"testing\"\n    \n    # Update phase based on set_test\n    if set_test is not None:\n        return \"testing\" if set_test else \"training\"\n    \n    # Toggle phase if no switches are supplied\n    return \"testing\" if current_phase == \"training\" else \"training\"\n```\n\nThis function handles the phase switching logic according to the rules provided. It checks for invalid inputs and updates the phase based on the optional switches, or toggles the phase if no switches are provided."}
{"task_id": 515, "completion_id": 0, "completion": "To implement the `flatten_parameters` function, we need to recursively traverse the nested dictionary and construct a new dictionary with flattened keys. Here's how you can achieve this:\n\n```python\nfrom typing import Any, Dict\n\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys. The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    def _flatten(current_dict: Dict[str, Any], parent_key: str = '') -> Dict[str, Any]:\n        items = {}\n        for key, value in current_dict.items():\n            new_key = f\"{parent_key}.{key}\" if parent_key else key\n            if isinstance(value, dict):\n                items.update(_flatten(value, new_key))\n            else:\n                items[new_key] = value\n        return items\n\n    return _flatten(params)\n\n# Example usage\nparams = {\n    \"optimizer\": {\n        \"type\": \"SGD\",\n        \"config\": {\n            \"lr\": 0.01,\n            \"momentum\": 0.9\n        }\n    },\n    \"epochs\": 25\n}\n\nflattened_params = flatten_parameters(params)\nprint(flattened_params)\n```\n\n### Explanation:\n\n1. **Recursive Helper Function**: The `_flatten` function is a helper function that takes the current dictionary and a `parent_key` which represents the path to the current level in the dictionary. It returns a flattened dictionary.\n\n2. **Iterate Over Items**: For each key-value pair in the current dictionary:\n   - If the value is a dictionary, recursively call `_flatten` with the updated `parent_key`.\n   - If the value is not a dictionary, add it to the `items` dictionary with the constructed key.\n\n3. **Concatenate Keys**: The keys are concatenated using a dot (`.`) to represent the path in the nested dictionary.\n\n4. **Return New Dictionary**: The function returns a new dictionary with flattened keys, ensuring the original dictionary is not mutated.\n\nThis implementation efficiently handles nested dictionaries and returns a flattened representation suitable for logging or other purposes."}
{"task_id": 516, "completion_id": 0, "completion": "To implement the function that computes the Euclidean distance between two vectors, we can follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    a = np.array(a)\n    b = np.array(b)\n    \n    # Check if the vectors have the same length\n    if a.shape != b.shape:\n        return -1\n    \n    # Compute the Euclidean distance\n    distance = np.sqrt(np.sum((a - b) ** 2))\n    \n    # Round the result to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# print(euclidean_distance([1, 2, 3], [4, 5, 6]))  # Output: 5.1962\n# print(euclidean_distance([1, 2], [1, 2, 3]))    # Output: -1\n```\n\n### Explanation:\n\n1. **Conversion to NumPy Arrays**: The function first converts the input vectors `a` and `b` to NumPy arrays. This ensures that we can perform vectorized operations on them.\n\n2. **Shape Check**: We check if the shapes of the two arrays are the same. If they are not, the function returns `-1` as specified.\n\n3. **Euclidean Distance Calculation**: The Euclidean distance is calculated using the formula:\n   \\[\n   d(\\mathbf a,\\mathbf b)=\\sqrt{\\sum_{i=1}^{n}(a_i-b_i)^2}\n   \\]\n   This is efficiently computed using NumPy's vectorized operations.\n\n4. **Rounding**: The result is rounded to 4 decimal places using Python's built-in `round` function.\n\nThis implementation handles both lists and NumPy arrays as inputs and ensures that the vectors are of the same length before computing the distance."}
{"task_id": 517, "completion_id": 0, "completion": "To implement the `sigmoid` function with the specified requirements, we need to handle different types of input and ensure numerical stability for large values of `z`. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for uniform processing\n    z_array = np.array(z, dtype=np.float64)\n    \n    # Use a numerically stable version of the sigmoid function\n    # For positive values of z, use the standard formula\n    # For negative values of z, use an alternative formula to avoid overflow\n    positive_mask = z_array >= 0\n    negative_mask = ~positive_mask\n    \n    sigmoid_result = np.empty_like(z_array)\n    sigmoid_result[positive_mask] = 1 / (1 + np.exp(-z_array[positive_mask]))\n    sigmoid_result[negative_mask] = np.exp(z_array[negative_mask]) / (1 + np.exp(z_array[negative_mask]))\n    \n    # Round the result to four decimal places\n    sigmoid_result = np.round(sigmoid_result, 4)\n    \n    # Preserve the input structure\n    if np.isscalar(z):\n        return float(sigmoid_result)\n    else:\n        return sigmoid_result.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\n### Explanation:\n1. **Input Handling**: The function first converts the input `z` into a NumPy array. This allows us to handle scalars, lists, tuples, and arrays uniformly.\n\n2. **Numerical Stability**: \n   - For positive values of `z`, the standard sigmoid formula `1 / (1 + np.exp(-z))` is used.\n   - For negative values of `z`, the alternative formula `np.exp(z) / (1 + np.exp(z))` is used to prevent overflow when `z` is very large in magnitude.\n\n3. **Rounding**: The result is rounded to four decimal places using `np.round`.\n\n4. **Output Structure**: \n   - If the input `z` is a scalar, the function returns a float.\n   - Otherwise, it returns a list using `tolist()` to preserve the input structure.\n\nThis implementation ensures that the function is both numerically stable and meets the requirements for input and output structure."}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> any:\n        # Check if `actual` is one-hot encoded and convert if necessary\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check if `predicted` is one-hot encoded and convert if necessary\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\nThis code defines the `unhot` decorator, which automatically converts one-hot encoded NumPy arrays into their integer label representation before passing them to the wrapped metric function. The decorator checks if the arrays are two-dimensional with a second dimension larger than one, indicating one-hot encoding, and uses `argmax` to convert them to one-dimensional arrays. The original metric function is then called with these processed arrays, and its result is returned unmodified."}
{"task_id": 520, "completion_id": 0, "completion": "To implement the `sigmoid_grad` function, we need to handle different types of inputs: scalars, lists, and NumPy arrays. The function should compute the derivative of the sigmoid function for each element, round the result to four decimal places, and return the result in the same structure as the input. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_gradient(x):\n        # Compute the gradient and round to 4 decimal places\n        return np.round(x * (1 - x), 4)\n    \n    if isinstance(z, (int, float)):\n        # If z is a scalar, compute and return the gradient directly\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        # If z is a list, recursively apply the function to each element\n        return [sigmoid_grad(sub_z) for sub_z in z]\n    elif isinstance(z, np.ndarray):\n        # If z is a NumPy array, apply the function element-wise\n        return np.round(z * (1 - z), 4).tolist()\n    else:\n        raise TypeError(\"Input must be a float, list, or NumPy ndarray.\")\n\n# Example usage:\n# scalar input\nprint(sigmoid_grad(0.5))  # Output: 0.25\n\n# 1-D list input\nprint(sigmoid_grad([0.5, 0.8]))  # Output: [0.25, 0.16]\n\n# 2-D list input\nprint(sigmoid_grad([[0.5, 0.8], [0.3, 0.7]]))  # Output: [[0.25, 0.16], [0.21, 0.21]]\n\n# NumPy array input\nprint(sigmoid_grad(np.array([[0.5, 0.8], [0.3, 0.7]])))  # Output: [[0.25, 0.16], [0.21, 0.21]]\n```\n\n### Explanation:\n- **Scalar Input**: If the input is a scalar (either an integer or a float), the function computes the gradient directly and returns it.\n- **List Input**: If the input is a list, the function recursively applies itself to each element of the list. This handles both 1-D and nested lists.\n- **NumPy Array Input**: If the input is a NumPy array, the function computes the gradient element-wise using NumPy operations and then converts the result back to a list using `.tolist()`.\n- **Rounding**: The `np.round` function is used to ensure that all results are rounded to four decimal places.\n\nThis implementation ensures that the output structure matches the input structure, as required."}
{"task_id": 521, "completion_id": 0, "completion": "To implement the gradient of the ReLU activation function, we need to handle different types of inputs: scalars, Python lists, and NumPy arrays. The function should return the derivative of the ReLU function, which is `0` for non-positive values and `1` for positive values. Let's write the function `relu_grad` to achieve this:\n\n```python\nimport numpy as np\n\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function should return 0 for every entry that is less than or equal to\n    zero and 1 for every entry that is strictly greater than zero. Scalars\n    must yield a single integer; arrays/lists must yield a list of identical\n    shape.\n    \"\"\"\n    # Check if the input is a scalar\n    if np.isscalar(z):\n        return int(z > 0)\n    \n    # Convert input to a NumPy array for easy element-wise operations\n    z_array = np.array(z)\n    \n    # Compute the gradient: 1 for positive elements, 0 otherwise\n    grad = (z_array > 0).astype(int)\n    \n    # Convert the result back to a list with the same shape as the input\n    return grad.tolist()\n\n# Example usage:\n# Scalar input\nprint(relu_grad(-3))  # Output: 0\nprint(relu_grad(0))   # Output: 0\nprint(relu_grad(5))   # Output: 1\n\n# List input\nprint(relu_grad([-3, 0, 5]))  # Output: [0, 0, 1]\n\n# NumPy array input\nprint(relu_grad(np.array([-3, 0, 5])))  # Output: [0, 0, 1]\n```\n\n### Explanation:\n1. **Scalar Check**: We first check if the input `z` is a scalar using `np.isscalar(z)`. If it is, we return `1` if `z` is positive and `0` otherwise.\n\n2. **Array Conversion**: For non-scalar inputs, we convert `z` to a NumPy array. This allows us to perform element-wise operations easily.\n\n3. **Gradient Calculation**: We compute the gradient using `(z_array > 0).astype(int)`, which creates a boolean array where each element is `True` if the corresponding element in `z_array` is positive, and `False` otherwise. We then convert this boolean array to an integer array (`1` for `True`, `0` for `False`).\n\n4. **Return as List**: Finally, we convert the NumPy array back to a Python list using `tolist()` to match the required output format.\n\nThis implementation handles scalars, lists, and NumPy arrays, returning the correct gradient for each input type."}
{"task_id": 522, "completion_id": 0, "completion": "To implement the function `standard_normal` as described, we need to follow these steps:\n\n1. Import the necessary library, which is NumPy in this case.\n2. Reset the NumPy random seed to 42 to ensure reproducibility.\n3. Generate a tensor with the specified shape using the standard normal distribution.\n4. Round each element in the tensor to four decimal places.\n5. Convert the NumPy array to a Python list using the `tolist()` method.\n6. Return the resulting list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    # Reset the random seed for reproducibility\n    np.random.seed(42)\n    \n    # Generate the tensor with the specified shape\n    tensor = np.random.normal(loc=0.0, scale=1.0, size=weight_shape)\n    \n    # Round each element to four decimal places\n    rounded_tensor = np.round(tensor, 4)\n    \n    # Convert the NumPy array to a Python list\n    result_list = rounded_tensor.tolist()\n    \n    return result_list\n```\n\n### Explanation:\n\n- **Random Seed**: We use `np.random.seed(42)` to ensure that every time the function is called, the same sequence of random numbers is generated.\n- **Standard Normal Distribution**: `np.random.normal(loc=0.0, scale=1.0, size=weight_shape)` generates numbers from a normal distribution with mean 0 and standard deviation 1.\n- **Rounding**: `np.round(tensor, 4)` rounds each element in the tensor to four decimal places.\n- **Conversion to List**: `tolist()` converts the NumPy array to a nested Python list, which is the required output format. \n\nThis implementation ensures that the function meets all the specified requirements and constraints."}
{"task_id": 523, "completion_id": 0, "completion": "To implement the He normal weight initialization, we need to consider the shape of the weight tensor and calculate the fan-in accordingly. Based on the fan-in, we can determine the standard deviation for the normal distribution from which we will draw the weights. Here's how you can implement this in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    # Determine the fan-in based on the shape of the weight tensor\n    if len(weight_shape) == 2:\n        # Fully-connected / dense layer\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        # Convolutional kernel\n        kernel_h, kernel_w, in_channels, _ = weight_shape\n        fan_in = kernel_h * kernel_w * in_channels\n    else:\n        # Default to treating it as a 2-D tensor\n        fan_in = weight_shape[0]\n\n    # Calculate the standard deviation for the He normal distribution\n    std_dev = np.sqrt(2.0 / fan_in)\n\n    # Generate the weights using a normal distribution with mean 0 and calculated std_dev\n    weights = np.random.normal(loc=0.0, scale=std_dev, size=weight_shape)\n\n    # Convert the weights to a nested list and round each element to four decimal places\n    weights_rounded = np.round(weights, 4).tolist()\n\n    return weights_rounded\n\n# Example usage:\nnp.random.seed(0)  # Fixing the random seed for reproducibility\nweight_shape = (2, 2)\nweights = he_normal(weight_shape)\nprint(weights)\n```\n\n### Explanation:\n1. **Determine Fan-in**: The function first checks the shape of the weight tensor to determine the fan-in. For a 2-D tensor, the fan-in is the first dimension. For a 4-D tensor, the fan-in is the product of the first three dimensions.\n\n2. **Calculate Standard Deviation**: Using the fan-in, the standard deviation for the He normal distribution is calculated as \\(\\sigma = \\sqrt{\\frac{2}{\\text{fan-in}}}\\).\n\n3. **Generate Weights**: The weights are generated using NumPy's `np.random.normal` function, which draws samples from a normal distribution with the specified mean and standard deviation.\n\n4. **Round and Convert to List**: The generated weights are rounded to four decimal places and converted to a nested list format.\n\n5. **Reproducibility**: The example usage includes setting a random seed to ensure that the results are reproducible, which is useful for testing and demonstration purposes."}
{"task_id": 525, "completion_id": 0, "completion": "To implement Ridge Regression using the closed-form solution, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef ridge_regression(\n        X: np.ndarray,\n        y: np.ndarray,\n        lambda_: float = 0.0) -> tuple[list[float], float]:\n    \"\"\"Fit a Ridge (L2-regularised) linear regression model.\n\n    The function must compute the optimal weights **analytically** (closed form)\n    and return them together with the intercept term, both rounded to 4\n    decimal places.\n\n    Args:\n        X: 2-D array of shape (m, n) with the input features.\n        y: 1-D or 2-D array of shape (m,) or (m, 1) with the targets.\n        lambda_: Non-negative regularisation strength.\n\n    Returns:\n        (weights, bias)\n        weights \u2013 list of length *n* with the model weights.\n        bias    \u2013 scalar intercept term.\n    \"\"\"\n    # Ensure y is a 1-D array\n    y = y.flatten()\n\n    # Step 1: Mean-center the data\n    X_mean = np.mean(X, axis=0)\n    y_mean = np.mean(y)\n    \n    X_centered = X - X_mean\n    y_centered = y - y_mean\n\n    # Step 2: Solve for the optimal weights\n    n = X.shape[1]\n    I = np.eye(n)\n    XTX = X_centered.T @ X_centered\n    XTy = X_centered.T @ y_centered\n\n    # Regularization term\n    regularization = lambda_ * I\n\n    # Compute the weights using the closed-form solution\n    try:\n        # Attempt to use the inverse\n        w = np.linalg.inv(XTX + regularization) @ XTy\n    except np.linalg.LinAlgError:\n        # Use the pseudo-inverse if the matrix is singular\n        w = np.linalg.pinv(XTX + regularization) @ XTy\n\n    # Step 3: Recover the bias\n    b = y_mean - X_mean @ w\n\n    # Round the weights and bias to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n\n    return w_rounded, b_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# lambda_ = 0.1\n# weights, bias = ridge_regression(X, y, lambda_)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\n### Explanation:\n\n1. **Mean-Centering**: We subtract the mean of each feature from the dataset `X` and the mean of the target `y` to center the data.\n\n2. **Closed-Form Solution**: We compute the weights using the formula `w = (X\u1d40X + \u03bbI)\u207b\u00b9 X\u1d40 y`. If the matrix `(X\u1d40X + \u03bbI)` is singular, we use the Moore-Penrose pseudo-inverse to compute the weights.\n\n3. **Bias Recovery**: The bias `b` is computed as `b = \u0233 \u2212 x\u0304\u00b7w`, where `\u0233` is the mean of `y` and `x\u0304` is the mean of `X`.\n\n4. **Rounding**: We round the weights and bias to 4 decimal places before returning them.\n\nThis implementation ensures that the Ridge Regression model is computed correctly using the closed-form solution, handling potential singular matrices gracefully."}
{"task_id": 527, "completion_id": 0, "completion": "```python\nimport os\nfrom typing import List, Union\n\ndef extract_archive(file_path: str, path: str = '.', archive_format: Union[str, List[str], None] = 'auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n    # Define supported extensions for each format\n    supported_formats = {\n        'tar': ['.tar', '.tar.gz', '.tgz', '.tar.bz', '.tar.bz2', '.tbz'],\n        'zip': ['.zip']\n    }\n    \n    # Normalize archive_format to a list of formats\n    if archive_format == 'auto':\n        allowed_formats = ['tar', 'zip']\n    elif isinstance(archive_format, str):\n        allowed_formats = [archive_format]\n    elif isinstance(archive_format, list):\n        allowed_formats = archive_format\n    else:\n        return False\n    \n    # If no formats are allowed, return False immediately\n    if not allowed_formats:\n        return False\n    \n    # Extract the file extension in a case-insensitive manner\n    _, file_extension = os.path.splitext(file_path)\n    file_extension = file_extension.lower()\n    \n    # Check if the file extension matches any of the allowed formats\n    for format in allowed_formats:\n        if format in supported_formats:\n            if file_extension in supported_formats[format]:\n                return True\n    \n    return False\n```\n\n### Explanation:\n1. **Supported Formats**: We define a dictionary `supported_formats` that maps each archive format to its list of recognized extensions.\n\n2. **Normalize `archive_format`**: We convert the `archive_format` parameter into a list of allowed formats. If `archive_format` is `'auto'`, both `'tar'` and `'zip'` are allowed. If it's a string, we convert it into a single-element list. If it's a list, we use it directly. If it's `None` or an empty list, we return `False` immediately.\n\n3. **Extract File Extension**: We use `os.path.splitext` to get the file extension and convert it to lowercase for case-insensitive comparison.\n\n4. **Check Allowed Formats**: We iterate over the allowed formats and check if the file extension matches any of the extensions in the `supported_formats` dictionary. If a match is found, we return `True`.\n\n5. **Return `False`**: If no match is found after checking all allowed formats, we return `False`."}
{"task_id": 528, "completion_id": 0, "completion": "To implement the function `decision_boundary_grid`, we need to follow these steps:\n\n1. Determine the range for each dimension based on the input data `X`.\n2. Create equally spaced arrays `x1_plot` and `x2_plot` using `np.linspace`.\n3. Generate a mesh grid using `np.meshgrid`.\n4. Classify each point in the mesh grid using the given linear classifier rule.\n5. Store the classification results in a 2-D list and return it.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Extract the minimum and maximum values for each dimension\n    X = np.array(X)\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n\n    # Create equally spaced arrays for each dimension\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n\n    # Create a mesh grid\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n\n    # Initialize the result list\n    result = []\n\n    # Classify each point in the mesh grid\n    for i in range(grid_n):\n        row = []\n        for j in range(grid_n):\n            x1 = x1_mesh[i, j]\n            x2 = x2_mesh[i, j]\n            # Apply the classification rule\n            z = W[0] * x1 + W[1] * x2 + b\n            label = 1 if z >= 0 else -1\n            row.append(label)\n        result.append(row)\n\n    return result\n```\n\n### Explanation:\n\n- **Data Range Calculation**: We use `np.min` and `np.max` to find the range of values for each dimension in `X`.\n- **Grid Creation**: `np.linspace` generates `grid_n` equally spaced values between the min and max for each dimension.\n- **Mesh Grid**: `np.meshgrid` creates a grid of points from the two arrays.\n- **Classification**: We iterate over each point in the mesh grid, apply the linear classifier rule, and store the result in a list.\n- **Return**: The function returns a list of lists containing the classification results for each grid point."}
{"task_id": 529, "completion_id": 0, "completion": "To implement the `generate_progress_bar` function according to the given specifications, we need to handle two main scenarios: when the target is known and when it is unknown. Let's break down the implementation step by step:\n\n1. **Known Target**: Calculate the number of digits required for the target, format the current and target values, compute the progress width, and construct the progress bar using the specified characters.\n\n2. **Unknown Target**: Simply format the current step with `/Unknown`.\n\nHere's the complete implementation:\n\n```python\nimport math\n\ndef generate_progress_bar(current: int, target: int | None, width: int = 30) -> str:\n    \"\"\"Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n    \"\"\"\n    if target is not None:\n        # Calculate the number of digits needed for the target\n        d = math.ceil(math.log10(target + 1))\n        \n        # Format the current and target values\n        progress_str = f\"{current:>{d}}/{target} [\"\n        \n        # Calculate the filled length of the bar\n        prog_width = int(width * current / target)\n        \n        # Construct the progress bar\n        if prog_width > 0:\n            progress_str += \"=\" * (prog_width - 1)\n            if current < target:\n                progress_str += \">\"\n            else:\n                progress_str += \"=\"\n        \n        # Fill the rest of the bar with dots\n        progress_str += \".\" * (width - prog_width)\n        progress_str += \"]\"\n        \n        return progress_str\n    else:\n        # Format the current step with `/Unknown`\n        return f\"{current:>7}/Unknown\"\n\n# Example usage:\n# print(generate_progress_bar(5, 20, 30))\n# print(generate_progress_bar(5, None, 30))\n```\n\n### Explanation:\n\n- **Known Target**:\n  - We calculate the number of digits `d` required to represent the target using `math.log10`.\n  - We format the current step and target using right alignment with the calculated width `d`.\n  - We compute `prog_width` as the integer part of the ratio of `current` to `target` multiplied by `width`.\n  - We construct the progress bar using `=` and `>` or `=` depending on whether the progress is complete.\n  - We fill the remaining space with dots `.` and close the bar with a `]`.\n\n- **Unknown Target**:\n  - We format the current step as a right-aligned 7-character string followed by `/Unknown`.\n\nThis implementation ensures that the progress bar is constructed exactly according to the specified format, including all spaces, brackets, and characters."}
{"task_id": 530, "completion_id": 0, "completion": "To implement the binary cross-entropy loss function, we need to follow these steps:\n\n1. Clip the predicted probabilities `y_pred` to ensure numerical stability when taking the logarithm. This involves constraining the values to be within the range [1e-7, 1 - 1e-7].\n2. Compute the binary cross-entropy loss for each sample using the formula provided.\n3. Calculate the mean of these losses across all samples.\n4. Return the mean loss rounded to 4 decimal places.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) which is undefined\n    y_pred = np.clip(y_pred, 1e-7, 1 - 1e-7)\n    \n    # Calculate the binary cross-entropy loss for each sample\n    loss = - (y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    \n    # Calculate the mean loss\n    mean_loss = np.mean(loss)\n    \n    # Return the mean loss rounded to 4 decimal places\n    return round(mean_loss, 4)\n\n# Example usage:\n# y_true = np.array([0, 1, 1, 0])\n# y_pred = np.array([0.1, 0.9, 0.8, 0.2])\n# print(binary_cross_entropy(y_true, y_pred))  # Output should be the mean BCE loss\n```\n\nThis function will compute the mean binary cross-entropy loss for a batch of predictions, ensuring numerical stability by clipping the predicted probabilities. The result is rounded to four decimal places as required."}
{"task_id": 531, "completion_id": 0, "completion": "To implement the generalized cosine window generator, we need to calculate the phase variable \\(\\theta_n\\) based on whether the window is symmetric or periodic. Then, we compute the window values using the given coefficients and round them to four decimal places. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function should create either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and return it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    if symmetric:\n        # Symmetric window: sample exactly L equally\u2013spaced points from -\u03c0 to \u03c0\n        theta = np.linspace(-np.pi, np.pi, window_len)\n    else:\n        # Periodic window: sample L+1 equally\u2013spaced points from -\u03c0 to \u03c0 and discard the last value\n        theta = np.linspace(-np.pi, np.pi, window_len + 1)[:-1]\n\n    # Calculate the window values\n    window = np.zeros(window_len)\n    for k, a_k in enumerate(coefs):\n        window += a_k * np.cos(k * theta)\n\n    # Round the values to four decimal places\n    window = np.round(window, 4)\n\n    return window.tolist()\n\n# Example usage:\n# window_len = 5\n# coefs = [0.5, 0.5]\n# symmetric = True\n# print(generalized_cosine(window_len, coefs, symmetric))\n```\n\n### Explanation:\n1. **Phase Calculation**:\n   - For a symmetric window, we use `np.linspace(-np.pi, np.pi, window_len)` to get `L` equally spaced points.\n   - For a periodic window, we use `np.linspace(-np.pi, np.pi, window_len + 1)[:-1]` to get `L+1` points and discard the last one.\n\n2. **Window Calculation**:\n   - Initialize the window as a zero array of length `window_len`.\n   - Iterate over the coefficients and compute the sum of cosine terms for each coefficient.\n\n3. **Rounding**:\n   - Use `np.round(window, 4)` to round each value in the window to four decimal places.\n\n4. **Return**:\n   - Convert the numpy array to a list and return it."}
{"task_id": 532, "completion_id": 0, "completion": "To implement the function `count_fc_parameters`, we need to iterate through the list of layer sizes and calculate the number of trainable parameters (weights and biases) for each pair of consecutive layers. Here's how you can implement this:\n\n```python\ndef count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    # If there are fewer than two layers, return 0 as there are no trainable parameters\n    if len(layers) < 2:\n        return 0\n\n    # Initialize the total parameter count\n    total_parameters = 0\n\n    # Iterate through the layers to calculate weights and biases between consecutive layers\n    for i in range(len(layers) - 1):\n        n_in = layers[i]\n        n_out = layers[i + 1]\n        \n        # Calculate weights and biases for the current layer pair\n        weights = n_in * n_out\n        biases = n_out\n        \n        # Add to the total parameter count\n        total_parameters += weights + biases\n\n    return total_parameters\n\n# Example usage:\n# layers = [3, 5, 2]  # Example with 3 neurons in input layer, 5 in hidden layer, 2 in output layer\n# print(count_fc_parameters(layers))  # Output should be 27 (3*5 + 5 + 5*2 + 2)\n```\n\n### Explanation:\n- **Weights Calculation**: For each pair of consecutive layers, the number of weights is the product of the number of neurons in the current layer (`n_in`) and the number of neurons in the next layer (`n_out`).\n- **Biases Calculation**: For each layer except the input layer, there is one bias per neuron, so the number of biases is equal to the number of neurons in the next layer (`n_out`).\n- **Total Parameters**: Sum the weights and biases for each pair of consecutive layers to get the total number of trainable parameters.\n- **Edge Case**: If the list of layers has fewer than two elements, return 0 because no trainable parameters exist."}
{"task_id": 533, "completion_id": 0, "completion": "To implement the `gaussian_likelihood` function as described, we need to handle both scalar and list/array inputs for `x`. We'll use NumPy for efficient computation, especially when dealing with arrays. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    # Define the PDF function\n    def pdf(x, mean, sigma):\n        return (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-((x - mean) ** 2) / (2 * sigma ** 2))\n    \n    # Check if x is a scalar\n    if isinstance(x, (int, float)):\n        # Calculate the PDF for a single value\n        result = pdf(x, mean, sigma)\n        # Return the result rounded to 4 decimal places\n        return round(result, 4)\n    else:\n        # Convert x to a NumPy array if it's not already\n        x = np.asarray(x)\n        # Calculate the PDF for each element in the array\n        result = pdf(x, mean, sigma)\n        # Return the results as a list, rounded to 4 decimal places\n        return np.round(result, 4).tolist()\n\n# Example usage:\n# print(gaussian_likelihood(0, 0, 1))  # For a scalar input\n# print(gaussian_likelihood([0, 1, 2], 0, 1))  # For a list input\n```\n\n### Explanation:\n1. **PDF Function**: We define a helper function `pdf` that computes the probability density function for a given `x`, `mean`, and `sigma`.\n\n2. **Scalar Check**: We check if `x` is a scalar (either an `int` or `float`). If it is, we compute the PDF for that single value and return the result rounded to four decimal places.\n\n3. **Array Handling**: If `x` is not a scalar, we assume it's a list or a NumPy array. We convert it to a NumPy array (if it isn't one already) to leverage NumPy's vectorized operations for efficient computation.\n\n4. **Result Formatting**: For array inputs, we compute the PDF for each element, round the results to four decimal places, and convert the NumPy array back to a Python list using `tolist()`.\n\nThis implementation efficiently handles both scalar and array inputs, providing the desired output format and precision."}
{"task_id": 534, "completion_id": 0, "completion": "To implement the `sigmoid_` function that computes the logistic sigmoid activation element-wise, we need to handle different types of inputs: scalars, 1-D lists/arrays, and 2-D lists/arrays. We'll use NumPy to facilitate element-wise operations and ensure that the function can handle both lists and NumPy arrays seamlessly. Here's how you can implement this function:\n\n```python\nimport numpy as np\n\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals. Returns a float for\n        scalar input; otherwise returns a Python list preserving the input\n        shape.\n    \"\"\"\n    # Convert input to a NumPy array for uniform processing\n    Z_np = np.array(Z, dtype=np.float64)\n    \n    # Compute the sigmoid function\n    sigmoid_result = 1 / (1 + np.exp(-Z_np))\n    \n    # Round the result to 4 decimal places\n    rounded_result = np.round(sigmoid_result, 4)\n    \n    # Check if the input was a scalar\n    if np.isscalar(Z):\n        return float(rounded_result)\n    else:\n        # Convert the result back to a list if the input was not a scalar\n        return rounded_result.tolist()\n\n# Example usage:\n# Scalar input\nprint(sigmoid_(0))  # Output: 0.5\n\n# 1-D list input\nprint(sigmoid_([0, 2, -2]))  # Output: [0.5, 0.8808, 0.1192]\n\n# 2-D list input\nprint(sigmoid_([[0, 2], [-2, 3]]))  # Output: [[0.5, 0.8808], [0.1192, 0.9526]]\n\n# NumPy array input\nprint(sigmoid_(np.array([0, 2, -2])))  # Output: [0.5, 0.8808, 0.1192]\n```\n\n### Explanation:\n\n1. **Input Handling**: We first convert the input `Z` into a NumPy array `Z_np` to handle both lists and arrays uniformly. This also ensures that operations like exponentiation are applied element-wise.\n\n2. **Sigmoid Calculation**: We compute the sigmoid function using the formula \\( \\sigma(z) = \\frac{1}{1 + e^{-z}} \\).\n\n3. **Rounding**: We round the result to 4 decimal places using `np.round`.\n\n4. **Output**: \n   - If the input `Z` is a scalar, we return the result as a Python float.\n   - If the input is a list or array, we convert the rounded NumPy array back to a list using `.tolist()` to meet the requirement of returning a list for non-scalar inputs.\n\nThis implementation ensures that the function works correctly for different input types while preserving the input shape and rounding requirements."}
{"task_id": 536, "completion_id": 0, "completion": "To implement the linear regression function with both the Normal Equation and Batch Gradient Descent (BGD), we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef linear_regression(X_train, y_train, X_test, method=\"normal\", alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n    # Prepend a column of ones to X_train and X_test for the bias term\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    \n    if method == \"normal\":\n        # Normal Equation: \u03b8 = (X\u1d40X)\u207b\u00b9X\u1d40y\n        theta = np.linalg.inv(X_train.T @ X_train) @ X_train.T @ y_train\n    else:\n        # Batch Gradient Descent\n        m = X_train.shape[0]\n        theta = np.zeros(X_train.shape[1])\n        \n        for _ in range(num_iter):\n            gradient = (X_train.T @ (X_train @ theta - y_train)) / m\n            theta -= alpha * gradient\n    \n    # Predict target values for X_test\n    predictions = X_test @ theta\n    \n    # Round predictions to 4 decimal places\n    return np.round(predictions, 4).tolist()\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([5, 7, 9])\n# X_test = np.array([[4, 5], [5, 6]])\n# print(linear_regression(X_train, y_train, X_test, method=\"normal\"))\n# print(linear_regression(X_train, y_train, X_test, method=\"bgd\", alpha=0.01, num_iter=1000))\n```\n\n### Explanation:\n1. **Prepend a column of ones**: We add a column of ones to both `X_train` and `X_test` to account for the bias term in the linear model.\n\n2. **Normal Equation**: If the method is \"normal\", we compute the parameter vector `\u03b8` using the closed-form solution `(X\u1d40X)\u207b\u00b9X\u1d40y`.\n\n3. **Batch Gradient Descent**: If the method is not \"normal\", we initialize `\u03b8` with zeros and iteratively update it using the gradient descent formula. The learning rate `alpha` and the number of iterations `num_iter` control the update process.\n\n4. **Prediction**: We compute predictions for `X_test` using the learned parameters `\u03b8`.\n\n5. **Rounding**: The predictions are rounded to four decimal places using `np.round`.\n\nThis implementation provides a flexible approach to linear regression, allowing users to choose between the Normal Equation and Batch Gradient Descent based on their needs."}
{"task_id": 537, "completion_id": 0, "completion": "To implement a Gaussian Naive Bayes classifier from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Calculate class priors\n    classes = np.unique(y_train)\n    class_priors = {c: np.mean(y_train == c) for c in classes}\n    \n    # Calculate mean and standard deviation for each feature and class\n    means = {}\n    stds = {}\n    epsilon = 1e-9  # Small constant to avoid division by zero\n    \n    for c in classes:\n        X_c = X_train[y_train == c]\n        means[c] = np.mean(X_c, axis=0)\n        stds[c] = np.std(X_c, axis=0) + epsilon\n    \n    # Function to calculate Gaussian likelihood\n    def gaussian_likelihood(x, mean, std):\n        return (1 / (np.sqrt(2 * np.pi) * std)) * np.exp(-((x - mean) ** 2) / (2 * std ** 2))\n    \n    # Predict class for each sample in X_test\n    predictions = []\n    for x in X_test:\n        posteriors = {}\n        for c in classes:\n            prior = np.log(class_priors[c])\n            likelihood = np.sum(np.log(gaussian_likelihood(x, means[c], stds[c])))\n            posteriors[c] = prior + likelihood\n        \n        # Choose the class with the highest posterior probability\n        predicted_class = max(posteriors, key=posteriors.get)\n        predictions.append(predicted_class)\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Class Priors**: We calculate the prior probability for each class as the relative frequency of each class in the training data.\n\n2. **Mean and Standard Deviation**: For each class, we compute the mean and standard deviation of each feature. We add a small constant `epsilon` to the standard deviation to avoid division by zero.\n\n3. **Gaussian Likelihood**: We define a function `gaussian_likelihood` to compute the likelihood of a feature value given the class, using the Gaussian distribution formula.\n\n4. **Posterior Probability**: For each test sample, we compute the posterior probability for each class by summing the log of the likelihoods (to prevent underflow) and adding the log of the prior.\n\n5. **Prediction**: We predict the class with the highest posterior probability for each test sample.\n\nThis implementation should correctly classify the test samples based on the Gaussian Naive Bayes model."}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): Array of predicted probabilities, shape (1, m) or (m,)\n    Y (np.ndarray): Array of true labels, shape (1, m) or (m,)\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n\n    # Number of examples\n    m = AL.shape[0]\n\n    # Clip probabilities to avoid log(0) issues\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n\n    # Compute the binary cross-entropy cost\n    cost = -np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)) / m\n\n    # Return the cost as a plain Python float\n    return float(cost)\n\n# Example usage:\n# AL = np.array([0.9, 0.2, 0.8])\n# Y = np.array([1, 0, 1])\n# print(round(compute_cost(AL, Y), 4))\n```\n\nThis function calculates the binary cross-entropy cost for a given set of predicted probabilities and true labels. It ensures numerical stability by clipping the probabilities before taking the logarithm. The result is returned as a plain Python float, which can be rounded to four decimal places for display purposes."}
{"task_id": 540, "completion_id": 0, "completion": "To implement the function that calculates the element-wise derivative of the sigmoid function, we can follow these steps:\n\n1. Compute the sigmoid function for each element in the input array `Z`.\n2. Use the formula for the derivative of the sigmoid function: `\u03c3\u2032(z) = \u03c3(z) \u00b7 (1 \u2212 \u03c3(z))`.\n3. Round the results to four decimal places.\n4. Convert the resulting NumPy array to a Python list using the `tolist()` method.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    # Compute the sigmoid function\n    sigmoid = 1 / (1 + np.exp(-Z))\n    \n    # Compute the derivative of the sigmoid function\n    derivative = sigmoid * (1 - sigmoid)\n    \n    # Round the results to 4 decimal places\n    derivative_rounded = np.round(derivative, 4)\n    \n    # Convert the result to a Python list\n    return derivative_rounded.tolist()\n\n# Example usage:\n# Z = np.array([0, 1, -1, 0.5])\n# print(derivative_sigmoid(Z))\n```\n\nThis function will correctly compute the derivative of the sigmoid function for each element in the input array `Z`, round the results to four decimal places, and return them as a Python list."}
{"task_id": 541, "completion_id": 0, "completion": "To solve this task, we need to implement a function that calculates the gradient of the Binary Cross-Entropy (BCE) loss with respect to the logits. The formula for the gradient is straightforward: \\(\\hat y - y\\). We will use NumPy to handle the array operations efficiently, and ensure that the output is rounded to four decimal places before converting it to a Python list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef return_input_grads(y, y_hat):\n    \"\"\"Compute the gradient of Binary Cross-Entropy loss with respect to the\n    network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array\n        or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with\n        the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal\n        places, returned as a regular Python list (with the original shape).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y = np.array(y)\n    y_hat = np.array(y_hat)\n    \n    # Compute the gradient\n    gradient = y_hat - y\n    \n    # Round the gradient to 4 decimal places\n    gradient_rounded = np.round(gradient, 4)\n    \n    # Convert the result to a Python list\n    return gradient_rounded.tolist()\n\n# Example usage:\n# y = [0, 1, 0]\n# y_hat = [0.1, 0.9, 0.2]\n# print(return_input_grads(y, y_hat))\n```\n\n### Explanation:\n1. **Input Conversion**: We first convert the inputs `y` and `y_hat` to NumPy arrays to facilitate element-wise operations.\n2. **Gradient Calculation**: We compute the gradient using the formula \\(\\hat y - y\\).\n3. **Rounding**: We round the computed gradient to four decimal places using `np.round`.\n4. **Conversion to List**: Finally, we convert the NumPy array back to a regular Python list using `tolist()` to meet the output requirements.\n\nThis function will handle inputs of any shape (scalars, 1-D, or 2-D arrays) as long as `y` and `y_hat` have the same shape."}
{"task_id": 542, "completion_id": 0, "completion": "To implement the RMSProp optimization step, we need to follow the update rules provided in the task description. The function will take in lists of parameters and their corresponding gradients, and optionally a list of running averages. If the running averages are not provided, we will initialize them to zero arrays of the same shape as the gradients. The function will then perform the RMSProp update for each parameter and return the updated parameters and running averages.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef rmsprop_update(\n    params: list[np.ndarray],\n    grads: list[np.ndarray],\n    s: list[np.ndarray] | None = None,\n    alpha: float = 0.01,\n    beta: float = 0.9,\n    epsilon: float = 1e-8,\n) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"Perform a single RMSProp optimization step.\"\"\"\n    \n    # Initialize running averages if not provided\n    if s is None or len(s) == 0:\n        s = [np.zeros_like(g) for g in grads]\n    \n    new_params = []\n    new_s = []\n    \n    for param, grad, s_i in zip(params, grads, s):\n        # Update the running average of squared gradients\n        s_i = beta * s_i + (1 - beta) * np.square(grad)\n        \n        # Update the parameter\n        param_update = alpha * grad / (np.sqrt(s_i) + epsilon)\n        new_param = param - param_update\n        \n        # Append the updated parameter and running average\n        new_params.append(np.round(new_param, 6))\n        new_s.append(s_i)\n    \n    return new_params, new_s\n```\n\n### Explanation:\n\n1. **Initialization of `s`:** If the running averages `s` are not provided, we initialize them as zero arrays with the same shape as the gradients.\n\n2. **Loop through parameters and gradients:**\n   - For each parameter, gradient, and corresponding running average `s_i`, we update `s_i` using the formula:  \n     \\( s_i \\leftarrow \\beta \\cdot s_i + (1 - \\beta) \\cdot g^2 \\)\n   - We then compute the parameter update using the formula:  \n     \\( \\theta \\leftarrow \\theta - \\alpha \\cdot \\frac{g}{\\sqrt{s_i} + \\varepsilon} \\)\n   - The updated parameter is rounded to 6 decimal places using `np.round`.\n\n3. **Return:** The function returns the list of updated parameters and the updated running averages.\n\nThis implementation ensures that the RMSProp update is applied correctly to each parameter tensor, and the updated parameters are rounded as specified."}
{"task_id": 543, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n    \"\"\"\n    if not data:\n        return 0.0\n    \n    # Count the occurrences of each class label\n    label_counts = Counter(data)\n    total_samples = len(data)\n    \n    # Calculate the proportion of each class\n    proportions = [count / total_samples for count in label_counts.values()]\n    \n    # Calculate the Gini index using the formula\n    gini_index = 1 - sum(p ** 2 for p in proportions)\n    \n    # Round the result to 4 decimal places\n    return round(gini_index, 4)\n\n# Example usage:\n# labels = ['a', 'b', 'a', 'a', 'b', 'c']\n# print(cal_gini_index(labels))  # Output: 0.6111\n```\n\nThis function calculates the Gini index for a given list of class labels. It uses the `Counter` from the `collections` module to count occurrences of each label, computes the proportions, and then applies the Gini index formula. The result is rounded to four decimal places, and if the input list is empty, it returns 0.0."}
{"task_id": 544, "completion_id": 0, "completion": "To accomplish the task of splitting a dataset based on a threshold, we can iterate through each sample in the dataset and check the value of the specified feature against the given threshold. Based on the comparison, we will append the sample to either `set1` or `set2`. Here's the implementation:\n\n```python\ndef split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    set1 = []\n    set2 = []\n    \n    for sample in data:\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n    \n    return set1, set2\n\n# Example usage:\ndata = [\n    [2.5, 3.0, 1.5],\n    [1.0, 2.0, 3.5],\n    [3.5, 1.0, 2.5],\n    [2.0, 3.5, 1.0]\n]\nfea = 0\nvalue = 2.0\n\nset1, set2 = split_tree(data, fea, value)\nprint(\"Set1:\", set1)\nprint(\"Set2:\", set2)\n```\n\n### Explanation:\n- **Initialization**: We start by initializing two empty lists, `set1` and `set2`, which will hold the samples based on the threshold condition.\n- **Iteration**: We iterate over each sample in the `data` list.\n- **Condition Check**: For each sample, we check if the value at the specified feature index `fea` is greater than or equal to the `value`. If it is, we append the sample to `set1`; otherwise, we append it to `set2`.\n- **Return**: Finally, we return the tuple `(set1, set2)`.\n\nThis function ensures that the original order of samples is preserved in both `set1` and `set2`, and the original `data` list remains unmodified."}
{"task_id": 545, "completion_id": 0, "completion": "To solve this problem, we need to traverse the binary decision tree recursively and compute two statistics: the number of leaf nodes and the maximum depth of the tree. We'll use a single recursive function to achieve this, ensuring that we efficiently gather both statistics in one traversal.\n\nHere's the implementation of the `tree_stats` function:\n\n```python\ndef tree_stats(root: \"node | None\") -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n    if root is None:\n        return 0, 0\n\n    def traverse(node: \"node\", depth: int) -> tuple[int, int]:\n        if node is None:\n            return 0, depth - 1\n\n        if node.results is not None:\n            # It's a leaf node\n            return 1, depth\n\n        # Traverse left and right children\n        left_leaves, left_depth = traverse(node.left, depth + 1)\n        right_leaves, right_depth = traverse(node.right, depth + 1)\n\n        # Total leaves and maximum depth from this node\n        total_leaves = left_leaves + right_leaves\n        max_depth = max(left_depth, right_depth)\n\n        return total_leaves, max_depth\n\n    return traverse(root, 1)\n\n```\n\n### Explanation:\n\n1. **Base Case**: If the `root` is `None`, the tree is empty, so we return `(0, 0)` indicating zero leaf nodes and zero depth.\n\n2. **Recursive Function `traverse`**:\n   - **Parameters**: It takes a `node` and the current `depth`.\n   - **Leaf Node Check**: If `node.results` is not `None`, it's a leaf node. We return `(1, depth)` because it contributes one leaf and its depth is the current depth.\n   - **Recursive Traversal**: We recursively call `traverse` on the left and right children, increasing the depth by 1.\n   - **Combine Results**: We sum the leaf counts from the left and right subtrees and take the maximum depth from both subtrees.\n\n3. **Initial Call**: We start the traversal from the `root` with an initial depth of `1`.\n\nThis approach ensures that we efficiently compute both statistics in a single traversal of the tree."}
{"task_id": 546, "completion_id": 0, "completion": "To implement the CART decision tree using the Gini impurity criterion, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nfrom collections import Counter\nfrom typing import Any, Dict, List\n\ndef gini_impurity(data: List[List[Any]]) -> float:\n    \"\"\"Calculate the Gini impurity for a dataset.\"\"\"\n    if not data:\n        return 0.0\n    labels = [sample[-1] for sample in data]\n    label_counts = Counter(labels)\n    impurity = 1.0\n    total_samples = len(data)\n    for count in label_counts.values():\n        prob = count / total_samples\n        impurity -= prob ** 2\n    return impurity\n\ndef split_data(data: List[List[Any]], feature_index: int, value: Any) -> (List[List[Any]], List[List[Any]]):\n    \"\"\"Split the data into two subsets based on a feature and its value.\"\"\"\n    left = [sample for sample in data if sample[feature_index] == value]\n    right = [sample for sample in data if sample[feature_index] != value]\n    return left, right\n\ndef majority_class(data: List[List[Any]]) -> Any:\n    \"\"\"Find the majority class in the dataset.\"\"\"\n    labels = [sample[-1] for sample in data]\n    label_counts = Counter(labels)\n    majority_label = max(label_counts, key=lambda label: (label_counts[label], -labels.index(label)))\n    return majority_label\n\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n    \"\"\"Build a CART decision tree using the Gini impurity criterion.\"\"\"\n    if not data:\n        return {}\n\n    current_impurity = gini_impurity(data)\n    best_gain = 0.0\n    best_split = None\n\n    num_features = len(data[0]) - 1\n\n    for feature_index in range(num_features):\n        unique_values = sorted(set(sample[feature_index] for sample in data))\n        for value in unique_values:\n            left, right = split_data(data, feature_index, value)\n            if not left or not right:\n                continue\n\n            # Calculate the Gini gain\n            left_impurity = gini_impurity(left)\n            right_impurity = gini_impurity(right)\n            weighted_impurity = (len(left) / len(data)) * left_impurity + (len(right) / len(data)) * right_impurity\n            gain = current_impurity - weighted_impurity\n\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, value, left, right)\n\n    if best_gain > 0:\n        feature_index, value, left, right = best_split\n        return {\n            \"feature\": feature_index,\n            \"value\": value,\n            \"left\": build_tree(left),\n            \"right\": build_tree(right)\n        }\n    else:\n        return {\"label\": majority_class(data)}\n\n# Example usage\ndata = [[1, \"Yes\"], [1, \"Yes\"], [0, \"No\"], [0, \"No\"]]\ntree = build_tree(data)\nprint(tree)\n```\n\n### Explanation:\n\n1. **Gini Impurity Calculation**: The `gini_impurity` function calculates the impurity of a dataset based on the distribution of class labels.\n\n2. **Data Splitting**: The `split_data` function divides the dataset into two subsets based on a given feature and value.\n\n3. **Majority Class Determination**: The `majority_class` function finds the most common class label in the dataset, resolving ties by choosing the label that appears first.\n\n4. **Tree Building**: The `build_tree` function recursively constructs the decision tree. It evaluates all possible splits, calculates the Gini gain for each, and selects the best split. If no split improves impurity, it creates a leaf node with the majority class label.\n\nThis implementation follows the task requirements and constructs a decision tree using the CART algorithm with Gini impurity as the splitting criterion."}
{"task_id": 547, "completion_id": 0, "completion": "To solve this problem, we need to implement the forward algorithm for a Hidden Markov Model (HMM) to compute the forward probability vector \\(\\boldsymbol\\alpha_t\\) for a given time step \\(t\\). The forward algorithm is a dynamic programming approach that computes the probability of being in each state after observing a sequence of emissions up to time \\(t\\).\n\nHere's a step-by-step breakdown of how to implement the function:\n\n1. **Input Validation**: Check if the dimensions of the matrices \\(A\\), \\(B\\), and the vector \\(\\mathbf{S}\\) are consistent. Also, ensure that \\(t\\) is within the valid range.\n\n2. **Initialization**: Compute \\(\\alpha_0\\) using the initial state distribution \\(\\mathbf{S}\\) and the emission probabilities for the first observation.\n\n3. **Recurrence Relation**: For each time step from 1 to \\(t\\), compute \\(\\alpha_t\\) using the recurrence relation provided.\n\n4. **Output**: Return the computed \\(\\boldsymbol\\alpha_t\\) rounded to 4 decimal places. If any input is invalid, return -1.\n\nHere's the implementation in Python:\n\n```python\nimport numpy as np\n\ndef forward_step(A: list[list[float]],\n                 B: list[list[float]],\n                 S: list[float],\n                 obs: list[int],\n                 t: int) -> list[float]:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n\n    Args:\n        A (list[list[float]]): State-transition matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        S (list[float]):       Initial state distribution (length n).\n        obs (list[int]):       Observation sequence (symbol indices).\n        t (int):               Desired time step (0-based).\n\n    Returns:\n        list[float] | int: \u03b1_t as a list or -1 on error.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    S = np.array(S)\n    \n    # Validate dimensions\n    n = A.shape[0]  # Number of states\n    if A.shape[1] != n or B.shape[0] != n or len(S) != n:\n        return -1\n    \n    # Validate observation indices\n    if any(o < 0 or o >= B.shape[1] for o in obs):\n        return -1\n    \n    # Validate time step\n    if t < 0 or t >= len(obs):\n        return -1\n    \n    # Initialize alpha_0\n    alpha = S * B[:, obs[0]]\n    \n    # Compute alpha_t for t >= 1\n    for time in range(1, t + 1):\n        alpha = (alpha @ A) * B[:, obs[time]]\n    \n    # Round the result to 4 decimal places\n    return np.round(alpha, 4).tolist()\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nS = [0.6, 0.4]\nobs = [0, 1, 2]\nt = 2\n\nprint(forward_step(A, B, S, obs, t))  # Example output\n```\n\nThis code will compute the forward probability vector \\(\\boldsymbol\\alpha_t\\) for the given time step \\(t\\) and return it as a list of probabilities rounded to four decimal places. If any input is invalid, it will return -1."}
{"task_id": 548, "completion_id": 0, "completion": "To solve the problem of computing the \u03be matrix for a given time step in a Hidden Markov Model, we need to implement the forward-backward algorithm. This involves calculating the forward probabilities (\u03b1) and backward probabilities (\u03b2), and then using these to compute the \u03be matrix for the specified time step.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef compute_xi(A: list[list[float]],\n               B: list[list[float]],\n               pi: list[float],\n               obs: list[int],\n               t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    The function must implement the forward\u2013backward equations internally and\n    compute\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb)\n    for the requested time index t.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence encoded as integers.\n        t: Time index (0 \u2264 t < len(obs)\u22121).\n\n    Returns:\n        The \u03be matrix as a list of lists rounded to 4 decimals, or \u22121 for an\n        invalid t.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n\n    # Check for invalid time index\n    if t < 0 or t >= T - 1:\n        return -1\n\n    # Forward pass: compute \u03b1\n    alpha = np.zeros((T, N))\n    alpha[0] = np.array(pi) * np.array([B[i][obs[0]] for i in range(N)])\n    \n    for k in range(1, T):\n        for i in range(N):\n            alpha[k][i] = sum(alpha[k-1][j] * A[j][i] for j in range(N)) * B[i][obs[k]]\n\n    # Backward pass: compute \u03b2\n    beta = np.zeros((T, N))\n    beta[T-1] = np.ones(N)\n    \n    for k in range(T-2, -1, -1):\n        for i in range(N):\n            beta[k][i] = sum(A[i][j] * B[j][obs[k+1]] * beta[k+1][j] for j in range(N))\n\n    # Compute \u03be_t(i, j)\n    xi = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            xi[i][j] = alpha[t][i] * A[i][j] * B[j][obs[t+1]] * beta[t+1][j]\n\n    # Normalize \u03be_t(i, j)\n    xi_sum = np.sum(xi)\n    if xi_sum != 0:\n        xi /= xi_sum\n\n    # Round to 4 decimals and convert to list of lists\n    xi_rounded = np.round(xi, 4).tolist()\n\n    return xi_rounded\n\n# Example usage\nA = [[0.7, 0.3],\n     [0.4, 0.6]]\n\nB = [[0.1, 0.4, 0.5],\n     [0.6, 0.3, 0.1]]\n\npi = [0.6, 0.4]\n\nobs = [0, 1, 2]   # three observations\n\nt = 1\n\nprint(compute_xi(A, B, pi, obs, t))\n```\n\nThis code calculates the \u03be matrix for a given time step `t` in a Hidden Markov Model using the forward-backward algorithm. It checks for valid indices, computes the forward and backward probabilities, and then uses these to compute and normalize the \u03be matrix. Finally, it rounds the values to 4 decimal places and returns the result as a list of lists."}
{"task_id": 549, "completion_id": 0, "completion": "To implement the function that computes the squared Euclidean distance between two vectors, we can follow these steps:\n\n1. Convert the input vectors to NumPy arrays for easy manipulation.\n2. Check if the vectors have the same length. If not, return -1.\n3. Compute the squared differences between corresponding elements of the vectors.\n4. Sum the squared differences to get the squared Euclidean distance.\n5. Round the result to four decimal places and return it.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the vectors have the same length\n    if x.shape != y.shape:\n        return -1\n    \n    # Compute squared Euclidean distance\n    squared_diff = np.square(x - y)\n    squared_distance = np.sum(squared_diff)\n    \n    # Round the result to four decimal places\n    return round(squared_distance, 4)\n\n# Example usage:\n# x = [1, 2, 3]\n# y = [4, 5, 6]\n# print(cal_dis(x, y))  # Output: 27.0\n```\n\nThis function handles lists, tuples, and NumPy arrays as inputs, checks for equal lengths, computes the squared Euclidean distance, and returns the result rounded to four decimal places."}
{"task_id": 551, "completion_id": 0, "completion": "To solve this problem, we need to iterate over all possible splits for each feature in the dataset, calculate the Gini impurity for each split, and find the split that minimizes the weighted Gini impurity. Here's how you can implement the `best_gini_split` function:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef gini_impurity(y: np.ndarray) -> float:\n    \"\"\"Calculate the Gini impurity of a set of labels.\"\"\"\n    total_samples = len(y)\n    if total_samples == 0:\n        return 0.0\n    label_counts = Counter(y)\n    impurity = 1.0 - sum((count / total_samples) ** 2 for count in label_counts.values())\n    return impurity\n\ndef best_gini_split(X: np.ndarray, y: np.ndarray, epsilon: float = 1e-3) -> tuple[int, object, float]:\n    \"\"\"Find the best (feature, value) equality split based on Gini impurity.\"\"\"\n    n_samples, n_features = X.shape\n    parent_gini = gini_impurity(y)\n    best_gini = parent_gini\n    best_feature = -1\n    best_value = None\n\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for split_value in unique_values:\n            # Create left and right splits\n            left_indices = X[:, feature_index] == split_value\n            right_indices = ~left_indices\n            \n            left_y = y[left_indices]\n            right_y = y[right_indices]\n            \n            # Calculate weighted Gini impurity\n            left_weight = len(left_y) / n_samples\n            right_weight = len(right_y) / n_samples\n            gini_left = gini_impurity(left_y)\n            gini_right = gini_impurity(right_y)\n            weighted_gini = left_weight * gini_left + right_weight * gini_right\n            \n            # Check if this is the best split\n            if weighted_gini < best_gini:\n                best_gini = weighted_gini\n                best_feature = feature_index\n                best_value = split_value\n\n    # Check if the best split reduces impurity by at least epsilon\n    if best_gini < parent_gini - epsilon:\n        return best_feature, best_value, float(best_gini)\n    else:\n        return -1, None, float(parent_gini)\n\n# Example usage:\n# X = np.array([['a', 'b'], ['a', 'c'], ['b', 'b'], ['b', 'c']])\n# y = np.array([0, 1, 0, 1])\n# print(best_gini_split(X, y))\n```\n\n### Explanation:\n1. **Gini Impurity Calculation**: The `gini_impurity` function calculates the Gini impurity for a given set of labels. It uses the formula \\( Gini(S) = 1 - \\sum_c (p_c)^2 \\), where \\( p_c \\) is the proportion of class \\( c \\) in the set \\( S \\).\n\n2. **Iterating Over Features and Values**: The main function `best_gini_split` iterates over each feature and each unique value within that feature to consider all possible splits.\n\n3. **Creating Splits**: For each possible split, it divides the samples into `left` and `right` based on whether they satisfy the equality condition.\n\n4. **Calculating Weighted Gini Impurity**: For each split, it calculates the weighted Gini impurity using the sizes of the `left` and `right` subsets.\n\n5. **Finding the Best Split**: It keeps track of the split that results in the lowest weighted Gini impurity.\n\n6. **Checking Improvement**: Finally, it checks if the best split found reduces the impurity by at least `epsilon`. If not, it returns the parent node's impurity.\n\nThis implementation should work for both numerical and categorical data stored in the NumPy array."}
{"task_id": 552, "completion_id": 0, "completion": "To solve this problem, we need to implement the forward-backward algorithm for Hidden Markov Models. This involves calculating the forward probabilities (`\u03b1`) and backward probabilities (`\u03b2`) and then combining them to compute the posterior state distribution (`\u03b3`). Let's go through the implementation step-by-step.\n\n```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Extract HMM parameters\n    pi = np.array(hmm['pi'])  # Initial state distribution\n    A = np.array(hmm['A'])    # State transition matrix\n    B = np.array(hmm['B'])    # Emission matrix\n\n    # Number of states and length of observation sequence\n    num_states = len(pi)\n    T = len(observations)\n\n    # Check if t is within the valid range\n    if t < 0 or t >= T:\n        return []\n\n    # Forward probabilities\n    alpha = np.zeros((T, num_states))\n    alpha[0] = pi * B[:, observations[0]]\n\n    for t_prime in range(1, T):\n        for j in range(num_states):\n            alpha[t_prime, j] = np.sum(alpha[t_prime - 1] * A[:, j]) * B[j, observations[t_prime]]\n\n    # Backward probabilities\n    beta = np.zeros((T, num_states))\n    beta[T - 1] = np.ones(num_states)\n\n    for t_prime in range(T - 2, -1, -1):\n        for i in range(num_states):\n            beta[t_prime, i] = np.sum(A[i] * B[:, observations[t_prime + 1]] * beta[t_prime + 1])\n\n    # Compute gamma\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n\n    # Round to four decimal places\n    gamma_t_rounded = np.round(gamma_t, 4)\n\n    return gamma_t_rounded.tolist()\n\n# Example usage:\nhmm = {\n    'pi': [0.6, 0.4],\n    'A': [[0.7, 0.3], [0.4, 0.6]],\n    'B': [[0.5, 0.5], [0.1, 0.9]]\n}\nobservations = [0, 1, 0]\nt = 1\n\nprint(gamma_probabilities(hmm, observations, t))\n```\n\n### Explanation:\n1. **Initialization**: We initialize the forward (`\u03b1`) and backward (`\u03b2`) probability matrices. The forward probabilities are initialized using the initial state distribution and the emission probabilities for the first observation.\n\n2. **Forward Algorithm**: We compute the forward probabilities for each time step and state using the recursive relation.\n\n3. **Backward Algorithm**: We compute the backward probabilities starting from the last observation and moving backward using the recursive relation.\n\n4. **Gamma Calculation**: We calculate the posterior probabilities (`\u03b3`) using the formula provided, normalizing by the sum of probabilities across all states.\n\n5. **Rounding**: We round each component of the resulting `\u03b3` vector to four decimal places and return it as a list.\n\nThis implementation efficiently computes the posterior state distribution for a given time step in a Hidden Markov Model."}
{"task_id": 553, "completion_id": 0, "completion": "To implement logistic regression using batch gradient descent, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    alpha: float = 0.01,\n    max_iter: int = 1000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test:  Patterns to be classified, shape (m_samples, n_features).\n        alpha:   Learning rate used in gradient ascent on the log-likelihood.\n        max_iter:Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n    # Add a bias column of ones to X_train and X_test\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    \n    # Initialize the weight vector with zeros\n    n_features = X_train.shape[1]\n    w = np.zeros(n_features)\n    \n    # Define the sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Batch Gradient Descent\n    for _ in range(max_iter):\n        # Compute the predictions\n        predictions = sigmoid(np.dot(X_train, w))\n        \n        # Compute the gradient\n        gradient = np.dot(X_train.T, (y_train - predictions)) / X_train.shape[0]\n        \n        # Update the weights\n        w += alpha * gradient\n    \n    # Compute probabilities for X_test\n    test_probabilities = sigmoid(np.dot(X_test, w))\n    \n    # Classify based on probability threshold of 0.5\n    predictions = [1 if prob >= 0.5 else 0 for prob in test_probabilities]\n    \n    return predictions\n```\n\n### Explanation:\n1. **Bias Term**: We add a column of ones to both `X_train` and `X_test` to account for the bias term in the logistic regression model.\n\n2. **Weight Initialization**: We initialize the weight vector `w` with zeros, including the bias term.\n\n3. **Sigmoid Function**: The sigmoid function is defined to map any real-valued number into the range (0, 1), which is essential for logistic regression.\n\n4. **Gradient Descent**: We perform batch gradient descent for `max_iter` iterations. In each iteration, we:\n   - Compute the predictions using the current weights.\n   - Calculate the gradient of the log-loss with respect to the weights.\n   - Update the weights using the gradient and the learning rate `alpha`.\n\n5. **Prediction**: After training, we compute the probabilities for each test example using the learned weights. We classify each example as 1 if the probability is \u2265 0.5, otherwise 0.\n\n6. **Return**: The function returns a list of predicted class labels for the test set."}
{"task_id": 555, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all points as noise (-1)\n    cluster_id = 0\n\n    # Compute pairwise Euclidean distances\n    distances = np.linalg.norm(data[:, np.newaxis] - data, axis=2)\n\n    # Build the neighborhood list for each sample\n    neighborhoods = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n\n    # Identify core points\n    core_points = [i for i in range(n_samples) if len(neighborhoods[i]) >= min_samples]\n\n    visited = set()\n\n    def expand_cluster(point_idx, cluster_id):\n        \"\"\"Expand the cluster from a core point using BFS.\"\"\"\n        queue = deque([point_idx])\n        labels[point_idx] = cluster_id\n\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighborhoods[current_point]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    if len(neighborhoods[neighbor]) >= min_samples:\n                        queue.append(neighbor)\n                    if labels[neighbor] == -1:  # If it's noise, label it as part of the cluster\n                        labels[neighbor] = cluster_id\n\n    # Start clustering\n    for point_idx in core_points:\n        if point_idx not in visited:\n            visited.add(point_idx)\n            cluster_id += 1\n            expand_cluster(point_idx, cluster_id)\n\n    return labels\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4], [8, 7], [8, 8], [25, 80]])\neps = 1.5\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n1. **Distance Calculation**: We calculate the pairwise Euclidean distances between all points using `np.linalg.norm`.\n\n2. **Neighborhood Construction**: For each point, we determine its neighborhood by checking which points are within the `eps` radius.\n\n3. **Core Point Identification**: A point is considered a core point if the size of its neighborhood is at least `min_samples`.\n\n4. **Cluster Expansion**: We use a breadth-first search (BFS) approach to expand clusters starting from each core point. We maintain a queue to explore all neighbors of core points and label them accordingly.\n\n5. **Labeling**: Points are labeled with cluster IDs starting from 1, and noise points are labeled as -1.\n\nThis implementation efficiently clusters the data using the DBSCAN algorithm, following the specified requirements."}
{"task_id": 559, "completion_id": 0, "completion": "To solve this problem, we need to traverse the binary tree and collect the values of all leaf nodes in left-to-right order. A leaf node is defined as a node that has no children (both left and right are `None`). We can use a recursive approach to traverse the tree and collect these values.\n\nHere's how we can implement the `leaf_values` function:\n\n```python\nfrom typing import List, Optional\n\nclass Node:\n    \"\"\"Binary-tree node used by the task.\n\n    Attributes:\n        val:     The value stored in the node.  Only leaf nodes have a value.\n        right:   Reference to the right child or ``None``.\n        left:    Reference to the left  child or ``None``.\n    \"\"\"\n\n    def __init__(self, val: Optional[int] = None, right: 'Optional[Node]' = None,\n                 left: 'Optional[Node]' = None):\n        self.val = val\n        self.right = right\n        self.left = left\n\n\ndef leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"Collect all leaf values from left to right.\n\n    Args:\n        root: The root of the binary tree or ``None``.\n\n    Returns:\n        A list containing the values found in every leaf node, ordered from\n        left-most leaf to right-most leaf.  If the tree is empty the list is\n        empty as well.\n    \"\"\"\n    def collect_leaves(node: Optional[Node], leaves: List[int]) -> None:\n        if node is None:\n            return\n        # Check if the current node is a leaf node\n        if node.left is None and node.right is None:\n            if node.val is not None:\n                leaves.append(node.val)\n        else:\n            # Recurse on the left and right children\n            collect_leaves(node.left, leaves)\n            collect_leaves(node.right, leaves)\n\n    leaf_values_list = []\n    collect_leaves(root, leaf_values_list)\n    return leaf_values_list\n```\n\n### Explanation:\n\n1. **Node Class**: The `Node` class is defined with attributes `val`, `left`, and `right`. Only leaf nodes have a non-`None` value for `val`.\n\n2. **leaf_values Function**: This function initializes an empty list `leaf_values_list` to store the leaf values.\n\n3. **collect_leaves Helper Function**: This recursive function traverses the tree:\n   - If the current node is `None`, it returns immediately.\n   - If the current node is a leaf (both `left` and `right` are `None`), it checks if `val` is not `None` and appends it to the `leaves` list.\n   - If the current node is not a leaf, it recursively calls itself on the `left` and `right` children.\n\n4. **Return Statement**: After the recursive traversal, the function returns the `leaf_values_list` containing all leaf values in left-to-right order.\n\nThis implementation efficiently collects all leaf values from the binary tree in the desired order."}
{"task_id": 560, "completion_id": 0, "completion": "To solve the problem of finding the k-nearest neighbors using a k-d tree, we need to follow these steps:\n\n1. **Build a balanced k-d tree**: This involves recursively splitting the points based on the median value along the current axis. The axis is chosen cyclically.\n\n2. **Search the k-d tree**: Once the tree is built, we need to traverse it to find the k-nearest neighbors to the query point. This involves checking nodes and potentially backtracking to explore other branches of the tree.\n\n3. **Return the indices of the k-nearest neighbors**: After finding the nearest neighbors, we sort them by distance and return their indices.\n\nHere's the implementation:\n\n```python\nimport heapq\n\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int = 3) -> list[int]:\n    def build_kd_tree(points, depth=0):\n        if not points:\n            return None\n        \n        # Select axis based on depth so that axis cycles over all dimensions\n        axis = depth % len(points[0])\n        \n        # Sort point list and choose median as pivot element\n        sorted_points = sorted(points, key=lambda x: x[axis])\n        median_index = len(sorted_points) // 2\n        \n        # Create node and construct subtrees\n        node = {\n            'index': sorted_points[median_index][1],  # Store index of the point\n            'axis': axis,\n            'left': build_kd_tree(sorted_points[:median_index], depth + 1),\n            'right': build_kd_tree(sorted_points[median_index + 1:], depth + 1)\n        }\n        return node\n    \n    def squared_distance(point1, point2):\n        return sum((x - y) ** 2 for x, y in zip(point1, point2))\n    \n    def search_kd_tree(node, query, k, heap):\n        if node is None:\n            return\n        \n        point_index = node['index']\n        point = points[point_index]\n        axis = node['axis']\n        \n        # Calculate squared distance from query to current point\n        dist = squared_distance(query, point)\n        \n        # Add current point to the heap\n        heapq.heappush(heap, (-dist, point_index))\n        if len(heap) > k:\n            heapq.heappop(heap)\n        \n        # Determine which side to search first\n        diff = query[axis] - point[axis]\n        if diff <= 0:\n            search_kd_tree(node['left'], query, k, heap)\n            if len(heap) < k or diff ** 2 < -heap[0][0]:\n                search_kd_tree(node['right'], query, k, heap)\n        else:\n            search_kd_tree(node['right'], query, k, heap)\n            if len(heap) < k or diff ** 2 < -heap[0][0]:\n                search_kd_tree(node['left'], query, k, heap)\n    \n    # Attach indices to points for easy reference\n    indexed_points = [(point, i) for i, point in enumerate(points)]\n    \n    # Build the k-d tree\n    kd_tree = build_kd_tree(indexed_points)\n    \n    # Use a max-heap to store the k closest points\n    heap = []\n    search_kd_tree(kd_tree, query, k, heap)\n    \n    # Extract indices from the heap and sort them\n    result = sorted((-dist, index) for dist, index in heap)\n    return [index for _, index in result]\n\n# Example usage\npoints = [[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]]\nquery = [9, 2]\nk = 2\nprint(k_nearest_neighbors(points, query, k))  # Output: [4, 5]\n```\n\n### Explanation:\n- **Building the k-d tree**: We recursively split the points based on the median value along the current axis. The axis is chosen cyclically.\n- **Searching the k-d tree**: We use a max-heap to keep track of the k closest points found so far. We traverse the tree, adding points to the heap and potentially backtracking to explore other branches if they might contain closer points.\n- **Returning the result**: We extract the indices from the heap, sort them by distance, and return them."}
{"task_id": 561, "completion_id": 0, "completion": "To implement the Gaussian Mixture Model using the Expectation-Maximization algorithm, we need to follow these steps:\n\n1. **Initialization**: Randomly initialize the parameters for the Gaussian components, including mixture weights, means, and covariance matrices.\n\n2. **Expectation Step (E-step)**: Calculate the responsibilities, which are the probabilities that each sample belongs to each Gaussian component.\n\n3. **Maximization Step (M-step)**: Update the parameters of the Gaussian components using the calculated responsibilities.\n\n4. **Convergence Check**: Repeat the E-step and M-step until convergence is achieved, either by reaching the maximum number of iterations or when the change in mixture weights is below a specified tolerance.\n\n5. **Assignment**: Assign each sample to the component with the highest responsibility.\n\n6. **Sorting and Re-labeling**: Sort the components by the first coordinate of their mean and re-label the cluster indices accordingly.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"Perform Gaussian Mixture Model clustering using the EM algorithm.\"\"\"\n    n_samples, n_features = data.shape\n    \n    # Step 1: Initialize parameters\n    np.random.seed(42)  # For reproducibility\n    weights = np.ones(k) / k\n    means = data[np.random.choice(n_samples, k, replace=False)]\n    covariances = np.array([np.eye(n_features) for _ in range(k)])\n    \n    # Step 2: EM algorithm\n    for iteration in range(max_iter):\n        # E-step: Calculate responsibilities\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = data - means[i]\n            inv_cov = np.linalg.inv(covariances[i])\n            exponent = np.einsum('ij,ij->i', diff @ inv_cov, diff)\n            denom = np.sqrt((2 * np.pi) ** n_features * np.linalg.det(covariances[i]))\n            responsibilities[:, i] = weights[i] * np.exp(-0.5 * exponent) / denom\n        \n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        \n        # M-step: Update parameters\n        effective_n = responsibilities.sum(axis=0)\n        weights = effective_n / n_samples\n        new_means = np.dot(responsibilities.T, data) / effective_n[:, np.newaxis]\n        new_covariances = np.zeros_like(covariances)\n        \n        for i in range(k):\n            diff = data - new_means[i]\n            new_covariances[i] = np.dot(responsibilities[:, i] * diff.T, diff) / effective_n[i]\n        \n        # Check for convergence\n        if np.linalg.norm(weights - effective_n / n_samples) < epsilon:\n            break\n        \n        means, covariances = new_means, new_covariances\n    \n    # Step 3: Assign samples to components\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Step 4: Sort components by the first coordinate of their mean\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    \n    for new_label, old_label in enumerate(sorted_indices):\n        sorted_labels[labels == old_label] = new_label\n    \n    return sorted_labels.tolist()\n\n# Example usage:\n# data = np.random.rand(100, 2)\n# labels = gmm_em(data, k=3)\n# print(labels)\n```\n\n### Explanation:\n- **Initialization**: We randomly select `k` samples from the data to initialize the means and set the covariance matrices to identity matrices.\n- **E-step**: We compute the responsibilities using the Gaussian probability density function.\n- **M-step**: We update the weights, means, and covariances based on the responsibilities.\n- **Convergence**: We check if the change in weights is below the tolerance level.\n- **Sorting and Re-labeling**: We sort the components by the first coordinate of their mean and re-label the samples accordingly to ensure deterministic output."}
{"task_id": 562, "completion_id": 0, "completion": "To implement the Spectral Clustering algorithm as described, we need to follow the steps outlined in the task. Here's a complete implementation:\n\n```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n\n    # Step 1: Build the similarity graph\n    N = data.shape[0]\n    pairwise_sq_dists = np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=2)\n    W = np.exp(-gamma * pairwise_sq_dists)\n\n    # Step 2: Construct the Laplacian\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(W.sum(axis=1)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n\n    # Step 3: Compute the eigenvectors\n    eigvals, eigvecs = np.linalg.eigh(L)\n    indices = np.argsort(eigvals)[:n_cluster]\n    U = eigvecs[:, indices]\n\n    if method == 'normalized':\n        U = U / np.linalg.norm(U, axis=1, keepdims=True)\n\n    # Step 4: Run k-means in the eigenvector space\n    def kmeans(U, n_cluster):\n        # Initialize centroids using the first n_cluster samples\n        centroids = U[:n_cluster, :]\n        labels = np.zeros(N, dtype=int)\n\n        while True:\n            # Assign labels based on closest centroid\n            distances = np.linalg.norm(U[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=2)\n            new_labels = np.argmin(distances, axis=1)\n\n            # Check for convergence\n            if np.all(labels == new_labels):\n                break\n\n            labels = new_labels\n\n            # Update centroids\n            for i in range(n_cluster):\n                if np.any(labels == i):\n                    centroids[i] = U[labels == i].mean(axis=0)\n\n        return labels\n\n    labels = kmeans(U, n_cluster)\n\n    # Step 5: Relabel clusters\n    unique_labels = np.unique(labels)\n    label_map = {old_label: new_label for new_label, old_label in enumerate(unique_labels)}\n    relabeled = [label_map[label] for label in labels]\n\n    return relabeled\n```\n\n### Explanation:\n\n1. **Similarity Graph**: We compute the pairwise squared distances and use the Gaussian kernel to create the similarity matrix `W`.\n\n2. **Laplacian Construction**: Depending on the method, we construct either the unnormalized Laplacian `L = D - W` or the normalized Laplacian `L_sym = D^(-1/2) L D^(-1/2)`.\n\n3. **Eigenvectors**: We compute the eigenvectors corresponding to the smallest `n_cluster` eigenvalues of the Laplacian matrix.\n\n4. **K-means Clustering**: We perform k-means clustering on the rows of the eigenvector matrix. The initial centroids are chosen deterministically as the first `n_cluster` samples.\n\n5. **Relabeling**: We ensure that the cluster labels are sorted by the smallest original index in each cluster.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 563, "completion_id": 0, "completion": "To implement the dual-form perceptron learning algorithm, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # Build the Gram matrix G\n    G = np.dot(X_data, X_data.T)\n\n    for _ in range(max_iter):\n        no_update = True\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            # Check if the current sample is misclassified\n            if y_data[i] * (g + b) <= 0:\n                # Update alpha and b\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_update = False\n        \n        # If no update was made during the entire pass, the algorithm has converged\n        if no_update:\n            break\n\n    # Recover the weight vector w\n    w = np.sum((alpha * y_data)[:, np.newaxis] * X_data, axis=0)\n\n    # Round w and b to 4 decimal places\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n\n    return w, b\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing the `alpha` vector to zeros and the bias `b` to zero.\n\n2. **Gram Matrix**: The Gram matrix `G` is computed using the dot product of `X_data` with its transpose. This matrix contains the inner products of all pairs of training samples.\n\n3. **Training Loop**: We iterate up to `max_iter` times, performing updates on `alpha` and `b` whenever a sample is misclassified. A sample is misclassified if `y\u1d62 (g + b) \u2264 0`.\n\n4. **Convergence Check**: If a complete pass over the data results in no updates, the algorithm has converged, and we exit the loop early.\n\n5. **Weight Recovery**: After training, the weight vector `w` is recovered using the formula `w = \u03a3\u1d62 \u03b1\u1d62 y\u1d62 x\u1d62`.\n\n6. **Rounding**: Both the weight vector `w` and the bias `b` are rounded to 4 decimal places before returning.\n\nThis implementation follows the algorithm as described and should work correctly for training a perceptron using the dual formulation."}
{"task_id": 564, "completion_id": 0, "completion": "To implement the `predict_sample` function, we need to traverse the decision tree according to the rules specified for classification and regression tasks. Here's the complete implementation:\n\n```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    \n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            matched_child = None\n            for child in current_node.child:\n                if child.x == feature_value:\n                    matched_child = child\n                    break\n            current_node = matched_child if matched_child else current_node.child[1]\n        \n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    \n    return current_node.y\n```\n\n### Explanation:\n\n1. **Node Class**: This class is a simple representation of a node in the decision tree. It can store attributes like `label`, `x`, `s`, `y`, and `child`.\n\n2. **predict_sample Function**:\n   - **Initialization**: Start with the root node.\n   - **Traversal**:\n     - **Classification**:\n       - If the current node is a leaf (`current_node.y` is not `None`), return `y`.\n       - Otherwise, inspect the feature at index `current_node.label`.\n       - Traverse to the child node where `child.x` matches the feature value. If no match is found, default to the second child.\n     - **Regression**:\n       - If the current node is a leaf (`current_node.y` is not `None`), return `y`.\n       - Otherwise, inspect the feature at index `current_node.label`.\n       - Traverse to the first child if the feature value is less than or equal to `current_node.s`, otherwise traverse to the second child.\n   - **Return**: Once a leaf node is reached, return the value stored in `y`.\n\nThis function efficiently traverses the decision tree according to the specified rules and returns the prediction stored in the leaf node."}
{"task_id": 565, "completion_id": 0, "completion": "To implement the utility function for selecting the best feature based on maximum information gain, we need to calculate the entropy of the label distribution and the conditional entropy for each feature. Here's how you can implement this:\n\n```python\nimport numpy as np\nimport math\n\ndef entropy(y: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a label distribution.\"\"\"\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef conditional_entropy(X_feature: np.ndarray, y: np.ndarray) -> float:\n    \"\"\"Calculate the conditional entropy of the label distribution given a feature.\"\"\"\n    unique_values, counts = np.unique(X_feature, return_counts=True)\n    conditional_entropy = 0.0\n    for value, count in zip(unique_values, counts):\n        y_subset = y[X_feature == value]\n        conditional_entropy += (count / len(X_feature)) * entropy(y_subset)\n    return conditional_entropy\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    # Calculate the entropy of the label distribution\n    label_entropy = entropy(y)\n    \n    # Initialize variables to track the best feature and maximum information gain\n    best_feature_index = -1\n    max_information_gain = -1.0\n    \n    # Iterate over each feature to calculate information gain\n    for feature_index in range(X.shape[1]):\n        X_feature = X[:, feature_index]\n        feature_conditional_entropy = conditional_entropy(X_feature, y)\n        information_gain = label_entropy - feature_conditional_entropy\n        \n        # Update the best feature if the current one has higher information gain\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    # Return the best feature index and the maximum information gain rounded to 6 decimal places\n    return best_feature_index, round(max_information_gain, 6)\n\n# Example usage:\n# X = np.array([[0, 1], [1, 0], [1, 1], [0, 0]])\n# y = np.array([0, 1, 1, 0])\n# print(choose_best_feature(X, y))  # Output: (0, 0.311278)\n```\n\n### Explanation:\n1. **Entropy Calculation**: The `entropy` function calculates the entropy of the label distribution using the formula \\( H(y) = -\\sum p_i \\log_2(p_i) \\), where \\( p_i \\) is the probability of each unique label.\n\n2. **Conditional Entropy Calculation**: The `conditional_entropy` function calculates the conditional entropy of the label distribution given a feature. It iterates over each unique value of the feature, calculates the entropy of the subset of labels corresponding to that feature value, and weights it by the proportion of that feature value in the dataset.\n\n3. **Information Gain Calculation**: The `choose_best_feature` function calculates the information gain for each feature and selects the feature with the highest information gain. If multiple features have the same information gain, the feature with the smallest index is chosen.\n\n4. **Output**: The function returns a tuple containing the index of the best feature and the maximum information gain rounded to 6 decimal places."}
{"task_id": 566, "completion_id": 0, "completion": "To implement a mini Isolation Forest for outlier detection, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    n_samples, n_features = data.shape\n    \n    # Function to compute c(n)\n    def c(n):\n        if n <= 1:\n            return 0\n        else:\n            return 2 * (math.log(n - 1) + 0.5772156649) - 2 * (n - 1) / n\n    \n    # Function to build a single isolation tree\n    def build_tree(data, current_depth, height_limit):\n        n_samples, n_features = data.shape\n        \n        if current_depth >= height_limit or n_samples <= 1:\n            return c(n_samples)\n        \n        # Randomly select a feature and a threshold\n        feature = np.random.randint(n_features)\n        min_val, max_val = np.min(data[:, feature]), np.max(data[:, feature])\n        if min_val == max_val:\n            return c(n_samples)\n        \n        threshold = np.random.uniform(min_val, max_val)\n        \n        # Split the data\n        left_data = data[data[:, feature] < threshold]\n        right_data = data[data[:, feature] >= threshold]\n        \n        # Recursively build the tree\n        left_path_length = build_tree(left_data, current_depth + 1, height_limit)\n        right_path_length = build_tree(right_data, current_depth + 1, height_limit)\n        \n        return 1 + (len(left_data) / n_samples) * left_path_length + (len(right_data) / n_samples) * right_path_length\n    \n    # Calculate height limit\n    height_limit = math.ceil(math.log2(sample_size))\n    \n    # Calculate phi\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    \n    # Compute path lengths for each sample\n    path_lengths = np.zeros(n_samples)\n    \n    for _ in range(n_trees):\n        # Draw a subsample\n        if sample_size >= n_samples:\n            subsample = data\n        else:\n            indices = np.random.choice(n_samples, sample_size, replace=False)\n            subsample = data[indices]\n        \n        # Build the tree and compute path lengths\n        for i in range(n_samples):\n            path_lengths[i] += build_tree(subsample, 0, height_limit)\n    \n    # Average path length\n    avg_path_length = path_lengths / n_trees\n    \n    # Compute anomaly scores\n    scores = 2 ** (-avg_path_length / phi)\n    \n    # Determine outliers\n    if epsilon == 0:\n        return []\n    \n    threshold_index = int((1 - epsilon) * n_samples)\n    sorted_indices = np.argsort(scores)\n    outlier_indices = sorted_indices[threshold_index:]\n    \n    return sorted(outlier_indices.tolist())\n\n# Example usage:\ndata = np.random.rand(100, 5)  # Example data\noutliers = detect_outliers(data, n_trees=10, sample_size=20, epsilon=0.1)\nprint(outliers)\n```\n\n### Explanation:\n1. **Tree Building**: The `build_tree` function recursively splits the data based on a randomly chosen feature and threshold until the height limit is reached or the node contains at most one sample.\n\n2. **Path Length Calculation**: The path length is calculated using the recursive tree structure, and the correction factor `c(n)` is applied when a leaf node is reached.\n\n3. **Anomaly Score Calculation**: The anomaly score is computed using the average path length and the formula provided.\n\n4. **Outlier Detection**: The scores are sorted, and the top `\u03b5 * 100%` scores are considered outliers.\n\n5. **Reproducibility**: The global seed ensures that the randomness is consistent across runs.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 567, "completion_id": 0, "completion": "To implement the majority voting function, we need to iterate over each column of the `predictions` matrix, count the occurrences of each label, and determine the label with the highest count. In case of a tie, we select the smallest label. Here's how you can implement this:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label must be chosen.\n    \"\"\"\n    # Transpose the predictions to iterate over columns (samples)\n    transposed_predictions = np.array(predictions).T\n    \n    final_labels = []\n    \n    for sample_votes in transposed_predictions:\n        # Count occurrences of each label\n        label_counts = Counter(sample_votes)\n        \n        # Find the label with the highest count\n        # In case of a tie, min function will return the smallest label\n        most_common_label = min(label_counts, key=lambda label: (-label_counts[label], label))\n        \n        final_labels.append(most_common_label)\n    \n    return final_labels\n```\n\n### Explanation:\n\n1. **Transpose the Predictions**: We transpose the `predictions` matrix to easily iterate over columns, which represent the samples.\n\n2. **Count Occurrences**: For each sample (column), we use `Counter` from the `collections` module to count the occurrences of each label.\n\n3. **Determine the Most Common Label**: We use the `min` function with a custom key to find the label with the highest count. The key `(-label_counts[label], label)` ensures that we first sort by the negative count (to get the highest count) and then by the label itself (to resolve ties by choosing the smallest label).\n\n4. **Return the Final Labels**: We collect the most common label for each sample and return it as a list.\n\nThis implementation efficiently handles the majority voting process and resolves ties by selecting the smallest label."}
{"task_id": 568, "completion_id": 0, "completion": "To implement a Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm, we need to follow a structured approach. The GIS algorithm is used to find the weights for the features that maximize the entropy of the distribution, subject to the constraints imposed by the training data.\n\nHere's a step-by-step implementation of the `maxent_predict` function:\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Initialize variables\n    num_samples, num_features = X_train.shape\n    unique_labels = np.unique(y_train)\n    num_labels = len(unique_labels)\n    \n    # Create a mapping from label to index\n    label_to_index = {label: idx for idx, label in enumerate(unique_labels)}\n    \n    # Step 2: Build feature functions and empirical distribution\n    feature_functions = defaultdict(int)\n    empirical_counts = defaultdict(float)\n    \n    for i in range(num_samples):\n        for j in range(num_features):\n            feature_value = X_train[i, j]\n            label = y_train[i]\n            feature_functions[(j, feature_value, label)] += 1\n            empirical_counts[(j, feature_value, label)] += 1 / num_samples\n    \n    # Step 3: Initialize weights\n    weights = defaultdict(float)\n    \n    # Step 4: Generalized Iterative Scaling (GIS) algorithm\n    for iteration in range(n_iter):\n        max_update = 0\n        # Calculate expected counts\n        expected_counts = defaultdict(float)\n        \n        for i in range(num_samples):\n            Z = 0\n            prob_y_given_x = defaultdict(float)\n            \n            for label in unique_labels:\n                exponent = 0\n                for j in range(num_features):\n                    feature_value = X_train[i, j]\n                    if (j, feature_value, label) in weights:\n                        exponent += weights[(j, feature_value, label)]\n                prob_y_given_x[label] = math.exp(exponent)\n                Z += prob_y_given_x[label]\n            \n            for label in unique_labels:\n                prob_y_given_x[label] /= Z\n                for j in range(num_features):\n                    feature_value = X_train[i, j]\n                    expected_counts[(j, feature_value, label)] += prob_y_given_x[label] / num_samples\n        \n        # Update weights\n        for feature, empirical_count in empirical_counts.items():\n            j, feature_value, label = feature\n            if expected_counts[feature] > 0:\n                update = math.log(empirical_count / expected_counts[feature])\n                weights[feature] += update\n                max_update = max(max_update, abs(update))\n        \n        # Check for convergence\n        if max_update < epsilon:\n            break\n    \n    # Step 5: Predict labels for X_test\n    predictions = []\n    for i in range(X_test.shape[0]):\n        Z = 0\n        prob_y_given_x = defaultdict(float)\n        \n        for label in unique_labels:\n            exponent = 0\n            for j in range(num_features):\n                feature_value = X_test[i, j]\n                if (j, feature_value, label) in weights:\n                    exponent += weights[(j, feature_value, label)]\n            prob_y_given_x[label] = math.exp(exponent)\n            Z += prob_y_given_x[label]\n        \n        # Normalize to get probabilities\n        for label in unique_labels:\n            prob_y_given_x[label] /= Z\n        \n        # Choose the label with the highest probability\n        predicted_label = max(prob_y_given_x, key=prob_y_given_x.get)\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing necessary variables, including the number of samples, features, and unique labels. We also create mappings for labels to indices.\n\n2. **Feature Functions and Empirical Distribution**: We build feature functions and calculate empirical counts for each feature-value-label combination.\n\n3. **Weights Initialization**: We initialize the weights for each feature-value-label combination to zero.\n\n4. **GIS Algorithm**: We iteratively update the weights using the GIS algorithm. For each iteration, we calculate the expected counts based on the current weights, update the weights, and check for convergence.\n\n5. **Prediction**: For each test sample, we calculate the probability of each label and choose the label with the highest probability as the prediction.\n\nThis implementation uses the standard library and `numpy` as required, and it returns a list of predicted labels for the test samples."}
{"task_id": 569, "completion_id": 0, "completion": "To implement the `statistic_key_word` function, we need to analyze the document-frequency of words across multiple documents. Here's how we can achieve this:\n\n1. **Count Document Occurrences**: For each word, count how many documents contain that word.\n2. **Calculate Document-Frequency Ratio**: Divide the count of documents containing each word by the total number of documents.\n3. **Sort Words by Frequency**: Sort the words based on their document-frequency ratio in descending order.\n4. **Select Top Words**: Based on the `cut_off` parameter, select the top `k` words or all words if `cut_off` is `None`.\n\nHere's the complete implementation:\n\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Total number of documents\n    total_documents = len(data)\n    \n    # Count the number of documents each word appears in\n    word_document_count = Counter()\n    \n    for _, words in data:\n        # Use a set to ensure each word is only counted once per document\n        unique_words = set(words)\n        word_document_count.update(unique_words)\n    \n    # Calculate document-frequency ratio and round to 4 decimal places\n    word_ratios = [\n        (word, round(count / total_documents, 4))\n        for word, count in word_document_count.items()\n    ]\n    \n    # Sort words by their document-frequency ratio in descending order\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Determine the set of most common words based on cut_off\n    if cut_off is None:\n        most_common_words = {word for word, _ in word_ratios}\n    else:\n        most_common_words = {word for word, _ in word_ratios[:cut_off]}\n    \n    return word_ratios, most_common_words\n```\n\n### Explanation:\n\n- **Counting Occurrences**: We use a `Counter` to count how many documents each word appears in. By converting `words` to a set, we ensure each word is counted only once per document.\n- **Calculating Ratios**: We compute the document-frequency ratio for each word and round it to four decimal places.\n- **Sorting**: We sort the list of word-ratio pairs in descending order based on the ratio.\n- **Selecting Top Words**: Depending on the `cut_off` value, we select the top `k` words or all words if `cut_off` is `None`.\n\nThis function efficiently calculates and returns the desired statistics for the given text documents."}
{"task_id": 570, "completion_id": 0, "completion": "To implement the Bernoulli Naive Bayes text classifier as described, we need to follow the training and prediction phases carefully. Here's the complete implementation:\n\n```python\nfrom collections import defaultdict\n\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]],\n                        keywords: set[str],\n                        test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n\n    The classifier treats every word in *keywords* as a binary feature that is\n    either present or absent in a document.  Words outside *keywords* are\n    ignored.  Training follows the standard Bernoulli model *without* any form\n    of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of ``(label, tokens)`` pairs forming the training set.\n        keywords:   Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in *test_samples* (same\n        order as input).\n    \"\"\"\n    \n    # Step 1: Training phase\n    # Count occurrences of each keyword in each class\n    keyword_counts = defaultdict(lambda: defaultdict(int))\n    class_counts = defaultdict(int)\n    \n    for label, tokens in train_data:\n        class_counts[label] += 1\n        token_set = set(tokens)\n        for keyword in keywords:\n            if keyword in token_set:\n                keyword_counts[label][keyword] += 1\n    \n    # Step 2: Calculate conditional probabilities P(w|c)\n    conditional_probs = defaultdict(lambda: defaultdict(float))\n    \n    for label in class_counts:\n        N_c = class_counts[label]\n        for keyword in keywords:\n            count_w_c = keyword_counts[label][keyword]\n            conditional_probs[label][keyword] = count_w_c / N_c\n    \n    # Step 3: Prediction phase\n    predictions = []\n    \n    for tokens in test_samples:\n        token_set = set(tokens)\n        likelihoods = defaultdict(float)\n        \n        for label in class_counts:\n            likelihood = 1.0\n            for keyword in keywords:\n                if keyword in token_set:\n                    likelihood *= conditional_probs[label][keyword]\n                else:\n                    likelihood *= (1 - conditional_probs[label][keyword])\n            likelihoods[label] = likelihood\n        \n        # Choose the label with the highest likelihood\n        predicted_label = max(likelihoods, key=likelihoods.get)\n        predictions.append(predicted_label)\n    \n    return predictions\n\n# Example usage\ntrain_data = [\n    ('spam', ['cheap', 'offer']),\n    ('ham',  ['hello', 'friend']),\n    ('spam', ['buy', 'cheap'])\n]\nkeywords = {'cheap', 'buy', 'hello'}\ntest_samples = [['cheap'], ['hello']]\n\nprint(naive_bayes_predict(train_data, keywords, test_samples))  # Output: ['spam', 'ham']\n```\n\n### Explanation:\n\n1. **Training Phase:**\n   - We count how often each keyword appears in documents of each class using `keyword_counts`.\n   - We also count the number of documents for each class using `class_counts`.\n   - We calculate the conditional probability `P(w|c)` for each keyword and class.\n\n2. **Prediction Phase:**\n   - For each test document, we calculate the likelihood for each class using the Bernoulli model.\n   - We multiply the probabilities for keywords present and `(1 - probability)` for keywords absent.\n   - We select the class with the highest likelihood for each test document.\n\nThis implementation follows the task requirements and correctly predicts the labels for the test samples."}
{"task_id": 571, "completion_id": 0, "completion": "To implement the `compute_svm_parameters` function, we need to follow the formulas provided for calculating the weight vector `w` and the bias `b`. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = X.T @ (alpha * y)\n    \n    # Compute the bias term b\n    b = np.mean(y - X @ w)\n    \n    # Round w and b to 4 decimal places\n    w_list = np.round(w, 4).tolist()\n    b = round(b, 4)\n    \n    return w_list, b\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, -1, 1])\n# alpha = np.array([0.5, 0.3, 0.2])\n# w_list, b = compute_svm_parameters(X, y, alpha)\n# print(w_list, b)\n```\n\n### Explanation:\n1. **Weight Vector Calculation**:\n   - The weight vector `w` is calculated using the formula: \\( \\mathbf{w} = X^\\top (\\boldsymbol{\\alpha} \\odot \\mathbf{y}) \\).\n   - This involves element-wise multiplication of `alpha` and `y`, followed by a matrix multiplication with the transpose of `X`.\n\n2. **Bias Calculation**:\n   - The bias `b` is calculated using the formula: \\( b = \\frac{1}{n} \\sum_{i=1}^{n} \\left( y_i - \\mathbf{w}^\\top \\mathbf{x}_i \\right) \\).\n   - This is implemented as the mean of the differences between `y` and the dot product of `X` and `w`.\n\n3. **Rounding**:\n   - Both the weight vector `w` and the bias `b` are rounded to 4 decimal places using `np.round` and `round`, respectively.\n\n4. **Return**:\n   - The function returns a tuple containing the rounded weight vector as a list and the rounded bias term."}
{"task_id": 572, "completion_id": 0, "completion": "To implement the Local Outlier Factor (LOF) algorithm from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef euclidean_distance_matrix(data):\n    \"\"\"Compute the full pair-wise Euclidean distance matrix.\"\"\"\n    n_samples = data.shape[0]\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            distance_matrix[i, j] = np.linalg.norm(data[i] - data[j])\n    return distance_matrix\n\ndef k_distance_and_neighbors(distance_matrix, k):\n    \"\"\"Compute k-distance and k nearest neighbors for each sample.\"\"\"\n    n_samples = distance_matrix.shape[0]\n    k_distances = np.zeros(n_samples)\n    neighbors = []\n    for i in range(n_samples):\n        sorted_indices = np.argsort(distance_matrix[i])\n        k_distances[i] = distance_matrix[i, sorted_indices[k]]\n        neighbors.append(sorted_indices[:k])\n    return k_distances, neighbors\n\ndef reachability_distance(distance_matrix, k_distances, p, q):\n    \"\"\"Compute the reachability distance between two points.\"\"\"\n    return max(k_distances[q], distance_matrix[p, q])\n\ndef local_reachability_density(distance_matrix, k_distances, neighbors, p, k):\n    \"\"\"Compute the Local Reachability Density (LRD) of a point.\"\"\"\n    reach_dists = [reachability_distance(distance_matrix, k_distances, p, q) for q in neighbors[p]]\n    return k / np.sum(reach_dists)\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample.\"\"\"\n    distance_matrix = euclidean_distance_matrix(data)\n    k_distances, neighbors = k_distance_and_neighbors(distance_matrix, k)\n    \n    n_samples = data.shape[0]\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd[i] = local_reachability_density(distance_matrix, k_distances, neighbors, i, k)\n    \n    lof_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd_ratios = [lrd[q] / lrd[i] for q in neighbors[i]]\n        lof_scores[i] = np.sum(lrd_ratios) / k\n    \n    lof_scores = np.round(lof_scores, 4)\n    outlier_indices = np.where(lof_scores > epsilon)[0]\n    \n    return lof_scores.tolist(), sorted(outlier_indices.tolist())\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4], [8, 7], [8, 8]])\nk = 2\nepsilon = 1.5\nlof_scores, outliers = local_outlier_factor(data, k, epsilon)\nprint(\"LOF Scores:\", lof_scores)\nprint(\"Outlier Indices:\", outliers)\n```\n\n### Explanation:\n1. **Euclidean Distance Matrix**: We compute the pair-wise Euclidean distance matrix for the dataset.\n2. **k-Distance and Neighbors**: For each sample, we find the k-distance and the indices of the k nearest neighbors.\n3. **Reachability Distance**: Defined as the maximum of the k-distance of the neighbor and the actual distance between the points.\n4. **Local Reachability Density (LRD)**: Calculated using the reachability distances of the k nearest neighbors.\n5. **Local Outlier Factor (LOF)**: The ratio of the average LRD of the neighbors to the LRD of the point itself.\n6. **Outlier Detection**: We identify samples with LOF scores greater than `epsilon`.\n\nThis implementation should work for any dataset provided as a NumPy array, with the constraints specified."}
{"task_id": 573, "completion_id": 0, "completion": "To implement the Perceptron learning algorithm as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef perceptron_train(X_train: np.ndarray,\n                     y_train: np.ndarray,\n                     eta: float = 0.1,\n                     n_iter: int = 1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    # Initialize weights and bias\n    m, n = X_train.shape\n    w = np.zeros(n)\n    b = 0.0\n    error_count_history = []\n\n    for _ in range(n_iter):\n        error_count = 0\n        for xi, yi in zip(X_train, y_train):\n            # Check if the prediction is incorrect\n            if yi * (np.dot(w, xi) + b) <= 0:\n                # Update weights and bias\n                w += eta * yi * xi\n                b += eta * yi\n                error_count += 1\n        # Record the number of errors in this epoch\n        error_count_history.append(error_count)\n        # If no errors, the algorithm has converged\n        if error_count == 0:\n            break\n\n    # Round weights and bias to the nearest 4th decimal\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n\n    return w_rounded, b_rounded, error_count_history\n```\n\n### Explanation:\n\n1. **Initialization**: \n   - We initialize the weight vector `w` with zeros, and the bias `b` with zero.\n   - `error_count_history` is initialized as an empty list to store the number of errors in each epoch.\n\n2. **Training Loop**:\n   - For each epoch, we initialize `error_count` to zero.\n   - For each training example `(xi, yi)`, we check if the prediction is incorrect by evaluating `yi * (np.dot(w, xi) + b) <= 0`.\n   - If the prediction is incorrect, we update the weights and bias using the learning rate `eta` and increment the `error_count`.\n\n3. **Convergence Check**:\n   - After each epoch, we append the `error_count` to `error_count_history`.\n   - If `error_count` is zero, the algorithm has converged, and we break out of the loop early.\n\n4. **Rounding**:\n   - After training, we round the weights and bias to the nearest 4th decimal place before returning them.\n\n5. **Return**:\n   - The function returns a tuple containing the rounded weight vector, the rounded bias, and the list of error counts for each epoch."}
{"task_id": 574, "completion_id": 0, "completion": "To implement the synthetic 2-D data generator as described, we need to follow these steps:\n\n1. Set the random seed if provided.\n2. Initialize arrays to store the generated data.\n3. For each class label, generate the specified number of training and validation points.\n4. Sample the coordinates from the specified uniform distribution.\n5. Round the coordinates to 4 decimal places.\n6. Return the generated data as a tuple of NumPy arrays.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    \n    X_train = np.zeros((m * n_train, 2))\n    X_val = np.zeros((m * n_val, 2))\n    y_train = np.zeros(m * n_train, dtype=int)\n    y_val = np.zeros(m * n_val, dtype=int)\n    \n    for c in range(m):\n        base = 10 * (c // 2)\n        \n        # Generate training points\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train_points = np.random.uniform(base + 1, base + 9, n_train)\n        X_train[c * n_train:(c + 1) * n_train] = np.column_stack((x_train, y_train_points))\n        y_train[c * n_train:(c + 1) * n_train] = c\n        \n        # Generate validation points\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val_points = np.random.uniform(base + 1, base + 9, n_val)\n        X_val[c * n_val:(c + 1) * n_val] = np.column_stack((x_val, y_val_points))\n        y_val[c * n_val:(c + 1) * n_val] = c\n    \n    # Round coordinates to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    \n    return X_train, X_val, y_train, y_val\n```\n\n### Explanation:\n- **Random Seed**: We set the seed for both Python's `random` module and NumPy's random functions to ensure reproducibility.\n- **Data Initialization**: We initialize arrays to store the training and validation data points and their labels.\n- **Data Generation**: For each class `c`, we calculate the `base` and generate `n_train` and `n_val` points using a uniform distribution. The points are stored in the respective arrays.\n- **Rounding**: We round the coordinates to 4 decimal places to meet the output constraints.\n- **Return**: Finally, we return the generated data as a tuple of NumPy arrays."}
{"task_id": 577, "completion_id": 0, "completion": "To implement the `generate_data` function, we need to follow the specifications provided in the task description. The function will generate synthetic 2-D data points for a classification problem, ensuring that the data is split into training and validation sets with the correct labels. Here's how we can achieve this:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n\n    The function must create two NumPy arrays with coordinates and two with\n    labels using the rules explained in the task description.\n\n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed so that results are reproducible.\n\n    Returns:\n        A tuple ``(X_train, X_val, y_train, y_val)`` consisting of four\n        NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    \n    for i in range(m):\n        # Calculate the range for x and y based on the class index i\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * 0.5 + 0.1) * 10\n        y_max = ((i % 2) * 0.5 + 0.9) * 10\n        \n        # Generate training samples\n        for _ in range(n_train):\n            x = round(random.uniform(x_min, x_max), 4)\n            y = round(random.uniform(y_min, y_max), 4)\n            X_train.append([x, y])\n            y_train.append((i - 0.5) * 2)\n        \n        # Generate validation samples\n        for _ in range(n_val):\n            x = round(random.uniform(x_min, x_max), 4)\n            y = round(random.uniform(y_min, y_max), 4)\n            X_val.append([x, y])\n            y_val.append((i - 0.5) * 2)\n    \n    # Convert lists to numpy arrays\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    \n    return X_train, X_val, y_train, y_val\n```\n\n### Explanation:\n\n1. **Seeding**: If a seed is provided, we set the random seed to ensure reproducibility.\n\n2. **Data Generation**:\n   - For each class `i`, we calculate the range for `x` and `y` coordinates based on the given formulas.\n   - We generate `n_train` samples for the training set and `n_val` samples for the validation set for each class.\n   - Each coordinate is generated using `random.uniform` within the specified range and rounded to four decimal places.\n   - Labels are calculated as `(i - 0.5) * 2`.\n\n3. **Output**: The generated data points and labels are stored in lists, which are then converted to NumPy arrays before returning.\n\nThis function will generate the required synthetic data set with the specified properties, ensuring that the validation labels are correctly populated."}
{"task_id": 578, "completion_id": 0, "completion": "Here's the implementation of the `make_pairs` function that generates consecutive pairs (bigrams) from the given list `corpus`:\n\n```python\nfrom typing import List, Tuple\n\ndef make_pairs(corpus: List) -> List[Tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    # Check if the length of corpus is less than 2\n    if len(corpus) < 2:\n        return []\n    \n    # Create a list of tuples containing consecutive pairs\n    pairs = [(corpus[i], corpus[i+1]) for i in range(len(corpus) - 1)]\n    \n    return pairs\n```\n\n### Explanation:\n- The function first checks if the length of `corpus` is less than 2. If it is, it returns an empty list because no consecutive pairs can be formed.\n- If the length is sufficient, it uses a list comprehension to iterate over the indices of `corpus` up to the second-to-last element. For each index `i`, it creates a tuple containing the element at index `i` and the element at index `i+1`.\n- The list comprehension collects all these tuples into a list, which is then returned."}
{"task_id": 579, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm from scratch using NumPy, we need to follow the steps outlined in your task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres. Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached. The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Step 1: Initialisation\n    m, d = X.shape\n    centres = X[:k].copy()  # Take the first k points as initial centres\n    labels = np.zeros(m, dtype=int)\n\n    for iteration in range(max_iters):\n        # Step 2: Assignment step\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Step 3: Update step\n        new_centres = np.zeros((k, d))\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if len(points_in_cluster) > 0:\n                new_centres[j] = np.mean(points_in_cluster, axis=0)\n            else:\n                new_centres[j] = centres[j]  # Keep unchanged if no points are assigned\n\n        # Check for convergence (if centres do not change)\n        if np.allclose(new_centres, centres, atol=1e-4):\n            break\n\n        centres = new_centres\n\n    # Round the final centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n\n    return labels.tolist(), rounded_centres\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# labels, centres = kmeans(X, k)\n# print(\"Labels:\", labels)\n# print(\"Centres:\", centres)\n```\n\n### Explanation:\n1. **Initialisation**: We start by selecting the first `k` points from the dataset `X` as the initial cluster centers. This ensures the algorithm is deterministic.\n\n2. **Assignment Step**: For each point in `X`, we calculate the Euclidean distance to each cluster center and assign the point to the nearest center. In case of a tie, `np.argmin` naturally selects the center with the smaller index.\n\n3. **Update Step**: We recompute the cluster centers as the mean of all points assigned to each cluster. If a cluster loses all its points, the center remains unchanged.\n\n4. **Convergence Check**: We repeat the assignment and update steps until the cluster centers do not change significantly (using `np.allclose` for comparison) or until the maximum number of iterations is reached.\n\n5. **Output**: The function returns the final labels for each point and the rounded cluster centers.\n\nThis implementation uses NumPy for efficient numerical operations and ensures the results are deterministic and testable."}
{"task_id": 581, "completion_id": 0, "completion": "To implement Elastic-Net regularized linear regression using batch gradient descent, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    # Get the number of samples (m) and features (n)\n    m, n = X.shape\n    \n    # Initialize weights and bias\n    weights = np.zeros(n)\n    bias = 0.0\n    \n    # If learning rate is 0 or iterations is 0, return initial parameters\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    \n    # Perform gradient descent for the specified number of iterations\n    for _ in range(iterations):\n        # Compute predictions\n        y_pred = X.dot(weights) + bias\n        \n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Compute gradients\n        weight_gradients = np.zeros(n)\n        for j in range(n):\n            weight_gradients[j] = (-2 * X[:, j].dot(residuals) + \n                                   l1_penalty * np.sign(weights[j]) + \n                                   2 * l2_penalty * weights[j]) / m\n        \n        bias_gradient = -2 * np.sum(residuals) / m\n        \n        # Update weights and bias\n        weights -= learning_rate * weight_gradients\n        bias -= learning_rate * bias_gradient\n    \n    # Round weights and bias to 4 decimal places\n    weights = [round(w, 4) for w in weights]\n    bias = round(bias, 4)\n    \n    return (weights, bias)\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# learning_rate = 0.01\n# iterations = 1000\n# l1_penalty = 0.1\n# l2_penalty = 0.1\n# print(elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty))\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the weights and bias to zero.\n\n2. **Gradient Descent**: For each iteration, we:\n   - Compute the predictions using the current weights and bias.\n   - Calculate the residuals (difference between actual and predicted values).\n   - Compute the gradients for each weight using the formula provided, which includes both L1 and L2 penalties.\n   - Compute the gradient for the bias.\n   - Update the weights and bias using the computed gradients and the learning rate.\n\n3. **Return Values**: After completing the specified number of iterations, we round the weights and bias to four decimal places and return them.\n\nThis implementation follows the task description closely and ensures that the Elastic-Net regularization is applied correctly during the gradient descent process."}
{"task_id": 582, "completion_id": 0, "completion": "To solve the problem of constructing an undirected k-nearest-neighbour graph, we need to follow the steps outlined in the task description. Here's the implementation:\n\n```python\nimport numpy as np\n\ndef nearest_neighbor_graph(X):\n    \"\"\"Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    # Convert input to a NumPy array for easier manipulation\n    X = np.array(X)\n    n = X.shape[0]\n    \n    # Handle the case where n = 1\n    if n == 1:\n        return [[0]]\n    \n    # Determine k based on the given rule\n    k = min(int(np.floor(np.sqrt(n))), 10)\n    \n    # Initialize the adjacency matrix with zeros\n    W = np.zeros((n, n), dtype=int)\n    \n    # Compute the Euclidean distance matrix\n    distances = np.linalg.norm(X[:, np.newaxis] - X, axis=2)\n    \n    # For each point, find the k nearest neighbors\n    for i in range(n):\n        # Get the indices of the sorted distances, excluding the point itself\n        nearest_indices = np.argsort(distances[i])[1:k+1]\n        \n        # Create directed edges i -> j\n        for j in nearest_indices:\n            W[i][j] = 1\n    \n    # Symmetrize the adjacency matrix to make the graph undirected\n    W = np.maximum(W, W.T)\n    \n    # Convert the NumPy array to a list of lists\n    return W.tolist()\n\n# Example usage\nX = [[0, 0], [1, 0], [0, 1], [10, 10]]\nprint(nearest_neighbor_graph(X))\n```\n\n### Explanation:\n\n1. **Input Handling**: The input `X` is converted to a NumPy array for easier manipulation. This allows us to use NumPy's efficient operations for distance calculations.\n\n2. **Special Case**: If `n = 1`, we return `[[0]]` because a single point cannot have any neighbors.\n\n3. **Determine `k`**: We calculate `k` using the formula `k = min(int(np.floor(np.sqrt(n))), 10)`.\n\n4. **Distance Calculation**: We compute the Euclidean distance between all pairs of points using broadcasting and `np.linalg.norm`.\n\n5. **Directed Edges**: For each point, we find the indices of the `k` nearest neighbors using `np.argsort` and create directed edges in the adjacency matrix.\n\n6. **Symmetrization**: We convert the directed graph into an undirected graph by taking the element-wise maximum of the adjacency matrix and its transpose.\n\n7. **Output**: Finally, we convert the NumPy array to a list of lists to meet the output constraints.\n\nThis implementation efficiently constructs the k-nearest-neighbour graph and returns the adjacency matrix as required."}
{"task_id": 584, "completion_id": 0, "completion": "To achieve the task of stacking a single 2-D Atari frame four times to form the initial state, we can utilize NumPy's capabilities to handle multidimensional arrays efficiently. Here's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    frame_array = np.array(state)\n    \n    # Stack the frame four times along a new last axis\n    stacked_state = np.stack([frame_array] * 4, axis=-1)\n    \n    # Convert the stacked NumPy array back to a nested list\n    return stacked_state.tolist()\n\n# Example usage:\n# frame = [[1, 2], [3, 4]]\n# initial_state = make_initial_state(frame)\n# print(initial_state)\n```\n\n### Explanation:\n\n1. **Convert to NumPy Array**: The input `state`, which is a list of lists, is first converted into a NumPy array using `np.array(state)`. This allows us to leverage NumPy's array operations.\n\n2. **Stacking the Frame**: We use `np.stack()` to stack the frame four times along a new last axis. The expression `[frame_array] * 4` creates a list containing four copies of the `frame_array`, and `np.stack(..., axis=-1)` stacks these copies along a new last axis, resulting in a 3-D array.\n\n3. **Convert Back to List**: Finally, we convert the stacked NumPy array back to a nested list using the `.tolist()` method, which is required by the task constraints.\n\nThis function will return the desired 3-D list where the original frame is repeated four times along the last axis, simulating the initial state for a Deep Q-Learning Atari agent."}
{"task_id": 585, "completion_id": 0, "completion": "To replicate the behavior of Python 2's `cmp` function, you can implement the function using simple comparison operators. Here's how you can do it:\n\n```python\ndef cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    if a > b:\n        return 1\n    elif a < b:\n        return -1\n    else:\n        return 0\n```\n\n### Explanation:\n- The function uses the standard comparison operators `>`, `<`, and `==` to determine the relationship between the two objects `a` and `b`.\n- If `a` is greater than `b`, it returns `1`.\n- If `a` is less than `b`, it returns `-1`.\n- If `a` is equal to `b`, it returns `0`.\n\nThis implementation should work with any pair of objects that support these comparison operations, such as numbers, strings, tuples, lists, etc."}
{"task_id": 586, "completion_id": 0, "completion": "To implement the LOWESS single-point prediction as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\n\n    The function should perform the following steps:\n    1. Normalise x and y separately to [0, 1].\n    2. Choose *window* nearest neighbours of x_query (on the normalised x axis).\n    3. Compute tricubic weights for those neighbours.\n    4. Fit a weighted straight line through the selected points.\n    5. Predict the normalised y\u0302 at the normalised x_query, convert it back to the\n       original scale and round to 4 decimal places.\n\n    Args:\n        x (np.ndarray): 1-D array of training inputs.\n        y (np.ndarray): 1-D array of training targets (same length as x).\n        x_query (float): The x value at which to make the prediction.\n        window (int): Number of neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns:\n        float: The LOWESS prediction for x_query rounded to four decimals.\n    \"\"\"\n    # Basic validation\n    if len(x) != len(y):\n        raise ValueError(\"x and y must have the same length.\")\n    if not (2 <= window <= len(x)):\n        raise ValueError(\"window must be between 2 and the length of x.\")\n\n    # Normalise x and y to [0, 1]\n    x_min, x_max = np.min(x), np.max(x)\n    y_min, y_max = np.min(y), np.max(y)\n    x_normalized = (x - x_min) / (x_max - x_min)\n    y_normalized = (y - y_min) / (y_max - y_min)\n    x_query_normalized = (x_query - x_min) / (x_max - x_min)\n\n    # Find the nearest neighbours\n    distances = np.abs(x_normalized - x_query_normalized)\n    nearest_indices = np.argsort(distances)[:window]\n    nearest_x = x_normalized[nearest_indices]\n    nearest_y = y_normalized[nearest_indices]\n    nearest_distances = distances[nearest_indices]\n\n    # Compute tricubic weights\n    d_max = np.max(nearest_distances)\n    weights = np.zeros(window)\n    for i in range(window):\n        if nearest_distances[i] <= d_max:\n            weights[i] = (1 - (nearest_distances[i] / d_max) ** 3) ** 3\n\n    # Fit a weighted straight line y = a + b*x\n    weighted_x = nearest_x * weights\n    weighted_y = nearest_y * weights\n    sum_weights = np.sum(weights)\n    sum_weighted_x = np.sum(weighted_x)\n    sum_weighted_y = np.sum(weighted_y)\n    sum_weighted_xx = np.sum(weighted_x * nearest_x)\n    sum_weighted_xy = np.sum(weighted_x * nearest_y)\n\n    # Calculate the slope (b) and intercept (a)\n    denominator = sum_weights * sum_weighted_xx - sum_weighted_x ** 2\n    if denominator == 0:\n        # If denominator is zero, return the weighted mean of y\n        prediction_normalized = sum_weighted_y / sum_weights\n    else:\n        b = (sum_weights * sum_weighted_xy - sum_weighted_x * sum_weighted_y) / denominator\n        a = (sum_weighted_y - b * sum_weighted_x) / sum_weights\n        prediction_normalized = a + b * x_query_normalized\n\n    # Convert prediction back to original scale\n    prediction = prediction_normalized * (y_max - y_min) + y_min\n\n    # Return the prediction rounded to 4 decimal places\n    return np.round(prediction, 4)\n\n# Example usage:\n# x = np.array([1, 2, 3, 4, 5])\n# y = np.array([2, 3, 5, 4, 6])\n# x_query = 3.5\n# window = 3\n# print(lowess_predict(x, y, x_query, window))\n```\n\nThis code implements the LOWESS single-point prediction algorithm, including normalization, neighbor selection, weight calculation, linear fitting, and prediction conversion back to the original scale. It also includes basic validation checks for input consistency."}
{"task_id": 587, "completion_id": 0, "completion": "To implement the `manage_replay_memory` function, we need to handle a series of operations on a replay memory buffer, which is essentially a list. The operations include appending elements, popping the last element, sampling a subset of elements, and checking the size of the buffer. Let's go through the implementation step-by-step:\n\n1. **Initialize the Random Seed**: We need to ensure that the sampling operation is deterministic, so we set the random seed to 0 at the beginning of the function.\n\n2. **Initialize the Buffer and Output List**: We'll use a list to represent the replay memory buffer and another list to collect the outputs of operations that produce results.\n\n3. **Process Each Operation**: We'll iterate over the list of operations and handle each one based on its type:\n   - **Append**: Add the given transition to the end of the buffer.\n   - **Pop**: Remove and return the last element of the buffer, or return `None` if the buffer is empty.\n   - **Sample**: Return a list of distinct elements randomly sampled from the buffer. If the requested batch size is larger than the buffer size, return an empty list.\n   - **Size**: Return the current number of elements in the buffer.\n\n4. **Return the Collected Outputs**: After processing all operations, return the list of outputs.\n\nHere's the complete implementation:\n\n```python\nimport random\nfrom typing import Any, List, Tuple\n\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\n\n    The buffer starts out empty and is manipulated according to *operations*.\n\n    Args:\n        operations: A list of tuples describing the commands to execute. The\n            first element of each tuple is a string (\"append\", \"pop\", \"sample\",\n            or \"size\").  Additional elements contain the arguments of that\n            command.\n\n    Returns:\n        A list containing the outputs of all commands that return a value, in\n        the same order in which those commands appear in *operations*.\n    \"\"\"\n    random.seed(0)  # Set the random seed for reproducibility\n    buffer = []  # Initialize the replay memory buffer\n    outputs = []  # List to store the outputs of operations that produce results\n\n    for operation in operations:\n        command = operation[0]\n\n        if command == 'append':\n            # Append the transition to the buffer\n            transition = operation[1]\n            buffer.append(transition)\n\n        elif command == 'pop':\n            # Pop the last element from the buffer, or return None if empty\n            if buffer:\n                outputs.append(buffer.pop())\n            else:\n                outputs.append(None)\n\n        elif command == 'sample':\n            # Sample a batch of elements from the buffer\n            batch_size = operation[1]\n            if batch_size <= len(buffer):\n                sampled_elements = random.sample(buffer, batch_size)\n                outputs.append(sampled_elements)\n            else:\n                outputs.append([])\n\n        elif command == 'size':\n            # Return the current size of the buffer\n            outputs.append(len(buffer))\n\n    return outputs\n```\n\nThis function handles the replay memory operations as specified, ensuring deterministic sampling by setting the random seed. The outputs are collected and returned in the order of the operations that produce them."}
{"task_id": 588, "completion_id": 0, "completion": "To solve the problem of finding the maximum depth of a binary tree, we can use a recursive approach. The idea is to traverse the tree and calculate the depth of each node by considering the depth of its left and right children. The maximum depth of the tree will be the maximum depth among all nodes.\n\nHere's the implementation of the `tree_max_depth` function:\n\n```python\nfrom typing import Optional\n\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self,\n                 data=None,\n                 split_variable=None,\n                 split_variable_value=None,\n                 left: Optional['Node'] = None,\n                 right: Optional['Node'] = None,\n                 depth: int = 0,\n                 criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\n\n\ndef tree_max_depth(root: Optional[Node]) -> int:\n    \"\"\"Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.  The depth of an empty\n    tree is defined to be -1.\n\n    Args:\n        root: The root of the binary tree (Node or None).\n\n    Returns:\n        The maximum depth as an integer.\n    \"\"\"\n    if root is None:\n        return -1\n    \n    def max_depth(node: Optional[Node], current_depth: int) -> int:\n        if node is None:\n            return current_depth - 1\n        \n        left_depth = max_depth(node.left, current_depth + 1)\n        right_depth = max_depth(node.right, current_depth + 1)\n        \n        return max(left_depth, right_depth)\n    \n    return max_depth(root, 0)\n\n# Example usage:\n# Example-1 (single node)\nroot1 = Node(data=7)\nprint(tree_max_depth(root1))  # Output: 0\n\n# Example-2 (balanced)\nroot2 = Node(data=10)\nroot2.left = Node(data=5)\nroot2.right = Node(data=20)\nroot2.right.left = Node(data=15)\nroot2.right.right = Node(data=25)\nprint(tree_max_depth(root2))  # Output: 2\n```\n\n### Explanation:\n1. **Base Case**: If the tree is empty (`root is None`), the function returns `-1` as specified.\n\n2. **Recursive Function `max_depth`**:\n   - This function takes a node and the current depth as arguments.\n   - If the node is `None`, it returns `current_depth - 1` because the depth of a non-existent node is one less than the current depth.\n   - It recursively calculates the depth of the left and right subtrees by calling itself with the left and right children of the current node, respectively, and increments the current depth.\n   - It returns the maximum of the depths of the left and right subtrees.\n\n3. **Initial Call**: The `tree_max_depth` function calls `max_depth` with the root node and an initial depth of `0`.\n\nThis approach ensures that we correctly calculate the maximum depth of the binary tree by considering all paths from the root to the leaves."}
{"task_id": 590, "completion_id": 0, "completion": "To solve the problem, we need to iterate over each cell in the `ground` matrix and apply the given rules to determine which cells can be safely revealed and which must be flagged as bombs. Here's the implementation of the `minesweeper_step` function:\n\n```python\nimport numpy as np\n\ndef minesweeper_step(ground: list[list[float | int]],\n                     flags: list[list[bool]]) -> tuple[list[tuple[int, int]],\n                                                    list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\n\n    The function receives the currently visible part of the board (```ground```)\n    and the already placed flags (```flags```). It must return two *sorted* lists:\n\n    1. **clicks** \u2013 every square that can be safely revealed.\n    2. **new_flags** \u2013 every square that must be a bomb according to the rules\n       described in the task description.\n\n    Notes:\n        * ``ground`` and ``flags`` have identical dimensions.\n        * Hidden squares are represented by ``np.nan`` inside ``ground``.\n        * Neighbourhood is the 8-connected Moore neighbourhood.\n    \"\"\"\n    rows = len(ground)\n    cols = len(ground[0])\n    \n    clicks = set()\n    new_flags = set()\n    \n    # Directions for 8-connected neighborhood\n    directions = [(-1, -1), (-1, 0), (-1, 1),\n                  (0, -1),         (0, 1),\n                  (1, -1), (1, 0), (1, 1)]\n    \n    for r in range(rows):\n        for c in range(cols):\n            if not np.isnan(ground[r][c]) and not flags[r][c]:\n                value = ground[r][c]\n                bombs = 0\n                unexplored = 0\n                unexplored_coords = []\n                \n                # Check all neighbors\n                for dr, dc in directions:\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                        if flags[nr][nc]:\n                            bombs += 1\n                        elif np.isnan(ground[nr][nc]):\n                            unexplored += 1\n                            unexplored_coords.append((nr, nc))\n                \n                # Apply rules\n                if value == 0:\n                    clicks.update(unexplored_coords)\n                elif value == 8:\n                    new_flags.update(unexplored_coords)\n                else:\n                    if bombs == value:\n                        clicks.update(unexplored_coords)\n                    elif unexplored == value:\n                        new_flags.update(unexplored_coords)\n    \n    # Convert sets to sorted lists\n    clicks = sorted(clicks)\n    new_flags = sorted(new_flags)\n    \n    return clicks, new_flags\n```\n\n### Explanation:\n\n1. **Initialization**: We initialize two sets, `clicks` and `new_flags`, to store the coordinates of cells that can be revealed and flagged, respectively.\n\n2. **Neighborhood Directions**: We define the 8-connected neighborhood directions to check adjacent cells.\n\n3. **Iterate Over Each Cell**: We iterate over each cell in the `ground` matrix. If the cell is revealed (not `np.nan`) and not flagged, we proceed to check its neighbors.\n\n4. **Count Bombs and Unexplored Neighbors**: For each revealed cell, we count the number of flagged neighbors (`bombs`) and unexplored neighbors (`unexplored`). We also keep track of the coordinates of unexplored neighbors.\n\n5. **Apply Rules**: Based on the value of the revealed cell, we apply the rules:\n   - If the value is `0`, all unexplored neighbors can be revealed.\n   - If the value is `8`, all unexplored neighbors must be flagged.\n   - If `bombs == value`, all unexplored neighbors can be revealed.\n   - If `unexplored == value`, all unexplored neighbors must be flagged.\n\n6. **Return Results**: Finally, we convert the sets to sorted lists and return them.\n\nThis implementation efficiently processes the board in a single pass and applies the logical rules to determine the next steps in the Minesweeper game."}
{"task_id": 591, "completion_id": 0, "completion": "To solve the task of performing a forward pass through a fully-connected feed-forward neural network, we need to implement the function `neural_net_predict`. This function will take the network's weights and an input vector, and compute the output of the network using the specified activation functions. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef relu(x):\n    \"\"\"Applies the ReLU activation function element-wise.\"\"\"\n    return np.maximum(0, x)\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert input to a numpy array\n    current_input = np.array(x)\n    \n    # Iterate over each layer\n    for layer_index, layer_weights in enumerate(weights):\n        # Add bias term to the current input\n        current_input = np.insert(current_input, 0, 1)\n        \n        # Compute the output of the current layer\n        layer_output = []\n        for neuron_weights in layer_weights:\n            # Perform dot product between neuron weights and current input\n            neuron_output = np.dot(neuron_weights, current_input)\n            layer_output.append(neuron_output)\n        \n        # Convert layer output to numpy array\n        layer_output = np.array(layer_output)\n        \n        # Apply ReLU activation function to all layers except the last one\n        if layer_index < len(weights) - 1:\n            layer_output = relu(layer_output)\n        \n        # Update current input for the next layer\n        current_input = layer_output\n    \n    # Round the final output to four decimals\n    if len(current_input) == 1:\n        return round(current_input[0], 4)\n    else:\n        return [round(output, 4) for output in current_input]\n\n# Example usage:\n# weights = [\n#     [[0.5, 0.2, 0.8], [0.1, 0.4, 0.6]],  # Layer 0\n#     [[0.3, 0.7, 0.9]]                   # Layer 1 (output layer)\n# ]\n# x = [0.5, 0.3]\n# print(neural_net_predict(weights, x))  # Output: 0.774\n```\n\n### Explanation:\n1. **Input Preparation**: Convert the input vector `x` into a NumPy array for efficient numerical operations.\n\n2. **Forward Pass**:\n   - For each layer, add a bias term `1` to the current input.\n   - Compute the output of each neuron in the layer using the dot product of the neuron's weights and the current input.\n   - Apply the ReLU activation function to the output of all layers except the last one.\n\n3. **Output**:\n   - If the final layer has a single neuron, return the output as a float rounded to four decimal places.\n   - If the final layer has multiple neurons, return a list of outputs, each rounded to four decimal places.\n\nThis implementation efficiently computes the network's output using NumPy for numerical operations and adheres to the specified activation functions and output constraints."}
{"task_id": 592, "completion_id": 0, "completion": "To solve the Minesweeper Neighbour Analysis task, we need to identify the neighboring cells of a given cell in a 2D grid and determine which of these neighbors are unopened and how many are flagged as mines. Here's how you can implement the solution:\n\n```python\nimport numpy as np\n\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"Return unopened neighbouring cells and flagged-mine count for a board position.\n\n    Args:\n        clicked: 2-D NumPy boolean array where True means the cell is already opened.\n        flags:   2-D NumPy boolean array of the same shape \u2013 True means the cell is\n                  already marked as a mine by the player.\n        row:     Row index of the cell to analyse.\n        col:     Column index of the cell to analyse.\n\n    Returns:\n        A tuple (unopened_neighbours, flagged_count):\n        * unopened_neighbours \u2013 list with coordinates (row, col) of all neighbouring\n          cells that are not opened yet.  The list is sorted ascending first by row\n          then by column.\n        * flagged_count \u2013 integer with the number of neighbouring cells that are\n          currently flagged as mines.\n    \"\"\"\n    # Get the dimensions of the board\n    num_rows, num_cols = clicked.shape\n    \n    # Define the relative positions of the 8 possible neighbors\n    neighbor_offsets = [(-1, -1), (-1, 0), (-1, 1),\n                        (0, -1),         (0, 1),\n                        (1, -1), (1, 0), (1, 1)]\n    \n    unopened_neighbours = []\n    flagged_count = 0\n    \n    # Iterate over each possible neighbor\n    for dr, dc in neighbor_offsets:\n        neighbor_row, neighbor_col = row + dr, col + dc\n        \n        # Check if the neighbor is within bounds\n        if 0 <= neighbor_row < num_rows and 0 <= neighbor_col < num_cols:\n            # Check if the neighbor is unopened\n            if not clicked[neighbor_row, neighbor_col]:\n                unopened_neighbours.append((neighbor_row, neighbor_col))\n            # Check if the neighbor is flagged\n            if flags[neighbor_row, neighbor_col]:\n                flagged_count += 1\n    \n    # Sort the unopened neighbors by row and then by column\n    unopened_neighbours.sort()\n    \n    return unopened_neighbours, flagged_count\n\n# Example usage:\nclicked = np.array([[False, True, False],\n                    [True, False, False],\n                    [False, False, True]])\n\nflags = np.array([[False, False, True],\n                  [False, True, False],\n                  [True, False, False]])\n\nrow, col = 1, 1\nresult = analyze_cell(clicked, flags, row, col)\nprint(result)  # Output: ([(0, 0), (0, 2), (1, 2), (2, 0), (2, 1)], 2)\n```\n\n### Explanation:\n1. **Neighbor Offsets**: We define the relative positions of the 8 possible neighbors around a cell using `neighbor_offsets`.\n2. **Bounds Checking**: For each neighbor, we check if it is within the bounds of the grid.\n3. **Unopened Neighbors**: We collect the coordinates of neighbors that are not opened (`clicked` is `False`).\n4. **Flagged Count**: We count the number of neighbors that are flagged as mines (`flags` is `True`).\n5. **Sorting**: We sort the list of unopened neighbors first by row and then by column to meet the output constraints.\n\nThis implementation efficiently analyzes the neighbors of a given cell in a Minesweeper grid."}
{"task_id": 593, "completion_id": 0, "completion": "To solve the Minesweeper constraint deduction problem, we need to implement a function that applies several logical rules to simplify the constraints and deduce which variables are safe and which are mines. Let's go through the implementation step-by-step:\n\n```python\nfrom copy import deepcopy\n\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"Simplify Minesweeper constraints.\n\n    You receive *constraints* as a list of 2-element lists *[variables, value]*\n    where *variables* is a list of identifiers and *value* is an int telling how\n    many of those variables hide a mine.\n\n    The function must apply the logical rules described in the task statement\n    (solved constraints, propagation, subset rule, duplicate removal) until no\n    new information can be obtained.\n\n    The result is a tuple (safe, mines) of two **alphabetically sorted** lists.\n    The first element contains all variables that are certainly safe, the second\n    one all variables that are certainly mines.  If nothing can be deduced an\n    empty list must be returned instead.\n    \"\"\"\n    # Initialize sets for safe and mine variables\n    safe = set()\n    mines = set()\n    \n    # Make a deep copy of constraints to avoid modifying the original list\n    constraints = deepcopy(constraints)\n    \n    # Function to apply rules until no more changes can be made\n    def apply_rules():\n        nonlocal constraints, safe, mines\n        changed = True\n        while changed:\n            changed = False\n            \n            # Rule 1: Solved constraints\n            for variables, value in constraints:\n                if value == 0:\n                    for var in variables:\n                        if var not in safe:\n                            safe.add(var)\n                            changed = True\n                elif value == len(variables):\n                    for var in variables:\n                        if var not in mines:\n                            mines.add(var)\n                            changed = True\n            \n            # Rule 2: Propagation of knowledge\n            new_constraints = []\n            for variables, value in constraints:\n                new_vars = [var for var in variables if var not in safe and var not in mines]\n                new_value = value - sum(1 for var in variables if var in mines)\n                if new_vars and new_value >= 0:\n                    new_constraints.append([new_vars, new_value])\n            constraints = new_constraints\n            \n            # Rule 3: Subset rule\n            for i in range(len(constraints)):\n                for j in range(len(constraints)):\n                    if i != j:\n                        S1, v1 = constraints[i]\n                        S2, v2 = constraints[j]\n                        if set(S1).issubset(set(S2)):\n                            new_vars = list(set(S2) - set(S1))\n                            new_value = v2 - v1\n                            if new_vars and new_value >= 0:\n                                constraints[j] = [new_vars, new_value]\n                                changed = True\n            \n            # Rule 4: Duplicate removal\n            unique_constraints = []\n            seen = set()\n            for variables, value in constraints:\n                constraint_tuple = (tuple(sorted(variables)), value)\n                if constraint_tuple not in seen:\n                    seen.add(constraint_tuple)\n                    unique_constraints.append([variables, value])\n            constraints = unique_constraints\n    \n    # Apply rules until no more changes can be made\n    apply_rules()\n    \n    # Return sorted lists of safe and mine variables\n    return sorted(safe), sorted(mines)\n\n# Example usage:\nconstraints = [\n    [['A', 'B', 'C'], 1],\n    [['B', 'C'], 1],\n    [['C', 'D'], 1]\n]\nprint(deduce_mines(constraints))  # Output: (['A'], ['C'])\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing sets for safe and mine variables. We also make a deep copy of the constraints to avoid modifying the original list.\n\n2. **Rule Application**: We define a function `apply_rules` that applies the rules iteratively until no more changes can be made:\n   - **Solved Constraints**: If a constraint has a value of 0, all its variables are safe. If the value equals the number of variables, all are mines.\n   - **Propagation of Knowledge**: Remove known safe and mine variables from constraints and adjust the values accordingly.\n   - **Subset Rule**: If one constraint is a subset of another, adjust the larger constraint.\n   - **Duplicate Removal**: Remove duplicate constraints.\n\n3. **Return**: After applying the rules, we return the sorted lists of safe and mine variables.\n\nThis implementation efficiently deduces the safe and mine variables by applying logical rules iteratively."}
{"task_id": 594, "completion_id": 0, "completion": "To convert the maze into an undirected graph represented as an adjacency list, we need to iterate through each cell in the maze, check if it's walkable (i.e., contains a 0), and then find all orthogonally adjacent walkable cells. Here's how you can implement this:\n\n```python\ndef maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n    \"\"\"Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall.  Two open\n    cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary mapping each open cell coordinate (row, col) to a sorted\n        list of neighbouring open cell coordinates.  Walls are not included in\n        the dictionary.  If there are no open cells the function returns an\n        empty dictionary.\n    \"\"\"\n    graph = {}\n    rows = len(maze)\n    cols = len(maze[0]) if rows > 0 else 0\n\n    for row in range(rows):\n        for col in range(cols):\n            if maze[row][col] == 0:\n                # Current cell is walkable, create a node for it\n                node = (row, col)\n                neighbors = []\n\n                # Check all orthogonal directions\n                for d_row, d_col in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    n_row, n_col = row + d_row, col + d_col\n                    if 0 <= n_row < rows and 0 <= n_col < cols and maze[n_row][n_col] == 0:\n                        neighbors.append((n_row, n_col))\n\n                # Sort neighbors to ensure deterministic output\n                neighbors.sort()\n                graph[node] = neighbors\n\n    return graph\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing an empty dictionary `graph` to store the adjacency list.\n\n2. **Iterate through the maze**: We loop through each cell in the maze using two nested loops for rows and columns.\n\n3. **Check if the cell is walkable**: If the current cell is walkable (i.e., contains a 0), we proceed to find its neighbors.\n\n4. **Find orthogonal neighbors**: For each walkable cell, we check its four possible orthogonal neighbors (up, down, left, right). We ensure the neighbor is within bounds and is also walkable.\n\n5. **Sort neighbors**: We sort the list of neighbors to ensure the output is deterministic.\n\n6. **Add to graph**: We add the current cell and its sorted list of neighbors to the `graph` dictionary.\n\n7. **Return the graph**: Finally, we return the constructed graph. If there are no open cells, the graph will be empty."}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Compute centroids using K-Means clustering algorithm.\"\"\"\n    # Step 1: Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign samples to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)**2\n        closest_centroids = np.argmin(distances, axis=1)\n        \n        # Step 3: Update centroids\n        new_centroids = np.array([X[closest_centroids == i].mean(axis=0) if np.any(closest_centroids == i) else centroids[i] for i in range(k)])\n        \n        # Step 4: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 5: Sort centroids lexicographically and round to 4 decimal places\n    sorted_centroids = sorted(centroids.tolist())\n    rounded_centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted_centroids]\n    \n    return rounded_centroids\n```\n\n### Explanation:\n\n1. **Initialization**: The centroids are initialized using the first `k` samples from the dataset `X`. This ensures deterministic results.\n\n2. **Assignment Step**: Each sample is assigned to the nearest centroid based on the squared Euclidean distance. This is efficiently computed using NumPy's broadcasting and vectorized operations.\n\n3. **Update Step**: Each centroid is updated to the mean of the samples assigned to it. If a centroid has no samples assigned (i.e., a cluster is empty), it remains unchanged.\n\n4. **Convergence Check**: The algorithm stops early if the centroids move less than `1e-4` in a full iteration, ensuring efficient computation.\n\n5. **Sorting and Rounding**: After convergence, the centroids are sorted lexicographically and rounded to 4 decimal places, as required.\n\nThis implementation efficiently handles the K-Means clustering process while adhering to the specified constraints and requirements."}
{"task_id": 596, "completion_id": 0, "completion": "To solve the problem of converting a binary maze into an adjacency list representation of a graph, we need to iterate over each cell in the maze, check if it's a free block (`1`), and then find its adjacent free blocks. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\n\n    You are given a 2-D NumPy array in which 1 represents a free cell and 0\n    represents a wall.  Treat every free cell as a graph vertex.  Connect two\n    vertices with an (undirected) edge if and only if the corresponding cells\n    are adjacent in the maze via the four-neighbourhood (up, down, left, right).\n\n    The function must return a dictionary that maps each free cell\u2019s coordinate\n    `(row, col)` to a **sorted** list of its adjacent free neighbours.  If the\n    maze contains no free cells, return an empty dictionary.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    rows, cols = maze.shape\n    adjacency_list = {}\n\n    # Define the possible directions for adjacency (up, down, left, right)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for row in range(rows):\n        for col in range(cols):\n            if maze[row, col] == 1:\n                # Initialize the list of neighbors for the current free block\n                neighbors = []\n                for dr, dc in directions:\n                    new_row, new_col = row + dr, col + dc\n                    # Check if the new position is within bounds and is a free block\n                    if 0 <= new_row < rows and 0 <= new_col < cols and maze[new_row, new_col] == 1:\n                        neighbors.append((new_row, new_col))\n                # Sort the neighbors list lexicographically\n                neighbors.sort()\n                # Add the current free block and its neighbors to the adjacency list\n                adjacency_list[(row, col)] = neighbors\n\n    return adjacency_list\n\n# Example usage:\nmaze = np.array([\n    [1, 0, 1],\n    [1, 1, 0],\n    [0, 1, 1]\n])\n\nprint(convert_maze_to_graph(maze))\n```\n\n### Explanation:\n1. **Initialization**: We start by determining the dimensions of the maze and initializing an empty dictionary `adjacency_list` to store the adjacency list.\n\n2. **Direction Vectors**: We define the possible directions for adjacency (up, down, left, right) using tuples.\n\n3. **Iterate Over Maze**: We iterate over each cell in the maze. If the cell is a free block (`1`), we check its neighbors in the four possible directions.\n\n4. **Check Bounds and Free Block**: For each direction, we calculate the new position and check if it's within the bounds of the maze and if it's a free block.\n\n5. **Sort Neighbors**: We sort the list of neighbors lexicographically to ensure the output constraints are met.\n\n6. **Update Adjacency List**: We update the adjacency list with the current free block and its sorted list of neighbors.\n\nThis code will correctly convert the maze into an adjacency list representation of a graph, adhering to the specified constraints."}
{"task_id": 597, "completion_id": 0, "completion": "To solve the problem of finding the best univariate split for a regression tree using the Mean Squared Error (MSE), we need to iterate over each feature and each possible threshold value, compute the weighted MSE for the split, and keep track of the best split found. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean-squared error (population\n    variance) of the two resulting groups. Only thresholds that coincide\n    with an existing feature value are examined.\n\n    The function has to return a list `[best_feature_index, best_threshold,\n    best_mse]` where `best_mse` is rounded to 4 decimal places.\n\n    Parameters\n    ----------\n    X : list | np.ndarray\n        Feature matrix with shape (n_samples, n_features). Only numerical\n        values are allowed.\n    y : list | np.ndarray\n        Target vector with shape (n_samples,).\n\n    Returns\n    -------\n    list\n        [index_of_best_feature, value_of_best_threshold, minimal_weighted_mse]\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    X = np.array(X)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    best_feature_index = None\n    best_threshold = None\n    best_mse = float('inf')\n    \n    for j in range(n_features):\n        # Get unique values of the feature for possible thresholds\n        unique_values = np.unique(X[:, j])\n        \n        for t in unique_values:\n            # Split the data into left and right based on the threshold\n            left_indices = X[:, j] <= t\n            right_indices = X[:, j] > t\n            \n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue  # Skip invalid splits\n            \n            # Calculate the variance for each group\n            y_left = y[left_indices]\n            y_right = y[right_indices]\n            \n            var_left = np.var(y_left, ddof=0)\n            var_right = np.var(y_right, ddof=0)\n            \n            # Calculate the weighted MSE\n            mse = (len(y_left) / n_samples) * var_left + (len(y_right) / n_samples) * var_right\n            \n            # Update the best split if the current one is better\n            if mse < best_mse:\n                best_mse = mse\n                best_feature_index = j\n                best_threshold = t\n    \n    return [best_feature_index, best_threshold, round(best_mse, 4)]\n\n# Example usage:\n# X = [[2.5, 3.0], [1.0, 2.0], [3.5, 4.0], [2.0, 1.0]]\n# y = [1.0, 2.0, 3.0, 4.0]\n# print(best_split_mse(X, y))\n```\n\n### Explanation:\n1. **Input Conversion**: Convert `X` and `y` to NumPy arrays for easier manipulation.\n2. **Iterate Over Features and Thresholds**: For each feature, iterate over its unique values to consider them as potential thresholds.\n3. **Split Data**: For each threshold, split the data into two groups: `L` (left) and `R` (right).\n4. **Compute Variance**: Calculate the variance of the target values in each group.\n5. **Compute Weighted MSE**: Calculate the weighted MSE using the formula provided.\n6. **Track Best Split**: Keep track of the best split found by comparing the MSE values.\n7. **Return Result**: Return the best feature index, threshold, and the minimal MSE rounded to four decimal places.\n\nThis implementation efficiently finds the best split by examining all possible splits and selecting the one with the lowest weighted MSE."}
{"task_id": 598, "completion_id": 0, "completion": "To implement the feature-wise standard scaler, we can use NumPy for efficient computation of means and standard deviations, and handle corner cases as specified. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score). Constant columns (standard deviation 0) must be filled\n    with zeros. Any NaN or infinite values occurring during the computation\n    have to be replaced by 0. The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    data_array = np.array(data, dtype=float)\n    \n    # Calculate the mean and standard deviation for each feature (column)\n    means = np.mean(data_array, axis=0)\n    stds = np.std(data_array, axis=0, ddof=0)\n    \n    # Avoid division by zero by setting stds to 1 where stds are 0\n    stds[stds == 0] = 1\n    \n    # Standardize the data\n    standardized_data = (data_array - means) / stds\n    \n    # Replace any NaN or infinite values with 0\n    standardized_data = np.nan_to_num(standardized_data, nan=0.0, posinf=0.0, neginf=0.0)\n    \n    # Round the results to 4 decimal places\n    standardized_data = np.round(standardized_data, 4)\n    \n    # Convert the NumPy array back to a list of lists\n    return standardized_data.tolist()\n\n# Example usage:\ndata = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nstandardized_data = standardize(data)\nprint(standardized_data)\n```\n\n### Explanation:\n1. **Conversion to NumPy Array**: The input list is converted to a NumPy array for efficient computation.\n2. **Mean and Standard Deviation Calculation**: We compute the mean and standard deviation for each feature (column) using NumPy's `mean` and `std` functions.\n3. **Handling Constant Features**: If a feature has a standard deviation of 0, we set it to 1 to avoid division by zero, ensuring the standardized values are 0.\n4. **Standardization**: Each feature value is transformed using the formula \\((x - \\mu) / \\sigma\\).\n5. **Handling NaN and Infinite Values**: We use `np.nan_to_num` to replace any NaN or infinite values with 0.\n6. **Rounding**: The standardized values are rounded to 4 decimal places.\n7. **Conversion Back to List**: The NumPy array is converted back to a list of lists for the final output."}
