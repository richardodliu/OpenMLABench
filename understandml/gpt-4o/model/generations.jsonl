{"task_id": 0, "completion_id": 0, "completion": "To implement Ridge Regression using the closed-form solution, we need to follow these steps:\n\n1. **Add a Bias Term**: We need to augment the feature matrix \\(\\mathbf{X}\\) with a column of ones to account for the intercept term.\n\n2. **Compute the Regularized Matrix**: Calculate \\((\\mathbf{X}^\\top \\mathbf{X} + \\alpha \\mathbf{I})\\), where \\(\\mathbf{I}\\) is the identity matrix.\n\n3. **Check Invertibility**: Ensure that the matrix is invertible by checking if its determinant is non-zero. If it is zero, return -1.\n\n4. **Compute the Weight Vector**: Use the closed-form solution to compute the weight vector \\(\\hat{\\mathbf{w}}\\).\n\n5. **Round and Return**: Round the coefficients to 4 decimal places and return them as a list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"Perform Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    data (np.ndarray): The input data where the last column is the target variable.\n    alpha (float): The regularization strength (non-negative).\n    \n    Returns:\n    list[float]: The weight vector rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add bias term (column of ones)\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    # Compute X^T * X\n    XtX = X.T @ X\n    \n    # Add regularization term (alpha * I)\n    I = np.eye(X.shape[1])\n    XtX_alpha_I = XtX + alpha * I\n    \n    # Check if the matrix is invertible\n    if np.linalg.det(XtX_alpha_I) == 0:\n        return -1\n    \n    # Compute the weight vector using the closed-form solution\n    XtX_alpha_I_inv = np.linalg.inv(XtX_alpha_I)\n    XtY = X.T @ y\n    w = XtX_alpha_I_inv @ XtY\n    \n    # Round the weights to 4 decimal places and return as a list\n    return list(np.round(w, 4))\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# alpha = 0.1\n# print(ridge_regression(data, alpha))\n```\n\n### Explanation:\n- **Bias Term**: We add a column of ones to \\(\\mathbf{X}\\) to account for the intercept.\n- **Regularization**: The term \\(\\alpha \\mathbf{I}\\) is added to \\(\\mathbf{X}^\\top \\mathbf{X}\\) to prevent overfitting and handle multicollinearity.\n- **Invertibility Check**: We use the determinant to check if the matrix is invertible. If the determinant is zero, the matrix is singular, and we return -1.\n- **Weight Calculation**: The closed-form solution is used to compute the weights, which are then rounded and returned."}
{"task_id": 1, "completion_id": 0, "completion": "To implement the dual-form perceptron learning algorithm, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    gram_matrix = np.dot(X_train, X_train.T)\n    \n    updates = 0\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * gram_matrix[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n                break  # Restart the scan from i = 0\n        if not updated:\n            break  # No update in the entire pass, stop training\n    \n    # Compute the primal weight vector w\n    w = np.sum((alpha * y_train)[:, np.newaxis] * X_train, axis=0)\n    \n    # Round w and b to 4 decimal places\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n    \n    return w, b\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing the dual parameters `alpha` to zero and the bias `b` to zero. We also compute the Gram matrix, which is the inner product of the training samples.\n\n2. **Training Loop**: We iterate over the samples, computing the activation for each sample using the current `alpha` values and the Gram matrix. If a sample is misclassified (i.e., the margin is \u2264 0), we update `alpha` and `b` and restart the scan from the beginning.\n\n3. **Stopping Criteria**: The loop stops when either a full pass over the data results in no updates (indicating convergence) or when the maximum number of updates (`n_iter`) is reached.\n\n4. **Compute Primal Weights**: After training, we compute the primal weight vector `w` using the final `alpha` values.\n\n5. **Output**: The weight vector `w` and bias `b` are rounded to four decimal places before returning.\n\nThis implementation ensures that the perceptron learning algorithm is executed in its dual form, leveraging the Gram matrix for efficient computation."}
{"task_id": 2, "completion_id": 0, "completion": "To implement the standard GLM link functions, we need to define the link function, its inverse, and its derivative for each of the three common GLM instances: identity, log, and logit. Here's how you can implement this in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)\nmu2 = links[\"logit\"][\"inv_link\"](eta)\n\n# Print rounded results for demonstration\nprint(\"eta:\", np.round(eta, 4))  # \u2192 [-1.3863, 1.3863]\nprint(\"mu2:\", np.round(mu2, 4))  # \u2192 [0.2, 0.8]\n```\n\n### Explanation:\n- **Identity Link**: The identity link function is straightforward, as it returns the input value directly. Its inverse is also the same, and the derivative is a constant 1.\n- **Log Link**: The log link function applies the natural logarithm to the input. Its inverse is the exponential function, and the derivative is the reciprocal of the input.\n- **Logit Link**: The logit link function is used for probabilities, transforming them using the log-odds. Its inverse is the logistic function, and the derivative is calculated based on the formula for the derivative of the logit function.\n\nThese functions are designed to work with NumPy arrays, allowing for efficient element-wise operations."}
{"task_id": 3, "completion_id": 0, "completion": "To implement the `isolation_tree_path_length` function, we need to simulate the process of building an isolation tree and then traverse it to determine the depth of each sample. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)  # Set the random seed for reproducibility\n    \n    def build_tree(indices, depth):\n        if len(indices) < 3:\n            # If fewer than three samples reach the node, it becomes a leaf\n            for idx in indices:\n                depths[idx] = depth\n            return\n        \n        # Choose a feature index uniformly at random\n        f = np.random.choice(data.shape[1])\n        \n        # Determine the range [down, up] for the chosen feature\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        \n        # Draw a real number v uniformly from [down, up]\n        v = np.random.uniform(down, up)\n        \n        # Split the indices into left and right children\n        left_indices = [idx for idx in indices if data[idx, f] <= v]\n        right_indices = [idx for idx in indices if data[idx, f] > v]\n        \n        # Recursively build the tree for left and right children\n        build_tree(left_indices, depth + 1)\n        build_tree(right_indices, depth + 1)\n    \n    n_samples = data.shape[0]\n    depths = [0] * n_samples  # Initialize depths for each sample\n    \n    # Start building the tree from the root with all indices\n    build_tree(list(range(n_samples)), 0)\n    \n    return depths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```\n\n### Explanation:\n1. **Initialization**: We set the random seed to ensure reproducibility. We also initialize a list `depths` to store the depth of each sample.\n\n2. **Recursive Tree Building**:\n   - The `build_tree` function is a recursive function that constructs the isolation tree.\n   - If a node has fewer than three samples, it becomes a leaf, and we record the current depth for all samples reaching this node.\n   - Otherwise, we randomly select a feature and determine the range `[down, up]` for that feature among the samples reaching the node.\n   - We then split the samples into left and right children based on whether their feature value is less than or equal to `v` or greater than `v`.\n   - The function is called recursively for both children, increasing the depth by 1 each time.\n\n3. **Result**: After the tree is built, the `depths` list contains the depth of the leaf reached by each sample, which is returned as the result."}
{"task_id": 7, "completion_id": 0, "completion": "To solve the problem of frequent itemset mining, we can use a straightforward approach that involves generating all possible itemsets and counting their occurrences across the transactions. Here's how you can implement the function:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Initialize a counter to count the support of itemsets\n    itemset_support = Counter()\n    \n    # Iterate over each transaction\n    for transaction in transactions:\n        # Remove duplicates and sort the transaction\n        transaction = sorted(set(transaction))\n        \n        # Generate all possible itemsets for the current transaction\n        for size in range(1, len(transaction) + 1):\n            for itemset in combinations(transaction, size):\n                itemset_support[itemset] += 1\n    \n    # Filter itemsets based on the minimum support count\n    frequent_itemsets = {\n        itemset: count for itemset, count in itemset_support.items() if count >= min_support_count\n    }\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\n### Explanation:\n1. **Calculate Minimum Support Count**: We first calculate the minimum support count using the formula `math.ceil(minsup * N)`, where `N` is the number of transactions.\n\n2. **Count Itemset Support**: We use a `Counter` to keep track of how many transactions contain each itemset. For each transaction, we remove duplicates and sort the items, then generate all possible itemsets using `combinations`.\n\n3. **Filter Frequent Itemsets**: After counting the support for all itemsets, we filter out those that do not meet the minimum support count.\n\n4. **Return Result**: The function returns a dictionary of frequent itemsets with their support counts.\n\nThis approach is simple and works well for small datasets. For larger datasets, more efficient algorithms like Apriori or FP-Growth would be preferable."}
{"task_id": 11, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm from scratch, we'll follow the steps outlined in your task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Initialize centres as the first k samples\n    centres = data[:k].copy()\n    n_samples = data.shape[0]\n    labels = np.zeros(n_samples, dtype=int)\n\n    for iteration in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre\n        for i in range(n_samples):\n            distances = np.sum((data[i] - centres) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Step 3: Recompute centres\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n\n        for i in range(n_samples):\n            new_centres[labels[i]] += data[i]\n            counts[labels[i]] += 1\n\n        for j in range(k):\n            if counts[j] == 0:\n                # Re-initialize empty cluster with a random sample\n                new_centres[j] = data[np.random.randint(0, n_samples)]\n            else:\n                new_centres[j] /= counts[j]\n\n        # Step 4: Check for convergence\n        max_change = np.max(np.sqrt(np.sum((new_centres - centres) ** 2, axis=1)))\n        centres = new_centres\n\n        if max_change < epsilon:\n            break\n\n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n\n    return centres, labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# centres, labels = kmeans(data, k)\n# print(\"Centres:\", centres)\n# print(\"Labels:\", labels)\n```\n\n### Explanation:\n1. **Initialization**: The initial cluster centers are chosen as the first `k` samples from the dataset.\n2. **Assignment Step**: Each sample is assigned to the nearest cluster center based on the squared Euclidean distance.\n3. **Update Step**: The cluster centers are updated as the mean of all samples assigned to that cluster. If a cluster becomes empty, it is re-initialized with a random sample from the dataset.\n4. **Convergence Check**: The algorithm stops if the maximum change in any center is less than `epsilon` or if the maximum number of iterations (`max_iter`) is reached.\n5. **Output**: The final cluster centers are rounded to 4 decimal places, and the cluster labels for each sample are returned.\n\nThis implementation adheres to the constraints and requirements specified in your task description."}
{"task_id": 13, "completion_id": 0, "completion": "To implement the item-based k-NN collaborative filtering recommender, we need to follow the algorithm steps provided. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    S = np.zeros((n_items, n_items))\n\n    # Build item-item similarity matrix\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            # Collect users who rated both items\n            users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_rated_both) == 0:\n                continue\n\n            v1 = data[users_rated_both, i]\n            v2 = data[users_rated_both, j]\n\n            if criterion == 'cosine':\n                # Mean center if standard deviation is larger than 1e-3\n                if np.std(v1) > 1e-3:\n                    v1 = v1 - np.mean(v1)\n                if np.std(v2) > 1e-3:\n                    v2 = v2 - np.mean(v2)\n                # Compute cosine similarity\n                norm_v1 = np.linalg.norm(v1)\n                norm_v2 = np.linalg.norm(v2)\n                if norm_v1 > 0 and norm_v2 > 0:\n                    similarity = np.dot(v1, v2) / (norm_v1 * norm_v2)\n                else:\n                    similarity = 0\n            elif criterion == 'pearson':\n                # Compute Pearson correlation\n                similarity = np.corrcoef(v1, v2)[0, 1]\n\n            S[i, j] = similarity\n            S[j, i] = similarity\n\n    # Collect indices of items already rated by the active user\n    rated_items = np.where(data[user_ind] > 0)[0]\n    if len(rated_items) == n_items:\n        return []\n\n    # Compute predicted attractiveness scores for unrated items\n    scores = {}\n    for t in range(n_items):\n        if data[user_ind, t] > 0:\n            continue\n\n        numerator = 0\n        denominator = 0\n        for i in rated_items:\n            numerator += data[user_ind, i] * S[t, i]\n            denominator += abs(S[t, i])\n\n        score = numerator / denominator if denominator != 0 else 0\n        scores[t] = score\n\n    # Sort items by score in descending order, using item index for tie-breaking\n    recommended_items = sorted(scores, key=lambda x: (-scores[x], x))\n\n    # Return at most k items\n    return recommended_items[:k]\n```\n\n### Explanation:\n1. **Item-Item Similarity Matrix**: We iterate over pairs of items and compute the similarity based on the specified criterion (cosine or Pearson). For cosine similarity, we mean-center the vectors if their standard deviation is above a threshold. For Pearson correlation, we use `np.corrcoef`.\n\n2. **Rated Items**: We collect the indices of items that the active user has already rated.\n\n3. **Predicted Scores**: For each unrated item, we compute the predicted attractiveness score using the formula provided. If the denominator is zero, the score is set to zero.\n\n4. **Sorting and Returning**: We sort the items by their scores in descending order, using the item index for tie-breaking. We return at most `k` items.\n\nThis implementation follows the algorithm steps and constraints provided in the task description."}
{"task_id": 19, "completion_id": 0, "completion": "To solve the problem of finding the best split for a gradient-boosting tree node, we need to evaluate all possible splits across all features and their unique values. The goal is to maximize the gain, which is the reduction in the regularized loss function. Here's how you can implement the `best_split` function:\n\n```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    \n    # Calculate the loss of the current node\n    G = np.sum(g)\n    H = np.sum(h)\n    current_loss = -0.5 * (G ** 2) / (H + lam) + gamma\n    \n    best_gain = 0\n    best_split = None\n    \n    # Iterate over each feature\n    for feature_index in range(n_features):\n        # Get unique values of the feature\n        unique_values = np.unique(X[:, feature_index])\n        \n        # Try each unique value as a potential threshold\n        for threshold in unique_values:\n            # Split the data into left and right based on the threshold\n            left_indices = X[:, feature_index] < threshold\n            right_indices = ~left_indices\n            \n            # Ensure valid splits (at least two instances on each side)\n            if np.sum(left_indices) < 2 or np.sum(right_indices) < 2:\n                continue\n            \n            # Calculate gradients and Hessians for left and right splits\n            G_L = np.sum(g[left_indices])\n            H_L = np.sum(h[left_indices])\n            G_R = np.sum(g[right_indices])\n            H_R = np.sum(h[right_indices])\n            \n            # Calculate the loss for left and right children\n            loss_L = -0.5 * (G_L ** 2) / (H_L + lam) + gamma\n            loss_R = -0.5 * (G_R ** 2) / (H_R + lam) + gamma\n            \n            # Calculate the gain from the split\n            gain = current_loss - (loss_L + loss_R)\n            \n            # Update the best split if the gain is positive and greater than the current best gain\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, threshold)\n    \n    return best_split if best_gain > 0 else None\n```\n\n### Explanation:\n1. **Initial Setup**: We start by calculating the loss of the current node using the provided gradients and Hessians.\n\n2. **Iterate Over Features and Thresholds**: For each feature, we consider every unique value as a potential threshold for splitting the data.\n\n3. **Valid Splits**: We ensure that each split leaves at least two instances on each side.\n\n4. **Calculate Gains**: For each valid split, we compute the loss for the left and right children and calculate the gain.\n\n5. **Track Best Split**: We keep track of the split that provides the highest positive gain.\n\n6. **Return Result**: If a positive gain is found, we return the corresponding feature index and threshold; otherwise, we return `None`.\n\nThis approach ensures that we evaluate all possible splits and select the one that maximizes the reduction in the regularized loss function."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute the sigmoid function\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute the gradient of the sigmoid function\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    \n    # Check if the input was a scalar\n    if np.isscalar(x):\n        return float(sigmoid_x), float(gradient_x)\n    else:\n        # Convert the results to Python lists if the input was array-like\n        return sigmoid_x.tolist(), gradient_x.tolist()\n\n# Example usage:\n# scalar_input = 0.5\n# list_input = [0.5, -1.0, 2.0]\n# array_input = np.array([[0.5, -1.0], [2.0, 3.0]])\n# print(sigmoid_activation(scalar_input))\n# print(sigmoid_activation(list_input))\n# print(sigmoid_activation(array_input))\n```\n\nThis implementation handles different types of inputs, computes the sigmoid and its gradient, rounds the results to 4 decimal places, and returns them in the appropriate format based on the input type."}
{"task_id": 21, "completion_id": 0, "completion": "To implement AdaBoost with one-dimensional decision stumps, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Initialize weights\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    \n    # Sort training data\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n    \n    # Initialize variables\n    stumps = []\n    alphas = []\n    \n    def calculate_error(d, theta):\n        predictions = np.ones(n_samples)\n        if d == 0:\n            predictions[x_train_sorted <= theta] = 1\n            predictions[x_train_sorted > theta] = -1\n        else:\n            predictions[x_train_sorted > theta] = 1\n            predictions[x_train_sorted <= theta] = -1\n        return np.sum(weights * (predictions != y_train_sorted))\n    \n    def predict_stump(d, theta, x):\n        if d == 0:\n            return 1 if x <= theta else -1\n        else:\n            return 1 if x > theta else -1\n    \n    # Training loop\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        \n        # Enumerate possible stumps\n        for i in range(n_samples - 1):\n            theta = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for d in [0, 1]:\n                error = calculate_error(d, theta)\n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n        \n        # Calculate alpha\n        err = min_error\n        alpha = 0.5 * math.log((1 - err) / err)\n        \n        # Update weights\n        d, theta = best_stump\n        predictions = np.array([predict_stump(d, theta, x) for x in x_train_sorted])\n        weights *= np.exp(-alpha * y_train_sorted * predictions)\n        weights /= np.sum(weights)\n        \n        # Store the stump and its coefficient\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        \n        # Check training error\n        ensemble_predictions = np.sign(np.sum([alpha * np.array([predict_stump(d, theta, x) for x in x_train_sorted]) \n                                               for alpha, (d, theta) in zip(alphas, stumps)], axis=0))\n        training_error = np.mean(ensemble_predictions != y_train_sorted)\n        \n        if training_error <= epsilon:\n            break\n    \n    # Predict on test set\n    test_predictions = np.sign(np.sum([alpha * np.array([predict_stump(d, theta, x) for x in x_test]) \n                                       for alpha, (d, theta) in zip(alphas, stumps)], axis=0))\n    \n    return test_predictions.tolist()\n\n# Example usage:\n# x_train = [1.0, 2.0, 3.0, 4.0, 5.0]\n# y_train = [1, -1, 1, -1, 1]\n# x_test = [1.5, 3.5, 4.5]\n# epsilon = 0.0\n# print(adaboost_1d_predict(x_train, y_train, x_test, epsilon))\n```\n\nThis code implements the AdaBoost algorithm using one-dimensional decision stumps as weak learners. It trains the ensemble until the training error is less than or equal to the specified `epsilon` and then uses the trained ensemble to predict labels for the test set."}
{"task_id": 25, "completion_id": 0, "completion": "To implement the Gaussian Kernel SVM prediction function, we need to compute the decision function for each test sample using the given formula. We'll use NumPy for efficient computation, especially for handling matrix operations and broadcasting. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the squared Euclidean distance between each test sample and each training sample\n    # This results in an (m, n) matrix where each element (i, j) is ||x_train[j] - x_test[i]||^2\n    sq_dists = np.sum((X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]) ** 2, axis=2)\n    \n    # Compute the kernel matrix using the Gaussian kernel\n    kernel_matrix = np.exp(-gamma * sq_dists)\n    \n    # Compute the decision function for each test sample\n    decision_values = np.dot(kernel_matrix.T, alpha * y_train) + b\n    \n    # Determine the predicted class labels\n    predicted_labels = np.sign(decision_values).astype(int)\n    \n    # Convert the numpy array to a list and return\n    return predicted_labels.tolist()\n```\n\n### Explanation:\n\n1. **Squared Euclidean Distance Calculation**:\n   - We calculate the squared Euclidean distance between each test sample and each training sample using broadcasting. This results in an `(m, n)` matrix `sq_dists` where each element `(i, j)` is the squared distance between `X_test[i]` and `X_train[j]`.\n\n2. **Kernel Matrix Calculation**:\n   - We apply the Gaussian kernel function to the squared distances to get the kernel matrix. This is done using `np.exp(-gamma * sq_dists)`.\n\n3. **Decision Function Calculation**:\n   - We compute the decision function for each test sample by taking the dot product of the transposed kernel matrix with the product of `alpha` and `y_train`, and then adding the bias term `b`.\n\n4. **Prediction**:\n   - We use `np.sign` to determine the predicted class labels from the decision values. The result is converted to integers and returned as a list.\n\nThis implementation efficiently handles the prediction process using vectorized operations, making it suitable for large datasets."}
{"task_id": 28, "completion_id": 0, "completion": "To solve this task, we need to implement a function that performs a truncated Singular Value Decomposition (SVD) on a given matrix and reconstructs it using only the top `k` singular values and vectors. This approach is equivalent to using a linear autoencoder with `k` latent dimensions. Let's break down the steps required to achieve this:\n\n1. **Input Validation**: Check if `k` is within the valid range. If not, return `-1`.\n\n2. **Convert Input to NumPy Array**: Since the input is a list of lists, we need to convert it to a NumPy array for easier manipulation and computation.\n\n3. **Perform SVD**: Use NumPy's `np.linalg.svd` function to perform the singular value decomposition of the matrix `X`. This will decompose `X` into three matrices: `U`, `S`, and `Vt`.\n\n4. **Truncate SVD**: Keep only the top `k` singular values and corresponding vectors. This involves slicing the matrices `U`, `S`, and `Vt`.\n\n5. **Reconstruct the Matrix**: Use the truncated matrices to reconstruct the matrix `X_hat`.\n\n6. **Compute Mean Squared Error (MSE)**: Calculate the mean squared error between the original matrix `X` and the reconstructed matrix `X_hat`.\n\n7. **Round the Results**: Round the elements of `X_hat` and the MSE to four decimal places.\n\n8. **Return the Results**: Convert `X_hat` back to a list of lists and return it along with the MSE.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert X to a NumPy array\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Validate k\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform SVD\n    U, S, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate SVD to rank k\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = U_k @ S_k @ Vt_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and mse\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return X_hat, mse\n```\n\nThis function will correctly compute the rank-`k` reconstruction of the input matrix using truncated SVD and return the reconstructed matrix along with the mean squared error, both rounded to four decimal places."}
{"task_id": 29, "completion_id": 0, "completion": "To implement the one-dimensional gradient boosting regressor using decision stumps, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                          y_train: list[float] | np.ndarray,\n                          x_query: float,\n                          epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by the feature values\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    # Initialize residuals as the target values\n    residuals = y_train.copy()\n    \n    # Calculate candidate split points (mid-points between consecutive x_train values)\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n    \n    # Initialize the ensemble prediction\n    ensemble_prediction = np.zeros_like(y_train)\n    \n    # Iteratively add stumps until RSS is below epsilon\n    while np.sum(residuals**2) > epsilon:\n        best_rss = np.inf\n        best_stump = None\n        \n        # Evaluate each candidate split point\n        for s in split_points:\n            # Calculate means for the two regions\n            left_mask = x_train <= s\n            right_mask = x_train > s\n            \n            c1 = np.mean(residuals[left_mask]) if np.any(left_mask) else 0\n            c2 = np.mean(residuals[right_mask]) if np.any(right_mask) else 0\n            \n            # Calculate RSS for this stump\n            stump_prediction = np.where(left_mask, c1, c2)\n            rss = np.sum((residuals - stump_prediction)**2)\n            \n            # Update best stump if this one is better\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (s, c1, c2)\n        \n        # Add the best stump to the ensemble\n        s, c1, c2 = best_stump\n        ensemble_prediction += np.where(x_train <= s, c1, c2)\n        \n        # Update residuals\n        residuals = y_train - ensemble_prediction\n    \n    # Predict for x_query using the learned stumps\n    prediction = 0.0\n    for s, c1, c2 in [best_stump]:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    \n    return round(prediction, 4)\n\n# Example usage:\nx_train = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_train = [1.5, 2.5, 3.5, 4.5, 5.5]\nx_query = 3.5\nprint(predict_boosting_tree(x_train, y_train, x_query))  # Output should be rounded to 4 decimal places\n```\n\nThis code implements the gradient boosting regressor using decision stumps for one-dimensional data. It iteratively adds stumps to the ensemble until the residual sum of squares is below the specified tolerance, and then it predicts the target value for the given query point."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified sparsity.\n    \n    Parameters:\n    - shape: A tuple specifying the shape of the tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of an entry being 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape and dtype float, filled with 0.0s and 1.0s.\n    - Returns -1 if the sparsity is outside the range [0, 1].\n    \"\"\"\n    # Check if sparsity is within the valid range\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    # Set the random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate random values and apply the sparsity threshold\n    random_values = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    binary_tensor = (random_values >= threshold).astype(float)\n    \n    return binary_tensor\n\n# Example usage:\n# shape = (2, 3), sparsity = 0.3, seed = 42\n# Output should be:\n# [[0.0, 1.0, 1.0],\n#  [0.0, 0.0, 0.0]]\ntensor = random_binary_tensor((2, 3), 0.3, 42)\nprint(tensor)\n```\n\nThis function generates a random binary tensor based on the specified shape and sparsity. It uses the `np.random.rand` function to create random values and applies a threshold to determine whether each entry should be 0.0 or 1.0. The function also handles the optional seed for reproducibility and checks the validity of the sparsity value."}
{"task_id": 39, "completion_id": 0, "completion": "To implement the median split for KD-Tree construction using NumPy, we can utilize the `numpy.argpartition` function to efficiently find the median without sorting the entire column. Here's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n\n    # Use argpartition to find the index of the median value\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # Get the index of the median value in the original array\n    pivot_index = partitioned_indices[median_index]\n\n    # Determine the indices of elements strictly less than and greater than the median\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n\n    # Sort the indices to make the output deterministic\n    left_indices_sorted = sorted(left_indices)\n    right_indices_sorted = sorted(right_indices)\n\n    return pivot_index, left_indices_sorted, right_indices_sorted\n\n# Example usage:\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\nd = 0\npivot, left, right = get_split(data, d)\nprint(f\"Pivot: {pivot}, Left: {left}, Right: {right}\")\n```\n\n### Explanation:\n1. **Finding the Median Index**: We calculate the median index as `n_samples // 2`. This index represents the position of the median in a zero-indexed array.\n\n2. **Using `argpartition`**: The `numpy.argpartition` function rearranges the indices such that the element at the median index is in its sorted position, and all elements before it are less than or equal to it, while all elements after it are greater than or equal to it.\n\n3. **Extracting Indices**: We extract the indices of elements strictly less than the median (`left_indices`) and strictly greater than the median (`right_indices`).\n\n4. **Sorting Indices**: We sort the `left_indices` and `right_indices` to ensure the output is deterministic.\n\nThis approach ensures that the median split is performed in O(n) time complexity, as required."}
{"task_id": 40, "completion_id": 0, "completion": "To implement the `to_frames` function, we need to use `numpy.lib.stride_tricks.as_strided` to create a view on the original array with the desired shape and strides. Let's go through the implementation step-by-step:\n\n1. **Assertions**: We need to ensure the input conditions are met using assertions.\n2. **Calculate the number of frames**: Use the formula provided to determine how many frames can be created.\n3. **Calculate strides**: Use the strides of the original array to determine how to step through the array.\n4. **Create the view**: Use `as_strided` to create the view with the calculated shape and strides.\n5. **Set writability**: Adjust the writability of the view based on the `writeable` parameter.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions to check pre-conditions\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Signal length must be at least as long as the frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Calculate the strides\n    itemsize = x.strides[0]\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride * itemsize, itemsize)\n\n    # Create the view using as_strided\n    frames = as_strided(x, shape=new_shape, strides=new_strides)\n\n    # Set writability\n    frames.setflags(write=writeable)\n\n    return frames\n```\n\n### Explanation:\n- **Assertions**: Ensure the input array is 1-D, the stride is positive, and the signal length is sufficient to form at least one frame.\n- **Strides Calculation**: The stride for the first dimension is `stride * itemsize`, and for the second dimension, it's `itemsize`, which allows us to step through the array correctly.\n- **`as_strided`**: This function creates a view with the specified shape and strides, allowing us to efficiently create overlapping frames without copying data.\n- **Writability**: The `setflags` method is used to set the writability of the view based on the `writeable` parameter."}
{"task_id": 48, "completion_id": 0, "completion": "To solve the problem of validating whether a given matrix is row-stochastic, we need to ensure that the matrix meets the following criteria:\n\n1. The matrix is two-dimensional.\n2. Every element in the matrix is a valid probability, i.e., it lies within the interval [0, 1].\n3. Each row of the matrix sums to 1, with a tolerance for numerical precision errors.\n\nHere's how you can implement the function using Python and NumPy:\n\n```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a NumPy array if it is not already\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-8):\n        return False\n    \n    return True\n```\n\n### Explanation:\n\n1. **Conversion to NumPy Array**: We first convert the input to a NumPy array to leverage NumPy's efficient operations for checking conditions and summing rows.\n\n2. **Dimensionality Check**: We ensure the matrix is two-dimensional using `X.ndim != 2`.\n\n3. **Element Range Check**: We use `np.all((X >= 0) & (X <= 1))` to verify that all elements are within the range [0, 1].\n\n4. **Row Sum Check**: We calculate the sum of each row using `np.sum(X, axis=1)` and then use `np.allclose` to check if these sums are approximately 1, allowing for a small numerical tolerance (`atol=1e-8`).\n\nThis function will return `True` if the matrix is row-stochastic and `False` otherwise, without raising any exceptions."}
{"task_id": 55, "completion_id": 0, "completion": "To implement the RMSprop optimization algorithm for linear regression, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to 4 decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Shuffle the data indices for mini-batch processing\n        indices = np.arange(n)\n        np.random.shuffle(indices)\n        \n        for start in range(0, n, batch_size):\n            end = start + batch_size\n            if end > n:\n                end = n\n            batch_indices = indices[start:end]\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n            \n            # Compute the gradient\n            error = X_batch @ w - y_batch\n            g = (1 / len(y_batch)) * (X_batch.T @ error)\n            \n            # Update the running average of squared gradients\n            s = rho * s + (1 - rho) * g**2\n            \n            # Update the weights\n            w -= eta * g / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(g) < epsilon:\n            break\n    \n    return list(np.round(w, 4))\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# weights = rms_prop(X, y)\n# print(weights)\n```\n\n### Explanation:\n\n1. **Initialization**: \n   - We initialize the weight vector `w` and the running average of squared gradients `s` to zero vectors of the same dimension as the number of features `d`.\n\n2. **Mini-batch Processing**:\n   - We shuffle the indices of the data to ensure randomness in mini-batch selection.\n   - We iterate over the data in mini-batches. If the dataset is smaller than the batch size, we use the full dataset.\n\n3. **Gradient Calculation**:\n   - For each mini-batch, we compute the error and the gradient `g` of the loss function.\n\n4. **RMSprop Update**:\n   - We update the running average of squared gradients `s` using the decay rate `rho`.\n   - We update the weights `w` using the RMSprop update rule.\n\n5. **Early Stopping**:\n   - We check the \u2113\u2082-norm of the gradient `g` and stop if it falls below the threshold `epsilon`.\n\n6. **Return**:\n   - The final weight vector is rounded to four decimal places and returned as a list.\n\nThis implementation should efficiently train a linear regression model using the RMSprop optimization algorithm."}
{"task_id": 56, "completion_id": 0, "completion": "To implement the SoftPlus activation function and its gradient, we need to handle both scalar and array inputs, and ensure numerical stability for large values. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    # Convert input to a NumPy array for easier manipulation\n    x_array = np.array(x, dtype=np.float64)\n    \n    if deriv:\n        # Calculate the sigmoid function\n        result = 1 / (1 + np.exp(-x_array))\n    else:\n        # Calculate the SoftPlus function using a numerically stable approach\n        # Use np.log1p for stability with large values\n        result = np.where(x_array > 0, \n                          np.log1p(np.exp(-x_array)) + x_array, \n                          np.log1p(np.exp(x_array)))\n    \n    # Round the result to 4 decimal places\n    rounded_result = np.round(result, 4)\n    \n    # If the input was a scalar, return a scalar float\n    if np.isscalar(x):\n        return float(rounded_result)\n    \n    # Otherwise, return a Python list\n    return rounded_result.tolist()\n\n# Example usage:\n# print(softplus(1))  # Should return the SoftPlus of 1\n# print(softplus([1, 2, 3], deriv=True))  # Should return the sigmoid of [1, 2, 3]\n```\n\n### Explanation:\n1. **Numerical Stability**: \n   - For positive values of `x`, `np.log1p(np.exp(-x)) + x` is used to avoid overflow when `x` is large.\n   - For non-positive values, `np.log1p(np.exp(x))` is used directly, which is stable for large negative `x`.\n\n2. **Sigmoid Calculation**: \n   - The derivative of SoftPlus is the sigmoid function, which is calculated as `1 / (1 + np.exp(-x))`.\n\n3. **Handling Different Input Types**: \n   - The input is converted to a NumPy array to handle both scalars and arrays uniformly.\n   - The output is rounded to 4 decimal places and returned as a list or a scalar float, depending on the input type.\n\nThis implementation ensures that the function is robust and handles edge cases effectively, such as very large or very small input values."}
{"task_id": 58, "completion_id": 0, "completion": "To implement the unsmoothed Maximum-Likelihood Estimation (MLE) N-gram language model, we need to follow these steps:\n\n1. **Count N-grams and (N-1)-grams**: We will use the `Counter` from the `collections` module to count occurrences of N-grams and (N-1)-grams in the corpus.\n\n2. **Calculate Probabilities**: For each N-gram in the sequence, calculate its probability using the counts from the corpus.\n\n3. **Compute Log-Probability**: Sum the log-probabilities of each N-gram in the sequence.\n\n4. **Handle Zero Counts**: If any required count is zero, return `float('-inf')`.\n\nHere's the implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Count N-grams in the corpus\n    ngram_counts = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus) - N + 1))\n    \n    # Count (N-1)-grams in the corpus\n    if N > 1:\n        n_minus_1_gram_counts = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus) - N + 2))\n    else:\n        n_minus_1_gram_counts = Counter(corpus)  # Unigram case\n    \n    # Calculate log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        \n        # Get counts for the current N-gram and its prefix\n        ngram_count = ngram_counts[ngram]\n        if N > 1:\n            prefix_count = n_minus_1_gram_counts[ngram[:-1]]\n        else:\n            prefix_count = len(corpus)  # Total number of unigrams\n        \n        # If any count is zero, return negative infinity\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        \n        # Calculate probability and add log-probability\n        prob = ngram_count / prefix_count\n        log_prob += np.log(prob)\n    \n    # Return the log-probability rounded to 4 decimal places\n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\nsequence = [\"the\", \"quick\", \"brown\", \"fox\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Example output\n```\n\n### Explanation:\n- **N-gram Counting**: We use a sliding window approach to count N-grams and (N-1)-grams in the corpus.\n- **Probability Calculation**: For each N-gram in the sequence, we calculate its probability using the counts from the corpus.\n- **Log-Probability**: We sum the log-probabilities of each N-gram in the sequence.\n- **Zero Counts**: If any required count is zero, we return `float('-inf')` immediately."}
{"task_id": 62, "completion_id": 0, "completion": "To implement the univariate Lasso regression with polynomial features using coordinate descent, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Number of samples\n    m = len(X)\n    \n    # Build the design matrix with polynomial features\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    # Coordinate descent\n    for iteration in range(n_iterations):\n        w_old = w.copy()\n        \n        # Update bias (w0)\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        \n        # Update other coefficients (w1 to wd)\n        for j in range(1, degree + 1):\n            # Compute rho\n            rho = X_poly[:, j].T @ (y - (X_poly @ w) + w[j] * X_poly[:, j])\n            \n            # Update w[j] using soft thresholding\n            w[j] = soft_threshold(rho, reg_factor) / (X_poly[:, j].T @ X_poly[:, j])\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_old)) < tol:\n            break\n    \n    # Round the coefficients to 4 decimal places\n    return list(np.round(w, 4))\n\ndef soft_threshold(rho: float, lambda_: float) -> float:\n    \"\"\"Apply the soft thresholding operator.\"\"\"\n    return np.sign(rho) * max(abs(rho) - lambda_, 0)\n\n```\n\n### Explanation:\n\n1. **Design Matrix Construction**: We use `np.vander` to create a Vandermonde matrix, which is a matrix of polynomial features. The `increasing=True` parameter ensures that the columns are ordered from x\u2070 to x\u1d48.\n\n2. **Coordinate Descent**: We iterate over the weights, updating each one using the specified formulas. The bias term `w\u2080` is updated using the mean of the residuals, while other weights are updated using the soft thresholding technique.\n\n3. **Soft Thresholding**: This function applies the soft thresholding operator, which is crucial for Lasso regression to perform feature selection and regularization.\n\n4. **Convergence Check**: The algorithm stops early if the maximum change in any weight is less than the specified tolerance `tol`.\n\n5. **Return**: The learned coefficients are rounded to four decimal places and returned as a list.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n    \n    Returns:\n    list[float]: A list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n    \n    # Initialize beta vectors\n    beta = np.zeros((T, N))\n    \n    # Base case: \u03b2_{T-1}(i) = 1 for all states i\n    beta[T-1] = np.ones(N)\n    \n    # Recursive case: calculate \u03b2_t(i) for t = T-2, T-3, ..., 0\n    for time in range(T-2, t-1, -1):\n        for i in range(N):\n            beta[time][i] = sum(A[i][j] * B[j][obs[time+1]] * beta[time+1][j] for j in range(N))\n    \n    # Round the results to 4 decimal places\n    beta_t_rounded = [round(prob, 4) for prob in beta[t]]\n    \n    return beta_t_rounded\n```\n\n### Explanation:\n\n1. **Initialization**: \n   - We initialize a `beta` matrix with zeros, where `beta[t][i]` will store the backward probability for state `i` at time `t`.\n   - The base case is set for the last time step `T-1`, where `beta[T-1][i] = 1` for all states `i`.\n\n2. **Recursive Calculation**:\n   - We iterate backward from `T-2` to `t`, calculating the backward probabilities using the formula provided.\n   - For each state `i` at time `time`, we compute `beta[time][i]` using the sum of products of transition probabilities, emission probabilities, and the backward probabilities from the next time step.\n\n3. **Rounding**:\n   - The final backward probabilities for the given time index `t` are rounded to 4 decimal places before returning.\n\nThis function efficiently computes the backward probabilities for a given time index in a Hidden Markov Model using dynamic programming."}
{"task_id": 65, "completion_id": 0, "completion": "To implement the backward algorithm for a Hidden Markov Model (HMM), we need to follow the recursive procedure described in the task. Let's break down the steps and write the function `backward_prob`:\n\n1. **Initialization**: Start by checking if any of the input lists are empty. If so, return `0.0` as no valid probability can be computed.\n\n2. **Backward Variable Initialization**: Initialize the backward variables for the last time step `T-1` as `1` for all states.\n\n3. **Recursive Calculation**: Compute the backward variables for each time step `t` from `T-2` down to `0` using the recursive formula provided.\n\n4. **Sequence Probability Calculation**: Finally, compute the probability of the observation sequence given the model using the initial state probabilities, emission probabilities for the first observation, and the backward variables at time `0`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty input lists\n    if not A or not B or not pi or not obs:\n        return 0.0\n    \n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n    \n    # Initialize backward variables\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1  # Base case for backward variables\n    \n    # Recursive calculation of backward variables\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = sum(A[i][j] * B[j][obs[t+1]] * beta[t+1, j] for j in range(N))\n    \n    # Calculate the probability of the observation sequence\n    prob = sum(pi[i] * B[i][obs[0]] * beta[0, i] for i in range(N))\n    \n    return round(prob, 6)\n\n# Example usage:\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.5, 0.5], [0.1, 0.9]]\n# pi = [0.6, 0.4]\n# obs = [0, 1]\n# print(backward_prob(A, B, pi, obs))  # Output should be the probability rounded to 6 decimals\n```\n\nThis function uses numpy arrays for efficient computation and follows the recursive backward algorithm to compute the probability of the observation sequence given the HMM parameters. The result is rounded to six decimal places as required."}
{"task_id": 69, "completion_id": 0, "completion": "To implement the forward algorithm for Hidden Markov Models, we need to follow these steps:\n\n1. **Validate Input Dimensions**: Ensure that the dimensions of the initial state probability vector, state-transition matrix, and emission matrix are consistent. Also, check that the observation indices are within the valid range.\n\n2. **Initialize Forward Probabilities**: Compute the initial forward probabilities using the initial state probabilities and the emission probabilities for the first observation.\n\n3. **Iterate Over Observations**: For each subsequent observation, update the forward probabilities using the state-transition matrix and the emission matrix.\n\n4. **Compute Total Probability**: Sum the forward probabilities for the final observation to get the likelihood of the observation sequence.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Validate input dimensions\n    n = len(S)\n    if len(A) != n or any(len(row) != n for row in A):\n        return -1\n    if len(B) != n or any(len(row) != len(B[0]) for row in B):\n        return -1\n    m = len(B[0])\n    \n    # Validate observations\n    if not observations or any(obs < 0 or obs >= m for obs in observations):\n        return -1\n    \n    # Initialize forward probabilities\n    alpha = np.zeros((len(observations), n))\n    for i in range(n):\n        alpha[0][i] = S[i] * B[i][observations[0]]\n    \n    # Iterate over observations\n    for t in range(1, len(observations)):\n        for j in range(n):\n            alpha[t][j] = sum(alpha[t-1][i] * A[i][j] for i in range(n)) * B[j][observations[t]]\n    \n    # Compute total probability\n    likelihood = sum(alpha[-1][i] for i in range(n))\n    \n    return round(likelihood, 4)\n\n# Example usage:\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.1, 0.9]]\nobservations = [0, 1, 0]\nprint(forward_algorithm(S, A, B, observations))  # Output should be the likelihood rounded to 4 decimals\n```\n\nThis code performs the forward algorithm, checking for input validity and calculating the likelihood of the observation sequence. It returns the likelihood rounded to four decimal places or `-1` if the input is invalid."}
{"task_id": 70, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow the steps outlined in the task description. Here's a detailed implementation:\n\n```python\nfrom collections import Counter, defaultdict\nfrom typing import List, Dict, Optional\n\nclass FPTreeNode:\n    def __init__(self, item: Optional[str], count: int, parent: Optional['FPTreeNode']):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\n    def increment(self, count: int):\n        self.count += count\n\ndef build_fp_tree(transactions: List[List[str]], min_support: int) -> (FPTreeNode, Dict[str, FPTreeNode]):\n    # First pass: count item frequencies\n    item_counter = Counter()\n    for transaction in transactions:\n        item_counter.update(transaction)\n\n    # Remove infrequent items\n    frequent_items = {item for item, count in item_counter.items() if count >= min_support}\n    if not frequent_items:\n        return None, {}\n\n    # Second pass: build the FP-tree\n    root = FPTreeNode(None, 0, None)\n    header_table = defaultdict(lambda: None)\n\n    for transaction in transactions:\n        # Filter and sort transaction by frequency and lexicographically\n        sorted_items = sorted(\n            [item for item in transaction if item in frequent_items],\n            key=lambda item: (-item_counter[item], item)\n        )\n        # Insert transaction into the FP-tree\n        current_node = root\n        for item in sorted_items:\n            if item in current_node.children:\n                current_node.children[item].increment(1)\n            else:\n                new_node = FPTreeNode(item, 1, current_node)\n                current_node.children[item] = new_node\n                # Update header table\n                if header_table[item] is None:\n                    header_table[item] = new_node\n                else:\n                    # Link the new node to the existing node in the header table\n                    current_link = header_table[item]\n                    while current_link.link is not None:\n                        current_link = current_link.link\n                    current_link.link = new_node\n            current_node = current_node.children[item]\n\n    return root, header_table\n\ndef mine_fp_tree(header_table: Dict[str, FPTreeNode], min_support: int, prefix: List[str], frequent_itemsets: List[List[str]]):\n    # Sort items in header table by frequency and lexicographically\n    sorted_items = sorted(header_table.keys(), key=lambda item: item)\n\n    for item in sorted_items:\n        new_prefix = prefix + [item]\n        frequent_itemsets.append(new_prefix)\n\n        # Build conditional pattern base\n        conditional_pattern_base = []\n        node = header_table[item]\n        while node is not None:\n            path = []\n            parent = node.parent\n            while parent is not None and parent.item is not None:\n                path.append(parent.item)\n                parent = parent.parent\n            path.reverse()\n            for _ in range(node.count):\n                conditional_pattern_base.append(path)\n            node = node.link\n\n        # Build conditional FP-tree\n        conditional_tree, conditional_header = build_fp_tree(conditional_pattern_base, min_support)\n        if conditional_header:\n            mine_fp_tree(conditional_header, min_support, new_prefix, frequent_itemsets)\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n\n    # Build the FP-tree\n    fp_tree, header_table = build_fp_tree(transactions, min_support)\n    if not header_table:\n        return []\n\n    # Mine the FP-tree\n    frequent_itemsets = []\n    mine_fp_tree(header_table, min_support, [], frequent_itemsets)\n\n    # Sort the frequent itemsets\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n```\n\n### Explanation:\n\n1. **FP-Tree Construction**:\n   - We first count the frequency of each item across all transactions.\n   - We filter out infrequent items based on the `min_support`.\n   - We then build the FP-tree by inserting each transaction, sorted by item frequency and lexicographically.\n\n2. **Mining the FP-Tree**:\n   - We recursively mine the FP-tree by creating conditional pattern bases and conditional FP-trees for each item in the header table.\n   - We collect all frequent itemsets by appending the current prefix with the item being processed.\n\n3. **Sorting**:\n   - Finally, we sort the frequent itemsets by length and lexicographically to ensure deterministic output.\n\nThis implementation should efficiently find all frequent itemsets using the FP-Growth algorithm."}
{"task_id": 75, "completion_id": 0, "completion": "To implement the k-Nearest Neighbour (k-NN) classifier, we need to follow the rules and constraints provided. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if k <= 0 or k > len(X_train):\n        return -1\n    \n    def euclidean_distance_squared(x1, x2):\n        \"\"\"Compute the squared Euclidean distance between two points.\"\"\"\n        return sum((a - b) ** 2 for a, b in zip(x1, x2))\n    \n    predictions = []\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [(euclidean_distance_squared(test_point, train_point), y_train[i]) \n                     for i, train_point in enumerate(X_train)]\n        \n        # Sort distances and get the k nearest neighbors\n        distances.sort(key=lambda x: x[0])\n        k_nearest_neighbors = distances[:k]\n        \n        # Count the votes for each class\n        class_votes = {}\n        for _, class_label in k_nearest_neighbors:\n            if class_label in class_votes:\n                class_votes[class_label] += 1\n            else:\n                class_votes[class_label] = 1\n        \n        # Determine the class with the highest vote\n        max_votes = max(class_votes.values())\n        candidates = [class_label for class_label, votes in class_votes.items() if votes == max_votes]\n        \n        # Choose the smallest class label among the tied ones\n        predicted_class = min(candidates)\n        predictions.append(predicted_class)\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if `k` is a valid integer within the range `[1, len(X_train)]`. If not, it returns `-1`.\n\n2. **Distance Calculation**: For each test sample, the squared Euclidean distance is calculated between the test sample and each training sample. The square root is omitted as it is monotonic.\n\n3. **Sorting and Selection**: The distances are sorted, and the `k` nearest neighbors are selected.\n\n4. **Voting**: A dictionary is used to count votes for each class label among the `k` nearest neighbors.\n\n5. **Tie-breaking**: If there is a tie in the number of votes, the smallest class label is chosen.\n\n6. **Return**: The function returns a list of predicted class labels for each test sample."}
{"task_id": 76, "completion_id": 0, "completion": "To implement the categorical cross-entropy loss function, we need to iterate over each sample and each class, compute the log of the predicted probabilities, multiply by the true labels, and sum these values. We'll add a small epsilon value to the predicted probabilities to ensure numerical stability. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Machine epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Compute the categorical cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n# y_pred = [[0.7, 0.2, 0.1], [0.1, 0.8, 0.1], [0.2, 0.2, 0.6]]\n# print(cross_entropy_loss(y, y_pred))  # Output: 0.3640\n```\n\n### Explanation:\n1. **Input Conversion**: We convert the input lists to NumPy arrays for easier manipulation and computation.\n2. **Machine Epsilon**: We use `np.finfo(float).eps` to get the smallest representable positive number for a float, which helps prevent `log(0)` errors.\n3. **Loss Calculation**: We compute the loss using the formula provided, iterating over each sample and class, and summing the results.\n4. **Rounding**: Finally, we round the computed loss to four decimal places before returning it."}
{"task_id": 77, "completion_id": 0, "completion": "To implement the forward propagation for an L-layer neural network, we need to iterate through each layer, perform the linear and non-linear steps, and store the necessary information for each layer in a cache. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # Number of layers\n\n    # Iterate through layers 1 to L-1\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        \n        # Linear step\n        Z = np.dot(W, A_prev) + b\n        \n        # Non-linear step (ReLU)\n        A = relu(Z)\n        \n        # Cache the values for backward pass\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n\n    # Output layer L\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    \n    # Linear step\n    ZL = np.dot(WL, A) + bL\n    \n    # Non-linear step (Sigmoid)\n    AL = sigmoid(ZL)\n    \n    # Cache the values for backward pass\n    cache = (A, WL, bL, ZL)\n    caches.append(cache)\n\n    # Round AL to 4 decimals and convert to a plain Python list\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n\n# Example usage:\n# X = np.random.randn(4, 2)  # Example input\n# parameters = {\n#     'W1': np.random.randn(3, 4),\n#     'b1': np.random.randn(3, 1),\n#     'W2': np.random.randn(1, 3),\n#     'b2': np.random.randn(1, 1)\n# }\n# AL, caches = L_model_forward(X, parameters)\n# print(AL)\n```\n\n### Explanation:\n1. **ReLU and Sigmoid Functions**: We define helper functions for the ReLU and Sigmoid activations.\n2. **Forward Propagation**: We iterate through each layer, performing the linear step followed by the appropriate activation function (ReLU for hidden layers and Sigmoid for the output layer).\n3. **Caching**: We store the necessary values for each layer in a cache, which includes the previous activation, weights, biases, and the linear output `Z`.\n4. **Output**: The final activation `AL` is rounded to 4 decimal places and converted to a plain Python list before returning, along with the caches."}
{"task_id": 81, "completion_id": 0, "completion": "To compute the binary cross-entropy cost, we need to follow the formula provided and ensure that the predicted probabilities are clipped to avoid undefined logarithmic operations. Here's the implementation of the `compute_cost` function:\n\n```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Number of samples\n    m = Y.shape[0]\n    \n    # Clip A2 to avoid log(0)\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n\n# Example usage:\n# A2 = np.array([0.9, 0.2, 0.8])\n# Y = np.array([1, 0, 1])\n# print(compute_cost(A2, Y))  # Output should be the cost rounded to 6 decimal places\n```\n\n### Explanation:\n1. **Clipping**: We clip the values of `A2` to the range `[\u03b5, 1-\u03b5]` to prevent taking the logarithm of 0, which is undefined. This is done using `np.clip`.\n\n2. **Cost Calculation**: We calculate the binary cross-entropy cost using the formula provided. The cost is averaged over all samples by dividing by `m`.\n\n3. **Rounding**: The final cost is rounded to six decimal places using Python's `round` function.\n\nThis function will correctly compute the binary cross-entropy cost for the given predicted probabilities and ground-truth labels."}
{"task_id": 82, "completion_id": 0, "completion": "To implement the \u03b5-soft exploration policy, we need to calculate the probabilities for each action based on the given Q-values and the exploration parameter \u03b5. Here's how you can implement the `epsilon_soft` function:\n\n```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state. epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    # Find the index of the greedy action (first occurrence in case of ties)\n    greedy_index = np.argmax(Q)\n    \n    # Calculate the base probability for non-greedy actions\n    base_prob = epsilon / n\n    \n    # Calculate the probability for the greedy action\n    greedy_prob = 1 - epsilon + base_prob\n    \n    # Initialize the probabilities list\n    probabilities = [base_prob] * n\n    probabilities[greedy_index] = greedy_prob\n    \n    # Round probabilities to 4 decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    \n    # Ensure the sum of probabilities is 1 (within tolerance)\n    assert abs(sum(probabilities) - 1) < 1e-12, \"Probabilities do not sum to 1\"\n    \n    return probabilities\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\n### Explanation:\n1. **Determine the Number of Actions (`n`)**: This is simply the length of the Q-values list.\n\n2. **Find the Greedy Action (`greedy_index`)**: Use `np.argmax` to find the index of the maximum Q-value. In case of ties, `np.argmax` returns the first occurrence.\n\n3. **Calculate Base Probability (`base_prob`)**: This is the probability assigned to non-greedy actions, calculated as `epsilon / n`.\n\n4. **Calculate Greedy Probability (`greedy_prob`)**: This is the probability assigned to the greedy action, calculated as `1 - epsilon + base_prob`.\n\n5. **Initialize Probabilities List**: Start with all actions having the base probability, then set the greedy action's probability to `greedy_prob`.\n\n6. **Round Probabilities**: Ensure all probabilities are rounded to 4 decimal places.\n\n7. **Check Sum of Probabilities**: Ensure the sum of probabilities is 1 within a numerical tolerance of `1e-12`.\n\nThis implementation ensures that the \u03b5-soft policy is correctly applied, with all probabilities summing to 1 and rounded to the specified precision."}
{"task_id": 86, "completion_id": 0, "completion": "To solve the problem of aggregating predictions from a Random Forest classifier using majority voting, we can iterate over each sample and count the votes for each class label. We will use the `Counter` class from the `collections` module to facilitate counting the votes. In case of a tie, we will select the smallest label based on the data type (numeric or lexicographic order for strings).\n\nHere's the implementation of the function:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Number of samples\n    num_samples = len(predictions[0])\n    \n    # Initialize the list to store the final predictions\n    final_predictions = []\n    \n    # Iterate over each sample\n    for sample_index in range(num_samples):\n        # Collect votes for the current sample from all trees\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        \n        # Count the votes using Counter\n        vote_count = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, min will return the smallest label\n        majority_vote = min(vote_count, key=lambda label: (-vote_count[label], label))\n        \n        # Append the majority vote to the final predictions\n        final_predictions.append(majority_vote)\n    \n    return final_predictions\n```\n\n### Explanation:\n\n1. **Initialization**: We determine the number of samples by checking the length of the first inner list (`predictions[0]`). We also initialize an empty list `final_predictions` to store the aggregated results.\n\n2. **Iterate Over Samples**: For each sample index, we collect the predictions from all trees for that specific sample.\n\n3. **Count Votes**: We use `Counter` to count how many times each class label appears in the votes for the current sample.\n\n4. **Determine Majority Vote**: We use the `min` function with a custom key to find the class label with the highest count. The key `(-vote_count[label], label)` ensures that we first sort by the negative count (to get the highest count) and then by the label itself to resolve ties by choosing the smallest label.\n\n5. **Store Result**: We append the determined majority vote to the `final_predictions` list.\n\n6. **Return**: Finally, we return the list of aggregated predictions."}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array for uniform processing\n    z_array = np.asarray(z)\n    \n    # Compute the softplus using the numerically stable method\n    softplus_values = np.logaddexp(0.0, z_array)\n    \n    # Round the results to 4 decimal places\n    rounded_values = np.round(softplus_values, 4)\n    \n    # Check if the input was a scalar\n    if np.isscalar(z):\n        return float(rounded_values)\n    else:\n        # Convert the result to a pure Python list\n        return rounded_values.tolist()\n\n# Example usage:\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```\n\n### Explanation:\n1. **Input Handling**: The function first converts the input `z` to a NumPy array using `np.asarray(z)`. This ensures that the input can be processed uniformly, whether it's a scalar, list, or NumPy array.\n\n2. **Numerically Stable Calculation**: The softplus values are computed using `np.logaddexp(0.0, z_array)`, which is a numerically stable way to calculate `ln(1 + e**z)`.\n\n3. **Rounding**: The computed values are rounded to 4 decimal places using `np.round(softplus_values, 4)`.\n\n4. **Output Handling**: \n   - If the input was a scalar, the function returns a single `float`.\n   - If the input was an array or list, the function converts the rounded NumPy array to a pure Python list using `tolist()` and returns it."}
{"task_id": 90, "completion_id": 0, "completion": "To solve the problem of calculating the mean-squared error (MSE) between the true expected payouts of each arm and the policy's estimates, we need to follow these steps:\n\n1. **Check for Missing Estimates**: If the policy does not contain any estimates (i.e., the `ev_estimates` attribute is missing or is an empty dictionary), return `numpy.nan`.\n\n2. **Sort and Compare**: Ensure that the estimates are compared in the correct order by sorting the arm indices.\n\n3. **Calculate Squared Errors**: For each arm, calculate the squared difference between the true expected value and the policy's estimate.\n\n4. **Compute the Mean**: Average these squared errors to get the mean-squared error.\n\n5. **Round the Result**: Round the final result to 4 decimal places.\n\nHere's the implementation of the `mse` function:\n\n```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy has estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    \n    # Sort the arm indices\n    sorted_indices = sorted(estimates.keys())\n    \n    # Calculate squared errors\n    squared_errors = [(estimates[i] - true_evs[i]) ** 2 for i in sorted_indices]\n    \n    # Calculate mean-squared error\n    mse_value = sum(squared_errors) / len(squared_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Output: 0.0075\n```\n\n### Explanation:\n- **Checking for Estimates**: We first check if the `ev_estimates` attribute exists and is not empty. If not, we return `numpy.nan`.\n- **Sorting and Calculation**: We sort the indices of the estimates to ensure they are compared correctly with the true expected values. We then compute the squared error for each arm.\n- **Mean and Rounding**: We compute the mean of these squared errors and round the result to 4 decimal places before returning it."}
{"task_id": 96, "completion_id": 0, "completion": "To implement the additive-smoothed N-gram log-probability function, we need to follow the steps outlined in the task description. Here's a step-by-step implementation:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Tokenize the corpus and build the vocabulary\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    vocabulary = set(word for sentence in tokenized_corpus for word in sentence)\n    \n    # Add the <UNK> token to the vocabulary\n    vocabulary.add(\"<UNK>\")\n    \n    # Create N-gram frequency tables\n    ngram_counts = defaultdict(Counter)\n    for sentence in tokenized_corpus:\n        for n in range(1, N + 1):\n            for i in range(len(sentence) - n + 1):\n                ngram = tuple(sentence[i:i + n])\n                ngram_counts[n][ngram] += 1\n    \n    # Tokenize the target sequence\n    sequence_tokens = sequence.split()\n    \n    # Handle the case where the sequence length is smaller than N\n    if len(sequence_tokens) < N:\n        return 0.0\n    \n    # Map unseen words in the sequence to <UNK>\n    sequence_tokens = [word if word in vocabulary else \"<UNK>\" for word in sequence_tokens]\n    \n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    V = len(vocabulary)\n    \n    for i in range(len(sequence_tokens) - N + 1):\n        ngram = tuple(sequence_tokens[i:i + N])\n        context = ngram[:-1]\n        word = ngram[-1]\n        \n        context_count = ngram_counts[N - 1][context] if N > 1 else len(corpus)\n        ngram_count = ngram_counts[N][ngram]\n        \n        # Apply additive smoothing\n        prob = (ngram_count + K) / (context_count + K * V)\n        \n        # Add the log-probability\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\n    \"the cat sat on the mat\",\n    \"the cat is on the mat\",\n    \"there is a cat\"\n]\nsequence = \"the cat on the mat\"\nN = 2\nprint(additive_ngram_log_prob(corpus, sequence, N))  # Example output\n```\n\n### Explanation:\n1. **Tokenization and Vocabulary Building**: We tokenize the corpus into words and build a vocabulary, adding an `<UNK>` token to handle unseen words.\n\n2. **N-gram Frequency Tables**: We create frequency tables for all 1- to N-grams using a `defaultdict` of `Counter`.\n\n3. **Sequence Tokenization and `<UNK>` Mapping**: We tokenize the target sequence and map any unseen words to `<UNK>`.\n\n4. **Log-Probability Calculation**: For each N-gram in the sequence, we calculate the smoothed probability using the formula provided, and accumulate the log-probabilities.\n\n5. **Return the Result**: The final log-probability is rounded to four decimal places and returned.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 108, "completion_id": 0, "completion": "To implement the regularized Alternating Least Squares (ALS) matrix factorization, we need to iteratively update the factor matrices \\( W \\) and \\( H \\) while minimizing the regularized Frobenius norm. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)  # Fixed random seed for reproducibility\n    N, M = X.shape\n    \n    # Initialize W and H with random values\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    for iteration in range(max_iter):\n        # Update W while keeping H fixed\n        for i in range(N):\n            HHT = H @ H.T\n            XHT = X[i, :] @ H.T\n            W[i, :] = np.linalg.solve(HHT + alpha * np.eye(K), XHT)\n        \n        # Update H while keeping W fixed\n        for j in range(M):\n            WTW = W.T @ W\n            XTW = X[:, j].T @ W\n            H[:, j] = np.linalg.solve(WTW + alpha * np.eye(K), XTW)\n        \n        # Compute the reconstruction loss\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        \n        # Check for convergence\n        if loss < tol:\n            break\n    \n    # Return the reconstructed matrix rounded to 4 decimal places\n    return X_hat.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# K = 2\n# reconstructed_matrix = als_factorization(X, K)\n# print(reconstructed_matrix)\n```\n\n### Explanation:\n1. **Initialization**: We initialize the factor matrices \\( W \\) and \\( H \\) with random values using a fixed seed for reproducibility.\n\n2. **ALS Iterations**: We alternate between updating \\( W \\) and \\( H \\):\n   - **Update \\( W \\)**: For each row \\( i \\) of \\( W \\), solve the regularized least squares problem using the current \\( H \\).\n   - **Update \\( H \\)**: For each column \\( j \\) of \\( H \\), solve the regularized least squares problem using the current \\( W \\).\n\n3. **Loss Calculation**: After each full iteration (updating both \\( W \\) and \\( H \\)), compute the regularized Frobenius loss.\n\n4. **Convergence Check**: If the loss drops below the specified tolerance `tol`, stop the iterations early.\n\n5. **Return**: The reconstructed matrix \\( X\u0302 = WH \\) is rounded to 4 decimal places and returned as a list of lists.\n\nThis implementation should efficiently factorize the input matrix using the ALS method with regularization."}
{"task_id": 109, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm with K-Means++ initialization, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    m, n = X.shape\n\n    # Step 1: K-Means++ initialization\n    centroids = [X[random.randint(0, m - 1)]]\n    for _ in range(1, K):\n        distances = np.array([min(np.linalg.norm(x - c)**2 for c in centroids) for x in X])\n        probabilities = distances / distances.sum()\n        cumulative_probabilities = np.cumsum(probabilities)\n        r = random.random()\n        for j, p in enumerate(cumulative_probabilities):\n            if r < p:\n                centroids.append(X[j])\n                break\n\n    centroids = np.array(centroids)\n\n    # Step 2: Lloyd's iterations\n    for _ in range(max_iter):\n        # Assign step\n        labels = np.array([np.argmin([np.linalg.norm(x - c) for c in centroids]) for x in X])\n\n        # Update step\n        new_centroids = []\n        for k in range(K):\n            cluster_points = X[labels == k]\n            if len(cluster_points) > 0:\n                new_centroids.append(cluster_points.mean(axis=0))\n            else:\n                new_centroids.append(centroids[k])  # Keep the centroid unchanged if the cluster is empty\n\n        new_centroids = np.array(new_centroids)\n\n        # Check for convergence\n        if np.array_equal(new_centroids, centroids):\n            break\n\n        centroids = new_centroids\n\n    # Round centroids to 4 decimal places and sort\n    centroids = np.round(centroids, 4)\n    centroids = sorted(centroids.tolist(), key=lambda x: (x[0], x))\n\n    return centroids\n```\n\n### Explanation:\n\n1. **Initialization with K-Means++**:\n   - Start by selecting the first centroid randomly from the dataset.\n   - For each subsequent centroid, calculate the squared distance from each point to its nearest existing centroid.\n   - Choose the next centroid with a probability proportional to the squared distance, ensuring diverse initial centroids.\n\n2. **Lloyd's Iterations**:\n   - **Assign Step**: Assign each point to the nearest centroid.\n   - **Update Step**: Calculate the new centroids as the mean of all points assigned to each cluster. If a cluster is empty, retain its previous centroid.\n   - Repeat until convergence (no change in centroids) or the maximum number of iterations is reached.\n\n3. **Output**:\n   - Round the final centroids to four decimal places.\n   - Sort the centroids by their first coordinate, using the entire tuple to break ties.\n\nThis implementation ensures reproducibility by setting the random seed and handles empty clusters gracefully by retaining their previous centroids."}
{"task_id": 111, "completion_id": 0, "completion": "To accomplish the task of character-level sequence encoding and decoding, we need to implement the three helper functions as described. Here's the complete implementation:\n\n```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]  # Encode using vocabulary, default to 0 for unknown chars\n    if len(encoded) < time_steps:\n        # Pad with 0s if the sequence is shorter than TIME_STEPS\n        encoded.extend([0] * (time_steps - len(encoded)))\n    else:\n        # Truncate if the sequence is longer than TIME_STEPS\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer ids back to a string, ignoring padding tokens.\"\"\"\n    decoded_chars = [inverse_vocab[idx] for idx in indices if idx != 0]  # Ignore padding tokens (0)\n    return ''.join(decoded_chars)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, predicts using the model, and decodes the prediction.\"\"\"\n    # Step 1: Encode the raw text\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    \n    # Step 2: Prepare the input for the model (batch size 1)\n    input_batch = np.array([encoded_text])\n    \n    # Step 3: Predict using the model\n    predictions = model.predict(input_batch)\n    \n    # Step 4: Apply argmax over the last axis to get predicted ids\n    predicted_ids = np.argmax(predictions, axis=-1).flatten()\n    \n    # Step 5: Decode the predicted ids\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    \n    return decoded_string\n```\n\n### Explanation:\n\n1. **`string_to_int` Function:**\n   - This function encodes each character of the input string using the provided vocabulary.\n   - If a character is not found in the vocabulary, it is encoded as the padding token `0`.\n   - The encoded list is adjusted to have a fixed length of `TIME_STEPS` by either padding with `0`s or truncating.\n\n2. **`int_to_string` Function:**\n   - This function decodes a list of integer ids back to a string using the inverse vocabulary.\n   - Padding tokens (`0`) are ignored during decoding.\n\n3. **`run_example` Function:**\n   - This function integrates the encoding and decoding process.\n   - It encodes the input text, feeds it to the model, applies `argmax` to get predicted ids, and decodes these ids to return the final string.\n   - The model is expected to have a `predict` method that takes a batch of inputs and returns predictions.\n\nThis implementation assumes that the `model` object has a `predict` method compatible with NumPy arrays, and that the input and output vocabularies are correctly defined."}
{"task_id": 113, "completion_id": 0, "completion": "To implement the `run_examples` function, we need to follow the task description closely. The function will rely on the `run_example` helper function to get the model's output for each input string. Here's how you can implement it:\n\n```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # Use the global EXAMPLES if examples is None\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n\n    for example in examples:\n        # Call the run_example function to get the model's output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        \n        # Concatenate the list of characters into a single string\n        predicted_string = ''.join(output_chars)\n        \n        # Print the input-output pair\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        \n        # Collect the predicted string\n        predictions.append(predicted_string)\n\n    return predictions\n```\n\n### Explanation:\n1. **Parameter Handling**: The function checks if `examples` is `None` and uses the global constant `EXAMPLES` if it is. This allows flexibility in how the function is called.\n\n2. **Iterating Over Examples**: For each example in the `examples` iterable, the function calls `run_example` to get the model's output as a list of characters.\n\n3. **Concatenation**: The list of characters returned by `run_example` is concatenated into a single string using `''.join(output_chars)`.\n\n4. **Printing**: The function prints the input and the predicted output in the specified format.\n\n5. **Collecting Predictions**: Each predicted string is appended to the `predictions` list, which is returned at the end.\n\nThis implementation assumes that `run_example` is defined elsewhere in the environment and works as described in the task."}
{"task_id": 115, "completion_id": 0, "completion": "To implement the `logistic_loss_and_gradient` function, we need to compute both the binary cross-entropy loss and its gradient for logistic regression. Let's break down the steps required to achieve this:\n\n1. **Compute the predicted probabilities** using the logistic function (sigmoid function).\n2. **Handle numerical stability** by ensuring probabilities are not exactly 0 or 1.\n3. **Calculate the binary cross-entropy loss** using the formula provided.\n4. **Compute the gradient** of the loss with respect to the weights.\n5. **Round the results** to 4 decimal places and format the gradient as a nested list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Number of samples\n    m = X.shape[0]\n    \n    # Compute the linear combination z = X \u00b7 w\n    z = X.dot(w)\n    \n    # Compute the predicted probabilities using the sigmoid function\n    p = 1 / (1 + np.exp(-z))\n    \n    # Handle numerical stability by ensuring probabilities are not exactly 0 or 1\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = (1 / m) * X.T.dot(p - y)\n    \n    # Round the loss to 4 decimal places\n    loss = round(loss, 4)\n    \n    # Round the gradient to 4 decimal places and convert to a nested list\n    gradient = np.round(gradient, 4).tolist()\n    \n    return loss, gradient\n\n# Example usage:\n# X = np.array([[0.1, 0.2], [0.3, 0.4]])\n# y = np.array([0, 1])\n# w = np.array([0.5, -0.5])\n# print(logistic_loss_and_gradient(X, y, w))\n```\n\n### Explanation:\n- **Sigmoid Function**: The sigmoid function is used to map the linear combination of features and weights (`z`) to a probability between 0 and 1.\n- **Numerical Stability**: We use `np.clip` to ensure that probabilities are not exactly 0 or 1, which would cause issues when taking the logarithm.\n- **Loss Calculation**: The average binary cross-entropy loss is computed using the formula provided, and we use `np.mean` to average over all samples.\n- **Gradient Calculation**: The gradient is computed using matrix operations, which efficiently handle the computation for all samples.\n- **Rounding and Formatting**: The results are rounded to 4 decimal places, and the gradient is converted to a nested list format as required."}
{"task_id": 118, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps as weak learners, we need to follow these steps:\n\n1. Initialize weights for each training sample.\n2. For each classifier (decision stump), find the best threshold and feature that minimizes the weighted error.\n3. Calculate the weight of the classifier based on its error.\n4. Update the sample weights based on the classifier's performance.\n5. Aggregate the predictions from all classifiers to make the final prediction.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    classifiers = []\n    alphas = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        best_pred = None\n\n        for feature in range(n):\n            feature_values = X_train[:, feature]\n            thresholds = np.unique(feature_values)\n\n            for threshold in thresholds:\n                for inequality in ['lt', 'gt']:\n                    pred = np.ones(m)\n                    if inequality == 'lt':\n                        pred[feature_values <= threshold] = -1\n                    else:\n                        pred[feature_values > threshold] = -1\n\n                    error = np.sum(weights[pred != y_train])\n\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature, threshold, inequality)\n                        best_pred = pred\n\n        epsilon = best_error / np.sum(weights)\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        weights *= np.exp(-alpha * y_train * best_pred)\n        weights /= np.sum(weights)\n\n        classifiers.append(best_stump)\n        alphas.append(alpha)\n\n    def stump_predict(X, stump):\n        feature, threshold, inequality = stump\n        pred = np.ones(X.shape[0])\n        feature_values = X[:, feature]\n        if inequality == 'lt':\n            pred[feature_values <= threshold] = -1\n        else:\n            pred[feature_values > threshold] = -1\n        return pred\n\n    final_pred = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, classifiers):\n        final_pred += alpha * stump_predict(X_test, stump)\n\n    return [1 if p > 0 else -1 for p in final_pred]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1, 2], [3, 4]])\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=3))\n```\n\n### Explanation:\n- **Decision Stump**: A simple classifier that makes decisions based on a single feature threshold.\n- **Weighted Error**: Calculated using the current weights of the samples.\n- **Alpha Calculation**: Determines the influence of each classifier based on its error.\n- **Weight Update**: Adjusts the sample weights to focus more on misclassified samples.\n- **Final Prediction**: Aggregates the weighted votes from all classifiers to make the final decision."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Check if n_components is valid\n    if n_components <= 0 or n_components > X.shape[1]:\n        return []\n\n    # Compute the global mean\n    mean_global = np.mean(X, axis=0)\n\n    # Initialize scatter matrices\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n\n    # Compute class means and scatter matrices\n    unique_classes = np.unique(y)\n    for cls in unique_classes:\n        X_c = X[y == cls]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n\n        # Within-class scatter\n        S_W += (X_c - mean_c).T @ (X_c - mean_c)\n\n        # Between-class scatter\n        mean_diff = (mean_c - mean_global).reshape(-1, 1)\n        S_B += N_c * (mean_diff @ mean_diff.T)\n\n    # Compute the matrix A = pinv(S_W) @ S_B\n    A = np.linalg.pinv(S_W) @ S_B\n\n    # Perform eigen-decomposition\n    eigen_values, eigen_vectors = np.linalg.eigh(A)\n\n    # Sort eigenvectors by descending eigenvalues\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n\n    # Select the top n_components eigenvectors\n    W = eigen_vectors[:, :n_components]\n\n    # Deterministic sign flip\n    for i in range(W.shape[1]):\n        first_non_zero = np.argmax(W[:, i] != 0)\n        if W[first_non_zero, i] < 0:\n            W[:, i] = -W[:, i]\n\n    # Project the data\n    X_projected = X @ W\n\n    # Round to four decimal places\n    X_projected = np.round(X_projected, 4)\n\n    # Return as list of lists\n    return X_projected.tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis code implements the multi-class Linear Discriminant Analysis (LDA) transformation as described in the task. It computes the within-class and between-class scatter matrices, performs eigen-decomposition, and projects the data onto the specified number of discriminant components. The results are rounded to four decimal places and returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "To solve the problem of escaping from the fire maze, we need to simulate the spread of fire and the movement of the agent. We'll use a breadth-first search (BFS) approach to handle both the fire spread and the agent's movement. Here's how we can implement the solution:\n\n```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n    \n    # Check if start or goal is on fire\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    \n    # If the maze is 1x1 and the single cell is free\n    if n == 1 and grid[0][0] == '.':\n        return 0\n    \n    # Directions for moving in the grid\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Initialize fire spread\n    fire_queue = deque()\n    fire_time = [[math.inf] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n                fire_time[i][j] = 0\n    \n    # BFS for fire spread\n    while fire_queue:\n        x, y = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.' and fire_time[nx][ny] == math.inf:\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    \n    # Initialize agent movement\n    agent_queue = deque([(0, 0)])\n    agent_time = [[math.inf] * n for _ in range(n)]\n    agent_time[0][0] = 0\n    \n    # BFS for agent movement\n    while agent_queue:\n        x, y = agent_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.':\n                if agent_time[nx][ny] == math.inf and agent_time[x][y] + 1 < fire_time[nx][ny]:\n                    agent_time[nx][ny] = agent_time[x][y] + 1\n                    agent_queue.append((nx, ny))\n    \n    # Check if the agent can reach the goal\n    return agent_time[n-1][n-1] if agent_time[n-1][n-1] != math.inf else -1\n\n```\n\n### Explanation:\n1. **Fire Spread Simulation**: We use BFS to simulate the spread of fire. We initialize a queue with all the fire cells and calculate the time it takes for each cell to catch fire.\n\n2. **Agent Movement Simulation**: We use BFS again to simulate the agent's movement. The agent can move to a cell only if it is not on fire at the time of arrival.\n\n3. **Checking Feasibility**: After simulating both the fire spread and agent movement, we check if the agent can reach the goal cell safely. If the agent's time to reach the goal is finite, we return that time; otherwise, we return -1 indicating it's impossible.\n\nThis approach efficiently handles the problem using BFS for both fire and agent movement, ensuring that the agent avoids fire and reaches the goal if possible."}
{"task_id": 141, "completion_id": 0, "completion": "To implement the k-Nearest Neighbors (k-NN) classifier, we need to compute distances between test samples and training samples using the specified metric, find the k nearest neighbors, and predict the class based on majority voting. Below is the implementation of the `knn_predict` function:\n\n```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Predict labels for X_test using k-NN with the specified metric.\"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n    \n    def cosine_distance(a, b):\n        dot_product = np.sum(a * b, axis=1)\n        norm_a = np.linalg.norm(a, axis=1)\n        norm_b = np.linalg.norm(b, axis=1)\n        return 1 - (dot_product / (norm_a * norm_b))\n    \n    # Choose the distance function based on the metric\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        distance_func = euclidean_distance  # Default to Euclidean\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Compute distances from the test sample to all training samples\n        distances = distance_func(X_train, test_sample)\n        \n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        nearest_labels = y_train[nearest_indices]\n        \n        # Predict the class by majority vote\n        unique_labels, counts = np.unique(nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n        \n        predictions.append(majority_vote)\n    \n    return np.array(predictions)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([0, 1, 1])\n# X_test = np.array([[1, 2], [3, 3]])\n# k = 2\n# print(knn_predict(X_train, y_train, X_test, k, metric='euclidean'))\n```\n\n### Explanation:\n1. **Distance Functions**: We define three functions to compute Euclidean, Manhattan, and Cosine distances.\n2. **Metric Selection**: Based on the `metric` parameter, we select the appropriate distance function. If an unknown metric is provided, it defaults to Euclidean.\n3. **Distance Calculation**: For each test sample, we calculate the distance to all training samples.\n4. **Nearest Neighbors**: We find the indices of the k smallest distances using `np.argsort`.\n5. **Majority Voting**: We determine the most frequent label among the k nearest neighbors. In case of a tie, `np.unique` with `np.argmax` ensures the smallest label is chosen.\n6. **Return**: The function returns a 1-D NumPy array of predicted labels for the test samples."}
{"task_id": 146, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (k-NN) classifier from scratch, we need to calculate distances between test samples and training samples using the specified metric, find the k nearest neighbors, and perform a majority vote to determine the predicted label for each test sample. Below is the complete implementation:\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n    \n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n    \n    def cosine_distance(x1, x2, epsilon=1e-12):\n        dot_product = np.dot(x1, x2)\n        norm_x1 = np.linalg.norm(x1)\n        norm_x2 = np.linalg.norm(x2)\n        return 1 - (dot_product / (norm_x1 * norm_x2 + epsilon))\n    \n    # Select the appropriate distance function\n    if metric == 'euclidean':\n        distance_function = euclidean_distance\n    elif metric == 'manhattan':\n        distance_function = manhattan_distance\n    elif metric == 'cosine':\n        distance_function = cosine_distance\n    else:\n        raise ValueError(\"Unsupported metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Calculate distances from the test sample to all training samples\n        distances = np.array([distance_function(test_sample, train_sample) for train_sample in X])\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = np.argsort(distances)[:min(k, len(X))]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y[k_nearest_indices]\n        \n        # Perform a majority vote\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        majority_label = unique_labels[np.argmax(counts)]\n        \n        # In case of a tie, choose the smallest label\n        if np.sum(counts == np.max(counts)) > 1:\n            majority_label = np.min(unique_labels[counts == np.max(counts)])\n        \n        predictions.append(majority_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([0, 1, 0])\n# X_test = np.array([[1, 2], [3, 3]])\n# print(knn_predict(X_train, y_train, X_test, k=2, metric='euclidean'))\n```\n\nThis implementation defines three distance functions for Euclidean, Manhattan, and Cosine distances. It then calculates the distances between each test sample and all training samples, finds the k nearest neighbors, and performs a majority vote to predict the label for each test sample. The function returns a list of predicted labels."}
{"task_id": 155, "completion_id": 0, "completion": "To implement the forward pass of the actor network, we need to perform a series of matrix multiplications and apply activation functions as specified in the task. Here's how you can implement this using NumPy:\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it's not already\n    state = np.array(state)\n\n    # First layer: Linear transformation followed by ReLU\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)  # ReLU activation\n\n    # Second layer: Linear transformation followed by ReLU\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)  # ReLU activation\n\n    # Output layer: Linear transformation followed by tanh\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    a3 = np.tanh(z3)  # tanh activation\n\n    # Round the result to 4 decimal places and convert to a list\n    return np.round(a3, 4).tolist()\n\n# Example usage:\n# state = [0.5, -0.2, 0.1]\n# weights = {\n#     'W1': np.random.rand(3, 5),\n#     'b1': np.random.rand(5),\n#     'W2': np.random.rand(5, 4),\n#     'b2': np.random.rand(4),\n#     'W3': np.random.rand(4, 2),\n#     'b3': np.random.rand(2)\n# }\n# action = actor_forward(state, weights)\n# print(action)\n```\n\n### Explanation:\n1. **Input Conversion**: The state is converted to a NumPy array to facilitate matrix operations.\n2. **First Layer**: The input state is transformed using the first weight matrix `W1` and bias `b1`. The ReLU activation function is applied to the result.\n3. **Second Layer**: The output from the first layer is transformed using the second weight matrix `W2` and bias `b2`, followed by another ReLU activation.\n4. **Output Layer**: The output from the second layer is transformed using the third weight matrix `W3` and bias `b3`, followed by a tanh activation to ensure the output is in the range [-1, 1].\n5. **Rounding**: The final action vector is rounded to four decimal places and returned as a list.\n\nThis implementation follows the specified architecture and ensures that the output is correctly formatted."}
{"task_id": 160, "completion_id": 0, "completion": "To implement Lasso regression using coordinate descent, we need to follow the steps outlined in the task description. Here's the complete implementation using NumPy:\n\n```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # Add intercept column\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n    \n    # Initialize weights and intercept\n    w = np.zeros(n + 1)\n    \n    for _ in range(max_iters):\n        # Update intercept if fit_intercept is True\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        \n        for j in range(1, n + 1):\n            # Compute partial residual excluding the j-th feature\n            r_j = y - X @ w + X[:, j] * w[j]\n            \n            # Compute the dot product of x_j and r_j\n            dot_product = np.dot(X[:, j], r_j)\n            \n            # Apply the soft-thresholding operator\n            w_j_new = np.sign(dot_product) * max(abs(dot_product) - lambda_param * m, 0) / np.sum(X[:, j] ** 2)\n            \n            # Update the weight\n            w[j] = w_j_new\n    \n    # Extract weights and bias\n    bias = w[0]\n    weights = w[1:]\n    \n    # Round the results to 4 decimal places\n    weights = np.round(weights, 4).tolist()\n    bias = round(bias, 4)\n    \n    return weights, bias\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(weights, bias)\n```\n\n### Explanation:\n1. **Intercept Handling**: We add a column of ones to `X` if `fit_intercept` is `True`, otherwise a column of zeros. This ensures the intercept is handled separately from the weights.\n2. **Initialization**: All weights, including the intercept, are initialized to zero.\n3. **Coordinate Descent**: For each weight (excluding the intercept), we compute the partial residual and update the weight using the soft-thresholding operator.\n4. **Soft-Thresholding**: This operator is used to apply the L1 penalty, effectively shrinking some weights to zero if the penalty is strong enough.\n5. **Return Values**: The weights and bias are rounded to 4 decimal places before returning.\n\nThis implementation should correctly perform Lasso regression using coordinate descent, adhering to the constraints and requirements specified."}
{"task_id": 165, "completion_id": 0, "completion": "To implement the function that computes the normalized Hamming distance, we need to follow the given requirements. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    # Check if the lengths are different\n    if x.shape[0] != y.shape[0]:\n        return -1\n    \n    # Calculate the Hamming distance\n    differences = np.sum(x != y)\n    normalized_distance = differences / x.shape[0]\n    \n    # Return the distance rounded to 4 decimal places\n    return round(normalized_distance, 4)\n\n# Example usage:\n# x = [1, 2, 3, 4]\n# y = [1, 2, 0, 4]\n# print(hamming_distance(x, y))  # Output: 0.25\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts both lists and NumPy arrays. If the inputs are lists, they are converted to NumPy arrays for easier element-wise comparison.\n\n2. **Length Check**: The function first checks if the lengths of the two vectors are different. If they are, it returns `-1`.\n\n3. **Hamming Distance Calculation**: Using NumPy, we compute the number of differing elements with `np.sum(x != y)`. This gives the count of positions where the elements differ.\n\n4. **Normalization**: The Hamming distance is normalized by dividing the number of differing elements by the total number of elements.\n\n5. **Rounding**: The result is rounded to 4 decimal places before returning.\n\nThis implementation efficiently handles both list and NumPy array inputs and adheres to the specified requirements."}
{"task_id": 169, "completion_id": 0, "completion": "To implement the `generate_window` function, we need to handle different types of window functions as specified. Each window type has its own mathematical formula, and we need to ensure that the function handles special cases and errors appropriately. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if N == 1:\n        return [1.0]\n    \n    n = np.arange(N)\n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = (a0 \n             - a1 * np.cos(2 * np.pi * n / (N - 1)) \n             + a2 * np.cos(4 * np.pi * n / (N - 1)) \n             - a3 * np.cos(6 * np.pi * n / (N - 1)))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window.\")\n        w = np.zeros(N)\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(\"Unknown window type.\")\n    \n    return [round(float(val), 4) for val in w]\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, coefficients=[0.5, 0.5]))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `N` is a positive integer. If `N` is 1, it returns `[1.0]` as per the conventional definition.\n\n2. **Window Calculations**:\n   - **Hamming Window**: Uses the formula `w[n] = 0.54 \u2212 0.46 cos(2\u03c0n/(N\u22121))`.\n   - **Hann Window**: Uses the formula `w[n] = 0.5 \u2212 0.5 cos(2\u03c0n/(N\u22121))`.\n   - **Blackman-Harris Window**: Uses the given coefficients to compute the window.\n   - **Generalized Cosine Window**: Uses the provided coefficients to compute the window. If coefficients are not provided, it raises a `ValueError`.\n\n3. **Rounding**: Each coefficient is rounded to 4 decimal places before returning the list.\n\n4. **Error Handling**: Raises a `ValueError` for unknown window types or if coefficients are not provided for the generalized cosine window."}
{"task_id": 171, "completion_id": 0, "completion": "To implement a binary Logistic Regression classifier using mini-batch Gradient Descent, we need to follow several steps. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Add intercept term (bias) to the data\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n\n    # Handle the special case where all training labels are identical\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n\n    # Map labels to {0, 1}\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    reverse_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n\n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Training using mini-batch gradient descent\n    for epoch in range(epochs):\n        # Shuffle the data\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n\n        # Mini-batch gradient descent\n        for start in range(0, X_train.shape[0], batch_size):\n            end = start + batch_size\n            X_batch = X_train_shuffled[start:end]\n            y_batch = y_train_shuffled[start:end]\n\n            # Predictions\n            predictions = sigmoid(np.dot(X_batch, weights))\n\n            # Gradient calculation\n            gradient = np.dot(X_batch.T, (predictions - y_batch)) / len(y_batch)\n\n            # Update weights\n            weights -= learning_rate * gradient\n\n    # Predict on test set\n    test_predictions = sigmoid(np.dot(X_test, weights))\n    test_labels_mapped = (test_predictions >= 0.5).astype(int)\n    test_labels = [reverse_label_map[label] for label in test_labels_mapped]\n\n    return test_labels\n```\n\n### Explanation:\n\n1. **Data Preparation**: Convert input lists to numpy arrays for easier manipulation. Add an intercept term (bias) to both training and test data.\n\n2. **Label Mapping**: Map the original labels to `{0, 1}` for internal processing and create a reverse mapping to convert predictions back to the original labels.\n\n3. **Special Case Handling**: If all training labels are identical, skip training and return the unique label for all test samples.\n\n4. **Weight Initialization**: Initialize the weight vector to zeros.\n\n5. **Sigmoid Function**: Define the sigmoid function to map linear combinations of inputs to probabilities.\n\n6. **Mini-Batch Gradient Descent**: Shuffle the training data and perform mini-batch updates to the weights using the gradient of the negative log-likelihood loss.\n\n7. **Prediction**: Use the trained weights to predict probabilities on the test set, apply a threshold of 0.5, and map the binary predictions back to the original labels.\n\nThis implementation should work well for linearly separable data and simple binary classification tasks."}
{"task_id": 176, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps from scratch, we need to follow the steps outlined in the task description. Here's a complete implementation:\n\n```python\nimport numpy as np\n\nclass DecisionStump:\n    def __init__(self):\n        self.feature_index = None\n        self.threshold = None\n        self.polarity = 1\n        self.alpha = None\n\n    def predict(self, X):\n        n_samples = X.shape[0]\n        predictions = np.ones(n_samples)\n        if self.polarity == 1:\n            predictions[X[:, self.feature_index] < self.threshold] = -1\n        else:\n            predictions[X[:, self.feature_index] >= self.threshold] = -1\n        return predictions\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, (1 / n_samples))\n    y_train = np.where(y_train == 0, -1, 1)  # Convert labels to {-1, 1}\n\n    stumps = []\n    for _ in range(n_estimators):\n        stump = DecisionStump()\n        min_error = float('inf')\n\n        for feature_index in range(n_features):\n            feature_values = np.sort(np.unique(X_train[:, feature_index]))\n            thresholds = (feature_values[:-1] + feature_values[1:]) / 2.0\n\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n\n                    misclassified = weights[y_train != predictions]\n                    error = np.sum(misclassified)\n\n                    if error < min_error:\n                        min_error = error\n                        stump.feature_index = feature_index\n                        stump.threshold = threshold\n                        stump.polarity = polarity\n\n        if min_error == 0:\n            break\n\n        stump.alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n        predictions = stump.predict(X_train)\n        weights *= np.exp(-stump.alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        stumps.append(stump)\n\n    # Aggregate predictions\n    y_pred = np.zeros(X_test.shape[0])\n    for stump in stumps:\n        predictions = stump.predict(X_test)\n        y_pred += stump.alpha * predictions\n\n    y_pred = np.sign(y_pred)\n    y_pred = np.where(y_pred == -1, 0, 1)\n\n    return y_pred.tolist()\n```\n\n### Explanation:\n\n1. **Decision Stump Class**: This class represents a weak learner. It stores the feature index, threshold, polarity, and alpha (weight of the stump).\n\n2. **Training**: For each estimator, we iterate over all features and possible thresholds to find the best decision stump with the smallest weighted error. We update the weights of the samples based on the performance of the stump.\n\n3. **Early Stopping**: If a perfect stump is found (error = 0), the training stops early.\n\n4. **Prediction**: For the test set, we aggregate the predictions of all stumps, weighted by their alpha values, and convert the aggregated sign back to class labels {0, 1}.\n\nThis implementation follows the AdaBoost algorithm's standard procedure and should work efficiently for small to medium-sized datasets."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Check for invalid input\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # Initialize random number generator\n    rng = np.random.default_rng(seed)\n\n    # PSO parameters\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n\n    # Initialize particles\n    positions = rng.uniform(low=-1.0, high=1.0, size=(num_particles, n_dims))\n    velocities = rng.uniform(low=-0.1, high=0.1, size=(num_particles, n_dims))\n    personal_best_positions = np.copy(positions)\n    personal_best_values = np.sum(personal_best_positions**2, axis=1)\n\n    # Initialize global best\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n\n    # PSO main loop\n    for _ in range(num_iterations):\n        # Update velocities and positions\n        for i in range(num_particles):\n            r1 = rng.uniform(0, 1, n_dims)\n            r2 = rng.uniform(0, 1, n_dims)\n\n            velocities[i] = (w * velocities[i] +\n                             c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                             c2 * r2 * (global_best_position - positions[i]))\n\n            positions[i] = np.clip(positions[i] + velocities[i], -1.0, 1.0)\n\n            # Evaluate new position\n            current_value = np.sum(positions[i]**2)\n\n            # Update personal best\n            if current_value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < global_best_value:\n                    global_best_position = positions[i]\n                    global_best_value = current_value\n\n    return round(global_best_value, 4)\n```\n\nThis implementation of Particle Swarm Optimization (PSO) is designed to minimize the Sphere function. It initializes a swarm of particles with random positions and velocities, updates their velocities and positions iteratively, and tracks the best-known positions both personally and globally. The function returns the best value found, rounded to four decimal places, or -1 if any input is invalid."}
{"task_id": 180, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (k-NN) algorithm as described, we need to calculate the Euclidean distance between test samples and training samples, select the k nearest neighbors, and then perform either classification or regression based on the task type. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n    \n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    \n    predictions = []\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [euclidean_distance(test_point, train_point) for train_point in X_train]\n        \n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels/values of the k nearest neighbors\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        \n        if task == \"classification\":\n            # Perform majority voting\n            label_counts = Counter(nearest_labels)\n            # Get the most common label, with tie-breaking by smallest label\n            most_common_label = min(label_counts.items(), key=lambda x: (-x[1], x[0]))[0]\n            predictions.append(most_common_label)\n        \n        elif task == \"regression\":\n            # Calculate the mean of the nearest labels/values\n            mean_value = np.mean(nearest_labels)\n            # Round to 4 decimal places\n            predictions.append(round(mean_value, 4))\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Euclidean Distance Calculation**: The function `euclidean_distance` computes the Euclidean distance between two points.\n\n2. **Handling k**: If `k` is 0 or greater than the number of training samples, we use all training samples.\n\n3. **Distance Calculation**: For each test sample, we calculate the distance to all training samples.\n\n4. **Nearest Neighbors Selection**: We sort the distances and select the indices of the k smallest distances.\n\n5. **Classification**: We use `Counter` to count the occurrences of each label among the k nearest neighbors and select the most common label, resolving ties by choosing the smallest label.\n\n6. **Regression**: We compute the mean of the k nearest neighbors' target values and round it to 4 decimal places.\n\nThis implementation should work correctly for both classification and regression tasks as specified."}
{"task_id": 184, "completion_id": 0, "completion": "To implement a binary decision-tree classifier using the CART algorithm from scratch, we need to follow the steps outlined in your task description. Here's a complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    m = len(y)\n    if m == 0:\n        return 0\n    counts = np.bincount(y)\n    probabilities = counts / m\n    return 1 - np.sum(probabilities ** 2)\n\ndef majority_class(y):\n    \"\"\"Return the majority class label.\"\"\"\n    return Counter(y).most_common(1)[0][0]\n\ndef best_split(X, y):\n    \"\"\"Find the best feature and threshold to split on.\"\"\"\n    n_samples, n_features = X.shape\n    best_gini_gain = 0\n    best_feature = None\n    best_threshold = None\n    parent_gini = gini_impurity(y)\n    \n    for feature in range(n_features):\n        sorted_indices = np.argsort(X[:, feature])\n        X_sorted, y_sorted = X[sorted_indices], y[sorted_indices]\n        \n        for i in range(1, n_samples):\n            if X_sorted[i, feature] == X_sorted[i - 1, feature]:\n                continue\n            \n            threshold = (X_sorted[i, feature] + X_sorted[i - 1, feature]) / 2\n            left_indices = X_sorted[:, feature] <= threshold\n            right_indices = X_sorted[:, feature] > threshold\n            \n            y_left, y_right = y_sorted[left_indices], y_sorted[right_indices]\n            gini_left = gini_impurity(y_left)\n            gini_right = gini_impurity(y_right)\n            \n            weighted_gini = (len(y_left) * gini_left + len(y_right) * gini_right) / n_samples\n            gini_gain = parent_gini - weighted_gini\n            \n            if gini_gain > best_gini_gain:\n                best_gini_gain = gini_gain\n                best_feature = feature\n                best_threshold = threshold\n    \n    return best_feature, best_threshold, best_gini_gain\n\nclass DecisionTreeNode:\n    def __init__(self, depth=0, max_depth=None):\n        self.depth = depth\n        self.max_depth = max_depth\n        self.feature = None\n        self.threshold = None\n        self.left = None\n        self.right = None\n        self.label = None\n\n    def fit(self, X, y):\n        if len(set(y)) == 1:\n            self.label = y[0]\n            return\n        \n        if self.max_depth is not None and self.depth >= self.max_depth:\n            self.label = majority_class(y)\n            return\n        \n        feature, threshold, gini_gain = best_split(X, y)\n        \n        if gini_gain == 0:\n            self.label = majority_class(y)\n            return\n        \n        self.feature = feature\n        self.threshold = threshold\n        \n        left_indices = X[:, feature] <= threshold\n        right_indices = X[:, feature] > threshold\n        \n        if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n            self.label = majority_class(y)\n            return\n        \n        self.left = DecisionTreeNode(depth=self.depth + 1, max_depth=self.max_depth)\n        self.right = DecisionTreeNode(depth=self.depth + 1, max_depth=self.max_depth)\n        \n        self.left.fit(X[left_indices], y[left_indices])\n        self.right.fit(X[right_indices], y[right_indices])\n\n    def predict_one(self, x):\n        if self.label is not None:\n            return self.label\n        if x[self.feature] <= self.threshold:\n            return self.left.predict_one(x)\n        else:\n            return self.right.predict_one(x)\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    root = DecisionTreeNode(max_depth=max_depth)\n    root.fit(X_train, y_train)\n    return [root.predict_one(x) for x in X_test]\n```\n\n### Explanation:\n1. **Gini Impurity Calculation**: The `gini_impurity` function calculates the impurity of a set of labels.\n2. **Majority Class**: The `majority_class` function returns the most common label in a set.\n3. **Best Split**: The `best_split` function finds the best feature and threshold to split the data based on the largest Gini gain.\n4. **Decision Tree Node**: The `DecisionTreeNode` class represents a node in the decision tree. It handles fitting the data and predicting labels for new samples.\n5. **Decision Tree Prediction**: The `decision_tree_predict` function builds the tree using the training data and predicts labels for the test data.\n\nThis implementation follows the rules and criteria specified in your task description, ensuring deterministic predictions."}
{"task_id": 190, "completion_id": 0, "completion": "To solve the problem of finding the best Gini split, we need to iterate over each feature and each unique value within that feature to evaluate potential splits. For each split, we calculate the weighted Gini impurity and keep track of the best split found. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    if len(y) == 0:\n        return 0\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(probabilities ** 2)\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n\n    # Calculate the Gini impurity of the whole dataset\n    G_whole_dataset = gini_impurity(y)\n\n    best_gini = G_whole_dataset\n    best_feature_index = -1\n    best_threshold_value = None\n\n    for feature_index in range(n_features):\n        # Get all unique values for this feature\n        unique_values = np.unique(X[:, feature_index])\n        \n        for threshold in unique_values:\n            # Split the data\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            \n            left_y = y[left_indices]\n            right_y = y[right_indices]\n            \n            # Calculate the weighted Gini impurity for this split\n            n_left = len(left_y)\n            n_right = len(right_y)\n            n_total = n_left + n_right\n            \n            G_left = gini_impurity(left_y)\n            G_right = gini_impurity(right_y)\n            \n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n            \n            # Check if this is the best split so far\n            if G_split < best_gini or (np.isclose(G_split, best_gini, atol=1e-12) and \n                                       (feature_index < best_feature_index or \n                                        (feature_index == best_feature_index and threshold < best_threshold_value))):\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\n# X = [[2.5, 3.0], [1.5, 2.0], [3.5, 4.0]]\n# y = [0, 1, 0]\n# print(best_gini_split(X, y))\n```\n\n### Explanation:\n1. **Gini Impurity Calculation**: The `gini_impurity` function calculates the Gini impurity for a given set of labels.\n\n2. **Iterating Over Features and Thresholds**: For each feature, we consider each unique value as a potential threshold for splitting the data.\n\n3. **Splitting the Data**: For each threshold, we split the data into left and right subsets.\n\n4. **Calculating Weighted Gini Impurity**: We calculate the weighted Gini impurity for the split and check if it's the best one found so far.\n\n5. **Tie-breaking**: We handle ties by preferring splits with smaller feature indices and threshold values.\n\n6. **Return the Best Split**: If no valid split is found, we return the Gini impurity of the whole dataset. Otherwise, we return the best split found."}
{"task_id": 191, "completion_id": 0, "completion": "To implement the `metric` function, we need to create a factory that returns a callable function for each of the specified distance metrics. The callable function should validate the input vectors and compute the distance if the inputs are valid. If the inputs are invalid or the metric name is unsupported, the function should return `-1`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef metric(name: str):\n    def validate_vectors(x, y):\n        # Check if both are list, tuple or numpy array\n        if not isinstance(x, (list, tuple, np.ndarray)) or not isinstance(y, (list, tuple, np.ndarray)):\n            return False\n        \n        # Convert to numpy arrays for easy manipulation\n        x = np.array(x, dtype=float)\n        y = np.array(y, dtype=float)\n        \n        # Check if both are one-dimensional, non-empty, and of the same length\n        if x.ndim != 1 or y.ndim != 1 or len(x) == 0 or len(y) == 0 or len(x) != len(y):\n            return False\n        \n        return x, y\n\n    def euclidean(x, y):\n        x, y = validate_vectors(x, y)\n        if x is False:\n            return -1\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        x, y = validate_vectors(x, y)\n        if x is False:\n            return -1\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        x, y = validate_vectors(x, y)\n        if x is False:\n            return -1\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        x, y = validate_vectors(x, y)\n        if x is False:\n            return -1\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        cosine_similarity = np.dot(x, y) / (norm_x * norm_y)\n        cosine_distance = 1 - cosine_similarity\n        return round(cosine_distance, 4)\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    return metrics.get(name, lambda x, y: -1)\n\n# Example usage:\nprint(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n```\n\n### Explanation:\n1. **Validation**: The `validate_vectors` function checks if the inputs are valid numeric vectors. It ensures they are one-dimensional, non-empty, and of the same length. It also converts them to NumPy arrays for easier computation.\n\n2. **Distance Functions**: Each distance function (`euclidean`, `manhattan`, `chebyshev`, `cosine`) uses the validated vectors to compute the respective distance. If validation fails, they return `-1`.\n\n3. **Factory**: The `metric` function returns the appropriate distance function based on the `name` provided. If the name is unsupported, it returns a lambda function that always returns `-1`.\n\n4. **Rounding**: All valid results are rounded to four decimal places before being returned."}
{"task_id": 197, "completion_id": 0, "completion": "To implement the `action_stats` function, we need to handle both single-dimensional and multi-dimensional action spaces, and distinguish between continuous and discrete spaces. Here's how you can achieve this:\n\n```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if cont_action:\n        # Continuous action space\n        if md_action:\n            # Multi-dimensional continuous space\n            n_actions_per_dim = [np.inf] * len(env.action_space.spaces)\n            action_dim = len(env.action_space.spaces)\n        else:\n            # Single-dimensional continuous space\n            n_actions_per_dim = [np.inf]\n            action_dim = env.action_space.shape[0]\n        action_ids = None\n    else:\n        # Discrete action space\n        if md_action:\n            # Multi-dimensional discrete space\n            n_actions_per_dim = [space.n for space in env.action_space.spaces]\n            action_dim = len(env.action_space.spaces)\n            # Generate all possible actions using cartesian product\n            action_ranges = [range(n) for n in n_actions_per_dim]\n            action_ids = list(product(*action_ranges))\n        else:\n            # Single-dimensional discrete space\n            n_actions_per_dim = [env.action_space.n]\n            action_dim = 1\n            action_ids = list(range(env.action_space.n))\n    \n    return n_actions_per_dim, action_ids, action_dim\n```\n\n### Explanation:\n\n1. **Continuous Action Space**:\n   - If `cont_action` is `True`, the function sets `n_actions_per_dim` to `numpy.inf` for each dimension.\n   - `action_ids` is set to `None` because continuous spaces have infinitely many actions.\n   - The dimensionality (`action_dim`) is determined by the length of `env.action_space.spaces` for multi-dimensional spaces or `env.action_space.shape[0]` for single-dimensional spaces.\n\n2. **Discrete Action Space**:\n   - If `cont_action` is `False`, the function calculates `n_actions_per_dim` based on the number of actions in each dimension.\n   - For multi-dimensional spaces, it uses `env.action_space.spaces` to get the number of actions per dimension.\n   - For single-dimensional spaces, it uses `env.action_space.n`.\n   - `action_ids` is generated using the cartesian product of all possible actions across dimensions.\n\nThis implementation handles both single and multi-dimensional spaces and distinguishes between continuous and discrete action spaces, providing the required statistics."}
{"task_id": 198, "completion_id": 0, "completion": "To implement the \u03b2-maximisation step for Latent Dirichlet Allocation, we need to compute the word-topic matrix \u03b2 using the given variational parameters \u03c6 and the corpus. The process involves accumulating contributions from each document and normalizing the matrix so that each column sums to one. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine the number of topics from the shape of the first phi array\n    T = phi[0].shape[1]\n    \n    # Initialize the \u03b2 matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Accumulate contributions to \u03b2 from each document\n    for d, doc in enumerate(corpus):\n        for n, word_index in enumerate(doc):\n            beta[word_index] += phi[d][n]\n    \n    # Normalize each column of \u03b2 so that it sums to 1\n    for t in range(T):\n        column_sum = np.sum(beta[:, t])\n        if column_sum > 0:\n            beta[:, t] /= column_sum\n    \n    # Convert \u03b2 to a list of lists and round each entry to 4 decimal places\n    beta_list = beta.tolist()\n    beta_list = [[round(value, 4) for value in row] for row in beta_list]\n    \n    return beta_list\n\n# Example usage:\n# phi = [np.array([[0.1, 0.9], [0.3, 0.7]]), np.array([[0.4, 0.6], [0.2, 0.8]])]\n# corpus = [[0, 1], [1, 0]]\n# V = 2\n# print(update_beta(phi, corpus, V))\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing a zero matrix `beta` of shape `(V, T)` where `V` is the vocabulary size and `T` is the number of topics.\n\n2. **Accumulation**: For each document `d` and each token `n` in the document, we add the corresponding `phi[d][n]` values to the `beta` matrix at the row corresponding to the word index `w^{(d)}_n`.\n\n3. **Normalization**: After accumulating the contributions, we normalize each column of `beta` so that the sum of each column is 1. This ensures that the probabilities are valid.\n\n4. **Rounding**: Finally, we convert the `beta` matrix to a list of lists and round each value to 4 decimal places to meet the output constraints.\n\nThis implementation efficiently updates the word-topic matrix \u03b2 using the given variational parameters and corpus data."}
{"task_id": 202, "completion_id": 0, "completion": "To implement the Partitioning Around Medoids (PAM) clustering algorithm, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    \n    # Step 1: Initialize medoids as the first k samples\n    medoids = list(range(k))\n    \n    def compute_cost(medoids):\n        \"\"\"Compute the total clustering cost for the given medoids.\"\"\"\n        total_cost = 0\n        for i in range(n_samples):\n            # Find the closest medoid for each sample\n            distances = [np.linalg.norm(X[i] - X[medoid]) for medoid in medoids]\n            total_cost += min(distances)\n        return total_cost\n    \n    def assign_labels(medoids):\n        \"\"\"Assign each sample to the closest medoid.\"\"\"\n        labels = []\n        for i in range(n_samples):\n            distances = [np.linalg.norm(X[i] - X[medoid]) for medoid in medoids]\n            # Choose the medoid with the smallest distance (ties broken by order)\n            labels.append(np.argmin(distances))\n        return labels\n    \n    # Initial cost\n    current_cost = compute_cost(medoids)\n    \n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n        \n        # Try swapping each medoid with each non-medoid\n        for medoid in medoids:\n            for candidate in range(n_samples):\n                if candidate in medoids:\n                    continue\n                \n                # Swap medoid with candidate\n                new_medoids = medoids.copy()\n                new_medoids[new_medoids.index(medoid)] = candidate\n                \n                # Compute new cost\n                new_cost = compute_cost(new_medoids)\n                cost_reduction = current_cost - new_cost\n                \n                # Check if this swap is the best so far\n                if cost_reduction > best_cost_reduction:\n                    best_swap = (medoid, candidate)\n                    best_cost_reduction = cost_reduction\n        \n        # If no swap improves the cost, break the loop\n        if best_swap is None:\n            break\n        \n        # Perform the best swap\n        medoids[medoids.index(best_swap[0])] = best_swap[1]\n        current_cost -= best_cost_reduction\n    \n    # Step 3: Assign labels based on the final medoids\n    labels = assign_labels(medoids)\n    \n    return labels\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\n### Explanation:\n1. **Initialization**: The medoids are initialized as the first `k` samples.\n2. **Cost Calculation**: The total clustering cost is calculated as the sum of the minimum distances from each sample to its closest medoid.\n3. **Swapping**: We attempt to swap each medoid with each non-medoid sample, calculating the potential cost reduction. We perform the swap that results in the largest cost reduction, provided it strictly reduces the cost.\n4. **Convergence**: The process stops when no swap can further reduce the cost.\n5. **Label Assignment**: After convergence, each sample is assigned to the cluster of the closest medoid.\n\nThis implementation ensures the algorithm is deterministic and follows the specified rules."}
{"task_id": 216, "completion_id": 0, "completion": "To implement Elastic Net regression from scratch using batch gradient descent, we need to follow these steps:\n\n1. **Polynomial Feature Expansion**: If the degree is greater than 1, we need to expand the features to include polynomial terms.\n\n2. **Standardization**: Standard-score (zero-mean, unit-variance) the features, excluding the bias term.\n\n3. **Initialize Weights**: Start with a weight vector initialized to zeros.\n\n4. **Gradient Descent**: Update the weights iteratively using the gradient of the loss function, which includes both the mean squared error and the Elastic Net penalty.\n\n5. **Prediction**: Use the learned weights to predict the target values for `x_test`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    \n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check for input validity\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    \n    # Polynomial feature expansion\n    def polynomial_features(X, degree):\n        from itertools import combinations_with_replacement\n        n_samples, n_features = X.shape\n        if degree == 1:\n            return X\n        else:\n            comb = combinations_with_replacement(range(n_features), degree)\n            poly_features = np.empty((n_samples, 0))\n            for indices in comb:\n                new_feature = np.prod(X[:, indices], axis=1).reshape(-1, 1)\n                poly_features = np.hstack((poly_features, new_feature))\n            return poly_features\n    \n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    \n    # Standardize features (zero mean, unit variance)\n    mean = np.mean(x_train_poly, axis=0)\n    std = np.std(x_train_poly, axis=0)\n    std[std == 0] = 1  # Avoid division by zero\n    x_train_poly = (x_train_poly - mean) / std\n    x_test_poly = (x_test_poly - mean) / std\n    \n    # Add bias term (column of ones)\n    x_train_poly = np.hstack((np.ones((x_train_poly.shape[0], 1)), x_train_poly))\n    x_test_poly = np.hstack((np.ones((x_test_poly.shape[0], 1)), x_test_poly))\n    \n    # Initialize weights\n    n_features = x_train_poly.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        predictions = x_train_poly.dot(weights)\n        errors = predictions - y_train\n        gradient = (2 / len(y_train)) * x_train_poly.T.dot(errors)\n        \n        # Elastic Net regularization\n        l1_term = l1_ratio * reg_factor * np.sign(weights)\n        l2_term = (1 - l1_ratio) * reg_factor * weights\n        l1_term[0] = 0  # Do not regularize the bias term\n        l2_term[0] = 0  # Do not regularize the bias term\n        \n        # Update weights\n        weights -= learning_rate * (gradient + l1_term + l2_term)\n    \n    # Predict on x_test\n    predictions_test = x_test_poly.dot(weights)\n    \n    # Return predictions rounded to 4 decimal places\n    return np.round(predictions_test, 4).tolist()\n```\n\n### Explanation:\n- **Polynomial Features**: We use combinations with replacement to generate polynomial features up to the specified degree.\n- **Standardization**: We standardize the features to have zero mean and unit variance, which is crucial for gradient descent to converge efficiently.\n- **Gradient Descent**: We update the weights using the gradient of the loss function, which includes both the mean squared error and the Elastic Net penalty. The L1 and L2 terms are adjusted to not regularize the bias term.\n- **Prediction**: After training, we use the learned weights to predict the target values for `x_test`.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 217, "completion_id": 0, "completion": "To implement the function `logistic_components`, we will follow these steps:\n\n1. Convert the input containers to NumPy arrays for efficient computation.\n2. Compute the sigmoid function for each element in the `predicted` array.\n3. Calculate the gradient, Hessian, and probability for each observation using vectorized operations.\n4. Round the results to six decimal places.\n5. Convert the NumPy arrays back to Python lists and return them as a tuple.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Compute the sigmoid function\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    \n    # Compute the gradient\n    gradient = actual * (1 / (1 + np.exp(-actual * predicted)))\n    \n    # Compute the Hessian\n    hessian = sigmoid * (1 - sigmoid)\n    \n    # Round the results to 6 decimal places\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    probability = np.round(sigmoid, 6)\n    \n    # Convert numpy arrays to lists\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = probability.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Example usage:\nactual = [1, -1, 1]\npredicted = [0.5, -0.5, 0.0]\nresult = logistic_components(actual, predicted)\nprint(result)\n```\n\nThis function efficiently computes the required components using NumPy's vectorized operations, ensuring that the results are accurate and rounded to six decimal places before returning them as lists."}
{"task_id": 218, "completion_id": 0, "completion": "To solve the problem of evaluating the outcome of a Blackjack hand, we need to implement the function `blackjack_outcome` according to the rules provided. Here's the complete implementation:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the score of a hand, considering usable aces.\"\"\"\n        total = sum(hand)\n        # Check for usable ace\n        if 1 in hand and total + 10 <= 21:\n            total += 10\n        return total\n    \n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if the hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n    \n    # Calculate scores\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    \n    # Check for busts\n    player_bust = player_score > 21\n    dealer_bust = dealer_score > 21\n    \n    # Determine outcome\n    if player_bust:\n        return -1.0\n    if dealer_bust:\n        return 1.0\n    if player_score > dealer_score:\n        if is_natural_blackjack(player):\n            return 1.5\n        return 1.0\n    if player_score < dealer_score:\n        return -1.0\n    return 0.0\n\n# Example usage:\n# player = [1, 10]  # Natural blackjack\n# dealer = [10, 7]  # Score 17\n# print(blackjack_outcome(player, dealer))  # Output: 1.5\n```\n\n### Explanation:\n\n1. **Hand Value Calculation**:\n   - The `hand_value` function calculates the score of a hand, considering the possibility of a usable ace (an ace counted as 11 if it doesn't cause the hand to bust).\n\n2. **Natural Blackjack Check**:\n   - The `is_natural_blackjack` function checks if a hand is a natural blackjack, which is a two-card hand consisting of an Ace and a 10-value card.\n\n3. **Outcome Determination**:\n   - The function first checks if the player busts, returning -1 if true.\n   - If the dealer busts and the player does not, it returns +1.\n   - If neither busts, it compares scores:\n     - If the player has a higher score, it checks for a natural blackjack to return 1.5, otherwise returns 1.\n     - If the dealer has a higher score, it returns -1.\n     - If scores are equal, it returns 0 for a draw.\n\nThis implementation follows the rules provided and correctly evaluates the outcome of a Blackjack hand."}
{"task_id": 221, "completion_id": 0, "completion": "To implement the Mean Squared Logarithmic Error (MSLE) in Python, we will follow the requirements outlined in the task. We'll start by implementing the helper function `squared_log_error` to compute the element-wise squared logarithmic errors, and then implement the main function `mean_squared_log_error` to calculate the average of these errors. We'll also include input validation to ensure the inputs are valid.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Calculate element-wise squared logarithmic errors.\"\"\"\n    # Convert inputs to numpy arrays for element-wise operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Calculate the squared logarithmic error\n    squared_log_errors = (np.log1p(actual) - np.log1p(predicted)) ** 2\n    return squared_log_errors\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals. If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    # Convert inputs to numpy arrays for easy validation and operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    # Calculate squared logarithmic errors\n    squared_log_errors = squared_log_error(actual, predicted)\n    \n    # Calculate mean of squared logarithmic errors\n    msle = np.mean(squared_log_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(msle, 4)\n\n# Example usage:\nactual = [3, 5, 2.5, 7]\npredicted = [2.5, 5, 4, 8]\nresult = mean_squared_log_error(actual, predicted)\nprint(result)  # Output should be a float rounded to 4 decimal places\n```\n\n### Explanation:\n\n1. **Helper Function (`squared_log_error`)**:\n   - Converts the input sequences to NumPy arrays to facilitate element-wise operations.\n   - Computes the squared logarithmic error for each pair of actual and predicted values using the formula: \\((\\log(1 + \\text{actual}) - \\log(1 + \\text{predicted}))^2\\).\n\n2. **Main Function (`mean_squared_log_error`)**:\n   - Converts inputs to NumPy arrays for consistency and ease of validation.\n   - Validates that the inputs have the same shape and contain only non-negative values. If any validation fails, it returns -1.\n   - Calls the helper function to get the squared logarithmic errors.\n   - Computes the mean of these errors and rounds the result to 4 decimal places before returning it.\n\nThis implementation ensures that the MSLE is calculated correctly and handles invalid inputs gracefully by returning -1."}
{"task_id": 222, "completion_id": 0, "completion": "To implement the sigmoid activation function with the specified requirements, we need to handle different types of inputs (scalar, list, and NumPy array) and ensure numerical stability for large values. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    def sigmoid_scalar(x):\n        \"\"\"Compute the sigmoid function for a single scalar.\"\"\"\n        if x >= 0:\n            exp_neg_x = np.exp(-x)\n            return 1 / (1 + exp_neg_x)\n        else:\n            exp_x = np.exp(x)\n            return exp_x / (1 + exp_x)\n\n    if np.isscalar(z):\n        # If z is a scalar, compute the sigmoid and return a rounded float\n        result = sigmoid_scalar(z)\n        return round(result, 4)\n    else:\n        # Convert input to a NumPy array for vectorized operations\n        z_array = np.array(z)\n        # Apply the sigmoid function element-wise using vectorized operations\n        positive_mask = z_array >= 0\n        negative_mask = ~positive_mask\n\n        # Compute sigmoid for positive values\n        exp_neg_z = np.exp(-z_array[positive_mask])\n        sigmoid_positive = 1 / (1 + exp_neg_z)\n\n        # Compute sigmoid for negative values\n        exp_z = np.exp(z_array[negative_mask])\n        sigmoid_negative = exp_z / (1 + exp_z)\n\n        # Combine results\n        sigmoid_result = np.empty_like(z_array, dtype=float)\n        sigmoid_result[positive_mask] = sigmoid_positive\n        sigmoid_result[negative_mask] = sigmoid_negative\n\n        # Round the results to 4 decimal places and convert to a list\n        rounded_result = np.round(sigmoid_result, 4).tolist()\n        return rounded_result\n\n# Example usage:\nprint(sigmoid(1000))  # Scalar input\nprint(sigmoid([-1000, 0, 1000]))  # List input\nprint(sigmoid(np.array([[1000, -1000], [0, 1]])))  # 2D NumPy array input\n```\n\n### Explanation:\n1. **Scalar Handling**: If the input is a scalar, the function `sigmoid_scalar` is used to compute the sigmoid value. It handles large values by computing the expression differently for `x >= 0` and `x < 0` to maintain numerical stability.\n\n2. **Array Handling**: For array-like inputs (lists or NumPy arrays), the input is first converted to a NumPy array to leverage vectorized operations. Masks are used to separate positive and negative values, and the sigmoid is computed differently for each group to ensure stability.\n\n3. **Rounding and Conversion**: After computing the sigmoid values, they are rounded to 4 decimal places and converted back to a Python list using `.tolist()`.\n\nThis implementation ensures that the function is both efficient and numerically stable for a wide range of input values."}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        \"\"\"Apply Leaky ReLU to a single value.\"\"\"\n        return x if x >= 0 else a * x\n\n    def recursive_apply(data):\n        \"\"\"Recursively apply Leaky ReLU to each element in the data structure.\"\"\"\n        if isinstance(data, (int, float)):\n            return apply_leaky_relu(data)\n        elif isinstance(data, list):\n            return [recursive_apply(item) for item in data]\n        elif isinstance(data, np.ndarray):\n            return recursive_apply(data.tolist())\n        else:\n            raise TypeError(\"Input must be a scalar, list, or numpy.ndarray\")\n\n    return recursive_apply(z)\n\n# Example usage:\n# scalar input\nprint(leaky_relu(-3))  # Output: [-0.03]\n\n# list input\nprint(leaky_relu([1, -2, 3, -4]))  # Output: [1, -0.02, 3, -0.04]\n\n# nested list input\nprint(leaky_relu([[1, -2], [3, -4]]))  # Output: [[1, -0.02], [3, -0.04]]\n\n# numpy array input\nprint(leaky_relu(np.array([1, -2, 3, -4])))  # Output: [1, -0.02, 3, -0.04]\n```\n\nThis implementation handles scalars, lists, nested lists, and numpy arrays, applying the Leaky ReLU activation function to each element and returning the result as a Python list with the same structure as the input."}
{"task_id": 226, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps as weak learners, we need to follow a series of steps. Here's a complete implementation of the `adaboost_predict` function:\n\n```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize weights to 1/N\n    weights = np.full(n_samples, (1 / n_samples))\n    \n    # To store the parameters of each decision stump\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        # Initialize variables to find the best stump\n        min_error = float('inf')\n        best_stump = None\n\n        # Iterate over each feature\n        for feature_index in range(n_features):\n            feature_values = X_train[:, feature_index]\n            possible_thresholds = np.unique(feature_values)\n\n            # Try each threshold\n            for threshold in possible_thresholds:\n                for polarity in [1, -1]:\n                    # Predict with current stump\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[feature_values < threshold] = -1\n                    else:\n                        predictions[feature_values >= threshold] = -1\n\n                    # Calculate weighted error\n                    misclassified = weights[y_train != predictions]\n                    error = np.sum(misclassified)\n\n                    # Update the best stump if the current one is better\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_index, threshold, polarity)\n\n        # Calculate alpha\n        alpha = 0.5 * math.log((1.0 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n\n        # Update weights\n        feature_index, threshold, polarity = best_stump\n        predictions = np.ones(n_samples)\n        if polarity == 1:\n            predictions[X_train[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_train[:, feature_index] >= threshold] = -1\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    # Make predictions on X_test\n    y_pred = np.zeros(X_test.shape[0])\n    for alpha, (feature_index, threshold, polarity) in zip(alphas, stumps):\n        predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            predictions[X_test[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_test[:, feature_index] >= threshold] = -1\n        y_pred += alpha * predictions\n\n    # Return the sign of the weighted sum\n    return [1 if i > 0 else -1 for i in y_pred]\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing the sample weights equally. We also prepare lists to store the parameters of each decision stump and their corresponding alpha values.\n\n2. **Training**: For each weak learner (decision stump), we iterate over all features and possible thresholds to find the best decision stump that minimizes the weighted classification error. We calculate the error for each possible stump and select the one with the lowest error.\n\n3. **Alpha Calculation**: Once the best stump is found, we calculate its weight (`alpha`) using the formula provided.\n\n4. **Weight Update**: We update the sample weights to give more importance to the misclassified samples.\n\n5. **Prediction**: For the test data, we compute the weighted sum of the predictions from all the stumps and return the sign of this sum as the final prediction.\n\nThis implementation follows the AdaBoost algorithm's principles and uses decision stumps as weak learners."}
{"task_id": 241, "completion_id": 0, "completion": "To implement the orthogonal weight initializer as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Step 2: Create a 2-D matrix A filled with i.i.d. samples from the standard normal distribution\n    d0 = shape[0]\n    d1_to_dn = np.prod(shape[1:])\n    A = np.random.randn(d0, d1_to_dn)\n\n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    Q = Q.reshape(shape) * scale\n\n    # Return the result as a Python list\n    return Q.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(result)\n```\n\n### Explanation:\n\n1. **Input Validation**: We first check if the length of the shape is less than 2. If so, we return `-1` as specified.\n\n2. **Matrix Creation**: We create a 2D matrix `A` with dimensions `(d0, d1\u22efdn)` filled with random samples from a standard normal distribution.\n\n3. **SVD Computation**: We perform Singular Value Decomposition (SVD) on matrix `A`. This gives us matrices `U`, `\u03a3`, and `V\u1d40`.\n\n4. **Choosing the Correct Matrix**: We select `U` if it matches the shape of `A`, otherwise, we select `V\u1d40`.\n\n5. **Reshape and Scale**: We reshape the selected matrix back to the original requested shape and scale it by the given factor.\n\n6. **Return**: Finally, we convert the NumPy array to a Python list using `tolist()` and return it.\n\nThis implementation ensures that the returned matrix satisfies the orthogonality condition as described in the task."}
{"task_id": 243, "completion_id": 0, "completion": "To implement the forward pass of the Actor-Critic network as described, we need to follow the steps outlined in the task. Given the fixed weights and biases, the calculations simplify significantly. Let's go through the implementation step-by-step:\n\n1. **ReLU Activation**: This activation function outputs the input directly if it is positive; otherwise, it outputs zero. In this network, the ReLU is applied after each dense layer except the output layers.\n\n2. **Softmax Activation**: This function converts logits into probabilities that sum to 1. Since all logits are identical, the softmax will yield equal probabilities for each action.\n\n3. **Network Layers**: The network consists of three dense layers followed by two separate output heads (actor and critic).\n\nHere's the implementation of the forward pass:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array for easier manipulation\n    s = np.array(state)\n    \n    # Dense-1: input \u2192 4 neurons, ReLU activation\n    z1 = np.maximum(0, np.sum(s))  # Each component of z1 is max(0, s0 + s1 + s2)\n    \n    # Dense-2: 4 \u2192 4 neurons, ReLU activation\n    z2 = np.maximum(0, 4 * z1)  # Each component of z2 is 4 * z1\n    \n    # Dense-3: 4 \u2192 4 neurons, ReLU activation\n    z3 = np.maximum(0, 4 * z2)  # Each component of z3 is 16 * z1\n    \n    # Actor head: 4 \u2192 3 neurons, Softmax activation\n    logits = 4 * z3  # Each component of logits is 64 * z1\n    action_probs = np.full(3, 1/3)  # Since all logits are identical, softmax gives equal probabilities\n    \n    # Critic head: 4 \u2192 1 neuron\n    state_value = 4 * z3  # The state value is 64 * z1\n    \n    # Round the results to 4 decimal places\n    action_probs = np.round(action_probs, 4).tolist()\n    state_value = round(state_value, 4)\n    \n    return action_probs, state_value\n\n# Example usage:\nstate = [1.0, 2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action Probabilities:\", action_probs)\nprint(\"State Value:\", state_value)\n```\n\n### Explanation:\n- **ReLU Layers**: The ReLU layers simply propagate the sum of the input state if it's positive, and zero otherwise. This is because all weights are 1 and biases are 0.\n- **Softmax Layer**: Since all logits are the same, the softmax function results in equal probabilities for each action.\n- **Critic Output**: The critic's output is a single scalar value derived from the final layer's output.\n\nThis code will correctly compute the action probabilities and state value for any given input state, adhering to the constraints and architecture specified."}
{"task_id": 249, "completion_id": 0, "completion": "To implement the forward pass of an Actor-Critic network using NumPy, we need to perform several matrix operations and apply activation functions. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef relu(x):\n    \"\"\"Applies the ReLU activation function.\"\"\"\n    return np.maximum(0, x)\n\ndef softmax(x):\n    \"\"\"Applies the softmax function.\"\"\"\n    exp_x = np.exp(x - np.max(x))  # Subtract max for numerical stability\n    return exp_x / np.sum(exp_x)\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a NumPy array\n    state = np.array(state)\n\n    # Extract parameters and convert them to NumPy arrays\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n\n    # Forward pass through shared layers\n    h1 = relu(np.dot(state, W1) + b1)\n    h2 = relu(np.dot(h1, W2) + b2)\n    h3 = relu(np.dot(h2, W3) + b3)\n\n    # Actor head: compute action scores and apply softmax\n    action_scores = np.dot(h3, Wa) + ba\n    probabilities = softmax(action_scores)\n\n    # Critic head: compute state value\n    state_value = np.dot(h3, Wc) + bc\n\n    # Round probabilities and state value to 4 decimal places\n    probabilities = [round(p, 4) if p != 0 and p != 1 else round(p, 1) for p in probabilities]\n    state_value = round(state_value.item(), 4) if state_value != 0 and state_value != 1 else round(state_value.item(), 1)\n\n    return probabilities, state_value\n\n# Example usage:\n# state = [0.1, 0.2, 0.3]\n# params = {\n#     'W1': [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]],\n#     'b1': [0.1, 0.2],\n#     'W2': [[0.1, 0.2], [0.3, 0.4]],\n#     'b2': [0.1, 0.2],\n#     'W3': [[0.1, 0.2], [0.3, 0.4]],\n#     'b3': [0.1, 0.2],\n#     'Wa': [[0.1, 0.2], [0.3, 0.4]],\n#     'ba': [0.1, 0.2],\n#     'Wc': [0.1, 0.2],\n#     'bc': [0.1]\n# }\n# probabilities, value = actor_critic_forward(state, params)\n# print(probabilities, value)\n```\n\nThis code defines the `actor_critic_forward` function, which performs the forward pass through the shared layers, computes the action probabilities using the actor head, and calculates the state value using the critic head. The results are rounded to the specified precision before being returned."}
{"task_id": 253, "completion_id": 0, "completion": "To implement the `elastic_net_regularization` function, we need to compute both the Elastic-Net penalty and its gradient based on the given weight vector `w`, regularization strength `alpha`, and L1 ratio `l1_ratio`. The function should handle both the calculation of the penalty and the gradient, depending on the `gradient` flag.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Ensure w is a NumPy array for vectorized operations\n    w = np.array(w)\n    \n    # Calculate the L1 norm (sum of absolute values)\n    l1_norm = np.sum(np.abs(w))\n    \n    # Calculate the L2 norm (Euclidean norm)\n    l2_norm = np.dot(w, w)\n    \n    if not gradient:\n        # Calculate the Elastic-Net penalty\n        penalty = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm)\n        return round(penalty, 4)\n    else:\n        # Calculate the gradient of the Elastic-Net penalty\n        l1_grad = np.sign(w)\n        l2_grad = w\n        gradient = alpha * (l1_ratio * l1_grad + (1 - l1_ratio) * l2_grad)\n        return [round(g, 4) for g in gradient]\n\n# Example usage:\nw = [1.0, -2.0, 3.0]\nalpha = 0.1\nl1_ratio = 0.5\n\n# Calculate penalty\npenalty = elastic_net_regularization(w, alpha, l1_ratio)\nprint(\"Penalty:\", penalty)\n\n# Calculate gradient\ngrad = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\nprint(\"Gradient:\", grad)\n```\n\n### Explanation:\n\n1. **Penalty Calculation**:\n   - The L1 norm is calculated as the sum of the absolute values of the weight vector `w`.\n   - The L2 norm is calculated as the dot product of `w` with itself, which is equivalent to the sum of squares of the elements of `w`.\n   - The penalty is then computed using the formula provided, and the result is rounded to 4 decimal places.\n\n2. **Gradient Calculation**:\n   - The gradient of the L1 norm is the sign of each element in `w`.\n   - The gradient of the L2 norm is simply `w` itself.\n   - The overall gradient is a combination of these two components, scaled by `alpha` and the respective ratios. Each element of the gradient is rounded to 4 decimal places.\n\nThis implementation ensures that the function can handle both the penalty and gradient calculations efficiently and correctly."}
{"task_id": 256, "completion_id": 0, "completion": "To implement the numerical gradient checker for a vanilla RNN parameter, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle special cases\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n\n    # Get the parameter to be checked\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros(param_shape, dtype=np.float64)\n\n    # Iterate over each element in the parameter\n    for index, _ in np.ndenumerate(param):\n        # Create perturbed parameters\n        param_plus_epsilon = deepcopy(param)\n        param_minus_epsilon = deepcopy(param)\n\n        param_plus_epsilon[index] += epsilon\n        param_minus_epsilon[index] -= epsilon\n\n        # Set the perturbed parameters in the model\n        model.parameters[param_name] = param_plus_epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            predictions_plus.append(model.forward(X[:, :, t]))\n        loss_plus = loss_func(predictions_plus)\n\n        model.parameters[param_name] = param_minus_epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            predictions_minus.append(model.forward(X[:, :, t]))\n        loss_minus = loss_func(predictions_minus)\n\n        # Compute the numerical gradient\n        grads[index] = (loss_plus - loss_minus) / (2 * epsilon)\n\n    # Restore the original parameter\n    model.parameters[param_name] = param\n\n    # Return the transposed gradient\n    return grads.T\n```\n\n### Explanation:\n\n1. **Special Cases Handling**: The function immediately returns `None` if `param_name` is \"X\" or \"y\". If `param_name` is \"Ba\" or \"Bx\", it converts them to lowercase to match the keys in the `parameters` dictionary.\n\n2. **Gradient Calculation**:\n   - For each element in the parameter, perturb it by `+\u03b5` and `-\u03b5`.\n   - For each perturbation, run the forward pass for `n_t` time-steps, collect predictions, and compute the loss.\n   - Use the centered finite difference formula to approximate the gradient.\n\n3. **Parameter Restoration**: After computing the gradient, restore the original parameter to ensure the model remains unchanged.\n\n4. **Return**: The function returns the transposed numerical gradient, ensuring the output shape matches the requirement.\n\nThis implementation should work correctly for any trainable parameter in the model's `parameters` dictionary."}
{"task_id": 257, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps from scratch, we need to follow these steps:\n\n1. **Initialize Weights**: Start with equal weights for all training samples.\n2. **Iteratively Build Stumps**: For each iteration, find the decision stump that minimizes the weighted error.\n3. **Compute Stump Weight**: Calculate the weight of the stump using the formula provided.\n4. **Update Weights**: Adjust the weights of the training samples based on the errors.\n5. **Aggregate Stump Votes**: For prediction, use the weighted sum of the stumps' predictions.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    classifiers = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_pred = None\n\n        for feature in range(n):\n            feature_values = np.unique(X_train[:, feature])\n            for threshold in feature_values:\n                for polarity in [1, -1]:\n                    stump_pred = np.ones(m)\n                    if polarity == 1:\n                        stump_pred[X_train[:, feature] < threshold] = -1\n                    else:\n                        stump_pred[X_train[:, feature] >= threshold] = -1\n\n                    error = np.sum(weights[y_train != stump_pred])\n\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature, threshold, polarity)\n                        best_pred = stump_pred\n\n        epsilon = min_error / np.sum(weights)\n        alpha = 0.5 * np.log((1 - epsilon) / (epsilon + 1e-10))\n        weights *= np.exp(-alpha * y_train * best_pred)\n        weights /= np.sum(weights)\n\n        classifiers.append(best_stump)\n        alphas.append(alpha)\n\n    def stump_predict(X, stump):\n        feature, threshold, polarity = stump\n        predictions = np.ones(X.shape[0])\n        if polarity == 1:\n            predictions[X[:, feature] < threshold] = -1\n        else:\n            predictions[X[:, feature] >= threshold] = -1\n        return predictions\n\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, classifiers):\n        final_predictions += alpha * stump_predict(X_test, stump)\n\n    return [1 if pred > 0 else -1 for pred in final_predictions]\n\n```\n\n### Explanation:\n\n- **Initialization**: We start by initializing the weights equally for all samples.\n- **Decision Stump**: For each feature and possible threshold, we evaluate the weighted error and select the best stump.\n- **Stump Weight**: The weight of each stump is calculated using the formula provided, which depends on the error rate.\n- **Weight Update**: We update the weights of the samples, increasing the weight of misclassified samples.\n- **Prediction**: For each test sample, we compute the weighted sum of the predictions from all stumps and determine the final class based on the sign of this sum.\n\nThis implementation should work efficiently for small to medium-sized datasets. For larger datasets, optimizations and more sophisticated data structures might be necessary."}
{"task_id": 261, "completion_id": 0, "completion": "To implement the Glorot Xavier Normal Initialization function, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        fan_in = shape[1] * np.prod(shape[2:])\n        fan_out = shape[0] * np.prod(shape[2:])\n\n    # Calculate the standard deviation\n    stddev = np.sqrt(2.0 / (fan_in + fan_out))\n\n    # Generate the array with the specified shape and standard deviation\n    return np.random.normal(loc=0.0, scale=stddev, size=shape)\n\n# Example usage:\n# shape = (64, 128, 3, 3)  # Example shape for a convolutional layer\n# weights = glorot_normal(shape)\n# print(weights.shape)  # Should print (64, 128, 3, 3)\n```\n\n### Explanation:\n\n1. **Shape Validation**: The function first checks if the provided shape has at least two dimensions. If not, it raises a `ValueError`.\n\n2. **Fan In and Fan Out Calculation**:\n   - For a 2-D shape, `fan_in` and `fan_out` are directly taken from the shape.\n   - For shapes with more than two dimensions, the receptive field size is calculated as the product of all dimensions after the first two. `fan_in` is calculated as `in_channels * receptive_field_size`, and `fan_out` is calculated as `out_channels * receptive_field_size`.\n\n3. **Standard Deviation Calculation**: The standard deviation `s` is computed using the formula `sqrt(2 / (fan_in + fan_out))`.\n\n4. **Array Generation**: A NumPy array is generated using `np.random.normal` with mean 0 and the calculated standard deviation, ensuring the array has the requested shape.\n\nThis implementation ensures that the generated weights are initialized according to the Glorot Xavier Normal Initialization method, which helps in maintaining a balanced flow of gradients during neural network training."}
{"task_id": 266, "completion_id": 0, "completion": "To solve the problem of building an adjacency list for an undirected graph, we need to follow these steps:\n\n1. **Initialize the adjacency list**: Create a dictionary where each vertex from `V` is a key, and the value is an empty list that will hold its neighbors.\n\n2. **Populate the adjacency list**: Iterate over the edge list `E` and for each edge `(u, v)`, add `v` to the adjacency list of `u` and `u` to the adjacency list of `v`. This accounts for the undirected nature of the graph.\n\n3. **Remove duplicates and sort neighbors**: For each vertex, remove duplicate neighbors and sort them according to their order of appearance in `V`.\n\n4. **Convert the dictionary to a list of lists**: Finally, convert the adjacency list from a dictionary to a list of lists, preserving the order of vertices as given in `V`.\n\nHere's the implementation of the function:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    # Initialize the adjacency list as a dictionary\n    adj_dict = {vertex: [] for vertex in V}\n    \n    # Populate the adjacency list\n    for u, v in E:\n        if v not in adj_dict[u]:\n            adj_dict[u].append(v)\n        if u not in adj_dict[v]:\n            adj_dict[v].append(u)\n    \n    # Convert the adjacency list to a list of lists\n    adj_list = []\n    for vertex in V:\n        # Sort neighbors according to their order in V\n        neighbors = adj_dict[vertex]\n        sorted_neighbors = sorted(neighbors, key=lambda x: V.index(x))\n        adj_list.append(sorted_neighbors)\n    \n    return adj_list\n\n# Example usage:\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('A', 'C'), ('B', 'C'), ('C', 'D'), ('A', 'B')]\nprint(build_adj_list(V, E))\n```\n\n### Explanation:\n\n- **Initialization**: We start by creating a dictionary `adj_dict` where each vertex in `V` maps to an empty list.\n\n- **Populating the adjacency list**: We iterate over each edge `(u, v)` in `E`. Since the graph is undirected, we add `v` to the list of neighbors for `u` and `u` to the list of neighbors for `v`. We ensure no duplicates are added by checking if the neighbor is already present in the list.\n\n- **Sorting and removing duplicates**: For each vertex, we sort its list of neighbors based on their order in `V`. This ensures the output is deterministic and easy to test.\n\n- **Conversion to list of lists**: Finally, we convert the dictionary to a list of lists, maintaining the order of vertices as given in `V`.\n\nThis implementation efficiently constructs the adjacency list while adhering to the constraints provided."}
{"task_id": 267, "completion_id": 0, "completion": "To solve the problem of finding the optimal weighted decision stump, we need to iterate over each feature and each unique value of that feature to determine the best threshold and polarity that minimizes the weighted classification error. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\n        \"feature_index\": None,\n        \"threshold\": None,\n        \"polarity\": None,\n        \"weighted_error\": float('inf')\n    }\n    \n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        \n        for threshold in unique_values:\n            for polarity in [1, -1]:\n                predictions = np.ones(n_samples)\n                if polarity == 1:\n                    predictions[feature_values >= threshold] = -1\n                else:\n                    predictions[feature_values < threshold] = -1\n                \n                misclassified = predictions != y\n                weighted_error = np.sum(sample_weights[misclassified])\n                \n                if weighted_error < best_stump[\"weighted_error\"]:\n                    best_stump[\"feature_index\"] = feature_index\n                    best_stump[\"threshold\"] = round(threshold, 4)\n                    best_stump[\"polarity\"] = polarity\n                    best_stump[\"weighted_error\"] = round(weighted_error, 4)\n    \n    return best_stump\n\n# Example usage:\n# X = np.array([[2.5, 3.0], [1.0, 2.0], [3.5, 4.0]])\n# y = np.array([1, -1, 1])\n# sample_weights = np.array([0.2, 0.5, 0.3])\n# print(train_decision_stump(X, y, sample_weights))\n```\n\n### Explanation:\n1. **Iterate Over Features**: We loop through each feature in the dataset.\n2. **Unique Thresholds**: For each feature, we consider all unique values as potential thresholds.\n3. **Polarity**: We test both polarities (1 and -1) for each threshold.\n4. **Prediction and Error Calculation**: For each combination of feature, threshold, and polarity, we calculate the predictions and the weighted classification error.\n5. **Update Best Stump**: If the current stump configuration results in a lower weighted error than previously found, we update the best stump information.\n6. **Return Best Stump**: After evaluating all possibilities, we return the best stump configuration.\n\nThis approach ensures that we find the optimal decision stump that minimizes the weighted classification error across all samples."}
{"task_id": 273, "completion_id": 0, "completion": "To solve the problem of finding the optimal numerical threshold for a decision-tree split based on information gain, we need to follow these steps:\n\n1. **Sort the feature values** and identify distinct values to determine candidate thresholds.\n2. **Calculate the entropy** of the parent node and each child node for every candidate threshold.\n3. **Compute the information gain** for each candidate threshold.\n4. **Select the threshold** that maximizes the information gain, ensuring to return the smallest threshold in case of ties.\n\nHere's the implementation of the `best_split` function:\n\n```python\nimport math\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0\n    label_counts = Counter(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / n\n        entropy_value -= probability * math.log2(probability)\n    return entropy_value\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Combine feature and target into a list of tuples and sort by feature values\n    data = sorted(zip(feature, target))\n    sorted_features = [x[0] for x in data]\n    sorted_targets = [x[1] for x in data]\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(sorted_targets)\n    \n    # Initialize variables to track the best threshold and maximum information gain\n    best_threshold = None\n    max_information_gain = 0.0\n    \n    # Iterate over possible split points\n    for i in range(1, len(sorted_features)):\n        if sorted_features[i] != sorted_features[i - 1]:\n            # Calculate the candidate threshold\n            threshold = (sorted_features[i] + sorted_features[i - 1]) / 2\n            \n            # Split the data into left and right based on the threshold\n            left_targets = sorted_targets[:i]\n            right_targets = sorted_targets[i:]\n            \n            # Calculate the entropy of the left and right nodes\n            left_entropy = entropy(left_targets)\n            right_entropy = entropy(right_targets)\n            \n            # Calculate the information gain\n            n = len(sorted_targets)\n            information_gain = parent_entropy - (len(left_targets) / n) * left_entropy - (len(right_targets) / n) * right_entropy\n            \n            # Update the best threshold if the current information gain is higher\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_threshold = threshold\n            elif information_gain == max_information_gain and best_threshold is not None:\n                best_threshold = min(best_threshold, threshold)\n    \n    # Round the results to 4 decimal places\n    if best_threshold is not None:\n        best_threshold = round(best_threshold, 4)\n    max_information_gain = round(max_information_gain, 4)\n    \n    # Return the best threshold and maximum information gain\n    return (best_threshold, max_information_gain)\n\n# Example usage:\n# feature = [2.0, 3.0, 1.0, 4.0]\n# target = [0, 1, 0, 1]\n# print(best_split(feature, target))  # Output: (2.5, 0.3113)\n```\n\n### Explanation:\n- **Entropy Calculation**: The `entropy` function computes the Shannon entropy for a given list of class labels.\n- **Sorting and Threshold Calculation**: The feature values are sorted, and candidate thresholds are calculated as the midpoint between consecutive distinct values.\n- **Information Gain Calculation**: For each candidate threshold, the data is split into left and right subsets, and the information gain is computed.\n- **Selection of Best Threshold**: The threshold with the highest information gain is selected, with ties resolved by choosing the smallest threshold.\n- **Output**: The function returns the best threshold and the corresponding information gain, both rounded to 4 decimal places."}
{"task_id": 286, "completion_id": 0, "completion": "To implement the `get_initializer` function and the initializer functions, we need to ensure that each initializer function returns a matrix of the specified shape and that `get_initializer` correctly retrieves the function based on the name provided. Here's the complete implementation:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    rows, cols = shape\n    return [[random.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage:\nname = \"ones_init\"\nshape = (2, 2)\ninit_fn = get_initializer(name)  # returns the function ones_init\noutput = init_fn(shape)          # [[1.0, 1.0], [1.0, 1.0]]\nprint(output)\n```\n\n### Explanation:\n\n1. **Initializer Functions**:\n   - `zeros_init`: Creates a matrix of zeros with the specified shape.\n   - `ones_init`: Creates a matrix of ones with the specified shape.\n   - `random_uniform_init`: Creates a matrix with random values uniformly distributed between `low` and `high`. The `seed` ensures deterministic results.\n\n2. **`get_initializer` Function**:\n   - Uses `globals()` to retrieve the object by name from the global namespace.\n   - Checks if the retrieved object is callable.\n   - Returns the callable if it exists; otherwise, raises a `ValueError` with the specified message.\n\nThis implementation allows dynamic retrieval of initializer functions based on their names, ensuring flexibility and ease of use in a deep-learning context."}
{"task_id": 287, "completion_id": 0, "completion": "To implement the forward and backward pass of a 2-D average-pooling layer, we need to follow these steps:\n\n1. **Forward Pass**: Compute the pooled output by sliding the pooling window over the input feature map and calculating the average of the elements within each window.\n\n2. **Backward Pass**: Distribute the gradient equally to each element that contributed to the pooled output during the forward pass.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate the dimensions of the output\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    \n    # Initialize the output and gradient input arrays\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n    \n    # Forward pass: Compute the pooled output\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    \n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, i, j] = np.mean(window)\n    \n    # Backward pass: Distribute the gradient\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    \n                    # Gradient to be distributed equally\n                    grad = accum_grad[n, c, i, j] / (p_h * p_w)\n                    \n                    # Distribute the gradient to the input\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += grad\n    \n    # Round to the nearest 4-th decimal and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n```\n\n### Explanation:\n\n- **Forward Pass**: We iterate over each batch, channel, and spatial position to apply the pooling window. The mean of the elements within the window is computed and stored in the `pooled_output`.\n\n- **Backward Pass**: For each position in the pooled output, we distribute the incoming gradient equally to all elements in the corresponding window of the input. This is done by dividing the gradient by the number of elements in the window (`p_h * p_w`) and adding it to the corresponding positions in `grad_input`.\n\n- **Output Formatting**: Both the pooled output and the gradient input are rounded to the nearest 4th decimal and converted to Python lists using `tolist()`."}
{"task_id": 290, "completion_id": 0, "completion": "To solve the task of comparing two decision trees recursively, we need to check both the structure and the values of the nodes and leaves. Here's how you can implement the `compare_trees` function:\n\n```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # If both are leaves, compare their values\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    \n    # If both are nodes, compare their features and thresholds, and recursively their children\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    \n    # If one is a leaf and the other is a node, they are not equivalent\n    return False\n```\n\n### Explanation:\n1. **Leaf Comparison**: If both nodes are leaves, we use `np.allclose` to compare their values with a tolerance of `1e-8`.\n\n2. **Node Comparison**: If both nodes are internal nodes, we first check if their `feature` indices are the same. Then, we check if their `threshold` values are close enough using `np.isclose` with the same tolerance. If both checks pass, we recursively compare their left and right children.\n\n3. **Type Mismatch**: If one node is a leaf and the other is an internal node, they are not equivalent, so we return `False`.\n\nThis recursive approach ensures that the entire structure and values of the trees are compared correctly."}
{"task_id": 292, "completion_id": 0, "completion": "To implement the single-point column crossover for neural-network weights, we can use NumPy for efficient matrix operations and slicing. Here's the complete function based on your requirements:\n\n```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to NumPy arrays for efficient operations\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    \n    # Get the number of columns\n    num_columns = parent1_np.shape[1]\n    \n    # Create children matrices by performing the crossover\n    child1_np = np.hstack((parent1_np[:, :cutoff], parent2_np[:, cutoff:]))\n    child2_np = np.hstack((parent2_np[:, :cutoff], parent1_np[:, cutoff:]))\n    \n    # Convert the NumPy arrays back to lists\n    child1 = child1_np.tolist()\n    child2 = child2_np.tolist()\n    \n    return (child1, child2)\n\n# Example usage:\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(children)\n```\n\n### Explanation:\n1. **Input Conversion**: The function first converts the input lists to NumPy arrays for efficient slicing and operations.\n2. **Shape Validation**: It checks if the shapes of the two parent matrices are identical. If not, it returns `-1`.\n3. **Crossover Operation**: Using NumPy's slicing capabilities, it creates two new children matrices by swapping columns after the specified `cutoff`.\n4. **Output Conversion**: The resulting NumPy arrays are converted back to Python lists using the `tolist()` method.\n5. **Return**: The function returns a tuple containing the two children matrices as lists.\n\nThis implementation efficiently handles the crossover operation and ensures the output is in the required format."}
{"task_id": 294, "completion_id": 0, "completion": "To convert the custom graph representation into a plain adjacency dictionary, we need to carefully handle both directed and undirected graphs, ensuring that the adjacency lists are sorted alphabetically. Here's how you can implement the `to_networkx` function:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G['is_directed']\n    vertex_to_index = G['_V2I']\n    graph_edges = G['_G']\n    \n    # Initialize the adjacency dictionary with empty lists for each vertex\n    adj = {vertex: [] for vertex in vertex_to_index.keys()}\n    \n    # Iterate over each vertex's edges\n    for index, edges in enumerate(graph_edges):\n        source_label = list(vertex_to_index.keys())[index]\n        for source, target, weight in edges:\n            # Add the edge to the adjacency list of the source vertex\n            adj[source].append((target, weight))\n            if not is_directed:\n                # Add the reverse edge for undirected graphs\n                adj[target].append((source, weight))\n    \n    # Sort the adjacency lists alphabetically by the neighbour label\n    for vertex in adj:\n        adj[vertex].sort(key=lambda x: x[0])\n    \n    return adj\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing an empty adjacency list for each vertex in the graph. This ensures that even vertices without edges are included in the result.\n\n2. **Edge Processing**: We iterate over the list of edges for each vertex. For directed graphs, we simply add the edge to the adjacency list of the source vertex. For undirected graphs, we also add the reverse edge to the adjacency list of the target vertex.\n\n3. **Sorting**: After processing all edges, we sort each vertex's adjacency list alphabetically by the neighbour label to ensure deterministic output.\n\n4. **Return**: Finally, we return the constructed adjacency dictionary.\n\nThis implementation handles both directed and undirected graphs correctly and ensures that the adjacency lists are sorted as required."}
{"task_id": 296, "completion_id": 0, "completion": "To solve the task of verifying whether all elements in a NumPy array are binary (either `0` or `1`), we can utilize NumPy's capabilities to efficiently check the conditions across the entire array. Here's the implementation of the `is_binary` function:\n\n```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array if it is not already one\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# x = np.array([0, 1, 1, 0])\n# print(is_binary(x))  # Output: True\n\n# x = np.array([0, 1, 2, 0])\n# print(is_binary(x))  # Output: False\n```\n\n### Explanation:\n1. **Conversion to NumPy Array**: The function first ensures that the input is a NumPy array using `np.asarray(x)`. This allows the function to handle array-like inputs seamlessly.\n\n2. **Element-wise Condition Check**: The expression `(x == 0) | (x == 1)` creates a boolean array where each element is `True` if the corresponding element in `x` is either `0` or `1`. The `|` operator is used for element-wise logical OR.\n\n3. **Overall Condition Check**: `np.all(...)` checks if all elements in the boolean array are `True`. If they are, it means all elements in the original array are binary, and the function returns `True`. Otherwise, it returns `False`.\n\nThis approach efficiently checks the binary condition across arrays of any shape and type, including integer, float, and boolean arrays."}
{"task_id": 298, "completion_id": 0, "completion": "To implement the Maximum Likelihood Estimation (MLE) N-gram language model, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus and query\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    tokenized_query = query.split()\n\n    # Check if the query is too short for the requested N\n    if len(tokenized_query) < N:\n        return float('-inf')\n\n    # Pad the sentences for N > 1\n    if N > 1:\n        tokenized_corpus = [['<bol>'] * (N - 1) + tokens + ['<eol>'] for tokens in tokenized_corpus]\n        tokenized_query = ['<bol>'] * (N - 1) + tokenized_query + ['<eol>']\n\n    # Count N-grams and (N-1)-gram prefixes in the corpus\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n\n    for tokens in tokenized_corpus:\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            prefix = tuple(tokens[i:i + N - 1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n\n    # Calculate the log-probability of the query\n    log_prob = 0.0\n\n    for i in range(len(tokenized_query) - N + 1):\n        ngram = tuple(tokenized_query[i:i + N])\n        prefix = tuple(tokenized_query[i:i + N - 1])\n\n        # Calculate the probability\n        if N == 1:\n            # Unigram case\n            count_ngram = ngram_counts[ngram]\n            total_tokens = sum(ngram_counts.values())\n            probability = count_ngram / total_tokens if total_tokens > 0 else 0\n        else:\n            count_ngram = ngram_counts[ngram]\n            count_prefix = prefix_counts[prefix]\n            probability = count_ngram / count_prefix if count_prefix > 0 else 0\n\n        # If the probability is zero, return negative infinity\n        if probability == 0:\n            return float('-inf')\n\n        # Add the log-probability\n        log_prob += math.log(probability)\n\n    # Round the result to 4 decimal places\n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\n### Explanation:\n1. **Tokenization**: We split each sentence in the corpus and the query into tokens.\n2. **Padding**: For N-grams where \\( N > 1 \\), we pad the token sequences with `<bol>` at the beginning and `<eol>` at the end.\n3. **Counting**: We count the occurrences of N-grams and their (N-1)-gram prefixes using `Counter`.\n4. **Probability Calculation**: We compute the MLE probability for each N-gram in the query. If any N-gram has zero probability, we return `float('-inf')`.\n5. **Log-Probability**: We sum the natural logarithms of the probabilities and round the result to 4 decimal places."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples = X.shape[0]\n\n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n\n    # Step 2: Compute the graph Laplacian L = D - W\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n\n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    idx = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, idx]\n\n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):  # Maximum of 100 iterations\n        # Assign labels based on closest centroid\n        for i in range(n_samples):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        for j in range(k):\n            cluster_points = E[labels == j]\n            if len(cluster_points) > 0:\n                new_centroids[j] = cluster_points.mean(axis=0)\n            else:\n                # Re-initialize empty cluster centroid with a random row of E\n                new_centroids[j] = E[np.random.choice(n_samples)]\n\n        # Check for convergence\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n\n    return labels.tolist()\n```\n\nThis implementation follows the steps outlined in the task description. It constructs the weighted adjacency matrix, computes the graph Laplacian, extracts the eigenvectors, and performs k-means clustering on the eigenvectors. The k-means implementation is deterministic due to the initial centroids being the first k rows of the eigenvector matrix, and it handles empty clusters by reinitializing their centroids with random rows from the eigenvector matrix."}
{"task_id": 303, "completion_id": 0, "completion": "To implement the `err_fmt` function according to the specified format, we need to carefully construct the debugging string using the provided parameters. Here's the complete implementation:\n\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    # Determine the previous index, ensuring it doesn't go below 0\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract previous and current elements\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    \n    # Construct the formatted string\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_str\n```\n\n### Explanation:\n1. **Index Handling**: We calculate `prev_ix` using `max(ix - 1, 0)` to ensure that when `ix` is 0, we still refer to the first element as the \"previous\" one.\n\n2. **String Construction**: We use formatted string literals (f-strings) to insert values into the debugging string. This ensures that the values are placed correctly and the format is maintained.\n\n3. **Warn String**: The `warn_str` is appended directly to the end of the \"Theirs [<curr_label>]\" section, exactly as provided, which may include leading newlines or other formatting.\n\n4. **Exact Formatting**: The number of dashes and line breaks are precisely controlled to match the required format. This ensures the output is consistent with the task description.\n\nThis function will return a string formatted exactly as specified, making it useful for debugging purposes by comparing the current output with the expected output."}
{"task_id": 304, "completion_id": 0, "completion": "To implement the function `bayesian_posterior_mean`, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    N, M = X.shape\n    \n    # Handle prior mean mu\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Handle prior scale V\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple, np.ndarray)) and len(V) == M:\n        V_inv = np.diag(1.0 / np.array(V))\n    else:\n        V_inv = np.linalg.inv(V)\n    \n    # Compute posterior covariance up to \u03c3\u00b2\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    \n    # Compute posterior mean of the coefficients\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    # Round the coefficients to 4 decimal places\n    return np.round(mu_b, 4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# result = bayesian_posterior_mean(X, y, mu=0.0, V=1.0, fit_intercept=True)\n# print(result)\n```\n\n### Explanation:\n1. **Intercept Handling**: If `fit_intercept` is `True`, we prepend a column of ones to `X` to account for the intercept term.\n\n2. **Prior Mean (`mu`)**: If `mu` is a scalar, it is broadcasted to a vector of length `M` (or `M+1` if intercept is fitted).\n\n3. **Prior Scale (`V`)**: \n   - If `V` is `None`, it defaults to the identity matrix.\n   - If `V` is a scalar, it is treated as `scalar * identity`.\n   - If `V` is a list or tuple, it is treated as a diagonal matrix.\n   - If `V` is a full matrix, we compute its inverse directly.\n\n4. **Posterior Computation**:\n   - Compute `Sigma_b`, the posterior covariance up to `\u03c3\u00b2`.\n   - Compute `mu_b`, the posterior mean of the coefficients.\n\n5. **Output**: The coefficients are rounded to 4 decimal places and returned as a list."}
{"task_id": 308, "completion_id": 0, "completion": "To construct the Mel filterbank matrix, we need to follow the steps outlined in the task description. Here's the implementation:\n\n```python\nimport numpy as np\n\ndef hz_to_mel(f: float) -> float:\n    \"\"\"Convert frequency in Hertz to Mel scale.\"\"\"\n    return 2595 * np.log10(1 + f / 700)\n\ndef mel_to_hz(mel: float) -> float:\n    \"\"\"Convert frequency in Mel scale to Hertz.\"\"\"\n    return 700 * (10**(mel / 2595) - 1)\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    # Convert frequency limits to Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate equally spaced points on the Mel scale\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel points back to Hertz\n    hz_points = mel_to_hz(mel_points)\n\n    # Convert Hertz to DFT bin numbers\n    bin_points = np.floor((N + 1) * hz_points / fs).astype(int)\n\n    # Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    # Construct the filters\n    for i in range(1, n_filters + 1):\n        # Left and right slopes\n        left = bin_points[i - 1]\n        center = bin_points[i]\n        right = bin_points[i + 1]\n\n        for k in range(left, center):\n            filterbank[i - 1, k] = (k - left) / (center - left)\n        for k in range(center, right):\n            filterbank[i - 1, k] = (right - k) / (right - center)\n\n        # Normalize the filter if required\n        if normalize:\n            filterbank[i - 1] *= 2 / (hz_points[i + 1] - hz_points[i - 1])\n\n    # Round the values to 4 decimal places and convert to list\n    return np.round(filterbank, 4).tolist()\n\n# Example usage:\n# mel_filters = mel_filterbank(N=1024, n_filters=20, fs=44100)\n# print(mel_filters)\n```\n\n### Explanation:\n1. **Conversion Functions**: We define helper functions `hz_to_mel` and `mel_to_hz` to convert between Hertz and Mel scales.\n\n2. **Frequency Limits**: We convert the minimum and maximum frequencies to the Mel scale.\n\n3. **Mel Points**: We generate `n_filters + 2` equally spaced points on the Mel scale and convert them back to Hertz.\n\n4. **DFT Bin Points**: We calculate the corresponding DFT bin numbers for these Hertz values.\n\n5. **Filter Construction**: For each filter, we compute the triangular shape by calculating the left and right slopes. The filter values are computed based on the position of the DFT bin within the triangle.\n\n6. **Normalization**: If normalization is enabled, we scale the filter to ensure its area in Mel space equals 1.\n\n7. **Output**: The filterbank matrix is rounded to 4 decimal places and returned as a list of lists.\n\nThis implementation should match the behavior of the reference implementation and produce a Mel filterbank matrix suitable for audio processing tasks."}
{"task_id": 312, "completion_id": 0, "completion": "To implement the Blackman\u2013Harris window generator, we need to follow the mathematical definition provided and handle the special cases. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    # Special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # Coefficients for the Blackman-Harris window\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n\n    # Determine N based on symmetric or periodic\n    N = window_len - 1 if symmetric else window_len\n\n    # Generate the window\n    n = np.arange(window_len)\n    window = (a0 \n              - a1 * np.cos(2 * np.pi * n / N) \n              + a2 * np.cos(4 * np.pi * n / N) \n              - a3 * np.cos(6 * np.pi * n / N))\n\n    # Round to 4 decimal places and convert to list\n    return np.round(window, 4).tolist()\n\n# Example usage:\nprint(blackman_harris(5, symmetric=True))\nprint(blackman_harris(5, symmetric=False))\n```\n\n### Explanation:\n1. **Special Cases**: \n   - If `window_len <= 0`, return an empty list.\n   - If `window_len == 1`, return `[1.0]`.\n\n2. **Coefficients**: The fixed coefficients `a0`, `a1`, `a2`, and `a3` are used in the formula.\n\n3. **N Calculation**: \n   - For symmetric windows, `N = L - 1`.\n   - For periodic windows, `N = L`.\n\n4. **Window Calculation**: \n   - Use `numpy` to efficiently compute the window values using the formula provided.\n\n5. **Rounding and Conversion**: \n   - Round each value to 4 decimal places using `np.round`.\n   - Convert the result to a Python list using `tolist()`.\n\nThis implementation should correctly generate the Blackman\u2013Harris window for both symmetric and periodic forms, handling all specified special cases."}
{"task_id": 313, "completion_id": 0, "completion": "To solve this problem, we need to implement the digamma function and use it to compute the expected logarithm of a Dirichlet component. The digamma function can be approximated using recursion for small values and an asymptotic expansion for larger values. Let's implement this step-by-step.\n\nHere's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function \u03c8(x) using recursion and asymptotic expansion.\"\"\"\n    # Use recursion to shift x to a larger value\n    if x <= 0:\n        raise ValueError(\"Digamma function is not defined for non-positive values.\")\n    \n    # Recursion to increase x to a moderate value\n    result = 0\n    while x < 6:\n        result -= 1 / x\n        x += 1\n    \n    # Asymptotic expansion for large x\n    # \u03c8(x) \u2248 ln(x) - 1/(2x) - 1/(12x\u00b2) + 1/(120x\u2074) - 1/(252x\u2076)\n    result += math.log(x) - 1/(2*x) - 1/(12*x**2) + 1/(120*x**4) - 1/(252*x**6)\n    \n    return result\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Convert gamma to a NumPy array if it's a list\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    \n    # Extract the relevant parameters\n    gamma_dt = gamma[d, t]\n    gamma_d_sum = np.sum(gamma[d, :])\n    \n    # Compute the expected log using the digamma function\n    expected_log = digamma(gamma_dt) - digamma(gamma_d_sum)\n    \n    # Return the result rounded to 4 decimal places\n    return round(expected_log, 4)\n\n# Example usage:\n# gamma = [[0.5, 1.5, 2.5], [1.0, 2.0, 3.0]]\n# print(expected_log_dirichlet(gamma, 0, 1))  # Example call\n```\n\n### Explanation:\n\n1. **Digamma Function Implementation**:\n   - We use recursion to increase `x` to a moderate value (at least 6) by subtracting `1/x` and incrementing `x`.\n   - For large `x`, we apply the asymptotic expansion to approximate the digamma function.\n\n2. **Expected Logarithm Calculation**:\n   - We extract the relevant parameters from the `gamma` matrix.\n   - We compute the expected log using the formula: `\u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:]))`.\n   - Finally, we round the result to four decimal places and return it.\n\nThis implementation should work efficiently for the given task constraints."}
{"task_id": 317, "completion_id": 0, "completion": "To tackle this task, we need to construct a formatted debug report based on the given inputs. The function `err_fmt` will take a list of prediction-label pairs, a dictionary of gold standard texts, an index to focus on, and an optional warning string. The output will be a multi-line string formatted according to the specified requirements.\n\nHere's how we can implement the function:\n\n```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the previous index, ensuring it doesn't go below 0\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract the previous and current prediction-label pairs\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Retrieve the corresponding gold texts from the golds dictionary\n    prev_gold = golds.get(prev_label, \"\")\n    curr_gold = golds.get(curr_label, \"\")\n    \n    # Construct the formatted debug string\n    debug_report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_report\n```\n\n### Explanation:\n\n1. **Index Handling**: We calculate `prev_ix` as `max(ix - 1, 0)` to ensure we don't go out of bounds when `ix` is 0.\n\n2. **Data Extraction**: We extract the prediction and label for both the current and previous indices. We also fetch the corresponding gold texts from the `golds` dictionary using these labels.\n\n3. **String Construction**: We construct the debug report string using formatted string literals (f-strings) to insert the extracted data into the specified format. The `warn_str` is appended directly after the current \"Theirs\" block.\n\n4. **Return**: The function returns the fully constructed debug report string.\n\nThis implementation ensures that the output matches the required format exactly, including all specified dashes and newlines."}
{"task_id": 318, "completion_id": 0, "completion": "To implement the AdaBoost algorithm from scratch using decision stumps, we need to follow these steps:\n\n1. Initialize weights for each training sample.\n2. For each boosting round, find the best decision stump that minimizes the weighted error.\n3. Calculate the weight of the stump in the final model.\n4. Update the sample weights based on the stump's performance.\n5. After training, use the ensemble of stumps to predict the labels for the test set.\n\nHere's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize weights\n    weights = np.ones(n_samples) / n_samples\n    # Store the stumps and their weights\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_estimators):\n        # Find the best decision stump\n        best_stump = None\n        best_error = float('inf')\n        best_predictions = None\n\n        for feature in range(n_features):\n            feature_values = X_train[:, feature]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(feature_values - threshold)\n                    error = np.sum(weights[y_train != predictions])\n\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature, threshold, polarity)\n                        best_predictions = predictions\n\n        # Calculate the weight of the stump\n        epsilon = best_error / np.sum(weights)\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * best_predictions)\n        weights /= np.sum(weights)  # Normalize\n\n        # Store the stump and its weight\n        stumps.append(best_stump)\n        stump_weights.append(alpha)\n\n    # Predict on the test set\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, (feature, threshold, polarity) in zip(stump_weights, stumps):\n        predictions = polarity * np.sign(X_test[:, feature] - threshold)\n        final_predictions += alpha * predictions\n\n    # Return the sign of the final predictions\n    return list(np.sign(final_predictions).astype(int))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1, 2], [3, 4]])\n# print(adaboost_predict(X_train, y_train, X_test, n_estimators=10))\n```\n\n### Explanation:\n- **Weights Initialization**: We start with equal weights for all samples.\n- **Decision Stump Selection**: For each feature and threshold, we evaluate the weighted error and select the stump with the lowest error.\n- **Stump Weight Calculation**: The weight of each stump is calculated using the formula provided, which depends on the error rate.\n- **Weights Update**: We update the sample weights to focus more on misclassified samples.\n- **Prediction**: The final prediction is the sign of the weighted sum of all stumps' predictions.\n\nThis implementation uses only `numpy` and `math` as required, and returns predictions as a list of integers `-1` or `1`."}
{"task_id": 329, "completion_id": 0, "completion": "To implement the function `dft_bins`, we need to calculate the frequency for each DFT bin based on the given formula. We'll use NumPy to help with the calculations, especially for the case when `positive_only` is `False`, where we need to mimic the behavior of `numpy.fft.fftfreq`. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    # Frequency resolution\n    delta_f = fs / N\n\n    if positive_only:\n        # Calculate non-negative frequencies\n        freqs = np.arange(0, N//2 + 1) * delta_f\n    else:\n        # Calculate full frequency list using numpy's fftfreq\n        freqs = np.fft.fftfreq(N, d=1/fs)\n\n    # Round to 4 decimal places and convert to list\n    return np.round(freqs, 4).tolist()\n\n# Example usage:\nprint(dft_bins(8, 44000, True))  # Positive frequencies\nprint(dft_bins(8, 44000, False)) # Full frequency list\n```\n\n### Explanation:\n1. **Input Validation**: We first check if `N` or `fs` is non-positive. If either is, we return an empty list.\n\n2. **Frequency Resolution**: We calculate the frequency resolution `delta_f` as `fs / N`.\n\n3. **Positive Frequencies**: If `positive_only` is `True`, we calculate frequencies from `0` to `N//2` using `np.arange`.\n\n4. **Full Frequency List**: If `positive_only` is `False`, we use `np.fft.fftfreq` to generate the full list of frequencies, which includes negative frequencies.\n\n5. **Rounding and Conversion**: We round the frequencies to 4 decimal places using `np.round` and convert the NumPy array to a Python list using `tolist()`.\n\nThis implementation efficiently handles both modes and ensures the output is correctly formatted and rounded."}
{"task_id": 331, "completion_id": 0, "completion": "To compute the out-of-bag mean squared error (OOB-MSE) for a Random Forest regressor, we need to follow these steps:\n\n1. For each sample, identify which trees are out-of-bag (OOB) using the `oob_mask`.\n2. For samples with at least one OOB prediction, calculate the average of these OOB predictions.\n3. Compute the squared error between this average and the true target value for each sample.\n4. Calculate the mean of these squared errors over all samples that have at least one OOB prediction.\n5. If no sample has an OOB prediction, return -1.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask)\n    \n    n_samples = y_true.shape[0]\n    oob_squared_errors = []\n    \n    for i in range(n_samples):\n        # Get the OOB predictions for the i-th sample\n        oob_predictions = predictions[i, oob_mask[i]]\n        \n        if oob_predictions.size > 0:\n            # Calculate the average of OOB predictions\n            oob_pred_mean = np.mean(oob_predictions)\n            # Calculate the squared error\n            squared_error = (oob_pred_mean - y_true[i]) ** 2\n            oob_squared_errors.append(squared_error)\n    \n    if len(oob_squared_errors) == 0:\n        return -1\n    \n    # Calculate the mean of the squared errors\n    oob_mse_value = np.mean(oob_squared_errors)\n    \n    # Return the OOB-MSE rounded to 4 decimal places\n    return round(oob_mse_value, 4)\n```\n\n### Explanation:\n- We iterate over each sample to check if it has any OOB predictions.\n- If a sample has OOB predictions, we compute the mean of these predictions and then calculate the squared error with respect to the true target value.\n- We collect all squared errors and compute their mean to get the OOB-MSE.\n- If no sample has OOB predictions, we return -1 as specified."}
{"task_id": 332, "completion_id": 0, "completion": "To construct an FP-Tree without using classes, we need to follow the steps outlined in the task description. Here's the implementation:\n\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree. Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_support = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        item_support.update(unique_items)\n\n    # Step 2: Discard items with support less than min_support\n    frequent_items = {item for item, support in item_support.items() if support >= min_support}\n\n    # Step 3: Create a global ordering of the remaining items\n    ordered_items = sorted(frequent_items, key=lambda item: (-item_support[item], item))\n\n    # Step 4: Build the FP-Tree\n    def insert_transaction(tree, transaction):\n        current_node = tree\n        current_node['support'] += 1\n        for item in transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n\n    # Initialize the root of the FP-Tree\n    fp_tree = {'support': 0, 'children': {}}\n\n    for transaction in transactions:\n        # Remove duplicates and keep only frequent items, reorder them\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        ordered_transaction = sorted(filtered_transaction, key=lambda item: ordered_items.index(item))\n        # Insert the ordered transaction into the FP-Tree\n        insert_transaction(fp_tree, ordered_transaction)\n\n    return fp_tree\n\n# Example usage:\ntransactions = [\n    ['a', 'b', 'c'],\n    ['a', 'c'],\n    ['a', 'b', 'd'],\n    ['b', 'c', 'e'],\n    ['a', 'b', 'c', 'e']\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\n### Explanation:\n1. **Support Calculation**: We use `Counter` to calculate the support for each item across all transactions.\n2. **Filter Items**: We filter out items that do not meet the minimum support threshold.\n3. **Global Ordering**: We sort the items first by decreasing support and then alphabetically to break ties.\n4. **Tree Construction**: We initialize the FP-Tree with a root node having support 0. For each transaction, we filter and reorder items, then insert them into the tree, updating the support of each node along the path.\n\nThis code will construct the FP-Tree as specified, using nested dictionaries to represent the tree structure."}
{"task_id": 336, "completion_id": 0, "completion": "To implement the `linear_kernel` function, we need to handle both lists and NumPy arrays as inputs, perform the necessary validation checks, and compute the kernel matrix. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", \n                  Y: list[list[int | float]] | \"np.ndarray\" | None = None, \n                  c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # If X is empty, return an empty list\n    if X.shape[0] == 0:\n        return []\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the result to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result to a list of lists\n    return K_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(linear_kernel(X, Y, c0=1))\n```\n\n### Explanation:\n\n1. **Input Conversion**: We first convert the input lists to NumPy arrays to leverage efficient numerical operations. This is done using `np.array()` with `dtype=float` to ensure floating-point precision.\n\n2. **Validation**: We check if the number of columns in `X` and `Y` match. If not, we return `-1`.\n\n3. **Empty Input Handling**: If `X` is empty, we return an empty list as specified.\n\n4. **Kernel Matrix Calculation**: We compute the dot product using `np.dot(X, Y.T)` and add the constant `c0`.\n\n5. **Rounding**: The resulting matrix is rounded to 4 decimal places using `np.round()`.\n\n6. **Output Conversion**: Finally, we convert the NumPy array back to a list of lists using `.tolist()` for the output format.\n\nThis implementation efficiently handles both lists and NumPy arrays, performs necessary checks, and computes the kernel matrix as required."}
{"task_id": 340, "completion_id": 0, "completion": "To implement the single-step Adam optimizer, we need to follow the update rules provided in the task description. Here's the complete function:\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    # Update biased first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update biased second raw moment estimate\n    v_t = beta2 * v + (1 - beta2) * grad**2\n    \n    # Compute bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - beta1**t)\n    \n    # Compute bias-corrected second raw moment estimate\n    v_hat_t = v_t / (1 - beta2**t)\n    \n    # Update parameters\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Convert results to lists and round to 8 decimal places\n    updated_param = np.round(param_t, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n    \n    return updated_param, new_m, new_v\n```\n\n### Explanation:\n1. **Moment Updates**: We update the first (`m_t`) and second (`v_t`) moment estimates using the exponential decay rates `beta1` and `beta2`.\n\n2. **Bias Correction**: The bias-corrected estimates `m_hat_t` and `v_hat_t` are computed to counteract the initialization bias.\n\n3. **Parameter Update**: The parameter `param_t` is updated using the Adam update rule, which involves dividing the bias-corrected first moment by the square root of the bias-corrected second moment plus a small constant `eps` to prevent division by zero.\n\n4. **Output**: The updated parameter, new moment, and new variance are returned as lists, rounded to 8 decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "To implement the core numerical step of the Cross-Entropy Method (CEM), we need to follow these steps:\n\n1. Sort the `theta_samples` based on the `rewards` in descending order.\n2. Retain the top `retain_prcnt` fraction of samples.\n3. Compute the mean and variance for each dimension of the retained samples.\n4. Return the mean and variance as lists, rounded to four decimal places.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Convert rewards to a numpy array if it's not already\n    rewards = np.array(rewards)\n    \n    # Determine the number of samples to retain\n    num_retain = int(retain_prcnt * len(rewards))\n    \n    # Get indices of the top rewards\n    top_indices = np.argsort(rewards)[-num_retain:]\n    \n    # Select the top samples based on the indices\n    elite_samples = theta_samples[top_indices]\n    \n    # Compute mean and variance for each dimension\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places and convert to lists\n    mean_rounded = np.round(mean, 4).tolist()\n    variance_rounded = np.round(variance, 4).tolist()\n    \n    return mean_rounded, variance_rounded\n```\n\n### Explanation:\n- **Sorting and Selection**: We use `np.argsort` to get the indices that would sort the rewards in ascending order, and then select the last `num_retain` indices to get the top rewards.\n- **Mean and Variance Calculation**: We calculate the mean and variance along the columns (axis=0) of the retained samples.\n- **Rounding**: We use `np.round` to ensure the results are rounded to four decimal places before converting them to lists for the final output."}
{"task_id": 353, "completion_id": 0, "completion": "To implement the `entropy` function, we need to calculate the probabilities of each unique class label in the input sequence and then compute the Shannon entropy using the formula provided. Here's the complete implementation:\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Convert labels to a list if it's not already one\n    if isinstance(labels, np.ndarray):\n        labels = labels.tolist()\n    \n    # Handle the special case where the input is empty\n    if not labels:\n        return 0.0\n    \n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    \n    # Calculate the probabilities of each label\n    probabilities = [count / total_count for count in label_counts.values()]\n    \n    # Calculate the entropy using the formula\n    entropy_value = -sum(p * math.log2(p) for p in probabilities if p > 0)\n    \n    # Round the result to 5 decimal places\n    return round(entropy_value, 5)\n\n# Example usage:\n# labels = ['a', 'b', 'a', 'a', 'b', 'c']\n# print(entropy(labels))  # Output: 1.45914\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input is a NumPy array and converts it to a list. This ensures compatibility with different iterable types.\n\n2. **Empty Input**: If the input is empty, the function returns `0.0` immediately.\n\n3. **Counting Labels**: We use `Counter` from the `collections` module to count occurrences of each label.\n\n4. **Probability Calculation**: We calculate the probability of each label by dividing its count by the total number of labels.\n\n5. **Entropy Calculation**: We compute the entropy using the formula provided, ensuring that we only consider probabilities greater than zero to avoid math domain errors.\n\n6. **Rounding**: The final entropy value is rounded to five decimal places before returning.\n\nThis implementation efficiently calculates the Shannon entropy for a given sequence of class labels, handling special cases as specified."}
{"task_id": 354, "completion_id": 0, "completion": "To implement the 2-D convolution using the `im2col` method, we need to follow these steps:\n\n1. **Padding**: Adjust the input array based on the padding specification.\n2. **Dilation**: Modify the kernel to account for dilation by inserting zeros between kernel elements.\n3. **im2col Transformation**: Convert the input image into columns so that each column represents a region of the image that the kernel will convolve with.\n4. **Matrix Multiplication (GEMM)**: Perform a matrix multiplication between the transformed input and the reshaped kernel.\n5. **Reshape the Result**: Convert the result back to the desired output shape.\n6. **Return as List**: Convert the final NumPy array to a Python list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Handle padding\n    if isinstance(pad, int):\n        pr1 = pr2 = pc1 = pc2 = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pr1 = pr2 = pad[0]\n        pc1 = pc2 = pad[1]\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pr1, pr2, pc1, pc2 = pad\n    elif pad == 'same':\n        pr1 = pr2 = (kernel_rows - 1) // 2\n        pc1 = pc2 = (kernel_cols - 1) // 2\n    else:\n        raise ValueError(\"Invalid padding specification\")\n\n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n\n    # Calculate output dimensions\n    out_rows = (in_rows + pr1 + pr2 - (kernel_rows - 1) * (dilation + 1) - 1) // stride + 1\n    out_cols = (in_cols + pc1 + pc2 - (kernel_cols - 1) * (dilation + 1) - 1) // stride + 1\n\n    # Dilation\n    if dilation > 0:\n        dilated_kernel_rows = kernel_rows + (kernel_rows - 1) * dilation\n        dilated_kernel_cols = kernel_cols + (kernel_cols - 1) * dilation\n        W_dilated = np.zeros((dilated_kernel_rows, dilated_kernel_cols, in_ch, out_ch))\n        for i in range(kernel_rows):\n            for j in range(kernel_cols):\n                W_dilated[i * (dilation + 1), j * (dilation + 1)] = W[i, j]\n        W = W_dilated\n        kernel_rows, kernel_cols = dilated_kernel_rows, dilated_kernel_cols\n\n    # im2col transformation\n    i0 = np.repeat(np.arange(kernel_rows), kernel_cols)\n    i0 = np.tile(i0, in_ch)\n    i1 = stride * np.repeat(np.arange(out_rows), out_cols)\n    j0 = np.tile(np.arange(kernel_cols), kernel_rows * in_ch)\n    j1 = stride * np.tile(np.arange(out_cols), out_rows)\n    i = i0.reshape(-1, 1) + i1.reshape(1, -1)\n    j = j0.reshape(-1, 1) + j1.reshape(1, -1)\n    k = np.repeat(np.arange(in_ch), kernel_rows * kernel_cols).reshape(-1, 1)\n\n    cols = X_padded[:, i, j, k]\n    cols = cols.transpose(1, 2, 0).reshape(kernel_rows * kernel_cols * in_ch, -1)\n\n    # Reshape W for matrix multiplication\n    W_reshaped = W.reshape(-1, out_ch)\n\n    # Perform matrix multiplication\n    out = W_reshaped.T @ cols\n    out = out.reshape(out_ch, out_rows, out_cols, n_ex)\n    out = out.transpose(3, 1, 2, 0)\n\n    # Convert to list\n    return out.tolist()\n```\n\nThis implementation handles different padding specifications, dilation, and performs the convolution using the `im2col` method followed by a matrix multiplication. The result is reshaped to the desired output dimensions and returned as a Python list."}
{"task_id": 355, "completion_id": 0, "completion": "To implement the PCA with deterministic sign fix, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    mean_centered_data = data - np.mean(data, axis=0)\n    \n    if solver == \"svd\":\n        # Step 2: Use SVD to obtain principal directions\n        U, S, Vt = np.linalg.svd(mean_centered_data, full_matrices=False)\n        components = Vt[:n_components]\n        explained_variance = (S**2) / (data.shape[0] - 1)\n    elif solver == \"eigen\":\n        # Step 2: Compute covariance matrix and use eigen-decomposition\n        covariance_matrix = np.cov(mean_centered_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n        # Sort eigenvalues and eigenvectors in descending order\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        components = eigenvectors[:, sorted_indices[:n_components]].T\n        explained_variance = eigenvalues[sorted_indices]\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'.\")\n\n    # Step 3: Sort directions by explained variance and keep the first n_components\n    explained_variance_ratio = explained_variance / np.sum(explained_variance)\n    explained_variance_ratio = explained_variance_ratio[:n_components]\n\n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        first_non_zero_index = np.argmax(np.abs(components[i]) > 1e-10)\n        if components[i, first_non_zero_index] < 0:\n            components[i] = -components[i]\n\n    # Step 5: Project the centred data onto the retained directions\n    scores = mean_centered_data @ components.T\n\n    # Step 6: Return the scores and explained variance ratio\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance_ratio, 4).tolist()\n\n    return scores, explained_variance_ratio\n```\n\n### Explanation:\n1. **Standardization**: We subtract the mean of each feature from the data to center it.\n2. **SVD Solver**: We use `np.linalg.svd` to decompose the centered data and obtain the principal components.\n3. **Eigen Solver**: We compute the covariance matrix and use `np.linalg.eigh` to get eigenvalues and eigenvectors.\n4. **Sorting and Selection**: We sort the components based on the explained variance and select the top `n_components`.\n5. **Sign Fix**: We ensure the sign of each component is deterministic by checking the first non-zero element.\n6. **Projection**: We project the data onto the selected components and return the scores and explained variance ratio, both rounded to 4 decimal places."}
{"task_id": 356, "completion_id": 0, "completion": "To complete the `leaf_predict` function, we need to handle two scenarios based on the `classifier` flag. If `classifier` is `True`, we should return the index of the largest probability from the `value` attribute of the `Leaf` instance. If `classifier` is `False`, we should return the scalar value directly.\n\nHere's the implementation:\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the largest probability\n        return int(numpy.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value directly\n        return leaf.value\n```\n\n### Explanation:\n- **Classification**: When `classifier` is `True`, we use `numpy.argmax` to find the index of the maximum value in the `leaf.value` list or tuple. This index corresponds to the predicted class.\n- **Regression**: When `classifier` is `False`, we simply return the `leaf.value` as it is, since it represents the mean of the target values in that region.\n\nMake sure to import `numpy` at the beginning of your script if it's not already imported:\n\n```python\nimport numpy\n```\n\nThis implementation assumes that `leaf.value` is either a list/tuple of probabilities for classification or a single scalar for regression."}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Step 1: Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign samples to the nearest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        closest_centroids = np.argmin(distances, axis=1)\n        \n        # Step 3: Recompute centroids\n        new_centroids = np.array([\n            data[closest_centroids == k].mean(axis=0) if np.any(closest_centroids == k) else centroids[k]\n            for k in range(K)\n        ])\n        \n        # Check for convergence\n        if np.allclose(new_centroids, centroids, atol=1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 4: Sort centroids lexicographically and round to four decimals\n    sorted_centroids = sorted(centroids.tolist())\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n    \n    return rounded_centroids\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))  # Output: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```\n\n### Explanation:\n1. **Initialization**: The centroids are initialized using the first `K` samples from the data.\n2. **Assignment**: Each sample is assigned to the nearest centroid using Euclidean distance.\n3. **Update**: Centroids are updated to be the mean of the samples assigned to them. If a centroid loses all its samples, it remains unchanged.\n4. **Convergence Check**: The algorithm stops early if centroids do not change significantly (within a tolerance of `1e-6`).\n5. **Sorting and Rounding**: The final centroids are sorted lexicographically and rounded to four decimal places before returning."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input data to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row by its sum\n    normalized_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round each element to 4 decimal places\n    rounded_matrix = np.round(normalized_matrix, 4)\n    \n    # Convert the result to a native Python list\n    return rounded_matrix.tolist()\n\n# Example usage:\ndata = [[0.5, 0.5], [1, 2, 3], [0, 0, 0]]\nresult = row_stochastic_matrix(data)\nprint(result)  # Output: [[0.5, 0.5], [0.1667, 0.3333, 0.5], -1]\n```\n\nThis function first converts the input data into a NumPy array of floats, ensuring that all calculations are performed with floating-point precision. It then calculates the sum of each row and checks if any row has a sum of zero, returning `-1` if normalization is impossible. Otherwise, it normalizes each row by dividing its elements by the row sum, rounds the results to four decimal places, and converts the final matrix back to a native Python list using `tolist()`."}
{"task_id": 363, "completion_id": 0, "completion": "To implement the `is_continuous` function, we need to check the type of the spaces in the environment and determine if they are continuous based on the given flags. Here's how you can complete the function:\n\n```python\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def is_space_continuous(space, is_tuple):\n        if isinstance(space, Box):\n            return True\n        elif is_tuple and isinstance(space, (Tuple, Dict)):\n            return all(isinstance(sub_space, Box) for sub_space in space.spaces.values() if isinstance(space, Dict)) or \\\n                   all(isinstance(sub_space, Box) for sub_space in space.spaces if isinstance(space, Tuple))\n        return False\n\n    cont_action = is_space_continuous(env.action_space, tuple_action)\n    cont_obs = is_space_continuous(env.observation_space, tuple_obs)\n\n    return cont_action, cont_obs\n```\n\n### Explanation:\n\n1. **Helper Function `is_space_continuous`:**\n   - This function checks if a given space is continuous.\n   - If the space is a `Box`, it is directly considered continuous.\n   - If the space is composite (`Tuple` or `Dict`) and the corresponding flag (`is_tuple`) is `True`, it checks if all sub-spaces are `Box`.\n   - For `Dict`, it iterates over the values of the dictionary, and for `Tuple`, it iterates over the elements of the tuple.\n\n2. **Main Function Logic:**\n   - We use the helper function to check both `action_space` and `observation_space` based on the flags `tuple_action` and `tuple_obs`.\n   - Return a tuple `(cont_action, cont_obs)` indicating the continuity of the action and observation spaces.\n\nThis implementation correctly handles the composite spaces and checks for continuity based on the provided flags."}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    if regression:\n        # For regression, return the running prediction rounded to 4 decimals\n        return np.round(running_pred, 4)\n    else:\n        # For classification, apply softmax and return the predicted class indices\n        exp_logits = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# updates = [np.array([[0.1, 0.2], [0.3, 0.4]]), np.array([[0.05, 0.1], [0.15, 0.2]])]\n# learning_rate = 0.1\n# regression = False\n# print(gradient_boosting_predict(updates, learning_rate, regression))\n```\n\n### Explanation:\n1. **Initialization**: The function starts by initializing `running_pred` with zeros, matching the shape of the first update array.\n2. **Aggregation**: It iterates over each update in the `updates` list, subtracting the scaled update from `running_pred`.\n3. **Regression**: If `regression` is `True`, the function rounds the `running_pred` to 4 decimal places and returns it.\n4. **Classification**: If `regression` is `False`, it applies the softmax function to convert logits to probabilities and uses `argmax` to determine the predicted class indices. The softmax is computed in a numerically stable way by subtracting the maximum value in each row before exponentiation."}
{"task_id": 371, "completion_id": 0, "completion": "To implement the 1-D cross-correlation with support for batches, multiple channels, strides, padding, and dilation, we need to carefully handle each of these features. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Calculate effective kernel width with dilation\n    effective_kernel_width = (kernel_width - 1) * (dilation + 1) + 1\n    \n    # Determine padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding value\")\n    \n    # Pad the input signal\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant', constant_values=0)\n    \n    # Calculate output length\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n    \n    # Initialize output\n    output = np.zeros((n_examples, output_length, out_channels))\n    \n    # Perform cross-correlation\n    for example in range(n_examples):\n        for out_channel in range(out_channels):\n            for i in range(output_length):\n                start = i * stride\n                end = start + effective_kernel_width\n                for in_channel in range(in_channels):\n                    # Extract the relevant segment from the padded input\n                    segment = X_padded[example, start:end:dilation+1, in_channel]\n                    # Perform element-wise multiplication and sum\n                    output[example, i, out_channel] += np.sum(segment * W[:, in_channel, out_channel])\n    \n    return output.tolist()\n\n# Example usage:\n# X = np.random.rand(2, 10, 3)  # 2 examples, signal length 10, 3 input channels\n# W = np.random.rand(3, 3, 4)   # kernel width 3, 3 input channels, 4 output channels\n# result = conv1D(X, W, stride=1, pad=\"same\", dilation=0)\n# print(result)\n```\n\n### Explanation:\n1. **Padding Calculation**: The function supports three types of padding: integer, tuple, and \"same\". The \"same\" padding is calculated to ensure the output length matches the input length divided by the stride.\n\n2. **Dilation**: The effective kernel width is calculated considering the dilation, which inserts zeros between kernel elements.\n\n3. **Cross-Correlation**: The function iterates over each example, output channel, and position in the output signal, extracting the relevant segment from the padded input and performing element-wise multiplication with the kernel.\n\n4. **Output**: The result is returned as a nested Python list using `ndarray.tolist()`."}
{"task_id": 373, "completion_id": 0, "completion": "To calculate the Gini impurity of a sequence of integer labels, we need to determine the relative frequency of each class in the sequence and use these frequencies to compute the impurity. Here's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # If the input sequence is empty, return 0.0\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert input to a NumPy array if it's not already\n    y = np.array(y)\n    \n    # Calculate the total number of samples\n    N = len(y)\n    \n    # Find the unique classes and their counts\n    unique, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the relative frequencies (probabilities) of each class\n    probabilities = counts / N\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\n# labels = [0, 1, 0, 1, 1, 0, 2, 2]\n# print(gini(labels))  # Output: 0.6250\n```\n\n### Explanation:\n1. **Empty Input Handling**: If the input sequence is empty, the function returns `0.0` as specified.\n2. **Conversion to NumPy Array**: The input is converted to a NumPy array to facilitate operations like finding unique elements and their counts.\n3. **Unique Classes and Counts**: `np.unique` is used to find the unique class labels and their respective counts in the sequence.\n4. **Relative Frequencies**: The relative frequency of each class is calculated by dividing the count of each class by the total number of samples.\n5. **Gini Impurity Calculation**: The Gini impurity is computed using the formula \\(1 - \\sum p_c^2\\), where \\(p_c\\) is the relative frequency of class \\(c\\).\n6. **Rounding**: The result is rounded to 4 decimal places before returning.\n\nThis implementation efficiently calculates the Gini impurity for a given sequence of labels, adhering to the specified requirements."}
{"task_id": 374, "completion_id": 0, "completion": "To implement a multiple linear regression model using batch gradient descent, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the input data are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Perform gradient descent\n    for _ in range(n_iterations):\n        # Compute predictions\n        y_hat = X.dot(theta) + b\n        \n        # Compute gradients\n        error = y_hat - y\n        dw = (2/m) * X.T.dot(error)\n        db = (2/m) * np.sum(error)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the results to 4 decimal places\n    theta_rounded = np.round(theta, 4).tolist()\n    b_rounded = round(b, 4)\n    \n    return (theta_rounded, b_rounded)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([5, 7, 9])\n# weights, bias = linear_regression_gd(X, y)\n# print(weights, bias)\n```\n\n### Explanation:\n\n1. **Input Validation**: We first check if the number of samples in `X` and `y` are consistent. If not, we return `-1`.\n\n2. **Initialization**: We initialize the weight vector `theta` with zeros and the bias `b` with zero. The dimensions of `theta` are determined by the number of features `n` in `X`.\n\n3. **Gradient Descent Loop**: We iterate for a specified number of iterations (`n_iterations`):\n   - Compute the predicted values `y_hat` using the current `theta` and `b`.\n   - Calculate the error between the predicted values and the actual target values `y`.\n   - Compute the gradients `dw` and `db` for the weights and bias, respectively.\n   - Update the weights `theta` and bias `b` using the computed gradients and the specified `learning_rate`.\n\n4. **Rounding**: After completing the iterations, we round the learned parameters to 4 decimal places before returning them.\n\nThis implementation will train a multiple linear regression model using batch gradient descent and return the learned weights and bias."}
{"task_id": 376, "completion_id": 0, "completion": "To solve the problem of checking whether a given 2-D numeric array is symmetric with respect to its main diagonal, we can follow these steps:\n\n1. **Check if the matrix is square**: A matrix is square if the number of rows is equal to the number of columns.\n2. **Check symmetry**: For a matrix to be symmetric, the element at position (i, j) must be equal to the element at position (j, i) for all valid indices i and j. Given the potential for floating-point precision issues, we will use NumPy's `allclose` function to compare the elements.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Check if the matrix is square\n    if not X or len(X) != len(X[0]):\n        return False\n    \n    # Convert the list of lists to a NumPy array for easier manipulation\n    matrix = np.array(X)\n    \n    # Check if the matrix is equal to its transpose using allclose for floating-point comparison\n    return np.allclose(matrix, matrix.T, atol=1e-8)\n\n# Example usage:\n# matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n# print(is_symmetric(matrix))  # Output: True\n```\n\n### Explanation:\n\n- **Square Check**: The function first checks if the matrix is square by comparing the number of rows and columns. If they are not equal, the function returns `False`.\n- **Symmetry Check**: The function uses NumPy to convert the list of lists into an array, which allows us to easily compute the transpose of the matrix. It then uses `np.allclose` to compare the matrix with its transpose, allowing for a small tolerance (`atol=1e-8`) to account for floating-point inaccuracies.\n- **Return Value**: The function returns `True` if the matrix is symmetric and `False` otherwise."}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient for logistic loss used in Gradient Boosting for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: Negative gradients rounded to four decimal places, or -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    # Check if all elements in y are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to {-1, 1}\n    y_prime = [2 * label - 1 for label in y]\n    \n    # Calculate negative gradients\n    gradients = []\n    for y_i, f_i in zip(y_prime, f):\n        gradient = y_i / (1 + np.exp(y_i * f_i))\n        gradients.append(round(gradient, 4))\n    \n    return gradients\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if all elements in the `y` list are either 0 or 1. If not, it returns `-1`.\n\n2. **Label Conversion**: The binary labels are converted to the set {-1, 1} using the transformation `y' = 2y - 1`.\n\n3. **Gradient Calculation**: For each pair of `y'` and `f`, the negative gradient is calculated using the formula `g\u1d62 = y\u2032\u1d62 / (1 + exp(y\u2032\u1d62 f\u1d62))`.\n\n4. **Rounding**: Each calculated gradient is rounded to four decimal places before being added to the result list.\n\n5. **Return**: The function returns the list of rounded negative gradients."}
{"task_id": 380, "completion_id": 0, "completion": "To implement the SELU activation function and its derivatives, we need to handle both scalar and array inputs, compute the SELU function, and calculate its first and second derivatives. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to numpy array for easier manipulation\n    x = np.asarray(x)\n    \n    # Compute SELU activation\n    if order == 0:\n        selu_result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    \n    # Compute first derivative of SELU\n    elif order == 1:\n        selu_result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    \n    # Compute second derivative of SELU\n    elif order == 2:\n        selu_result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    \n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    rounded_result = np.round(selu_result, 4)\n    \n    # Return as list if input was array-like, or as scalar if input was scalar\n    if np.isscalar(x):\n        return rounded_result.item()\n    else:\n        return rounded_result.tolist()\n\n# Example usage:\n# print(selu([1.0, -1.0, 0.0], order=0))\n# print(selu([1.0, -1.0, 0.0], order=1))\n# print(selu([1.0, -1.0, 0.0], order=2))\n```\n\n### Explanation:\n- **SELU Activation**: For `order = 0`, the SELU function is computed using the formula provided. It uses the ELU function for negative values and scales the result.\n- **First Derivative**: For `order = 1`, the derivative is `scale` for positive values and `scale * alpha * exp(x)` for negative values.\n- **Second Derivative**: For `order = 2`, the second derivative is `0` for positive values and `scale * alpha * exp(x)` for negative values.\n- **Handling Input**: The function uses `np.asarray` to handle both scalar and array inputs uniformly. It preserves the input shape and returns results rounded to 4 decimal places.\n- **Output**: The result is converted to a list using `tolist()` for array inputs, and returned as a scalar for scalar inputs."}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    \n    # Initial prediction is the mean of the targets\n    y_pred = np.full(N, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort samples by x value\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        \n        # Initialize variables to find the best split\n        best_split = None\n        min_error = float('inf')\n        \n        # Evaluate possible splits\n        for i in range(1, N):\n            if x_sorted[i] == x_sorted[i - 1]:\n                continue\n            \n            # Calculate split point\n            split_point = (x_sorted[i] + x_sorted[i - 1]) / 2\n            \n            # Calculate mean residuals on both sides of the split\n            left_mask = x_sorted <= split_point\n            right_mask = ~left_mask\n            \n            r_L = np.mean(residuals_sorted[left_mask])\n            r_R = np.mean(residuals_sorted[right_mask])\n            \n            # Calculate sum of squared errors\n            error = np.sum((residuals_sorted[left_mask] - r_L) ** 2) + np.sum((residuals_sorted[right_mask] - r_R) ** 2)\n            \n            # Update best split if current error is smaller\n            if error < min_error:\n                min_error = error\n                best_split = split_point\n                best_r_L = r_L\n                best_r_R = r_R\n        \n        # If no valid split was found, use global mean residual\n        if best_split is None:\n            r_hat = np.mean(residuals)\n            y_pred += learning_rate * r_hat\n        else:\n            # Update predictions based on the best split\n            y_pred += learning_rate * np.where(x <= best_split, best_r_L, best_r_R)\n    \n    # Round predictions to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n```\n\nThis implementation follows the described procedure for gradient boosting with one-dimensional stumps. It iteratively updates predictions based on the best split found in each boosting round, using the mean residuals on either side of the split. The final predictions are rounded to four decimal places and returned as a Python list."}
{"task_id": 394, "completion_id": 0, "completion": "Certainly! Below is the implementation of the RMSprop update step as described in your task:\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    \n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of squared gradients\n    Eg_next = rho * Eg + (1 - rho) * grad**2\n    \n    # Update the parameters\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n    \n    # Round to 4 decimal places and convert to regular Python lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    \n    return w_next_rounded, Eg_next_rounded\n\n# Example usage:\n# w = np.array([0.5, -0.3])\n# grad = np.array([0.1, -0.2])\n# Eg = None\n# learning_rate = 0.01\n# rho = 0.9\n# w_next, Eg_next = rmsprop_update(w, grad, Eg, learning_rate, rho)\n# print(w_next, Eg_next)\n```\n\n### Explanation:\n1. **Initialization**: If `Eg` is `None`, it is initialized to a zero array of the same shape as `grad`.\n2. **Running Average Update**: The running average of squared gradients `Eg_next` is updated using the formula provided.\n3. **Parameter Update**: The parameter vector `w_next` is updated using the RMSprop formula, which scales the gradient by the inverse square root of the running average plus a small constant `epsilon` for numerical stability.\n4. **Rounding and Conversion**: Both `w_next` and `Eg_next` are rounded to 4 decimal places and converted to regular Python lists before returning.\n\nThis implementation should meet all the requirements specified in your task."}
{"task_id": 398, "completion_id": 0, "completion": "To implement the ELU activation function and its gradient, we can use NumPy for efficient element-wise operations. Here's the complete function:\n\n```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for efficient computation\n    x = np.array(x, dtype=float)\n    \n    if derivative:\n        # Compute the gradient of ELU\n        grad = np.where(x >= 0, 1, alpha * (np.exp(x) - 1) + alpha)\n        # Round each element to 4 decimal places\n        return np.round(grad, 4).tolist()\n    else:\n        # Compute the ELU activation\n        activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        # Round each element to 4 decimal places\n        return np.round(activation, 4).tolist()\n\n# Example usage:\nx = [-1.0, 0.0, 1.0, 2.0]\nalpha = 0.1\nprint(elu(x, alpha))  # ELU activation\nprint(elu(x, alpha, derivative=True))  # ELU gradient\n```\n\n### Explanation:\n1. **Input Handling**: The input `x` is converted to a NumPy array to leverage efficient element-wise operations.\n2. **ELU Activation**: For each element in `x`, if the element is non-negative, it remains unchanged. If it's negative, the ELU formula `\u03b1(e\u02e3 \u2212 1)` is applied.\n3. **Gradient Calculation**: For the gradient, if the element is non-negative, the derivative is `1`. If it's negative, the derivative is `ELU(x, \u03b1) + \u03b1`.\n4. **Rounding**: The results are rounded to 4 decimal places using `np.round` and converted back to a Python list with `tolist()`.\n\nThis function efficiently computes both the ELU activation and its gradient, adhering to the specified output constraints."}
{"task_id": 411, "completion_id": 0, "completion": "To implement the `env_stats` function, we need to analyze the input lists of actions and observations to extract the required statistics. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze_data(data):\n        # Check if data is multi-dimensional\n        is_tuple = any(isinstance(item, (list, tuple, np.ndarray)) for item in data)\n        \n        # Flatten the data for easier analysis\n        if is_tuple:\n            flattened_data = np.array(data)\n        else:\n            flattened_data = np.array(data).reshape(-1, 1)\n        \n        # Determine dimensionality\n        dim = flattened_data.shape[1]\n        \n        # Check if data is continuous\n        is_continuous = np.any(flattened_data % 1 != 0)\n        \n        # Calculate unique values per dimension\n        unique_values_per_dim = [np.unique(flattened_data[:, i]) for i in range(dim)]\n        \n        # Number of unique values per dimension\n        n_unique_per_dim = [len(unique_values) for unique_values in unique_values_per_dim]\n        \n        # Sorted list of unique values per dimension\n        sorted_unique_values = [sorted(unique_values) for unique_values in unique_values_per_dim]\n        \n        return {\n            'is_tuple': is_tuple,\n            'is_multidim': dim > 1,\n            'is_continuous': is_continuous,\n            'n_unique_per_dim': n_unique_per_dim,\n            'dim': dim,\n            'sorted_unique_values': sorted_unique_values\n        }\n    \n    # Analyze actions\n    action_stats = analyze_data(actions)\n    \n    # Analyze observations\n    observation_stats = analyze_data(observations)\n    \n    # Construct the result dictionary\n    result = {\n        'tuple_actions': action_stats['is_tuple'],\n        'tuple_observations': observation_stats['is_tuple'],\n        'multidim_actions': action_stats['is_multidim'],\n        'multidim_observations': observation_stats['is_multidim'],\n        'continuous_actions': action_stats['is_continuous'],\n        'continuous_observations': observation_stats['is_continuous'],\n        'n_actions_per_dim': action_stats['n_unique_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': observation_stats['n_unique_per_dim'],\n        'obs_dim': observation_stats['dim'],\n        'action_ids': action_stats['sorted_unique_values'],\n        'obs_ids': observation_stats['sorted_unique_values']\n    }\n    \n    return result\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\n### Explanation:\n1. **Data Analysis**: The function `analyze_data` is used to analyze either the actions or observations. It checks if the data is multi-dimensional, continuous, and calculates the number of unique values per dimension.\n\n2. **Dimensionality**: The dimensionality is determined by the shape of the flattened data. If the data is a scalar, it is reshaped to a 1-D array.\n\n3. **Continuous Check**: The function checks if any value in the data is a non-integer float to determine if the data is continuous.\n\n4. **Unique Values**: It calculates the unique values for each dimension and sorts them.\n\n5. **Result Construction**: The results from analyzing actions and observations are combined into a dictionary with the specified keys.\n\nThis implementation should correctly compute the required statistics for any given lists of actions and observations."}
{"task_id": 413, "completion_id": 0, "completion": "To implement a simplified Gradient Boosting Decision Tree (GBDT) regressor from scratch, we need to follow the steps outlined in the task description. Here's a complete implementation:\n\n```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def fit_tree(X, y, max_depth):\n        # Fit a simple regression tree to the data\n        if max_depth == 0 or len(np.unique(y)) == 1:\n            return np.mean(y)\n        \n        best_split = None\n        best_mse = float('inf')\n        best_left_indices = None\n        best_right_indices = None\n        \n        for feature_index in range(X.shape[1]):\n            for split_value in np.unique(X[:, feature_index]):\n                left_indices = X[:, feature_index] <= split_value\n                right_indices = X[:, feature_index] > split_value\n                \n                if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                    continue\n                \n                left_mean = np.mean(y[left_indices])\n                right_mean = np.mean(y[right_indices])\n                \n                mse = (mean_squared_error(y[left_indices], left_mean) * np.sum(left_indices) +\n                       mean_squared_error(y[right_indices], right_mean) * np.sum(right_indices)) / len(y)\n                \n                if mse < best_mse:\n                    best_mse = mse\n                    best_split = (feature_index, split_value)\n                    best_left_indices = left_indices\n                    best_right_indices = right_indices\n        \n        if best_split is None:\n            return np.mean(y)\n        \n        left_tree = fit_tree(X[best_left_indices], y[best_left_indices], max_depth - 1)\n        right_tree = fit_tree(X[best_right_indices], y[best_right_indices], max_depth - 1)\n        \n        return (best_split, left_tree, right_tree)\n    \n    def predict_tree(tree, X):\n        if not isinstance(tree, tuple):\n            return np.full(X.shape[0], tree)\n        \n        feature_index, split_value = tree[0]\n        left_tree, right_tree = tree[1], tree[2]\n        \n        left_indices = X[:, feature_index] <= split_value\n        right_indices = X[:, feature_index] > split_value\n        \n        predictions = np.empty(X.shape[0])\n        predictions[left_indices] = predict_tree(left_tree, X[left_indices])\n        predictions[right_indices] = predict_tree(right_tree, X[right_indices])\n        \n        return predictions\n    \n    # Initial prediction is the mean of the training targets\n    initial_prediction = np.mean(y_train)\n    predictions = np.full(y_train.shape, initial_prediction)\n    \n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = fit_tree(X_train, residuals, max_depth)\n        predictions += learning_rate * predict_tree(tree, X_train)\n    \n    final_predictions = initial_prediction + learning_rate * predict_tree(tree, X_test)\n    return list(np.round(final_predictions, 4))\n\n# Example usage:\n# X_train = np.array([[1], [2], [3], [4], [5]])\n# y_train = np.array([1, 2, 3, 4, 5])\n# X_test = np.array([[1.5], [2.5], [3.5]])\n# print(gbdt_regression(X_train, y_train, X_test))\n```\n\n### Explanation:\n1. **Initial Prediction**: Start with the mean of the training targets.\n2. **Residual Calculation**: Compute residuals as the difference between actual targets and current predictions.\n3. **Tree Fitting**: Fit a regression tree to the residuals using binary splits based on mean squared error.\n4. **Prediction Update**: Update predictions by adding the tree's output scaled by the learning rate.\n5. **Final Prediction**: After all iterations, predict on the test set using the accumulated model.\n\nThis implementation uses a simple recursive approach to build regression trees and predict values. The tree fitting function finds the best split by evaluating all possible splits across all features, and the prediction function traverses the tree to make predictions."}
{"task_id": 416, "completion_id": 0, "completion": "To implement the probability density function (PDF) of a multivariate Gaussian distribution, we need to follow the mathematical definition provided. We'll use NumPy for matrix operations and math for constants like \u03c0. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the PDF of a multivariate Gaussian distribution for given data points.\n\n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution (length n_features).\n    cov (np.ndarray): The covariance matrix of shape (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is a 2D array\n    if X.ndim == 1:\n        X = X[:, np.newaxis]\n    \n    n_samples, n_features = X.shape\n    \n    # Calculate the determinant and inverse of the covariance matrix\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    \n    # Calculate the normalization constant\n    norm_const = 1 / math.sqrt((2 * math.pi) ** n_features * cov_det)\n    \n    pdf_values = []\n    \n    for i in range(n_samples):\n        x = X[i]\n        # Calculate the difference from the mean\n        diff = x - mean\n        \n        # Calculate the exponent term\n        exponent = -0.5 * np.dot(np.dot(diff.T, cov_inv), diff)\n        \n        # Calculate the PDF value\n        pdf_value = norm_const * math.exp(exponent)\n        \n        # Append the rounded PDF value to the list\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# mean = np.array([0, 0])\n# cov = np.array([[1, 0], [0, 1]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```\n\n### Explanation:\n1. **Input Handling**: We ensure that `X` is treated as a 2D array, even if it's provided as a 1D array.\n2. **Matrix Operations**: We compute the determinant and inverse of the covariance matrix using NumPy's `linalg.det` and `linalg.inv`.\n3. **Normalization Constant**: The normalization constant is calculated using the determinant and the dimensionality of the data.\n4. **PDF Calculation**: For each sample in `X`, we compute the difference from the mean, apply the matrix operations to calculate the exponent, and then compute the PDF value.\n5. **Rounding**: Each PDF value is rounded to four decimal places before being added to the result list.\n\nThis implementation should correctly compute the PDF values for a multivariate Gaussian distribution given the input data, mean, and covariance matrix."}
{"task_id": 419, "completion_id": 0, "completion": "To implement Bayesian linear regression with a conjugate Gaussian prior and known observation variance, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    \n    # Determine the number of features\n    M = X.shape[1]\n    \n    # Handle the prior mean `mu`\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Handle the prior covariance `V`\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif V.ndim == 1:\n        V = np.diag(V)\n    \n    # Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean\n    y_pred = X_new @ mu_p\n    \n    # Round the predictions to 4 decimal places and return as a list\n    return list(np.round(y_pred, 4))\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# X_new = np.array([[7, 8], [9, 10]])\n# predictions = bayesian_linear_regression_pred(X, y, X_new, mu=0.0, sigma=1.0, V=None, fit_intercept=True)\n# print(predictions)\n```\n\n### Explanation:\n1. **Intercept Handling**: If `fit_intercept` is `True`, we add a column of ones to both `X` and `X_new` to account for the intercept term in the linear model.\n\n2. **Prior Mean (`mu`)**: If `mu` is a scalar, it is expanded to a vector of length `M` (or `M + 1` if intercept is fitted).\n\n3. **Prior Covariance (`V`)**: \n   - If `V` is `None`, it defaults to the identity matrix.\n   - If `V` is a scalar, it is treated as a multiple of the identity matrix.\n   - If `V` is a 1-D array, it forms the diagonal of the covariance matrix.\n\n4. **Posterior Calculation**: We compute the posterior mean `mu_p` using the formula provided, which involves matrix operations with the prior and the data.\n\n5. **Prediction**: The predictive mean for new data `X_new` is calculated using the posterior mean `mu_p`.\n\n6. **Output**: The predictions are rounded to 4 decimal places and returned as a list."}
{"task_id": 423, "completion_id": 0, "completion": "To implement the Root Mean Squared Logarithmic Error (RMSLE) calculator, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    \n    # Step 1: Validate inputs\n    if len(actual) != len(predicted):\n        return -1\n    \n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Step 2: Compute RMSLE\n    log_diffs = [np.log1p(p) - np.log1p(a) for a, p in zip(actual, predicted)]\n    squared_log_diffs = [diff ** 2 for diff in log_diffs]\n    mean_squared_log_error = np.mean(squared_log_diffs)\n    rmsle = np.sqrt(mean_squared_log_error)\n    \n    # Step 3: Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage:\n# actual = [3, 5, 2.5, 7]\n# predicted = [2.5, 5, 4, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Output should be a float rounded to 4 decimal places\n```\n\n### Explanation:\n\n1. **Input Validation**:\n   - We first check if the lengths of `actual` and `predicted` lists are the same. If not, we return `-1`.\n   - We then check if all elements in both lists are non-negative. If any element is negative, we return `-1`.\n\n2. **RMSLE Calculation**:\n   - We compute the logarithmic differences using `np.log1p`, which calculates `log(1 + x)`. This is done for each pair of actual and predicted values.\n   - We square these differences and compute their mean.\n   - Finally, we take the square root of the mean to get the RMSLE.\n\n3. **Rounding**:\n   - The result is rounded to four decimal places using Python's built-in `round` function.\n\nThis implementation ensures that the function adheres to the task requirements and handles edge cases appropriately."}
{"task_id": 428, "completion_id": 0, "completion": "To implement the Hann window generator, we need to follow the mathematical definition provided and handle the special cases as described. Here's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n\n    # Generate the Hann window\n    window = np.array([0.5 - 0.5 * math.cos(2 * math.pi * n / (N - 1)) for n in range(N)])\n\n    if not symmetric:\n        window = window[:-1]  # Discard the last sample for periodic window\n\n    # Round each coefficient to 4 decimal places\n    window = np.round(window, 4)\n\n    # Convert to a regular Python list before returning\n    return window.tolist()\n\n# Example usage:\nprint(hann(5, symmetric=True))  # Symmetric window\nprint(hann(5, symmetric=False)) # Periodic window\n```\n\n### Explanation:\n1. **Special Cases**:\n   - If `window_len <= 0`, return an empty list.\n   - If `window_len == 1`, return `[1.0]` regardless of the `symmetric` flag.\n\n2. **Window Length**:\n   - For a symmetric window, use `N = window_len`.\n   - For a periodic window, use `N = window_len + 1` to compute an extra sample and then discard the last sample.\n\n3. **Window Calculation**:\n   - Use the formula `hann(n) = 0.5 - 0.5 * cos(2 * \u03c0 * n / (N-1))` to compute each sample.\n   - Use a list comprehension to generate the window samples.\n\n4. **Rounding and Conversion**:\n   - Round each sample to 4 decimal places using `np.round`.\n   - Convert the NumPy array to a regular Python list before returning.\n\nThis implementation efficiently handles the requirements and special cases for generating a Hann window."}
{"task_id": 433, "completion_id": 0, "completion": "Below is the implementation for the `glorot_fan` function based on the provided rules. The function computes `fan_in` and `fan_out` as specified:\n\n```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # 4-D convolutional kernel\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # Other tensors\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n```\n\n### Explanation:\n1. **4-D Tensor (Convolutional Kernel):**\n   - The shape is expected to be `(out_channels, in_channels, kernel_height, kernel_width)`.\n   - The computation of `receptive_field_size` is done by multiplying `kernel_height` and `kernel_width`.\n   - `fan_in` is calculated as the product of `in_channels` and `receptive_field_size`.\n   - `fan_out` is calculated as the product of `out_channels` and `receptive_field_size`.\n\n2. **Non-4-D Tensors:**\n   - For all other tensor shapes, `fan_in` and `fan_out` are directly taken as the first two dimensions of the shape: `shape[0]` and `shape[1]`.\n\n3. **Return Type:**\n   - Both `fan_in` and `fan_out` are returned as floats, fulfilling the output constraint.\n\nThis method efficiently determines the `fan-in` and `fan-out` based on the shape of the tensor, accommodating both standard layers and convolutional layers."}
{"task_id": 435, "completion_id": 0, "completion": "To implement a tiny Gradient Boosting Regressor using ordinary least squares (OLS) linear regression as the weak learner, we can follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special case handling\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    \n    for t in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals from X\n        # Add intercept term to X\n        X_with_intercept = np.hstack((np.ones((X.shape[0], 1)), X))\n        \n        # Compute the coefficients using the normal equation\n        # (X^T X)^{-1} X^T y\n        coefficients = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ coefficients\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Round the final predictions to 4 decimal places and convert to a regular Python list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\ny = [3.0, 5.0, 7.0]\npredictions = gradient_boosting_regressor(X, y, n_estimators=10, learning_rate=0.1)\nprint(predictions)\n```\n\n### Explanation:\n1. **Data Conversion**: Convert the input lists `X` and `y` into NumPy arrays of type `float` for efficient numerical operations.\n\n2. **Special Cases**: If `n_estimators` is less than or equal to 0 or `learning_rate` is 0, return a list filled with the mean of `y`.\n\n3. **Initialization**: Start the prediction vector `y_pred` with the mean of `y`.\n\n4. **Iterative Boosting**:\n   - Compute residuals as the difference between actual values `y` and current predictions `y_pred`.\n   - Fit an OLS linear regression model to predict these residuals using the features `X`. This involves adding an intercept term to `X` and solving the normal equation to find the coefficients.\n   - Update the predictions by adding the scaled predictions from the weak learner to the current predictions.\n\n5. **Output**: Round each prediction to 4 decimal places and return as a regular Python list.\n\nThis implementation uses basic linear algebra operations provided by NumPy to fit the linear regression model and update predictions iteratively."}
{"task_id": 437, "completion_id": 0, "completion": "To implement the logistic sigmoid function and its derivatives, we need to handle different types of input (scalar, list, or NumPy array) and compute the appropriate result based on the `order` parameter. Here's how you can implement this function:\n\n```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to a NumPy array for easy manipulation\n    x_array = np.array(x, dtype=np.float64)\n    \n    # Compute the sigmoid function\n    sigmoid_value = 1 / (1 + np.exp(-x_array))\n    \n    if order == 0:\n        result = sigmoid_value\n    elif order == 1:\n        result = sigmoid_value * (1 - sigmoid_value)\n    elif order == 2:\n        result = sigmoid_value * (1 - sigmoid_value) * (1 - 2 * sigmoid_value)\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if np.isscalar(x):\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Should return 0.5\n# print(sigmoid([0, 1, 2], order=1))  # Should return [0.25, 0.1966, 0.1049]\n# print(sigmoid(np.array([0, 1, 2]), order=2))  # Should return [0.0, -0.0353, -0.0904]\n```\n\n### Explanation:\n- **Input Handling**: The input `x` is converted to a NumPy array to facilitate element-wise operations.\n- **Sigmoid Calculation**: The logistic sigmoid function is calculated as \\( \\sigma(x) = \\frac{1}{1 + e^{-x}} \\).\n- **Derivatives**:\n  - First derivative: \\( \\sigma(x)(1-\\sigma(x)) \\).\n  - Second derivative: \\( \\sigma(x)(1-\\sigma(x))(1-2\\sigma(x)) \\).\n- **Output Formatting**: The result is rounded to four decimal places. If the input is a scalar, a float is returned. Otherwise, the result is converted to a list using `tolist()`.\n- **Invalid Order Handling**: If the `order` is not 0, 1, or 2, the function returns -1."}
{"task_id": 438, "completion_id": 0, "completion": "To implement the `to_categorical` function, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert y to a NumPy array if it is a list\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    inferred_num_classes = max(y) + 1\n    if num_classes is None:\n        num_classes = inferred_num_classes\n    \n    # Check if num_classes is smaller than required\n    if num_classes < inferred_num_classes:\n        return -1\n    \n    # Create a zero matrix of shape (len(y), num_classes)\n    one_hot_matrix = np.zeros((len(y), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(len(y)), y] = 1\n    \n    # Convert the result to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\nprint(to_categorical([0, 1, 2, 1]))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\nprint(to_categorical([0, 1, 2, 1], num_classes=3))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\nprint(to_categorical([0, 1, 2, 1], num_classes=2))  # Output: -1\n```\n\n### Explanation:\n1. **Input Conversion**: We first ensure that `y` is a NumPy array, which simplifies indexing operations.\n2. **Determine `num_classes`**: If `num_classes` is not provided, we infer it as `max(y) + 1`.\n3. **Validation**: If the provided `num_classes` is less than the inferred number of classes, we return `-1`.\n4. **One-Hot Encoding**: We create a zero matrix of shape `(len(y), num_classes)` and set the appropriate indices to 1 using NumPy's advanced indexing.\n5. **Output Conversion**: Finally, we convert the NumPy array to a list of lists using `tolist()` and return it.\n\nThis implementation handles the constraints and requirements specified in the task description."}
{"task_id": 439, "completion_id": 0, "completion": "To implement the Apriori algorithm for frequent itemset mining, we need to follow the steps outlined in the task description. Here's a complete implementation:\n\n```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def get_support(itemset, transactions):\n        \"\"\"Calculate the support of an itemset in the transactions.\"\"\"\n        return sum(1 for transaction in transactions if itemset <= set(transaction)) / len(transactions)\n\n    def generate_candidates(prev_frequent_itemsets, k):\n        \"\"\"Generate candidate itemsets of size k from previous frequent itemsets of size k-1.\"\"\"\n        candidates = set()\n        for a in prev_frequent_itemsets:\n            for b in prev_frequent_itemsets:\n                union_set = a | b\n                if len(union_set) == k:\n                    candidates.add(union_set)\n        return candidates\n\n    def prune_candidates(candidates, prev_frequent_itemsets):\n        \"\"\"Prune candidates that contain any infrequent subset.\"\"\"\n        pruned_candidates = set()\n        for candidate in candidates:\n            if all(frozenset(subset) in prev_frequent_itemsets for subset in itertools.combinations(candidate, len(candidate) - 1)):\n                pruned_candidates.add(candidate)\n        return pruned_candidates\n\n    # Step 1: Find all single-item frequent itemsets\n    itemsets = [frozenset([item]) for transaction in transactions for item in transaction]\n    itemsets = set(itemsets)\n    frequent_itemsets = []\n    k = 1\n\n    while itemsets:\n        # Calculate support for each itemset and filter by min_sup\n        itemsets_with_support = [(itemset, get_support(itemset, transactions)) for itemset in itemsets]\n        itemsets = {itemset for itemset, support in itemsets_with_support if support >= min_sup}\n\n        # Add frequent itemsets to the result\n        frequent_itemsets.extend(itemsets)\n\n        # Generate candidates for the next level\n        k += 1\n        candidates = generate_candidates(itemsets, k)\n        itemsets = prune_candidates(candidates, itemsets)\n\n    # Convert to sorted list of tuples\n    result = [tuple(sorted(itemset)) for itemset in frequent_itemsets]\n    result.sort(key=lambda x: (len(x), x))\n    return result\n\n# Example usage:\ntransactions = [\n    ['milk', 'bread', 'butter'],\n    ['beer', 'bread'],\n    ['milk', 'bread', 'butter', 'beer'],\n    ['bread', 'butter']\n]\nmin_sup = 0.5\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\n### Explanation:\n1. **Support Calculation**: The `get_support` function calculates the support of an itemset by checking how many transactions contain the itemset.\n\n2. **Candidate Generation**: The `generate_candidates` function creates new candidate itemsets by joining pairs of frequent itemsets from the previous level.\n\n3. **Pruning**: The `prune_candidates` function removes candidates that have any infrequent subset, ensuring that only valid candidates are considered.\n\n4. **Main Loop**: The algorithm starts with single-item itemsets and iteratively generates larger itemsets until no more frequent itemsets can be found.\n\n5. **Sorting**: The final result is sorted by itemset length and lexicographically within each length.\n\nThis implementation should work efficiently for typical transactional datasets and correctly return the frequent itemsets as specified."}
{"task_id": 440, "completion_id": 0, "completion": "To solve this task, we need to process the nested list of predictions and compute the average probability for each class across all estimators for each sample. After averaging, we will round the probabilities to four decimal places and determine the predicted class by finding the index of the maximum probability for each sample. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    n_estimators = len(predictions)\n    n_samples = len(predictions[0])\n    n_classes = len(predictions[0][0])\n    \n    # Initialize a list to store the averaged probabilities\n    averaged_probabilities = [[0.0] * n_classes for _ in range(n_samples)]\n    \n    # Sum up the probabilities for each sample and class\n    for estimator in predictions:\n        for sample_idx, sample_probs in enumerate(estimator):\n            for class_idx, prob in enumerate(sample_probs):\n                averaged_probabilities[sample_idx][class_idx] += prob\n    \n    # Average the probabilities and round to 4 decimal places\n    for sample_idx in range(n_samples):\n        for class_idx in range(n_classes):\n            averaged_probabilities[sample_idx][class_idx] /= n_estimators\n            averaged_probabilities[sample_idx][class_idx] = round(averaged_probabilities[sample_idx][class_idx], 4)\n    \n    # Determine the predicted class for each sample\n    predicted_classes = [int(np.argmax(sample_probs)) for sample_probs in averaged_probabilities]\n    \n    return averaged_probabilities, predicted_classes\n\n# Example usage:\npredictions = [\n    [[0.1, 0.9], [0.8, 0.2]],\n    [[0.2, 0.8], [0.6, 0.4]],\n    [[0.3, 0.7], [0.7, 0.3]]\n]\n\naveraged_probs, predicted_classes = aggregate_predictions(predictions)\nprint(\"Averaged Probabilities:\", averaged_probs)\nprint(\"Predicted Classes:\", predicted_classes)\n```\n\n### Explanation:\n1. **Initialization**: We start by determining the number of estimators, samples, and classes. We then initialize a list to store the averaged probabilities for each sample.\n\n2. **Summing Probabilities**: We iterate over each estimator and each sample within that estimator, summing the probabilities for each class.\n\n3. **Averaging and Rounding**: After summing, we divide by the number of estimators to get the average and round each probability to four decimal places.\n\n4. **Predicting Classes**: We use `np.argmax` to find the index of the maximum probability for each sample, which gives us the predicted class.\n\nThis function will return the averaged probabilities and the predicted class indices as required."}
{"task_id": 444, "completion_id": 0, "completion": "To implement the Radial Basis Function (RBF) kernel matrix as described, we need to handle several tasks: input validation, computation of the kernel matrix, and rounding the results. Let's break down the implementation step by step.\n\n1. **Input Validation**: We need to ensure that the dimensions of the input matrices `X` and `Y` match, and that the `sigma` parameter is valid. If `sigma` is a list, its length must match the number of features. If `sigma` is a single float, it must be positive.\n\n2. **Default Sigma**: If `sigma` is `None`, we use the default value `\u221a(C/2)` where `C` is the number of features.\n\n3. **Kernel Computation**: For each pair of vectors from `X` and `Y`, compute the RBF kernel using the formula provided. This involves calculating the squared Euclidean distance, scaling it by `sigma`, and applying the exponential function.\n\n4. **Rounding and Output**: Round the results to four decimal places and return them as a nested list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert input lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Get the number of features\n    N, C = X.shape\n    M, C_Y = Y.shape\n    \n    # Validate feature dimensions\n    if C != C_Y:\n        return -1\n    \n    # Validate sigma\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif isinstance(sigma, list) or isinstance(sigma, np.ndarray):\n        sigma = np.array(sigma)\n        if len(sigma) != C or np.any(sigma <= 0):\n            return -1\n    else:\n        return -1\n    \n    # Compute the RBF kernel matrix\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            diff = (X[i] - Y[j]) / sigma\n            squared_distance = np.sum(diff ** 2)\n            kernel_matrix[i, j] = np.exp(-0.5 * squared_distance)\n    \n    # Round the results to 4 decimal places and convert to a nested list\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\n### Explanation:\n- **Input Conversion**: We convert the input lists `X` and `Y` to NumPy arrays for easier mathematical operations.\n- **Sigma Handling**: We handle different cases for `sigma` (single float, list, or `None`) and ensure it's valid.\n- **Kernel Calculation**: We iterate over all pairs of vectors from `X` and `Y`, compute the scaled squared distance, and apply the exponential function.\n- **Output**: The kernel matrix is rounded to four decimal places and returned as a nested list.\n\nThis implementation should meet the requirements and constraints specified in the task description."}
{"task_id": 446, "completion_id": 0, "completion": "To implement the `decision_stump` function, we need to calculate the information gain for each possible split and select the one with the highest gain. Here's a step-by-step breakdown of how to achieve this:\n\n1. **Calculate Entropy**: Define a function to calculate the Shannon entropy of a set of labels.\n\n2. **Determine Possible Thresholds**: For each feature, sort the values and determine possible thresholds as midpoints between successive distinct values.\n\n3. **Calculate Information Gain**: For each feature and each possible threshold, calculate the information gain using the formula provided.\n\n4. **Select Best Split**: Track the best split based on the highest information gain, applying tie-breaking rules as specified.\n\n5. **Return Result**: Return the best feature index, threshold, and majority labels for the left and right splits. If no split improves information gain, return the specified default tuple.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0\n    counts = Counter(labels)\n    probabilities = [count / n for count in counts.values()]\n    return -sum(p * np.log2(p) for p in probabilities if p > 0)\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate parent entropy\n    parent_entropy = entropy(y)\n    \n    # Initialize best split variables\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority_label = None\n    best_right_majority_label = None\n    \n    # Iterate over each feature\n    for j in range(n_features):\n        # Sort the feature values and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        \n        # Determine possible thresholds (midpoints between successive distinct values)\n        possible_thresholds = []\n        for i in range(1, n_samples):\n            if sorted_X[i] != sorted_X[i - 1]:\n                midpoint = (sorted_X[i] + sorted_X[i - 1]) / 2\n                possible_thresholds.append(midpoint)\n        \n        # Evaluate each threshold\n        for threshold in possible_thresholds:\n            # Split the data\n            left_indices = sorted_X <= threshold\n            right_indices = sorted_X > threshold\n            left_labels = sorted_y[left_indices]\n            right_labels = sorted_y[right_indices]\n            \n            # Calculate proportions\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            \n            # Calculate entropies\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            \n            # Calculate information gain\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            \n            # Check if this is the best gain\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(threshold, 4)\n                best_left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                best_right_majority_label = Counter(right_labels).most_common(1)[0][0]\n            elif gain == best_gain:\n                # Tie-breaking rules\n                if j < best_feature_index or (j == best_feature_index and threshold < best_threshold):\n                    best_feature_index = j\n                    best_threshold = round(threshold, 4)\n                    best_left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                    best_right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    \n    # If no split improves information gain, return default tuple\n    if best_gain == 0:\n        majority_label = Counter(y).most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, best_left_majority_label, best_right_majority_label)\n```\n\nThis implementation efficiently calculates the best decision stump by iterating over each feature and evaluating possible thresholds, ensuring that the split with the highest information gain is selected, while adhering to the specified tie-breaking rules."}
{"task_id": 452, "completion_id": 0, "completion": "To implement the function `divide_on_feature`, we need to handle both numeric and categorical thresholds and ensure that the samples are split correctly based on the specified feature and threshold. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a numpy array if it's a list\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Initialize the two subsets\n    subset1 = []\n    subset2 = []\n    \n    # Determine the type of threshold and split accordingly\n    if isinstance(threshold, (int, float)):\n        # Numeric threshold: greater than or equal\n        for sample in X:\n            if sample[feature_i] >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n    else:\n        # Categorical threshold: exactly equal\n        for sample in X:\n            if sample[feature_i] == threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n    \n    # Convert subsets to lists and return\n    return [np.array(subset1).tolist(), np.array(subset2).tolist()]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n```\n\n### Explanation:\n- **Input Handling**: The function first checks if `X` is a list and converts it to a NumPy array for easier manipulation.\n- **Subset Initialization**: Two empty lists, `subset1` and `subset2`, are initialized to store the samples based on the threshold condition.\n- **Threshold Check**: The function checks the type of the threshold. If it's numeric (int or float), it uses the `>=` operator to partition the samples. If it's non-numeric, it uses the `==` operator.\n- **Sample Partitioning**: The samples are iterated over, and based on the condition, they are appended to either `subset1` or `subset2`.\n- **Return**: The subsets are converted to lists using `np.array(subset).tolist()` and returned as a list containing the two subsets.\n\nThis implementation ensures that the samples are split correctly and returned in their original order."}
{"task_id": 453, "completion_id": 0, "completion": "To solve this task, we need to implement a function that updates the Q-values for a batch of states based on the given parameters. The function will compute the target Q-values using the DQN update rule and replace the Q-value for the action taken in each state with the computed target. Let's go through the implementation step-by-step.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input validity\n    if not (0 <= gamma <= 1):\n        return -1\n    if not (len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones)):\n        return -1\n\n    # Initialize the target Q-values as a copy of the current Q-values\n    targets = Q.copy()\n\n    # Iterate over each sample in the batch\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        \n        # Update the Q-value for the action taken\n        targets[i, actions[i]] = target\n\n    # Round the targets to 4 decimal places and convert to a nested list\n    return np.round(targets, 4).tolist()\n```\n\n### Explanation:\n\n1. **Input Validation**: \n   - We first check if `gamma` is within the valid range [0, 1]. If not, we return -1.\n   - We also check if all input lists/arrays have the same length. If not, we return -1.\n\n2. **Initialize Targets**:\n   - We create a copy of the current Q-values (`Q`) to use as the base for our target Q-values.\n\n3. **Compute Targets**:\n   - For each sample in the batch, we check if the next state is terminal (`dones[i]`).\n   - If it is terminal, the target is simply the immediate reward (`rewards[i]`).\n   - If it is not terminal, the target is the immediate reward plus the discounted maximum Q-value of the next state (`rewards[i] + gamma * max(Q_next[i])`).\n\n4. **Update Q-values**:\n   - We update the Q-value for the action taken (`actions[i]`) with the computed target.\n\n5. **Round and Return**:\n   - We round the updated Q-values to 4 decimal places and convert the NumPy array to a nested Python list before returning.\n\nThis function will correctly compute the training targets for a DQN based on the given inputs."}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Check for negative labels\n    if any(label < 0 for label in labels):\n        return -1\n    \n    # Infer num_classes if not provided\n    inferred_num_classes = max(labels) + 1\n    if num_classes is None:\n        num_classes = inferred_num_classes\n    \n    # Check if num_classes is valid\n    if num_classes < inferred_num_classes:\n        return -1\n    \n    # Create the one-hot encoded matrix\n    one_hot_matrix = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot_matrix.append(row)\n    \n    return one_hot_matrix\n```\n\n### Explanation:\n1. **Negative Label Check**: The function first checks if any label is negative. If so, it returns `-1` as per the requirements.\n\n2. **Inferring `num_classes`**: If `num_classes` is not provided, it is inferred as `max(labels) + 1`.\n\n3. **Validation of `num_classes`**: If the provided `num_classes` is smaller than the inferred number of classes, the function returns `-1`.\n\n4. **One-Hot Encoding**: The function constructs a list of lists where each inner list represents a one-hot encoded vector for the corresponding label. Each vector has a length equal to `num_classes`, with a `1` at the index corresponding to the label and `0`s elsewhere.\n\n5. **Return Type**: The function returns a list of lists containing integers, ensuring compliance with the output constraints."}
{"task_id": 461, "completion_id": 0, "completion": "To implement a gradient boosting regressor using decision stumps for one-dimensional regression data, we need to follow the algorithm described in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction is the mean of the targets\n    y_pred = np.full_like(y, np.mean(y), dtype=np.float64)\n    \n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # If all residuals are zero, stop early\n        if np.all(residuals == 0):\n            break\n        \n        # Find the best split\n        unique_x = np.unique(x)\n        best_sse = float('inf')\n        best_split = None\n        best_vL = best_vR = 0\n        \n        for t in unique_x[:-1]:  # Exclude the greatest value\n            left_mask = x <= t\n            right_mask = x > t\n            \n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            \n            vL = np.mean(residuals[left_mask])\n            vR = np.mean(residuals[right_mask])\n            \n            sse = np.sum((residuals[left_mask] - vL) ** 2) + np.sum((residuals[right_mask] - vR) ** 2)\n            \n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                best_vL = vL\n                best_vR = vR\n        \n        # If no valid split was found, use the mean residual\n        if best_split is None:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n        else:\n            # Update predictions based on the best split\n            y_pred += learning_rate * np.where(x <= best_split, best_vL, best_vR)\n    \n    return np.round(y_pred, 4).tolist()\n```\n\n### Explanation:\n\n1. **Initialization**: Start with predictions as the mean of the target values.\n\n2. **Iterative Boosting**:\n   - Compute residuals as the difference between actual and predicted values.\n   - For each unique value in `x` (except the greatest), consider it as a potential split point.\n   - Calculate the sum of squared errors (SSE) for each split and choose the one with the smallest SSE.\n   - If no valid split is found, use the mean of the residuals for the entire dataset.\n\n3. **Update Predictions**: Adjust the predictions using the learning rate and the best split found.\n\n4. **Return**: The final predictions are rounded to four decimal places.\n\nThis implementation follows the gradient boosting algorithm using decision stumps, handling special cases as described."}
{"task_id": 471, "completion_id": 0, "completion": "To implement the Expected SARSA TD(0) Q-Table update, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Calculate the expected value of Q for the next state\n        max_action_value = max(q_table[next_state])\n        greedy_actions = [a for a, q in enumerate(q_table[next_state]) if q == max_action_value]\n        greedy_action = greedy_actions[0]  # Resolve ties by taking the first greedy action\n        \n        expected_q = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_q += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_q += (epsilon / num_actions) * q_table[next_state][a]\n        \n        target = reward + gamma * expected_q\n    else:\n        # Terminal state\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round the Q-table to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```\n\n### Explanation:\n\n1. **Determine the Number of Actions**: We first determine the number of actions by checking the length of a row in the Q-table.\n\n2. **Expected Q Calculation**: If the next state is not terminal (`next_state` is not `None`), we calculate the expected Q value for the next state using the \u03b5-soft policy. We identify the greedy action(s) and compute the expected value based on the policy probabilities.\n\n3. **Target Calculation**: The target is calculated using the immediate reward and the expected Q value for the next state, discounted by `gamma`.\n\n4. **Q-Table Update**: We update the Q-value for the given state-action pair using the learning rate `lr`.\n\n5. **Rounding**: Finally, we round each entry in the Q-table to four decimal places before returning it.\n\nThis implementation follows the Expected SARSA algorithm as described, ensuring that the Q-table is updated correctly and returned with the specified precision."}
{"task_id": 474, "completion_id": 0, "completion": "To implement the `generate_data` function, we need to address the issues mentioned in the task description and ensure the function is reusable and generates labels correctly for both training and validation sets. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    X_val = []\n    Y_train = []\n    Y_val = []\n\n    for i in range(m):\n        # Calculate the range for x and y based on the class index `i`\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n        \n        # Generate training samples\n        for _ in range(n_train):\n            x = random.uniform(x_min, x_max)\n            y = random.uniform(y_min, y_max)\n            X_train.append([round(x, 4), round(y, 4)])\n            Y_train.append((i - 0.5) * 2)\n        \n        # Generate validation samples\n        for _ in range(n_val):\n            x = random.uniform(x_min, x_max)\n            y = random.uniform(y_min, y_max)\n            X_val.append([round(x, 4), round(y, 4)])\n            Y_val.append((i - 0.5) * 2)\n\n    # Convert lists to NumPy arrays\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\n### Explanation:\n1. **Random Seed**: If a seed is provided, we set it using `random.seed(seed)` to ensure reproducibility.\n2. **Data Generation**: For each class index `i`, we calculate the range for `x` and `y` coordinates based on the given formulas. We then generate random samples within these ranges for both training and validation sets.\n3. **Labels**: The label for each class is calculated using `(i - 0.5) * 2`, which results in `-1` for the first class and `+1` for the second class.\n4. **Rounding**: Each coordinate is rounded to four decimal places using `round(x, 4)` and `round(y, 4)`.\n5. **Return**: The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`.\n\nThis implementation ensures the function is reusable, generates labels correctly for both training and validation sets, and adheres to the output constraints."}
{"task_id": 475, "completion_id": 0, "completion": "To implement the Adam optimizer's single-step update, we need to follow the formulae provided for updating the moments and the parameters. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zeros if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    # Update biased first moment estimate\n    m_new = b1 * m_prev + (1 - b1) * grad\n\n    # Update biased second raw moment estimate\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n\n    # Compute bias-corrected first moment estimate\n    m_hat = m_new / (1 - b1**t)\n\n    # Compute bias-corrected second raw moment estimate\n    v_hat = v_new / (1 - b2**t)\n\n    # Update parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_new, v_new\n```\n\n### Explanation:\n1. **Initialization**: If `m_prev` or `v_prev` is `None`, we initialize them to arrays of zeros with the same shape as `grad`.\n\n2. **Moment Updates**:\n   - `m_new` is the updated first moment, calculated using the exponential decay rate `b1`.\n   - `v_new` is the updated second moment, calculated using the exponential decay rate `b2`.\n\n3. **Bias Correction**:\n   - `m_hat` is the bias-corrected first moment.\n   - `v_hat` is the bias-corrected second moment.\n\n4. **Parameter Update**:\n   - `w_new` is the updated parameter, calculated using the learning rate, bias-corrected moments, and a small constant `eps` for numerical stability.\n\nThis implementation works for both scalars and NumPy arrays, ensuring the shapes are preserved and the calculations are accurate to at least 1 \u00d7 10\u207b\u2078."}
{"task_id": 479, "completion_id": 0, "completion": "To implement the \u03b5-greedy multi-armed bandit simulation, we need to follow the algorithm described in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    num_arms = len(rewards[0])\n    num_steps = len(rewards)\n    \n    # Initialize estimated values and pull counters\n    estimated_values = [ev_prior] * num_arms\n    pull_counts = [0] * num_arms\n    \n    for t in range(num_steps):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.choice(num_arms)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(estimated_values)\n        \n        # Receive reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n        \n        # Update pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        \n        # Update the estimated value using incremental sample mean\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / pull_counts[chosen_arm]\n    \n    # Round the final estimated values to 4 decimal places\n    return [round(value, 4) for value in estimated_values]\n\n# Example usage:\nrewards = [\n    [0.1, 0.2, 0.3],\n    [0.4, 0.5, 0.6],\n    [0.7, 0.8, 0.9],\n    [0.1, 0.2, 0.3],\n    [0.4, 0.5, 0.6]\n]\nepsilon = 0.1\nev_prior = 0.5\nseed = 42\n\nfinal_estimates = epsilon_greedy_bandit(rewards, epsilon, ev_prior, seed)\nprint(final_estimates)\n```\n\n### Explanation:\n1. **Initialization**: We initialize the estimated values for each arm with `ev_prior` and set the pull counters to zero.\n2. **Simulation Loop**: For each time-step, we decide whether to explore or exploit based on the `epsilon` value. If exploring, we select a random arm; if exploiting, we select the arm with the highest estimated value.\n3. **Reward and Update**: We receive the reward for the chosen arm and update its estimated value using the incremental sample mean formula.\n4. **Return**: After all time-steps, we return the estimated values for each arm, rounded to four decimal places.\n\nThis implementation ensures that the \u03b5-greedy strategy is correctly applied to the multi-armed bandit problem, allowing for both exploration and exploitation based on the given `epsilon` parameter."}
{"task_id": 481, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow the steps outlined in the task description. Here's a complete implementation:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    # Helper function to calculate Euclidean distance\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    # Helper function to find neighbors within eps distance\n    def region_query(point_idx):\n        neighbors = []\n        for idx in range(data.shape[0]):\n            if euclidean_distance(data[point_idx], data[idx]) <= eps:\n                neighbors.append(idx)\n        return neighbors\n\n    # Helper function to expand cluster\n    def expand_cluster(point_idx, neighbors, cluster_id):\n        cluster_labels[point_idx] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_idx = neighbors[i]\n            if cluster_labels[neighbor_idx] == -1:  # Previously marked as noise\n                cluster_labels[neighbor_idx] = cluster_id\n            elif cluster_labels[neighbor_idx] == 0:  # Unvisited\n                cluster_labels[neighbor_idx] = cluster_id\n                new_neighbors = region_query(neighbor_idx)\n                if len(new_neighbors) >= min_samples:\n                    neighbors += new_neighbors\n            i += 1\n\n    # Initialize cluster labels\n    cluster_labels = [0] * data.shape[0]  # 0 means unvisited\n    cluster_id = 0\n\n    for point_idx in range(data.shape[0]):\n        if cluster_labels[point_idx] != 0:  # Already visited\n            continue\n\n        neighbors = region_query(point_idx)\n        if len(neighbors) < min_samples:\n            cluster_labels[point_idx] = -1  # Mark as noise\n        else:\n            cluster_id += 1\n            expand_cluster(point_idx, neighbors, cluster_id)\n\n    # Adjust cluster labels to start from 0\n    cluster_labels = [label - 1 if label > 0 else label for label in cluster_labels]\n\n    return cluster_labels\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4], [8, 7], [8, 8], [25, 80]])\neps = 1.5\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n1. **Euclidean Distance Calculation**: We define a helper function `euclidean_distance` to compute the distance between two points.\n\n2. **Region Query**: The `region_query` function finds all points within `eps` distance from a given point.\n\n3. **Cluster Expansion**: The `expand_cluster` function grows a cluster from a core point, marking reachable points as part of the cluster.\n\n4. **Main Loop**: We iterate over each point, checking if it can start a new cluster or should be marked as noise.\n\n5. **Cluster Label Adjustment**: We adjust cluster labels to start from 0, marking noise points as -1.\n\nThis implementation follows the DBSCAN algorithm's logic and adheres to the task's constraints."}
{"task_id": 482, "completion_id": 0, "completion": "To implement the `to_categorical` function for one-hot encoding, we need to ensure that the function correctly handles the input labels and the optional `num_classes` parameter. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    \n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"Labels must be non-negative and less than num_classes.\")\n    \n    # Create a zero matrix of shape (len(y), num_classes)\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot[np.arange(len(y)), y] = 1\n    \n    return one_hot\n```\n\n### Explanation:\n\n1. **Input Conversion**: Convert the input `y` to a NumPy array of integers to ensure consistent processing.\n\n2. **Determine `num_classes`**: If `num_classes` is not provided, calculate it as `max(y) + 1`. This ensures that the number of columns in the output matrix matches the number of unique labels.\n\n3. **Validation**: Check if any label is negative or greater than or equal to `num_classes`. If so, raise a `ValueError`.\n\n4. **Matrix Creation**: Create a zero matrix of shape `(len(y), num_classes)`.\n\n5. **One-Hot Encoding**: Use NumPy's advanced indexing to set the appropriate positions in the matrix to 1, effectively creating the one-hot encoded representation.\n\nThis implementation efficiently handles the conversion of integer labels to one-hot encoded format, ensuring that the output is a 2-D array of integers (0s and 1s)."}
{"task_id": 485, "completion_id": 0, "completion": "To implement a univariate regression tree using the CART algorithm, we need to recursively split the data based on the feature values to minimize the sum of squared errors (SSE). Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    if not X_train:\n        return []\n\n    # Helper function to calculate SSE\n    def calculate_sse(y):\n        if len(y) == 0:\n            return 0\n        mean_y = np.mean(y)\n        return np.sum((y - mean_y) ** 2)\n\n    # Helper function to find the best split\n    def find_best_split(X, y):\n        best_sse = float('inf')\n        best_split = None\n        best_left = None\n        best_right = None\n        \n        for i in range(1, len(X)):\n            left_y = y[:i]\n            right_y = y[i:]\n            sse = calculate_sse(left_y) + calculate_sse(right_y)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = X[i]\n                best_left = (X[:i], left_y)\n                best_right = (X[i:], right_y)\n        \n        return best_split, best_left, best_right\n\n    # Recursive function to build the tree\n    def build_tree(X, y, depth):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        \n        split, (left_X, left_y), (right_X, right_y) = find_best_split(X, y)\n        \n        if split is None:\n            return np.mean(y)\n        \n        left_tree = build_tree(left_X, left_y, depth + 1)\n        right_tree = build_tree(right_X, right_y, depth + 1)\n        \n        return (split, left_tree, right_tree)\n\n    # Build the tree\n    tree = build_tree(X_train, y_train, 0)\n\n    # Helper function to make predictions\n    def predict(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split, left_tree, right_tree = tree\n        if x < split:\n            return predict(left_tree, x)\n        else:\n            return predict(right_tree, x)\n\n    # Make predictions for the test set\n    predictions = [predict(tree, x) for x in X_test]\n    \n    return predictions\n```\n\n### Explanation:\n1. **SSE Calculation**: The `calculate_sse` function computes the sum of squared errors for a given set of target values.\n2. **Best Split**: The `find_best_split` function iterates over possible split points in the feature values, calculating the SSE for each split and selecting the one that minimizes the SSE.\n3. **Tree Building**: The `build_tree` function recursively constructs the tree, stopping when the maximum depth is reached or when a node contains fewer than two samples. Each leaf node is labeled with the mean of the target values.\n4. **Prediction**: The `predict` function traverses the tree to make predictions for each test point.\n\nThis implementation handles the recursive splitting and prediction for a univariate regression tree without using external libraries."}
{"task_id": 490, "completion_id": 0, "completion": "To solve the task of converting a one-dimensional vector into a square diagonal matrix, we can utilize NumPy's capabilities to create a diagonal matrix and then convert it to a list of lists. Here's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert input to a NumPy array if it is not already\n    x_array = np.array(x)\n    \n    # Check if the input is empty\n    if x_array.size == 0:\n        return []\n    \n    # Create a diagonal matrix using NumPy's diag function\n    diagonal_matrix = np.diag(x_array)\n    \n    # Convert the NumPy array to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# vector = [1, 2, 3]\n# print(make_diagonal(vector))\n# Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```\n\n### Explanation:\n1. **Input Conversion**: The input is first converted to a NumPy array to handle different input types (list, tuple, or NumPy array) uniformly.\n\n2. **Empty Check**: We check if the input array is empty. If it is, we return an empty list as specified.\n\n3. **Diagonal Matrix Creation**: We use `np.diag(x_array)` to create a diagonal matrix where the elements of `x_array` are placed on the principal diagonal, and all off-diagonal elements are zeros.\n\n4. **Conversion to List of Lists**: Finally, we convert the resulting NumPy array to a list of lists using the `tolist()` method, which is the required output format.\n\nThis function efficiently handles the conversion and adheres to the constraints and requirements specified in the task description."}
{"task_id": 491, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow the two major stages: FP-tree construction and recursive mining. Below is the complete implementation of the FP-Growth algorithm in Python:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass FPNode:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\n    def increment(self, count):\n        self.count += count\n\nclass FPTree:\n    def __init__(self, transactions, min_sup):\n        self.min_sup = min_sup\n        self.header_table = defaultdict(list)\n        self.root = FPNode(None, 1, None)\n        self.build_tree(transactions)\n\n    def build_tree(self, transactions):\n        item_counts = Counter(itertools.chain.from_iterable(transactions))\n        item_counts = {item: count for item, count in item_counts.items() if count >= self.min_sup}\n        frequent_items = set(item_counts.keys())\n\n        for transaction in transactions:\n            transaction = [item for item in transaction if item in frequent_items]\n            transaction.sort(key=lambda item: (-item_counts[item], item))\n            self.insert_transaction(transaction)\n\n    def insert_transaction(self, transaction):\n        current_node = self.root\n        for item in transaction:\n            if item not in current_node.children:\n                new_node = FPNode(item, 1, current_node)\n                current_node.children[item] = new_node\n                self.header_table[item].append(new_node)\n            else:\n                current_node.children[item].increment(1)\n            current_node = current_node.children[item]\n\n    def mine_patterns(self):\n        def mine_tree(tree, prefix):\n            patterns = []\n            for item, nodes in sorted(tree.header_table.items()):\n                new_prefix = prefix + [item]\n                patterns.append(tuple(new_prefix))\n                conditional_tree = build_conditional_tree(nodes)\n                if conditional_tree:\n                    patterns.extend(mine_tree(conditional_tree, new_prefix))\n            return patterns\n\n        def build_conditional_tree(nodes):\n            conditional_transactions = []\n            for node in nodes:\n                path = []\n                current_node = node.parent\n                while current_node.item is not None:\n                    path.append(current_node.item)\n                    current_node = current_node.parent\n                for _ in range(node.count):\n                    conditional_transactions.append(path)\n            return FPTree(conditional_transactions, self.min_sup) if conditional_transactions else None\n\n        return mine_tree(self, [])\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    tree = FPTree(transactions, min_sup)\n    patterns = tree.mine_patterns()\n    patterns = [tuple(sorted(pattern)) for pattern in patterns]\n    patterns = sorted(patterns, key=lambda x: (len(x), x))\n    return patterns\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\n\nmin_sup = 3\nresult = fp_growth(transactions, min_sup)\nprint(result)\n```\n\n### Explanation:\n\n1. **FPNode Class**: Represents a node in the FP-tree. Each node has an item, a count, a parent, children, and a link to the next node with the same item.\n\n2. **FPTree Class**: Represents the FP-tree. It builds the tree from transactions and mines patterns using recursive mining.\n\n3. **FP-tree Construction**: \n   - Count item frequencies and filter items below `min_sup`.\n   - Sort items in each transaction by descending frequency and lexicographically.\n   - Insert transactions into the FP-tree.\n\n4. **Recursive Mining**:\n   - Generate conditional pattern bases from the header table.\n   - Build conditional FP-trees and mine recursively.\n   - If a conditional tree consists of a single path, enumerate all non-empty combinations of the items on that path.\n\n5. **fp_growth Function**: Initializes the FP-tree and mines frequent item-sets, returning them sorted by length and lexicographically.\n\nThis implementation efficiently mines frequent item-sets using the FP-Growth algorithm, adhering to the specified output constraints."}
{"task_id": 492, "completion_id": 0, "completion": "To implement the polynomial feature expansion, we need to generate all possible monomials of the features up to a given degree. We'll use `itertools.combinations_with_replacement` to generate combinations of feature indices that correspond to the exponents in the monomials. Here's how you can implement the function:\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    \n    X = np.array(X)\n    n_samples, n_features = X.shape\n    \n    # Start with the constant term (degree 0)\n    feature_indices = []\n    for total_degree in range(degree + 1):\n        for combination in combinations_with_replacement(range(n_features), total_degree):\n            feature_indices.append(combination)\n    \n    # Generate the polynomial features\n    poly_features = []\n    for sample in X:\n        sample_features = [1]  # Start with the constant term\n        for indices in feature_indices[1:]:  # Skip the first empty tuple for degree 0\n            product = np.prod([sample[i] for i in indices])\n            sample_features.append(product)\n        poly_features.append(sample_features)\n    \n    return poly_features\n\n# Example usage:\nX = [[2, 3], [4, 5]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the degree is negative, returning `-1` if so.\n\n2. **Feature Index Generation**: Using `combinations_with_replacement`, we generate all combinations of feature indices for each total degree from `0` to `degree`. This gives us the exponents for each monomial.\n\n3. **Polynomial Feature Calculation**: For each sample in `X`, we calculate the monomial values by taking the product of the features raised to the respective powers indicated by the combinations.\n\n4. **Output**: The function returns the enriched feature matrix as a list of lists.\n\nThis implementation efficiently generates polynomial features up to the specified degree, ensuring the correct order and combination of terms."}
{"task_id": 493, "completion_id": 0, "completion": "To implement the `mse` function, we need to calculate the mean of the input sample, compute the squared differences from the mean for each element, and then find the average of these squared differences. If the input sample is empty, we return -1. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Check if the input is empty\n    if len(y) == 0:\n        return -1\n    \n    # Convert input to a numpy array if it's a list\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    # Calculate the mean of the sample\n    mean_y = np.mean(y)\n    \n    # Calculate the squared differences from the mean\n    squared_diffs = (y - mean_y) ** 2\n    \n    # Calculate the mean of the squared differences (MSE)\n    mse_value = np.mean(squared_diffs)\n    \n    # Return the MSE rounded to 4 decimal places\n    return round(mse_value, 4)\n```\n\n### Explanation:\n1. **Input Check**: We first check if the input sequence `y` is empty. If it is, we return -1.\n2. **Conversion to NumPy Array**: If the input is a list, we convert it to a NumPy array for easier mathematical operations.\n3. **Mean Calculation**: We calculate the mean of the sample using `np.mean`.\n4. **Squared Differences**: We compute the squared differences from the mean for each element in the sample.\n5. **MSE Calculation**: We calculate the mean of these squared differences to get the MSE.\n6. **Rounding**: Finally, we round the MSE to four decimal places before returning it."}
{"task_id": 496, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `apply_affine` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    else:\n        x = np.array(x)\n\n    # Calculate the affine activation\n    y = slope * x + intercept\n\n    # First derivative is constant and equal to slope\n    grad = np.full_like(x, slope)\n\n    # Second derivative is constant and equal to 0\n    grad2 = np.zeros_like(x)\n\n    # Round each element to 4 decimal places\n    y = np.round(y, 4).tolist()\n    grad = np.round(grad, 4).tolist()\n    grad2 = np.round(grad2, 4).tolist()\n\n    return y, grad, grad2\n\n# Example usage:\nx = [1, 2, 3]\nresult = apply_affine(x, slope=2, intercept=1)\nprint(result)  # Output: ([3.0, 5.0, 7.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\n### Explanation:\n1. **Input Handling**: The function checks if `x` is a scalar (either an integer or a float). If so, it converts it into a NumPy array with a single element. Otherwise, it ensures `x` is a NumPy array for consistent element-wise operations.\n\n2. **Affine Activation Calculation**: The affine function is applied element-wise using `slope * x + intercept`.\n\n3. **Derivatives**:\n   - The first derivative of an affine function is constant and equal to the `slope`.\n   - The second derivative of an affine function is always `0`.\n\n4. **Rounding**: Each element in the output lists is rounded to 4 decimal places using `np.round`.\n\n5. **Return**: The function returns a tuple containing three lists: the activation output, the first derivative, and the second derivative."}
{"task_id": 499, "completion_id": 0, "completion": "To implement the PCA dimensionality reduction routine from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Check if k is within the valid range\n    if not (1 <= k <= n_features):\n        return -1\n    \n    # Step 1: Standardise each feature\n    means = np.mean(data, axis=0)\n    std_devs = np.std(data, axis=0, ddof=0)  # Population standard deviation\n    \n    # Avoid division by zero for features with zero variance\n    std_devs[std_devs == 0] = 1\n    \n    standardized_data = (data - means) / std_devs\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Perform an eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors accordingly\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(sorted_eigenvectors.shape[1]):\n        max_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardized data on the first `k` eigenvectors\n    projection = standardized_data @ sorted_eigenvectors[:, :k]\n    \n    # Round the projected data to 4 decimal places and convert to a list\n    projected_data_rounded = np.round(projection, 4).tolist()\n    \n    return projected_data_rounded\n```\n\n### Explanation of the Code:\n\n1. **Standardization**: We standardize the data by subtracting the mean and dividing by the population standard deviation. If a feature has zero variance, we set its standard deviation to 1 to avoid division by zero.\n\n2. **Covariance Matrix**: We compute the sample covariance matrix using `np.cov` with `rowvar=False` to indicate that variables are represented by columns.\n\n3. **Eigen-decomposition**: We use `np.linalg.eigh` to perform eigen-decomposition, which is suitable for symmetric matrices like the covariance matrix.\n\n4. **Sorting Eigenvalues and Eigenvectors**: We sort the eigenvalues in descending order and rearrange the eigenvectors accordingly.\n\n5. **Fixing Eigenvector Signs**: We ensure the largest absolute value entry in each eigenvector is positive to remove sign ambiguity.\n\n6. **Projection**: We project the standardized data onto the first `k` eigenvectors and round the result to four decimal places.\n\nThis implementation should correctly perform PCA dimensionality reduction according to the specified requirements."}
{"task_id": 500, "completion_id": 0, "completion": "To implement a tiny Gradient Boosting binary classifier using decision stumps, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize the model with the average of the training labels\n    c = np.mean(y_train)\n    F_train = np.full(y_train.shape, c)\n\n    # List to store the stumps\n    stumps = []\n\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F_train\n\n        # Find the best decision stump\n        best_feature = None\n        best_threshold = None\n        best_left_value = None\n        best_right_value = None\n        best_error = float('inf')\n\n        # Iterate over all features\n        for feature_index in range(X_train.shape[1]):\n            feature_values = X_train[:, feature_index]\n            unique_values = np.unique(feature_values)\n\n            # Try splitting at each unique value\n            for threshold in unique_values:\n                left_mask = feature_values <= threshold\n                right_mask = feature_values > threshold\n\n                left_value = np.mean(residuals[left_mask]) if np.any(left_mask) else 0\n                right_value = np.mean(residuals[right_mask]) if np.any(right_mask) else 0\n\n                # Calculate squared error\n                error = np.sum((residuals[left_mask] - left_value) ** 2) + np.sum((residuals[right_mask] - right_value) ** 2)\n\n                # Update the best stump if this one is better\n                if error < best_error:\n                    best_feature = feature_index\n                    best_threshold = threshold\n                    best_left_value = left_value\n                    best_right_value = right_value\n                    best_error = error\n\n        # Store the best stump\n        stumps.append((best_feature, best_threshold, best_left_value, best_right_value))\n\n        # Update the model\n        feature_values = X_train[:, best_feature]\n        left_mask = feature_values <= best_threshold\n        right_mask = feature_values > best_threshold\n\n        F_train[left_mask] += learning_rate * best_left_value\n        F_train[right_mask] += learning_rate * best_right_value\n\n    # Predict on the test set\n    F_test = np.full(X_test.shape[0], c)\n    for best_feature, best_threshold, best_left_value, best_right_value in stumps:\n        feature_values = X_test[:, best_feature]\n        left_mask = feature_values <= best_threshold\n        right_mask = feature_values > best_threshold\n\n        F_test[left_mask] += learning_rate * best_left_value\n        F_test[right_mask] += learning_rate * best_right_value\n\n    # Convert regression scores to binary class labels\n    predictions = (F_test > 0.5).astype(int)\n\n    return predictions.tolist()\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the model with the average of the training labels, `c`, which serves as the initial prediction for all samples.\n\n2. **Decision Stump Learning**: For each boosting iteration, we compute residuals and find the best decision stump by iterating over all features and possible thresholds. The stump minimizes the squared error of the residuals.\n\n3. **Model Update**: After finding the best stump, we update the model's predictions on the training data using the learning rate.\n\n4. **Prediction**: Once the ensemble is built, we apply the learned stumps to the test data and convert the regression scores to binary class labels by thresholding at 0.5.\n\nThis implementation uses decision stumps as weak learners and optimizes the squared error loss, following the gradient boosting framework."}
{"task_id": 505, "completion_id": 0, "completion": "To implement the Contrastive Divergence (CD-k) update for a binary Restricted Boltzmann Machine (RBM), we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    # Compute the positive phase hidden probabilities\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n\n    # Initialize v_k_prob and h_k_prob\n    v_k_prob = X\n    h_k_prob = h0_prob\n\n    # Perform k Gibbs sampling steps\n    for _ in range(k):\n        # Compute visible probabilities given hidden states\n        v_k_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n        # Compute hidden probabilities given visible states\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n\n    # Compute positive and negative gradients\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n\n    # Round to 4 decimal places and convert to a list of lists\n    W_new_rounded = np.round(W_new, 4).tolist()\n\n    return W_new_rounded\n\ndef sigmoid(x):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))\n```\n\n### Explanation:\n\n1. **Sigmoid Function**: We define a helper function `sigmoid` to compute the sigmoid activation, which is used to calculate probabilities.\n\n2. **Positive Phase**: Compute the initial hidden probabilities `h0_prob` using the visible units `X`.\n\n3. **Gibbs Sampling**: Perform `k` Gibbs sampling steps. In each step, compute the visible probabilities `v_k_prob` from the hidden probabilities, and then update the hidden probabilities `h_k_prob` from the visible probabilities.\n\n4. **Gradients**: Calculate the positive gradient `pos_grad` and the negative gradient `neg_grad`.\n\n5. **Weight Update**: Update the weight matrix `W` using the learning rate and the difference between the positive and negative gradients, normalized by the batch size `m`.\n\n6. **Output**: Round the updated weight matrix to 4 decimal places and convert it to a list of lists for the final output.\n\nThis implementation follows the task requirements and handles the case of an empty mini-batch by returning an empty list."}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Compute the Chebyshev distance\n    chebyshev_distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(float(chebyshev_distance), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts both lists and NumPy arrays. If the inputs are lists, they are converted to NumPy arrays for easier manipulation.\n2. **Length Check**: The function checks if the two vectors have the same length using the `shape` attribute of NumPy arrays. If they differ, it returns `-1`.\n3. **Distance Calculation**: The Chebyshev distance is calculated using `np.max(np.abs(x - y))`, which computes the maximum of the absolute differences between corresponding elements of the vectors.\n4. **Output**: The result is rounded to four decimal places using Python's `round` function and returned as a standard Python float."}
{"task_id": 510, "completion_id": 0, "completion": "To implement the Variational Auto-Encoder (VAE) loss for Bernoulli visible units, we need to compute both the reconstruction loss and the KL divergence as described. Let's go through the implementation step-by-step:\n\n1. **Reconstruction Loss**: This is computed using binary cross-entropy between the true input `y` and the reconstructed output `y_pred`. We need to ensure numerical stability by clipping `y_pred` values to avoid taking the logarithm of 0 or 1.\n\n2. **KL Divergence**: This is computed using the formula provided, which involves the mean (`t_mean`) and log-variance (`t_log_var`) of the approximate posterior distribution.\n\n3. **Return the Average Loss**: Finally, we compute the average of the total loss over the mini-batch and round it to six decimal places.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Numerical stability for log operation\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute the reconstruction loss (binary cross-entropy)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=1)\n    \n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    \n    # Total loss for each sample in the batch\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Average loss over the batch\n    average_loss = np.mean(total_loss)\n    \n    # Return the average loss rounded to 6 decimal places\n    return round(average_loss, 6)\n```\n\n### Explanation:\n- **Clipping**: We use `np.clip` to ensure `y_pred` values are within `(epsilon, 1 - epsilon)` for numerical stability.\n- **Reconstruction Loss**: Calculated using binary cross-entropy formula.\n- **KL Divergence**: Calculated using the provided formula, which involves operations on `t_mean` and `t_log_var`.\n- **Average Loss**: We compute the mean of the total loss across the batch and round it to six decimal places before returning."}
{"task_id": 513, "completion_id": 0, "completion": "To implement the Factorization Machine regression prediction function, we will use `numpy` for efficient numerical computations. The function will compute predictions for each sample in the design matrix `X` using the given formula. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # Linear term: w0 + \u03a3\u2c7c w\u2c7c x\u2c7c\n    linear_term = w0 + np.dot(X, w)\n    \n    # Interaction term: \u00bd \u03a3_{f=1}^{k} [ (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2 \u2212 \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2 ]\n    interaction_term = np.zeros(n_samples)\n    k = V.shape[1]\n    \n    for f in range(k):\n        # Compute (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2\n        sum_Vx = np.dot(X, V[:, f])\n        sum_Vx_squared = sum_Vx ** 2\n        \n        # Compute \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2\n        V_squared = V[:, f] ** 2\n        sum_V_squared_x_squared = np.dot(X ** 2, V_squared)\n        \n        # Add to interaction term\n        interaction_term += 0.5 * (sum_Vx_squared - sum_V_squared_x_squared)\n    \n    # Total prediction\n    y_pred = linear_term + interaction_term\n    \n    # Round predictions to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# w0 = 0.5\n# w = [0.1, 0.2]\n# V = [[0.3, 0.4], [0.5, 0.6]]\n# predictions = fm_predict(X, w0, w, V)\n# print(predictions)\n```\n\n### Explanation:\n1. **Input Conversion**: We convert the input lists `X`, `w`, and `V` into `numpy` arrays for efficient matrix operations.\n2. **Linear Term Calculation**: We compute the linear term using the dot product of `X` and `w`, adding the bias `w0`.\n3. **Interaction Term Calculation**: For each latent factor `f`, we compute the sum of interactions and adjust it according to the formula. This involves calculating both `(\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2` and `\u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2`.\n4. **Prediction Calculation**: The final prediction for each sample is the sum of the linear and interaction terms.\n5. **Rounding**: We round the predictions to 4 decimal places before returning them.\n\nThis function efficiently computes predictions for all samples in the design matrix `X` using the Factorization Machine model."}
{"task_id": 517, "completion_id": 0, "completion": "To implement the `sigmoid` function with the specified requirements, we need to handle different types of input and ensure numerical stability for large values of `z`. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for uniform processing\n    z_array = np.array(z, dtype=np.float64)\n    \n    # Use a numerically stable version of the sigmoid function\n    # For positive values of z, use the standard formula\n    # For negative values of z, use an alternative formula to avoid overflow\n    positive_mask = z_array >= 0\n    negative_mask = ~positive_mask\n    \n    sigmoid_result = np.empty_like(z_array)\n    sigmoid_result[positive_mask] = 1 / (1 + np.exp(-z_array[positive_mask]))\n    sigmoid_result[negative_mask] = np.exp(z_array[negative_mask]) / (1 + np.exp(z_array[negative_mask]))\n    \n    # Round the result to four decimal places\n    sigmoid_result = np.round(sigmoid_result, 4)\n    \n    # Preserve the input structure\n    if np.isscalar(z):\n        return float(sigmoid_result)\n    else:\n        return sigmoid_result.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\n### Explanation:\n1. **Input Handling**: The function first converts the input `z` into a NumPy array. This allows us to handle scalars, lists, tuples, and arrays uniformly.\n\n2. **Numerical Stability**: \n   - For positive values of `z`, the standard sigmoid formula `1 / (1 + np.exp(-z))` is used.\n   - For negative values of `z`, the alternative formula `np.exp(z) / (1 + np.exp(z))` is used to prevent overflow when `z` is very large in magnitude.\n\n3. **Rounding**: The result is rounded to four decimal places using `np.round`.\n\n4. **Output Structure**: \n   - If the input `z` is a scalar, the function returns a float.\n   - Otherwise, it returns a list using `tolist()` to preserve the input structure.\n\nThis implementation ensures that the function is both numerically stable and meets the requirements for input and output structure."}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> any:\n        # Check if `actual` is one-hot encoded and convert if necessary\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check if `predicted` is one-hot encoded and convert if necessary\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\nThis code defines the `unhot` decorator, which automatically converts one-hot encoded NumPy arrays into their integer label representation before passing them to the wrapped metric function. The decorator checks if the arrays are two-dimensional with a second dimension larger than one, indicating one-hot encoding, and uses `argmax` to convert them to one-dimensional arrays. The original metric function is then called with these processed arrays, and its result is returned unmodified."}
{"task_id": 520, "completion_id": 0, "completion": "To implement the `sigmoid_grad` function, we need to handle different types of inputs: scalars, lists, and NumPy arrays. The function should compute the derivative of the sigmoid function for each element, round the result to four decimal places, and return the result in the same structure as the input. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_gradient(x):\n        # Compute the gradient and round to 4 decimal places\n        return np.round(x * (1 - x), 4)\n    \n    if isinstance(z, (int, float)):\n        # If z is a scalar, compute and return the gradient directly\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        # If z is a list, recursively apply the function to each element\n        return [sigmoid_grad(sub_z) for sub_z in z]\n    elif isinstance(z, np.ndarray):\n        # If z is a NumPy array, apply the function element-wise\n        return np.round(z * (1 - z), 4).tolist()\n    else:\n        raise TypeError(\"Input must be a float, list, or NumPy ndarray.\")\n\n# Example usage:\n# scalar input\nprint(sigmoid_grad(0.5))  # Output: 0.25\n\n# 1-D list input\nprint(sigmoid_grad([0.5, 0.8]))  # Output: [0.25, 0.16]\n\n# 2-D list input\nprint(sigmoid_grad([[0.5, 0.8], [0.3, 0.7]]))  # Output: [[0.25, 0.16], [0.21, 0.21]]\n\n# NumPy array input\nprint(sigmoid_grad(np.array([[0.5, 0.8], [0.3, 0.7]])))  # Output: [[0.25, 0.16], [0.21, 0.21]]\n```\n\n### Explanation:\n- **Scalar Input**: If the input is a scalar (either an integer or a float), the function computes the gradient directly and returns it.\n- **List Input**: If the input is a list, the function recursively applies itself to each element of the list. This handles both 1-D and nested lists.\n- **NumPy Array Input**: If the input is a NumPy array, the function computes the gradient element-wise using NumPy operations and then converts the result back to a list using `.tolist()`.\n- **Rounding**: The `np.round` function is used to ensure that all results are rounded to four decimal places.\n\nThis implementation ensures that the output structure matches the input structure, as required."}
{"task_id": 528, "completion_id": 0, "completion": "To implement the function `decision_boundary_grid`, we need to follow these steps:\n\n1. Determine the range for each dimension based on the input data `X`.\n2. Create equally spaced arrays `x1_plot` and `x2_plot` using `np.linspace`.\n3. Generate a mesh grid using `np.meshgrid`.\n4. Classify each point in the mesh grid using the given linear classifier rule.\n5. Store the classification results in a 2-D list and return it.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Extract the minimum and maximum values for each dimension\n    X = np.array(X)\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n\n    # Create equally spaced arrays for each dimension\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n\n    # Create a mesh grid\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n\n    # Initialize the result list\n    result = []\n\n    # Classify each point in the mesh grid\n    for i in range(grid_n):\n        row = []\n        for j in range(grid_n):\n            x1 = x1_mesh[i, j]\n            x2 = x2_mesh[i, j]\n            # Apply the classification rule\n            z = W[0] * x1 + W[1] * x2 + b\n            label = 1 if z >= 0 else -1\n            row.append(label)\n        result.append(row)\n\n    return result\n```\n\n### Explanation:\n\n- **Data Range Calculation**: We use `np.min` and `np.max` to find the range of values for each dimension in `X`.\n- **Grid Creation**: `np.linspace` generates `grid_n` equally spaced values between the min and max for each dimension.\n- **Mesh Grid**: `np.meshgrid` creates a grid of points from the two arrays.\n- **Classification**: We iterate over each point in the mesh grid, apply the linear classifier rule, and store the result in a list.\n- **Return**: The function returns a list of lists containing the classification results for each grid point."}
{"task_id": 537, "completion_id": 0, "completion": "To implement a Gaussian Naive Bayes classifier from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Calculate class priors\n    classes = np.unique(y_train)\n    class_priors = {c: np.mean(y_train == c) for c in classes}\n    \n    # Calculate mean and standard deviation for each feature and class\n    means = {}\n    stds = {}\n    epsilon = 1e-9  # Small constant to avoid division by zero\n    \n    for c in classes:\n        X_c = X_train[y_train == c]\n        means[c] = np.mean(X_c, axis=0)\n        stds[c] = np.std(X_c, axis=0) + epsilon\n    \n    # Function to calculate Gaussian likelihood\n    def gaussian_likelihood(x, mean, std):\n        return (1 / (np.sqrt(2 * np.pi) * std)) * np.exp(-((x - mean) ** 2) / (2 * std ** 2))\n    \n    # Predict class for each sample in X_test\n    predictions = []\n    for x in X_test:\n        posteriors = {}\n        for c in classes:\n            prior = np.log(class_priors[c])\n            likelihood = np.sum(np.log(gaussian_likelihood(x, means[c], stds[c])))\n            posteriors[c] = prior + likelihood\n        \n        # Choose the class with the highest posterior probability\n        predicted_class = max(posteriors, key=posteriors.get)\n        predictions.append(predicted_class)\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Class Priors**: We calculate the prior probability for each class as the relative frequency of each class in the training data.\n\n2. **Mean and Standard Deviation**: For each class, we compute the mean and standard deviation of each feature. We add a small constant `epsilon` to the standard deviation to avoid division by zero.\n\n3. **Gaussian Likelihood**: We define a function `gaussian_likelihood` to compute the likelihood of a feature value given the class, using the Gaussian distribution formula.\n\n4. **Posterior Probability**: For each test sample, we compute the posterior probability for each class by summing the log of the likelihoods (to prevent underflow) and adding the log of the prior.\n\n5. **Prediction**: We predict the class with the highest posterior probability for each test sample.\n\nThis implementation should correctly classify the test samples based on the Gaussian Naive Bayes model."}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): Array of predicted probabilities, shape (1, m) or (m,)\n    Y (np.ndarray): Array of true labels, shape (1, m) or (m,)\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n\n    # Number of examples\n    m = AL.shape[0]\n\n    # Clip probabilities to avoid log(0) issues\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n\n    # Compute the binary cross-entropy cost\n    cost = -np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)) / m\n\n    # Return the cost as a plain Python float\n    return float(cost)\n\n# Example usage:\n# AL = np.array([0.9, 0.2, 0.8])\n# Y = np.array([1, 0, 1])\n# print(round(compute_cost(AL, Y), 4))\n```\n\nThis function calculates the binary cross-entropy cost for a given set of predicted probabilities and true labels. It ensures numerical stability by clipping the probabilities before taking the logarithm. The result is returned as a plain Python float, which can be rounded to four decimal places for display purposes."}
{"task_id": 552, "completion_id": 0, "completion": "To solve this problem, we need to implement the forward-backward algorithm for Hidden Markov Models. This involves calculating the forward probabilities (`\u03b1`) and backward probabilities (`\u03b2`) and then combining them to compute the posterior state distribution (`\u03b3`). Let's go through the implementation step-by-step.\n\n```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Extract HMM parameters\n    pi = np.array(hmm['pi'])  # Initial state distribution\n    A = np.array(hmm['A'])    # State transition matrix\n    B = np.array(hmm['B'])    # Emission matrix\n\n    # Number of states and length of observation sequence\n    num_states = len(pi)\n    T = len(observations)\n\n    # Check if t is within the valid range\n    if t < 0 or t >= T:\n        return []\n\n    # Forward probabilities\n    alpha = np.zeros((T, num_states))\n    alpha[0] = pi * B[:, observations[0]]\n\n    for t_prime in range(1, T):\n        for j in range(num_states):\n            alpha[t_prime, j] = np.sum(alpha[t_prime - 1] * A[:, j]) * B[j, observations[t_prime]]\n\n    # Backward probabilities\n    beta = np.zeros((T, num_states))\n    beta[T - 1] = np.ones(num_states)\n\n    for t_prime in range(T - 2, -1, -1):\n        for i in range(num_states):\n            beta[t_prime, i] = np.sum(A[i] * B[:, observations[t_prime + 1]] * beta[t_prime + 1])\n\n    # Compute gamma\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n\n    # Round to four decimal places\n    gamma_t_rounded = np.round(gamma_t, 4)\n\n    return gamma_t_rounded.tolist()\n\n# Example usage:\nhmm = {\n    'pi': [0.6, 0.4],\n    'A': [[0.7, 0.3], [0.4, 0.6]],\n    'B': [[0.5, 0.5], [0.1, 0.9]]\n}\nobservations = [0, 1, 0]\nt = 1\n\nprint(gamma_probabilities(hmm, observations, t))\n```\n\n### Explanation:\n1. **Initialization**: We initialize the forward (`\u03b1`) and backward (`\u03b2`) probability matrices. The forward probabilities are initialized using the initial state distribution and the emission probabilities for the first observation.\n\n2. **Forward Algorithm**: We compute the forward probabilities for each time step and state using the recursive relation.\n\n3. **Backward Algorithm**: We compute the backward probabilities starting from the last observation and moving backward using the recursive relation.\n\n4. **Gamma Calculation**: We calculate the posterior probabilities (`\u03b3`) using the formula provided, normalizing by the sum of probabilities across all states.\n\n5. **Rounding**: We round each component of the resulting `\u03b3` vector to four decimal places and return it as a list.\n\nThis implementation efficiently computes the posterior state distribution for a given time step in a Hidden Markov Model."}
{"task_id": 555, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all points as noise (-1)\n    cluster_id = 0\n\n    # Compute pairwise Euclidean distances\n    distances = np.linalg.norm(data[:, np.newaxis] - data, axis=2)\n\n    # Build the neighborhood list for each sample\n    neighborhoods = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n\n    # Identify core points\n    core_points = [i for i in range(n_samples) if len(neighborhoods[i]) >= min_samples]\n\n    visited = set()\n\n    def expand_cluster(point_idx, cluster_id):\n        \"\"\"Expand the cluster from a core point using BFS.\"\"\"\n        queue = deque([point_idx])\n        labels[point_idx] = cluster_id\n\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighborhoods[current_point]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    if len(neighborhoods[neighbor]) >= min_samples:\n                        queue.append(neighbor)\n                    if labels[neighbor] == -1:  # If it's noise, label it as part of the cluster\n                        labels[neighbor] = cluster_id\n\n    # Start clustering\n    for point_idx in core_points:\n        if point_idx not in visited:\n            visited.add(point_idx)\n            cluster_id += 1\n            expand_cluster(point_idx, cluster_id)\n\n    return labels\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4], [8, 7], [8, 8], [25, 80]])\neps = 1.5\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n1. **Distance Calculation**: We calculate the pairwise Euclidean distances between all points using `np.linalg.norm`.\n\n2. **Neighborhood Construction**: For each point, we determine its neighborhood by checking which points are within the `eps` radius.\n\n3. **Core Point Identification**: A point is considered a core point if the size of its neighborhood is at least `min_samples`.\n\n4. **Cluster Expansion**: We use a breadth-first search (BFS) approach to expand clusters starting from each core point. We maintain a queue to explore all neighbors of core points and label them accordingly.\n\n5. **Labeling**: Points are labeled with cluster IDs starting from 1, and noise points are labeled as -1.\n\nThis implementation efficiently clusters the data using the DBSCAN algorithm, following the specified requirements."}
{"task_id": 561, "completion_id": 0, "completion": "To implement the Gaussian Mixture Model using the Expectation-Maximization algorithm, we need to follow these steps:\n\n1. **Initialization**: Randomly initialize the parameters for the Gaussian components, including mixture weights, means, and covariance matrices.\n\n2. **Expectation Step (E-step)**: Calculate the responsibilities, which are the probabilities that each sample belongs to each Gaussian component.\n\n3. **Maximization Step (M-step)**: Update the parameters of the Gaussian components using the calculated responsibilities.\n\n4. **Convergence Check**: Repeat the E-step and M-step until convergence is achieved, either by reaching the maximum number of iterations or when the change in mixture weights is below a specified tolerance.\n\n5. **Assignment**: Assign each sample to the component with the highest responsibility.\n\n6. **Sorting and Re-labeling**: Sort the components by the first coordinate of their mean and re-label the cluster indices accordingly.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"Perform Gaussian Mixture Model clustering using the EM algorithm.\"\"\"\n    n_samples, n_features = data.shape\n    \n    # Step 1: Initialize parameters\n    np.random.seed(42)  # For reproducibility\n    weights = np.ones(k) / k\n    means = data[np.random.choice(n_samples, k, replace=False)]\n    covariances = np.array([np.eye(n_features) for _ in range(k)])\n    \n    # Step 2: EM algorithm\n    for iteration in range(max_iter):\n        # E-step: Calculate responsibilities\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = data - means[i]\n            inv_cov = np.linalg.inv(covariances[i])\n            exponent = np.einsum('ij,ij->i', diff @ inv_cov, diff)\n            denom = np.sqrt((2 * np.pi) ** n_features * np.linalg.det(covariances[i]))\n            responsibilities[:, i] = weights[i] * np.exp(-0.5 * exponent) / denom\n        \n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        \n        # M-step: Update parameters\n        effective_n = responsibilities.sum(axis=0)\n        weights = effective_n / n_samples\n        new_means = np.dot(responsibilities.T, data) / effective_n[:, np.newaxis]\n        new_covariances = np.zeros_like(covariances)\n        \n        for i in range(k):\n            diff = data - new_means[i]\n            new_covariances[i] = np.dot(responsibilities[:, i] * diff.T, diff) / effective_n[i]\n        \n        # Check for convergence\n        if np.linalg.norm(weights - effective_n / n_samples) < epsilon:\n            break\n        \n        means, covariances = new_means, new_covariances\n    \n    # Step 3: Assign samples to components\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Step 4: Sort components by the first coordinate of their mean\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    \n    for new_label, old_label in enumerate(sorted_indices):\n        sorted_labels[labels == old_label] = new_label\n    \n    return sorted_labels.tolist()\n\n# Example usage:\n# data = np.random.rand(100, 2)\n# labels = gmm_em(data, k=3)\n# print(labels)\n```\n\n### Explanation:\n- **Initialization**: We randomly select `k` samples from the data to initialize the means and set the covariance matrices to identity matrices.\n- **E-step**: We compute the responsibilities using the Gaussian probability density function.\n- **M-step**: We update the weights, means, and covariances based on the responsibilities.\n- **Convergence**: We check if the change in weights is below the tolerance level.\n- **Sorting and Re-labeling**: We sort the components by the first coordinate of their mean and re-label the samples accordingly to ensure deterministic output."}
{"task_id": 562, "completion_id": 0, "completion": "To implement the Spectral Clustering algorithm as described, we need to follow the steps outlined in the task. Here's a complete implementation:\n\n```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n\n    # Step 1: Build the similarity graph\n    N = data.shape[0]\n    pairwise_sq_dists = np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=2)\n    W = np.exp(-gamma * pairwise_sq_dists)\n\n    # Step 2: Construct the Laplacian\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(W.sum(axis=1)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n\n    # Step 3: Compute the eigenvectors\n    eigvals, eigvecs = np.linalg.eigh(L)\n    indices = np.argsort(eigvals)[:n_cluster]\n    U = eigvecs[:, indices]\n\n    if method == 'normalized':\n        U = U / np.linalg.norm(U, axis=1, keepdims=True)\n\n    # Step 4: Run k-means in the eigenvector space\n    def kmeans(U, n_cluster):\n        # Initialize centroids using the first n_cluster samples\n        centroids = U[:n_cluster, :]\n        labels = np.zeros(N, dtype=int)\n\n        while True:\n            # Assign labels based on closest centroid\n            distances = np.linalg.norm(U[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=2)\n            new_labels = np.argmin(distances, axis=1)\n\n            # Check for convergence\n            if np.all(labels == new_labels):\n                break\n\n            labels = new_labels\n\n            # Update centroids\n            for i in range(n_cluster):\n                if np.any(labels == i):\n                    centroids[i] = U[labels == i].mean(axis=0)\n\n        return labels\n\n    labels = kmeans(U, n_cluster)\n\n    # Step 5: Relabel clusters\n    unique_labels = np.unique(labels)\n    label_map = {old_label: new_label for new_label, old_label in enumerate(unique_labels)}\n    relabeled = [label_map[label] for label in labels]\n\n    return relabeled\n```\n\n### Explanation:\n\n1. **Similarity Graph**: We compute the pairwise squared distances and use the Gaussian kernel to create the similarity matrix `W`.\n\n2. **Laplacian Construction**: Depending on the method, we construct either the unnormalized Laplacian `L = D - W` or the normalized Laplacian `L_sym = D^(-1/2) L D^(-1/2)`.\n\n3. **Eigenvectors**: We compute the eigenvectors corresponding to the smallest `n_cluster` eigenvalues of the Laplacian matrix.\n\n4. **K-means Clustering**: We perform k-means clustering on the rows of the eigenvector matrix. The initial centroids are chosen deterministically as the first `n_cluster` samples.\n\n5. **Relabeling**: We ensure that the cluster labels are sorted by the smallest original index in each cluster.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 563, "completion_id": 0, "completion": "To implement the dual-form perceptron learning algorithm, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # Build the Gram matrix G\n    G = np.dot(X_data, X_data.T)\n\n    for _ in range(max_iter):\n        no_update = True\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            # Check if the current sample is misclassified\n            if y_data[i] * (g + b) <= 0:\n                # Update alpha and b\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_update = False\n        \n        # If no update was made during the entire pass, the algorithm has converged\n        if no_update:\n            break\n\n    # Recover the weight vector w\n    w = np.sum((alpha * y_data)[:, np.newaxis] * X_data, axis=0)\n\n    # Round w and b to 4 decimal places\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n\n    return w, b\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing the `alpha` vector to zeros and the bias `b` to zero.\n\n2. **Gram Matrix**: The Gram matrix `G` is computed using the dot product of `X_data` with its transpose. This matrix contains the inner products of all pairs of training samples.\n\n3. **Training Loop**: We iterate up to `max_iter` times, performing updates on `alpha` and `b` whenever a sample is misclassified. A sample is misclassified if `y\u1d62 (g + b) \u2264 0`.\n\n4. **Convergence Check**: If a complete pass over the data results in no updates, the algorithm has converged, and we exit the loop early.\n\n5. **Weight Recovery**: After training, the weight vector `w` is recovered using the formula `w = \u03a3\u1d62 \u03b1\u1d62 y\u1d62 x\u1d62`.\n\n6. **Rounding**: Both the weight vector `w` and the bias `b` are rounded to 4 decimal places before returning.\n\nThis implementation follows the algorithm as described and should work correctly for training a perceptron using the dual formulation."}
{"task_id": 564, "completion_id": 0, "completion": "To implement the `predict_sample` function, we need to traverse the decision tree according to the rules specified for classification and regression tasks. Here's the complete implementation:\n\n```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    \n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            matched_child = None\n            for child in current_node.child:\n                if child.x == feature_value:\n                    matched_child = child\n                    break\n            current_node = matched_child if matched_child else current_node.child[1]\n        \n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    \n    return current_node.y\n```\n\n### Explanation:\n\n1. **Node Class**: This class is a simple representation of a node in the decision tree. It can store attributes like `label`, `x`, `s`, `y`, and `child`.\n\n2. **predict_sample Function**:\n   - **Initialization**: Start with the root node.\n   - **Traversal**:\n     - **Classification**:\n       - If the current node is a leaf (`current_node.y` is not `None`), return `y`.\n       - Otherwise, inspect the feature at index `current_node.label`.\n       - Traverse to the child node where `child.x` matches the feature value. If no match is found, default to the second child.\n     - **Regression**:\n       - If the current node is a leaf (`current_node.y` is not `None`), return `y`.\n       - Otherwise, inspect the feature at index `current_node.label`.\n       - Traverse to the first child if the feature value is less than or equal to `current_node.s`, otherwise traverse to the second child.\n   - **Return**: Once a leaf node is reached, return the value stored in `y`.\n\nThis function efficiently traverses the decision tree according to the specified rules and returns the prediction stored in the leaf node."}
{"task_id": 565, "completion_id": 0, "completion": "To implement the utility function for selecting the best feature based on maximum information gain, we need to calculate the entropy of the label distribution and the conditional entropy for each feature. Here's how you can implement this:\n\n```python\nimport numpy as np\nimport math\n\ndef entropy(y: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a label distribution.\"\"\"\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef conditional_entropy(X_feature: np.ndarray, y: np.ndarray) -> float:\n    \"\"\"Calculate the conditional entropy of the label distribution given a feature.\"\"\"\n    unique_values, counts = np.unique(X_feature, return_counts=True)\n    conditional_entropy = 0.0\n    for value, count in zip(unique_values, counts):\n        y_subset = y[X_feature == value]\n        conditional_entropy += (count / len(X_feature)) * entropy(y_subset)\n    return conditional_entropy\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    # Calculate the entropy of the label distribution\n    label_entropy = entropy(y)\n    \n    # Initialize variables to track the best feature and maximum information gain\n    best_feature_index = -1\n    max_information_gain = -1.0\n    \n    # Iterate over each feature to calculate information gain\n    for feature_index in range(X.shape[1]):\n        X_feature = X[:, feature_index]\n        feature_conditional_entropy = conditional_entropy(X_feature, y)\n        information_gain = label_entropy - feature_conditional_entropy\n        \n        # Update the best feature if the current one has higher information gain\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    # Return the best feature index and the maximum information gain rounded to 6 decimal places\n    return best_feature_index, round(max_information_gain, 6)\n\n# Example usage:\n# X = np.array([[0, 1], [1, 0], [1, 1], [0, 0]])\n# y = np.array([0, 1, 1, 0])\n# print(choose_best_feature(X, y))  # Output: (0, 0.311278)\n```\n\n### Explanation:\n1. **Entropy Calculation**: The `entropy` function calculates the entropy of the label distribution using the formula \\( H(y) = -\\sum p_i \\log_2(p_i) \\), where \\( p_i \\) is the probability of each unique label.\n\n2. **Conditional Entropy Calculation**: The `conditional_entropy` function calculates the conditional entropy of the label distribution given a feature. It iterates over each unique value of the feature, calculates the entropy of the subset of labels corresponding to that feature value, and weights it by the proportion of that feature value in the dataset.\n\n3. **Information Gain Calculation**: The `choose_best_feature` function calculates the information gain for each feature and selects the feature with the highest information gain. If multiple features have the same information gain, the feature with the smallest index is chosen.\n\n4. **Output**: The function returns a tuple containing the index of the best feature and the maximum information gain rounded to 6 decimal places."}
{"task_id": 566, "completion_id": 0, "completion": "To implement a mini Isolation Forest for outlier detection, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    n_samples, n_features = data.shape\n    \n    # Function to compute c(n)\n    def c(n):\n        if n <= 1:\n            return 0\n        else:\n            return 2 * (math.log(n - 1) + 0.5772156649) - 2 * (n - 1) / n\n    \n    # Function to build a single isolation tree\n    def build_tree(data, current_depth, height_limit):\n        n_samples, n_features = data.shape\n        \n        if current_depth >= height_limit or n_samples <= 1:\n            return c(n_samples)\n        \n        # Randomly select a feature and a threshold\n        feature = np.random.randint(n_features)\n        min_val, max_val = np.min(data[:, feature]), np.max(data[:, feature])\n        if min_val == max_val:\n            return c(n_samples)\n        \n        threshold = np.random.uniform(min_val, max_val)\n        \n        # Split the data\n        left_data = data[data[:, feature] < threshold]\n        right_data = data[data[:, feature] >= threshold]\n        \n        # Recursively build the tree\n        left_path_length = build_tree(left_data, current_depth + 1, height_limit)\n        right_path_length = build_tree(right_data, current_depth + 1, height_limit)\n        \n        return 1 + (len(left_data) / n_samples) * left_path_length + (len(right_data) / n_samples) * right_path_length\n    \n    # Calculate height limit\n    height_limit = math.ceil(math.log2(sample_size))\n    \n    # Calculate phi\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    \n    # Compute path lengths for each sample\n    path_lengths = np.zeros(n_samples)\n    \n    for _ in range(n_trees):\n        # Draw a subsample\n        if sample_size >= n_samples:\n            subsample = data\n        else:\n            indices = np.random.choice(n_samples, sample_size, replace=False)\n            subsample = data[indices]\n        \n        # Build the tree and compute path lengths\n        for i in range(n_samples):\n            path_lengths[i] += build_tree(subsample, 0, height_limit)\n    \n    # Average path length\n    avg_path_length = path_lengths / n_trees\n    \n    # Compute anomaly scores\n    scores = 2 ** (-avg_path_length / phi)\n    \n    # Determine outliers\n    if epsilon == 0:\n        return []\n    \n    threshold_index = int((1 - epsilon) * n_samples)\n    sorted_indices = np.argsort(scores)\n    outlier_indices = sorted_indices[threshold_index:]\n    \n    return sorted(outlier_indices.tolist())\n\n# Example usage:\ndata = np.random.rand(100, 5)  # Example data\noutliers = detect_outliers(data, n_trees=10, sample_size=20, epsilon=0.1)\nprint(outliers)\n```\n\n### Explanation:\n1. **Tree Building**: The `build_tree` function recursively splits the data based on a randomly chosen feature and threshold until the height limit is reached or the node contains at most one sample.\n\n2. **Path Length Calculation**: The path length is calculated using the recursive tree structure, and the correction factor `c(n)` is applied when a leaf node is reached.\n\n3. **Anomaly Score Calculation**: The anomaly score is computed using the average path length and the formula provided.\n\n4. **Outlier Detection**: The scores are sorted, and the top `\u03b5 * 100%` scores are considered outliers.\n\n5. **Reproducibility**: The global seed ensures that the randomness is consistent across runs.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 568, "completion_id": 0, "completion": "To implement a Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm, we need to follow a structured approach. The GIS algorithm is used to find the weights for the features that maximize the entropy of the distribution, subject to the constraints imposed by the training data.\n\nHere's a step-by-step implementation of the `maxent_predict` function:\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Initialize variables\n    num_samples, num_features = X_train.shape\n    unique_labels = np.unique(y_train)\n    num_labels = len(unique_labels)\n    \n    # Create a mapping from label to index\n    label_to_index = {label: idx for idx, label in enumerate(unique_labels)}\n    \n    # Step 2: Build feature functions and empirical distribution\n    feature_functions = defaultdict(int)\n    empirical_counts = defaultdict(float)\n    \n    for i in range(num_samples):\n        for j in range(num_features):\n            feature_value = X_train[i, j]\n            label = y_train[i]\n            feature_functions[(j, feature_value, label)] += 1\n            empirical_counts[(j, feature_value, label)] += 1 / num_samples\n    \n    # Step 3: Initialize weights\n    weights = defaultdict(float)\n    \n    # Step 4: Generalized Iterative Scaling (GIS) algorithm\n    for iteration in range(n_iter):\n        max_update = 0\n        # Calculate expected counts\n        expected_counts = defaultdict(float)\n        \n        for i in range(num_samples):\n            Z = 0\n            prob_y_given_x = defaultdict(float)\n            \n            for label in unique_labels:\n                exponent = 0\n                for j in range(num_features):\n                    feature_value = X_train[i, j]\n                    if (j, feature_value, label) in weights:\n                        exponent += weights[(j, feature_value, label)]\n                prob_y_given_x[label] = math.exp(exponent)\n                Z += prob_y_given_x[label]\n            \n            for label in unique_labels:\n                prob_y_given_x[label] /= Z\n                for j in range(num_features):\n                    feature_value = X_train[i, j]\n                    expected_counts[(j, feature_value, label)] += prob_y_given_x[label] / num_samples\n        \n        # Update weights\n        for feature, empirical_count in empirical_counts.items():\n            j, feature_value, label = feature\n            if expected_counts[feature] > 0:\n                update = math.log(empirical_count / expected_counts[feature])\n                weights[feature] += update\n                max_update = max(max_update, abs(update))\n        \n        # Check for convergence\n        if max_update < epsilon:\n            break\n    \n    # Step 5: Predict labels for X_test\n    predictions = []\n    for i in range(X_test.shape[0]):\n        Z = 0\n        prob_y_given_x = defaultdict(float)\n        \n        for label in unique_labels:\n            exponent = 0\n            for j in range(num_features):\n                feature_value = X_test[i, j]\n                if (j, feature_value, label) in weights:\n                    exponent += weights[(j, feature_value, label)]\n            prob_y_given_x[label] = math.exp(exponent)\n            Z += prob_y_given_x[label]\n        \n        # Normalize to get probabilities\n        for label in unique_labels:\n            prob_y_given_x[label] /= Z\n        \n        # Choose the label with the highest probability\n        predicted_label = max(prob_y_given_x, key=prob_y_given_x.get)\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing necessary variables, including the number of samples, features, and unique labels. We also create mappings for labels to indices.\n\n2. **Feature Functions and Empirical Distribution**: We build feature functions and calculate empirical counts for each feature-value-label combination.\n\n3. **Weights Initialization**: We initialize the weights for each feature-value-label combination to zero.\n\n4. **GIS Algorithm**: We iteratively update the weights using the GIS algorithm. For each iteration, we calculate the expected counts based on the current weights, update the weights, and check for convergence.\n\n5. **Prediction**: For each test sample, we calculate the probability of each label and choose the label with the highest probability as the prediction.\n\nThis implementation uses the standard library and `numpy` as required, and it returns a list of predicted labels for the test samples."}
{"task_id": 569, "completion_id": 0, "completion": "To implement the `statistic_key_word` function, we need to analyze the document-frequency of words across multiple documents. Here's how we can achieve this:\n\n1. **Count Document Occurrences**: For each word, count how many documents contain that word.\n2. **Calculate Document-Frequency Ratio**: Divide the count of documents containing each word by the total number of documents.\n3. **Sort Words by Frequency**: Sort the words based on their document-frequency ratio in descending order.\n4. **Select Top Words**: Based on the `cut_off` parameter, select the top `k` words or all words if `cut_off` is `None`.\n\nHere's the complete implementation:\n\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Total number of documents\n    total_documents = len(data)\n    \n    # Count the number of documents each word appears in\n    word_document_count = Counter()\n    \n    for _, words in data:\n        # Use a set to ensure each word is only counted once per document\n        unique_words = set(words)\n        word_document_count.update(unique_words)\n    \n    # Calculate document-frequency ratio and round to 4 decimal places\n    word_ratios = [\n        (word, round(count / total_documents, 4))\n        for word, count in word_document_count.items()\n    ]\n    \n    # Sort words by their document-frequency ratio in descending order\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Determine the set of most common words based on cut_off\n    if cut_off is None:\n        most_common_words = {word for word, _ in word_ratios}\n    else:\n        most_common_words = {word for word, _ in word_ratios[:cut_off]}\n    \n    return word_ratios, most_common_words\n```\n\n### Explanation:\n\n- **Counting Occurrences**: We use a `Counter` to count how many documents each word appears in. By converting `words` to a set, we ensure each word is counted only once per document.\n- **Calculating Ratios**: We compute the document-frequency ratio for each word and round it to four decimal places.\n- **Sorting**: We sort the list of word-ratio pairs in descending order based on the ratio.\n- **Selecting Top Words**: Depending on the `cut_off` value, we select the top `k` words or all words if `cut_off` is `None`.\n\nThis function efficiently calculates and returns the desired statistics for the given text documents."}
{"task_id": 571, "completion_id": 0, "completion": "To implement the `compute_svm_parameters` function, we need to follow the formulas provided for calculating the weight vector `w` and the bias `b`. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = X.T @ (alpha * y)\n    \n    # Compute the bias term b\n    b = np.mean(y - X @ w)\n    \n    # Round w and b to 4 decimal places\n    w_list = np.round(w, 4).tolist()\n    b = round(b, 4)\n    \n    return w_list, b\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, -1, 1])\n# alpha = np.array([0.5, 0.3, 0.2])\n# w_list, b = compute_svm_parameters(X, y, alpha)\n# print(w_list, b)\n```\n\n### Explanation:\n1. **Weight Vector Calculation**:\n   - The weight vector `w` is calculated using the formula: \\( \\mathbf{w} = X^\\top (\\boldsymbol{\\alpha} \\odot \\mathbf{y}) \\).\n   - This involves element-wise multiplication of `alpha` and `y`, followed by a matrix multiplication with the transpose of `X`.\n\n2. **Bias Calculation**:\n   - The bias `b` is calculated using the formula: \\( b = \\frac{1}{n} \\sum_{i=1}^{n} \\left( y_i - \\mathbf{w}^\\top \\mathbf{x}_i \\right) \\).\n   - This is implemented as the mean of the differences between `y` and the dot product of `X` and `w`.\n\n3. **Rounding**:\n   - Both the weight vector `w` and the bias `b` are rounded to 4 decimal places using `np.round` and `round`, respectively.\n\n4. **Return**:\n   - The function returns a tuple containing the rounded weight vector as a list and the rounded bias term."}
{"task_id": 572, "completion_id": 0, "completion": "To implement the Local Outlier Factor (LOF) algorithm from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef euclidean_distance_matrix(data):\n    \"\"\"Compute the full pair-wise Euclidean distance matrix.\"\"\"\n    n_samples = data.shape[0]\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            distance_matrix[i, j] = np.linalg.norm(data[i] - data[j])\n    return distance_matrix\n\ndef k_distance_and_neighbors(distance_matrix, k):\n    \"\"\"Compute k-distance and k nearest neighbors for each sample.\"\"\"\n    n_samples = distance_matrix.shape[0]\n    k_distances = np.zeros(n_samples)\n    neighbors = []\n    for i in range(n_samples):\n        sorted_indices = np.argsort(distance_matrix[i])\n        k_distances[i] = distance_matrix[i, sorted_indices[k]]\n        neighbors.append(sorted_indices[:k])\n    return k_distances, neighbors\n\ndef reachability_distance(distance_matrix, k_distances, p, q):\n    \"\"\"Compute the reachability distance between two points.\"\"\"\n    return max(k_distances[q], distance_matrix[p, q])\n\ndef local_reachability_density(distance_matrix, k_distances, neighbors, p, k):\n    \"\"\"Compute the Local Reachability Density (LRD) of a point.\"\"\"\n    reach_dists = [reachability_distance(distance_matrix, k_distances, p, q) for q in neighbors[p]]\n    return k / np.sum(reach_dists)\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample.\"\"\"\n    distance_matrix = euclidean_distance_matrix(data)\n    k_distances, neighbors = k_distance_and_neighbors(distance_matrix, k)\n    \n    n_samples = data.shape[0]\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd[i] = local_reachability_density(distance_matrix, k_distances, neighbors, i, k)\n    \n    lof_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd_ratios = [lrd[q] / lrd[i] for q in neighbors[i]]\n        lof_scores[i] = np.sum(lrd_ratios) / k\n    \n    lof_scores = np.round(lof_scores, 4)\n    outlier_indices = np.where(lof_scores > epsilon)[0]\n    \n    return lof_scores.tolist(), sorted(outlier_indices.tolist())\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4], [8, 7], [8, 8]])\nk = 2\nepsilon = 1.5\nlof_scores, outliers = local_outlier_factor(data, k, epsilon)\nprint(\"LOF Scores:\", lof_scores)\nprint(\"Outlier Indices:\", outliers)\n```\n\n### Explanation:\n1. **Euclidean Distance Matrix**: We compute the pair-wise Euclidean distance matrix for the dataset.\n2. **k-Distance and Neighbors**: For each sample, we find the k-distance and the indices of the k nearest neighbors.\n3. **Reachability Distance**: Defined as the maximum of the k-distance of the neighbor and the actual distance between the points.\n4. **Local Reachability Density (LRD)**: Calculated using the reachability distances of the k nearest neighbors.\n5. **Local Outlier Factor (LOF)**: The ratio of the average LRD of the neighbors to the LRD of the point itself.\n6. **Outlier Detection**: We identify samples with LOF scores greater than `epsilon`.\n\nThis implementation should work for any dataset provided as a NumPy array, with the constraints specified."}
{"task_id": 574, "completion_id": 0, "completion": "To implement the synthetic 2-D data generator as described, we need to follow these steps:\n\n1. Set the random seed if provided.\n2. Initialize arrays to store the generated data.\n3. For each class label, generate the specified number of training and validation points.\n4. Sample the coordinates from the specified uniform distribution.\n5. Round the coordinates to 4 decimal places.\n6. Return the generated data as a tuple of NumPy arrays.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    \n    X_train = np.zeros((m * n_train, 2))\n    X_val = np.zeros((m * n_val, 2))\n    y_train = np.zeros(m * n_train, dtype=int)\n    y_val = np.zeros(m * n_val, dtype=int)\n    \n    for c in range(m):\n        base = 10 * (c // 2)\n        \n        # Generate training points\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train_points = np.random.uniform(base + 1, base + 9, n_train)\n        X_train[c * n_train:(c + 1) * n_train] = np.column_stack((x_train, y_train_points))\n        y_train[c * n_train:(c + 1) * n_train] = c\n        \n        # Generate validation points\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val_points = np.random.uniform(base + 1, base + 9, n_val)\n        X_val[c * n_val:(c + 1) * n_val] = np.column_stack((x_val, y_val_points))\n        y_val[c * n_val:(c + 1) * n_val] = c\n    \n    # Round coordinates to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    \n    return X_train, X_val, y_train, y_val\n```\n\n### Explanation:\n- **Random Seed**: We set the seed for both Python's `random` module and NumPy's random functions to ensure reproducibility.\n- **Data Initialization**: We initialize arrays to store the training and validation data points and their labels.\n- **Data Generation**: For each class `c`, we calculate the `base` and generate `n_train` and `n_val` points using a uniform distribution. The points are stored in the respective arrays.\n- **Rounding**: We round the coordinates to 4 decimal places to meet the output constraints.\n- **Return**: Finally, we return the generated data as a tuple of NumPy arrays."}
{"task_id": 579, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm from scratch using NumPy, we need to follow the steps outlined in your task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres. Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached. The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Step 1: Initialisation\n    m, d = X.shape\n    centres = X[:k].copy()  # Take the first k points as initial centres\n    labels = np.zeros(m, dtype=int)\n\n    for iteration in range(max_iters):\n        # Step 2: Assignment step\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Step 3: Update step\n        new_centres = np.zeros((k, d))\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if len(points_in_cluster) > 0:\n                new_centres[j] = np.mean(points_in_cluster, axis=0)\n            else:\n                new_centres[j] = centres[j]  # Keep unchanged if no points are assigned\n\n        # Check for convergence (if centres do not change)\n        if np.allclose(new_centres, centres, atol=1e-4):\n            break\n\n        centres = new_centres\n\n    # Round the final centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n\n    return labels.tolist(), rounded_centres\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# labels, centres = kmeans(X, k)\n# print(\"Labels:\", labels)\n# print(\"Centres:\", centres)\n```\n\n### Explanation:\n1. **Initialisation**: We start by selecting the first `k` points from the dataset `X` as the initial cluster centers. This ensures the algorithm is deterministic.\n\n2. **Assignment Step**: For each point in `X`, we calculate the Euclidean distance to each cluster center and assign the point to the nearest center. In case of a tie, `np.argmin` naturally selects the center with the smaller index.\n\n3. **Update Step**: We recompute the cluster centers as the mean of all points assigned to each cluster. If a cluster loses all its points, the center remains unchanged.\n\n4. **Convergence Check**: We repeat the assignment and update steps until the cluster centers do not change significantly (using `np.allclose` for comparison) or until the maximum number of iterations is reached.\n\n5. **Output**: The function returns the final labels for each point and the rounded cluster centers.\n\nThis implementation uses NumPy for efficient numerical operations and ensures the results are deterministic and testable."}
{"task_id": 581, "completion_id": 0, "completion": "To implement Elastic-Net regularized linear regression using batch gradient descent, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    # Get the number of samples (m) and features (n)\n    m, n = X.shape\n    \n    # Initialize weights and bias\n    weights = np.zeros(n)\n    bias = 0.0\n    \n    # If learning rate is 0 or iterations is 0, return initial parameters\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    \n    # Perform gradient descent for the specified number of iterations\n    for _ in range(iterations):\n        # Compute predictions\n        y_pred = X.dot(weights) + bias\n        \n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Compute gradients\n        weight_gradients = np.zeros(n)\n        for j in range(n):\n            weight_gradients[j] = (-2 * X[:, j].dot(residuals) + \n                                   l1_penalty * np.sign(weights[j]) + \n                                   2 * l2_penalty * weights[j]) / m\n        \n        bias_gradient = -2 * np.sum(residuals) / m\n        \n        # Update weights and bias\n        weights -= learning_rate * weight_gradients\n        bias -= learning_rate * bias_gradient\n    \n    # Round weights and bias to 4 decimal places\n    weights = [round(w, 4) for w in weights]\n    bias = round(bias, 4)\n    \n    return (weights, bias)\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# learning_rate = 0.01\n# iterations = 1000\n# l1_penalty = 0.1\n# l2_penalty = 0.1\n# print(elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty))\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the weights and bias to zero.\n\n2. **Gradient Descent**: For each iteration, we:\n   - Compute the predictions using the current weights and bias.\n   - Calculate the residuals (difference between actual and predicted values).\n   - Compute the gradients for each weight using the formula provided, which includes both L1 and L2 penalties.\n   - Compute the gradient for the bias.\n   - Update the weights and bias using the computed gradients and the learning rate.\n\n3. **Return Values**: After completing the specified number of iterations, we round the weights and bias to four decimal places and return them.\n\nThis implementation follows the task description closely and ensures that the Elastic-Net regularization is applied correctly during the gradient descent process."}
{"task_id": 591, "completion_id": 0, "completion": "To solve the task of performing a forward pass through a fully-connected feed-forward neural network, we need to implement the function `neural_net_predict`. This function will take the network's weights and an input vector, and compute the output of the network using the specified activation functions. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef relu(x):\n    \"\"\"Applies the ReLU activation function element-wise.\"\"\"\n    return np.maximum(0, x)\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert input to a numpy array\n    current_input = np.array(x)\n    \n    # Iterate over each layer\n    for layer_index, layer_weights in enumerate(weights):\n        # Add bias term to the current input\n        current_input = np.insert(current_input, 0, 1)\n        \n        # Compute the output of the current layer\n        layer_output = []\n        for neuron_weights in layer_weights:\n            # Perform dot product between neuron weights and current input\n            neuron_output = np.dot(neuron_weights, current_input)\n            layer_output.append(neuron_output)\n        \n        # Convert layer output to numpy array\n        layer_output = np.array(layer_output)\n        \n        # Apply ReLU activation function to all layers except the last one\n        if layer_index < len(weights) - 1:\n            layer_output = relu(layer_output)\n        \n        # Update current input for the next layer\n        current_input = layer_output\n    \n    # Round the final output to four decimals\n    if len(current_input) == 1:\n        return round(current_input[0], 4)\n    else:\n        return [round(output, 4) for output in current_input]\n\n# Example usage:\n# weights = [\n#     [[0.5, 0.2, 0.8], [0.1, 0.4, 0.6]],  # Layer 0\n#     [[0.3, 0.7, 0.9]]                   # Layer 1 (output layer)\n# ]\n# x = [0.5, 0.3]\n# print(neural_net_predict(weights, x))  # Output: 0.774\n```\n\n### Explanation:\n1. **Input Preparation**: Convert the input vector `x` into a NumPy array for efficient numerical operations.\n\n2. **Forward Pass**:\n   - For each layer, add a bias term `1` to the current input.\n   - Compute the output of each neuron in the layer using the dot product of the neuron's weights and the current input.\n   - Apply the ReLU activation function to the output of all layers except the last one.\n\n3. **Output**:\n   - If the final layer has a single neuron, return the output as a float rounded to four decimal places.\n   - If the final layer has multiple neurons, return a list of outputs, each rounded to four decimal places.\n\nThis implementation efficiently computes the network's output using NumPy for numerical operations and adheres to the specified activation functions and output constraints."}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Compute centroids using K-Means clustering algorithm.\"\"\"\n    # Step 1: Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign samples to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)**2\n        closest_centroids = np.argmin(distances, axis=1)\n        \n        # Step 3: Update centroids\n        new_centroids = np.array([X[closest_centroids == i].mean(axis=0) if np.any(closest_centroids == i) else centroids[i] for i in range(k)])\n        \n        # Step 4: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 5: Sort centroids lexicographically and round to 4 decimal places\n    sorted_centroids = sorted(centroids.tolist())\n    rounded_centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted_centroids]\n    \n    return rounded_centroids\n```\n\n### Explanation:\n\n1. **Initialization**: The centroids are initialized using the first `k` samples from the dataset `X`. This ensures deterministic results.\n\n2. **Assignment Step**: Each sample is assigned to the nearest centroid based on the squared Euclidean distance. This is efficiently computed using NumPy's broadcasting and vectorized operations.\n\n3. **Update Step**: Each centroid is updated to the mean of the samples assigned to it. If a centroid has no samples assigned (i.e., a cluster is empty), it remains unchanged.\n\n4. **Convergence Check**: The algorithm stops early if the centroids move less than `1e-4` in a full iteration, ensuring efficient computation.\n\n5. **Sorting and Rounding**: After convergence, the centroids are sorted lexicographically and rounded to 4 decimal places, as required.\n\nThis implementation efficiently handles the K-Means clustering process while adhering to the specified constraints and requirements."}
