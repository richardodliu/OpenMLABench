{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    num_cols_a = len(a[0]) if a else 0\n    len_b = len(b)\n    if num_cols_a != len_b:\n        return -1\n    result = []\n    for row in a:\n        dot_product = 0\n        for i in range(len_b):\n            dot_product += row[i] * b[i]\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    rows = len(a)\n    cols = len(a[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = a[i][j]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    try:\n        arr = np.array(a)\n        reshaped = arr.reshape(new_shape)\n        return reshaped.tolist()\n    except ValueError:\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        means = []\n        for row in matrix:\n            if len(row) == 0:\n                means.append(0)\n            else:\n                means.append(sum(row) / len(row))\n        return means\n    elif mode == 'column':\n        if len(matrix) == 0:\n            return []\n        num_columns = len(matrix[0])\n        means = [0] * num_columns\n        for row in matrix:\n            for (col_index, value) in enumerate(row):\n                means[col_index] += value\n        for i in range(num_columns):\n            means[i] /= len(matrix)\n        return means\n    else:\n        raise ValueError(\"Mode must be either 'row' or 'column'\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = []\n        for element in row:\n            new_row.append(element * scalar)\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    discriminant = (a + d) ** 2 - 4 * (a * d - b * c)\n    sqrt_discriminant = discriminant ** 0.5\n    eigenvalue1 = (a + d + sqrt_discriminant) / 2\n    eigenvalue2 = (a + d - sqrt_discriminant) / 2\n    eigenvalues = [eigenvalue1, eigenvalue2]\n    eigenvalues.sort(reverse=True)\n    return eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    try:\n        A_np = np.array(A)\n        T_np = np.array(T)\n        S_np = np.array(S)\n        T_inv = np.linalg.inv(T_np)\n        result = np.dot(T_inv, np.dot(A_np, S_np))\n        result = np.round(result, 4)\n        return result.tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        return None\n    (a, b) = (matrix[0][0], matrix[0][1])\n    (c, d) = (matrix[1][0], matrix[1][1])\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    rows_a = len(a)\n    cols_a = len(a[0])\n    rows_b = len(b)\n    cols_b = len(b[0])\n    if cols_a != rows_b:\n        return -1\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    num_vectors = len(vectors)\n    num_observations = len(vectors[0])\n    covariance_matrix = []\n    for i in range(num_vectors):\n        row = []\n        mean_i = sum(vectors[i]) / num_observations\n        for j in range(num_vectors):\n            mean_j = sum(vectors[j]) / num_observations\n            covariance = 0\n            for k in range(num_observations):\n                covariance += (vectors[i][k] - mean_i) * (vectors[j][k] - mean_j)\n            covariance /= num_observations - 1\n            row.append(covariance)\n        covariance_matrix.append(row)\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    x = np.zeros_like(b)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(A.shape[0]):\n            s = 0\n            for j in range(A.shape[1]):\n                if i != j:\n                    s += A[i, j] * x[j]\n            x_new[i] = (b[i] - s) / A[i, i]\n        x = np.round(x_new, 4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    ATA = np.dot(A.T, A)\n    a = ATA[0, 0]\n    b = ATA[0, 1]\n    c = ATA[1, 0]\n    d = ATA[1, 1]\n    trace_ATA = a + d\n    det_ATA = a * d - b * c\n    discriminant = trace_ATA ** 2 - 4 * det_ATA\n    lambda1 = (trace_ATA + np.sqrt(discriminant)) / 2\n    lambda2 = (trace_ATA - np.sqrt(discriminant)) / 2\n    sigma1 = np.sqrt(lambda1)\n    sigma2 = np.sqrt(lambda2)\n    sigma1 = round(sigma1, 4)\n    sigma2 = round(sigma2, 4)\n    return (sigma1, sigma2)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(sub_matrix):\n        return sub_matrix[0][0] * (sub_matrix[1][1] * sub_matrix[2][2] - sub_matrix[1][2] * sub_matrix[2][1]) - sub_matrix[0][1] * (sub_matrix[1][0] * sub_matrix[2][2] - sub_matrix[1][2] * sub_matrix[2][0]) + sub_matrix[0][2] * (sub_matrix[1][0] * sub_matrix[2][1] - sub_matrix[1][1] * sub_matrix[2][0])\n    det = 0\n    for col in range(4):\n        sub_matrix = []\n        for i in range(1, 4):\n            row = []\n            for j in range(4):\n                if j != col:\n                    row.append(matrix[i][j])\n            sub_matrix.append(row)\n        sign = (-1) ** col\n        det += sign * matrix[0][col] * determinant_3x3(sub_matrix)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_transpose = X_np.T\n    theta = np.linalg.inv(X_transpose @ X_np) @ X_transpose @ y_np\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    m = len(y)\n    theta = np.zeros((X.shape[1], 1))\n    for _ in range(iterations):\n        h = np.dot(X, theta)\n        error = h - y\n        theta = theta - alpha / m * np.dot(X.T, error)\n    theta = np.round(theta, 4)\n    return theta.reshape(-1).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized = (data - mean) / std\n    standardized = np.round(standardized, 4)\n    standardized_list = standardized.tolist()\n    min_val = np.min(data, axis=0)\n    max_val = np.max(data, axis=0)\n    min_max = (data - min_val) / (max_val - min_val)\n    min_max = np.round(min_max, 4)\n    min_max_list = min_max.tolist()\n    return (standardized_list, min_max_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    centroids = np.array(initial_centroids)\n    points = np.array(points)\n    for _ in range(max_iterations):\n        distances = np.linalg.norm(points[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    rounded_centroids = [(round(centroid[0], 4), round(centroid[1], 4)) for centroid in centroids]\n    return rounded_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    n_samples = len(X)\n    indices = np.arange(n_samples)\n    if shuffle:\n        rng = np.random.default_rng(random_seed)\n        rng.shuffle(indices)\n    fold_size = n_samples // k\n    remainder = n_samples % k\n    folds = []\n    start = 0\n    for i in range(k):\n        current_fold_size = fold_size + (1 if i < remainder else 0)\n        end = start + current_fold_size\n        test_indices = indices[start:end]\n        train_indices = np.concatenate([indices[:start], indices[end:]])\n        folds.append((train_indices, test_indices))\n        start = end\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized_data = (data - mean) / std\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    top_k_eigenvectors = sorted_eigenvectors[:, :k]\n    principal_components = np.round(top_k_eigenvectors, 4).tolist()\n    return principal_components"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    target_values = [example[target_attr] for example in examples]\n    if len(set(target_values)) == 1:\n        return target_values[0]\n    if len(attributes) == 0:\n        return Counter(target_values).most_common(1)[0][0]\n    best_attr = find_best_attribute(examples, attributes, target_attr)\n    tree = {best_attr: {}}\n    for value in set([example[best_attr] for example in examples]):\n        new_examples = [example for example in examples if example[best_attr] == value]\n        new_attributes = [attr for attr in attributes if attr != best_attr]\n        subtree = learn_decision_tree(new_examples, new_attributes, target_attr)\n        tree[best_attr][value] = subtree\n    return tree\ndef find_best_attribute(examples: list[dict], attributes: list[str], target_attr: str) -> str:\n    best_info_gain = -1\n    best_attr = None\n    for attr in attributes:\n        info_gain = information_gain(examples, attr, target_attr)\n        if info_gain > best_info_gain:\n            best_info_gain = info_gain\n            best_attr = attr\n    return best_attr\ndef information_gain(examples: list[dict], attr: str, target_attr: str) -> float:\n    total_entropy = entropy([example[target_attr] for example in examples])\n    weighted_entropy = 0\n    for value in set([example[attr] for example in examples]):\n        subset = [example for example in examples if example[attr] == value]\n        subset_entropy = entropy([example[target_attr] for example in subset])\n        weighted_entropy += len(subset) / len(examples) * subset_entropy\n    return total_entropy - weighted_entropy\ndef entropy(values: list) -> float:\n    counter = Counter(values)\n    total = len(values)\n    entropy_value = 0\n    for count in counter.values():\n        probability = count / total\n        entropy_value -= probability * math.log2(probability)\n    return entropy_value"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    (n_samples, n_features) = data.shape\n    alpha = np.zeros(n_samples)\n    bias = 0\n\n    def linear_kernel(x1, x2):\n        return np.dot(x1, x2.T)\n\n    def rbf_kernel(x1, x2, sigma):\n        dist = np.linalg.norm(x1[:, np.newaxis] - x2, axis=2)\n        return np.exp(-dist ** 2 / (2 * sigma ** 2))\n    if kernel == 'linear':\n        kernel_func = linear_kernel\n    elif kernel == 'RBF':\n        kernel_func = lambda x1, x2: rbf_kernel(x1, x2, sigma)\n    else:\n        raise ValueError(\"Invalid kernel type. Choose 'linear' or 'RBF'.\")\n    for t in range(1, iterations + 1):\n        eta = 1 / (lambda_val * t)\n        kernel_matrix = kernel_func(data, data)\n        scores = np.dot(alpha * labels, kernel_matrix) + bias\n        hinge_loss_indicator = labels * scores < 1\n        alpha = (1 - eta * lambda_val) * alpha\n        alpha[hinge_loss_indicator] += eta * labels[hinge_loss_indicator]\n        bias += eta * np.sum(labels[hinge_loss_indicator] - scores[hinge_loss_indicator])\n    alpha = np.round(alpha, 4)\n    bias = np.round(bias, 4)\n    return (alpha.tolist(), [bias])"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    features = np.array(features)\n    weights = np.array(weights)\n    labels = np.array(labels)\n    linear_output = np.dot(features, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_output))\n    mse = np.mean((probabilities - labels) ** 2)\n    probabilities = probabilities.tolist()\n    probabilities = [round(p, 4) for p in probabilities]\n    mse = round(mse, 4)\n    return (probabilities, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_list = []\n    for _ in range(epochs):\n        linear_output = np.dot(features, weights) + bias\n        predictions = 1 / (1 + np.exp(-linear_output))\n        mse = np.mean((predictions - labels) ** 2)\n        mse_list.append(round(mse, 4))\n        d_mse_d_pred = 2 * (predictions - labels) / len(labels)\n        d_pred_d_linear = predictions * (1 - predictions)\n        d_linear_d_weights = features\n        d_linear_d_bias = 1\n        d_mse_d_weights = np.dot(d_linear_d_weights.T, d_mse_d_pred * d_pred_d_linear)\n        d_mse_d_bias = np.sum(d_mse_d_pred * d_pred_d_linear)\n        weights -= learning_rate * d_mse_d_weights\n        bias -= learning_rate * d_mse_d_bias\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    return (weights, bias, mse_list)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_matrix = np.array(B).T\n    C_matrix = np.array(C).T\n    inverse_C = np.linalg.inv(C_matrix)\n    P = np.dot(inverse_C, B_matrix)\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    ATA = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(ATA)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    V = eigenvectors\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] > 1e-10:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    U = U.tolist()\n    S = S.tolist()\n    V = V.tolist()\n    return (U, S, V)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.arange(X.shape[0])\n    np.random.shuffle(indices)\n    shuffled_X = X[indices]\n    shuffled_y = y[indices]\n    return (shuffled_X.tolist(), shuffled_y.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    num_samples = X.shape[0]\n    for start_idx in range(0, num_samples, batch_size):\n        end_idx = min(start_idx + batch_size, num_samples)\n        batch_X = X[start_idx:end_idx].tolist()\n        if y is not None:\n            batch_y = y[start_idx:end_idx].tolist()\n            yield [batch_X, batch_y]\n        else:\n            yield batch_X"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        if sample[feature_i] >= threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    subset1 = np.array(subset1).tolist()\n    subset2 = np.array(subset2).tolist()\n    return (subset1, subset2)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    feature_combinations = []\n    for d in range(1, degree + 1):\n        combos = combinations_with_replacement(range(n_features), d)\n        for combo in combos:\n            feature_combinations.append(combo)\n    n_new_features = len(feature_combinations)\n    X_poly = np.empty((n_samples, n_new_features))\n    for i in range(n_samples):\n        for (j, combo) in enumerate(feature_combinations):\n            X_poly[i, j] = np.prod(X[i, combo])\n    return X_poly.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, n_samples, replace=True)\n        else:\n            indices = np.random.choice(n_samples, n_samples, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = int(np.max(x) + 1)\n    one_hot = np.zeros((len(x), n_col))\n    for i in range(len(x)):\n        one_hot[i, x[i]] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = len(y_true)\n    accuracy = correct_predictions / total_predictions\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    corr_matrix = np.corrcoef(X.T, Y.T)\n    corr_matrix = np.round(corr_matrix, 4)\n    return corr_matrix.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_clf = None\n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X[:, feature] * polarity < threshold * polarity] = -1\n                    error = np.sum(sample_weights * (predictions != y))\n                    if error < best_error:\n                        best_error = error\n                        best_clf = (feature, threshold, polarity)\n        (feature, threshold, polarity) = best_clf\n        predictions = np.ones(n_samples)\n        predictions[X[:, feature] * polarity < threshold * polarity] = -1\n        alpha = 0.5 * math.log((1 - best_error) / (best_error + 1e-10))\n        sample_weights *= np.exp(-alpha * y * predictions)\n        sample_weights /= np.sum(sample_weights)\n        classifiers.append((round(alpha, 4), round(feature, 4), round(threshold, 4), round(polarity, 4)))\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores)\n    max_score = np.max(scores)\n    shifted_scores = scores - max_score\n    log_sum_exp = np.log(np.sum(np.exp(shifted_scores)))\n    log_softmax_result = shifted_scores - log_sum_exp\n    rounded_result = np.round(log_softmax_result, 4)\n    return rounded_result.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Optimizer:\n\n    def __init__(self):\n        pass\n\n    def update(self, w, grad_wrt_w):\n        return w - 0.01 * grad_wrt_w\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = Optimizer()\n        self.optimizer_w0 = Optimizer()\n\n    def initialize(self):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        grad_wrt_W = np.dot(self.layer_input.T, accum_grad)\n        grad_wrt_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n        if self.trainable:\n            self.W = self.optimizer_W.update(self.W, grad_wrt_W)\n            self.w0 = self.optimizer_w0.update(self.w0, grad_wrt_w0)\n        return np.dot(accum_grad, self.W.T)\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    padded_matrix = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant', constant_values=0)\n    (padded_height, padded_width) = padded_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = int((padded_height - kernel_height) / stride + 1)\n    output_width = int((padded_width - kernel_width) / stride + 1)\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(0, output_height):\n        for j in range(0, output_width):\n            roi = padded_matrix[i * stride:i * stride + kernel_height, j * stride:j * stride + kernel_width]\n            output_matrix[i, j] = np.sum(roi * kernel)\n    output_matrix = np.round(output_matrix, 4)\n    return output_matrix.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Calculate the Ridge Regression loss.\n\n    Args:\n        X (np.ndarray): Feature matrix.\n        w (np.ndarray): Coefficients.\n        y_true (np.ndarray): True labels.\n        alpha (float): Regularization parameter.\n\n    Returns:\n        float: The Ridge loss.\n    \"\"\"\n    y_pred = np.dot(X, w)\n    mse = np.mean((y_true - y_pred) ** 2)\n    reg_term = alpha * np.sum(w ** 2)\n    loss = mse + reg_term\n    return round(loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    if z >= 0:\n        return z\n    return alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0\n    return true_positives / (true_positives + false_positives)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    num_samples = len(X)\n    for _ in range(n_iterations):\n        if method == 'batch':\n            batch_X = X\n            batch_y = y\n        elif method == 'stochastic':\n            random_index = np.random.randint(num_samples)\n            batch_X = X[random_index:random_index + 1]\n            batch_y = y[random_index:random_index + 1]\n        elif method == 'mini-batch':\n            random_indices = np.random.choice(num_samples, batch_size, replace=False)\n            batch_X = X[random_indices]\n            batch_y = y[random_indices]\n        else:\n            raise ValueError(\"Invalid method. Choose 'batch','stochastic', or'mini-batch'.\")\n        predictions = np.dot(batch_X, weights)\n        error = predictions - batch_y\n        gradient = 2 / len(batch_X) * np.dot(batch_X.T, error)\n        weights = weights - learning_rate * gradient\n    result = np.round(weights, 4)\n    return result.tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    matrix = np.array(matrix, dtype=float)\n    (rows, cols) = matrix.shape\n    pivot_row = 0\n    pivot_col = 0\n    while pivot_row < rows and pivot_col < cols:\n        pivot = np.argmax(np.abs(matrix[pivot_row:, pivot_col])) + pivot_row\n        if matrix[pivot, pivot_col] == 0:\n            pivot_col += 1\n            continue\n        matrix[[pivot_row, pivot]] = matrix[[pivot, pivot_row]]\n        matrix[pivot_row] = matrix[pivot_row] / matrix[pivot_row, pivot_col]\n        for i in range(rows):\n            if i != pivot_row:\n                matrix[i] = matrix[i] - matrix[i, pivot_col] * matrix[pivot_row]\n        pivot_row += 1\n        pivot_col += 1\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    result = np.round(x, 4)\n    return result.tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n, p) = X.shape\n    w = np.zeros((p, 1))\n    b = 0\n    for _ in range(max_iter):\n        y_pred = np.dot(X, w) + b\n        error = y_pred - y\n        dw = 1 / n * np.dot(X.T, error) + alpha * np.sign(w)\n        db = 1 / n * np.sum(error)\n        w_new = w - learning_rate * dw\n        b_new = b - learning_rate * db\n        if np.linalg.norm(w_new - w) < tol and np.abs(b_new - b) < tol:\n            break\n        w = w_new\n        b = b_new\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    return (w_rounded.tolist(), [b_rounded])"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_negatives = np.sum((y_true == 1) & (y_pred == 0))\n    if true_positives + false_negatives == 0:\n        return 0.0\n    recall_value = true_positives / (true_positives + false_negatives)\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    attention_scores = np.dot(Q, K.T)\n    d_k = Q.shape[1]\n    scaled_attention_scores = attention_scores / np.sqrt(d_k)\n    attention_weights = np.exp(scaled_attention_scores) / np.sum(np.exp(scaled_attention_scores), axis=-1, keepdims=True)\n    self_attention_output = np.dot(attention_weights, V)\n    self_attention_output = np.round(self_attention_output, 4)\n    return self_attention_output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for input_vector in input_sequence:\n        hidden_state = np.tanh(np.dot(Wx, input_vector) + np.dot(Wh, hidden_state) + b)\n    hidden_state = np.round(hidden_state, 4)\n    return hidden_state.tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = []\n    for point in points:\n        homogeneous_points.append([point[0], point[1], 1])\n    homogeneous_points = np.array(homogeneous_points)\n    translated_points = np.dot(homogeneous_points, translation_matrix.T)[:, :2]\n    return translated_points.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    term1 = np.log(sigma_q / sigma_p)\n    term2 = (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2)\n    term3 = -0.5\n    return term1 + term2 + term3"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if x_ini is None:\n        x = np.zeros(len(b))\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(len(b)):\n            s = 0\n            for j in range(len(b)):\n                if i != j:\n                    s += A[i, j] * x[j]\n            x[i] = (b[i] - s) / A[i, i]\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n    for i in range(n):\n        max_row = np.argmax(np.abs(A[i:, i])) + i\n        A[[i, max_row]] = A[[max_row, i]]\n        (b[i], b[max_row]) = (b[max_row], b[i])\n        for j in range(i + 1, n):\n            factor = A[j, i] / A[i, i]\n            A[j, i:] = A[j, i:] - factor * A[i, i:]\n            b[j] = b[j] - factor * b[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        seq_length = x.shape[0]\n        hidden_states = []\n        h_t = initial_hidden_state\n        c_t = initial_cell_state\n        for t in range(seq_length):\n            x_t = x[t].reshape(-1, 1)\n            combined = np.vstack((h_t, x_t))\n            f_t = sigmoid(np.dot(self.Wf, combined) + self.bf)\n            i_t = sigmoid(np.dot(self.Wi, combined) + self.bi)\n            c_tilde_t = np.tanh(np.dot(self.Wc, combined) + self.bc)\n            c_t = f_t * c_t + i_t * c_tilde_t\n            o_t = sigmoid(np.dot(self.Wo, combined) + self.bo)\n            h_t = o_t * np.tanh(c_t)\n            hidden_states.append(h_t)\n        final_hidden_state = h_t\n        final_cell_state = c_t\n        hidden_states = [np.round(state, 4).tolist() for state in hidden_states]\n        final_hidden_state = np.round(final_hidden_state, 4).tolist()\n        final_cell_state = np.round(final_cell_state, 4).tolist()\n        return (hidden_states, final_hidden_state, final_cell_state)\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    num_docs = len(corpus)\n    tf_idf_scores = []\n    for doc in corpus:\n        doc_scores = []\n        for term in query:\n            if len(doc) == 0:\n                tf = 0\n            else:\n                tf = doc.count(term) / len(doc)\n            df = sum((1 for d in corpus if term in d))\n            idf = np.log((num_docs + 1) / (df + 1)) + 1\n            tf_idf = tf * idf\n            doc_scores.append(round(tf_idf, 4))\n        tf_idf_scores.append(doc_scores)\n    return np.array(tf_idf_scores).tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    if tp + fp == 0:\n        precision = 0\n    else:\n        precision = tp / (tp + fp)\n    if tp + fn == 0:\n        recall = 0\n    else:\n        recall = tp / (tp + fn)\n    if precision + recall == 0:\n        f_score = 0\n    else:\n        f_score = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        return self.rnn_forward(self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, self.hidden_size, x)\n\n    def rnn_forward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence):\n        T = len(input_sequence)\n        h = np.zeros((hidden_size, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = [h]\n        for t in range(T):\n            x_t = input_sequence[t].reshape(-1, 1)\n            h = np.tanh(np.dot(W_xh, x_t) + np.dot(W_hh, h) + b_h)\n            y = np.dot(W_hy, h) + b_y\n            outputs.append(y)\n            last_inputs.append(x_t)\n            last_hiddens.append(h)\n        return (outputs, last_inputs, last_hiddens)\n\n    def backward(self, x, expected_output, learning_rate):\n        \"\"\"\n        Backward pass through the RNN for a given sequence of inputs and expected outputs.\n        \"\"\"\n        (outputs, last_inputs, last_hiddens) = self.forward(x)\n        self.rnn_backward(self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, self.hidden_size, x, expected_output, outputs, last_inputs, last_hiddens, learning_rate)\n\n    def rnn_backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        T = len(input_sequence)\n        dW_xh = np.zeros_like(W_xh)\n        dW_hh = np.zeros_like(W_hh)\n        dW_hy = np.zeros_like(W_hy)\n        db_h = np.zeros_like(b_h)\n        db_y = np.zeros_like(b_y)\n        dh_next = np.zeros((hidden_size, 1))\n        for t in reversed(range(T)):\n            dy = outputs[t] - expected_output[t].reshape(-1, 1)\n            dW_hy += np.dot(dy, last_hiddens[t + 1].T)\n            db_y += dy\n            dh = np.dot(W_hy.T, dy) + dh_next\n            dh_raw = (1 - last_hiddens[t + 1] ** 2) * dh\n            db_h += dh_raw\n            dW_xh += np.dot(dh_raw, last_inputs[t].T)\n            dW_hh += np.dot(dh_raw, last_hiddens[t].T)\n            dh_next = np.dot(W_hh.T, dh_raw)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0\n    r = b - np.dot(A, x)\n    p = r.copy()\n    rsold = np.dot(r, r)\n    for _ in range(n):\n        Ap = np.dot(A, p)\n        alpha = rsold / np.dot(p, Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = np.dot(r, r)\n        if np.sqrt(rsnew) < tol:\n            break\n        beta = rsnew / rsold\n        p = r + beta * p\n        rsold = rsnew\n    x = np.round(x, 8)\n    return x.tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if len(y) == 0:\n        return 0\n    (unique_classes, class_counts) = np.unique(y, return_counts=True)\n    total_samples = len(y)\n    impurity = 1\n    for count in class_counts:\n        probability = count / total_samples\n        impurity -= probability ** 2\n    return round(impurity, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    non_zero_count = 0\n    for row in dense_matrix:\n        for (col_index, element) in enumerate(row):\n            if element != 0:\n                values.append(element)\n                column_indices.append(col_index)\n                non_zero_count += 1\n        row_pointer.append(non_zero_count)\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product = sum([a * b for (a, b) in zip(v, L)])\n    norm_squared = sum([i ** 2 for i in L])\n    scalar = dot_product / norm_squared\n    projection = [round(scalar * i, 3) for i in L]\n    return projection"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    for col in range(num_cols):\n        non_zero_count = 0\n        for row in range(num_rows):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n                non_zero_count += 1\n        column_pointer.append(column_pointer[-1] + non_zero_count)\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.array(A)\n    (_, r) = np.linalg.qr(A)\n    pivot_columns = []\n    for i in range(r.shape[0]):\n        for j in range(r.shape[1]):\n            if r[i, j] != 0:\n                pivot_columns.append(j)\n                break\n    basis_vectors = A[:, pivot_columns]\n    basis_vectors = np.round(basis_vectors, 8)\n    return basis_vectors.tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_mean = np.mean(y_true)\n    ss_total = np.sum((y_true - y_mean) ** 2)\n    ss_res = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - ss_res / ss_total\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not img[0]:\n        return -1\n    row_length = len(img[0])\n    total_pixels = 0\n    total_brightness = 0\n    for row in img:\n        if len(row) != row_length:\n            return -1\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n            total_brightness += pixel\n            total_pixels += 1\n    if total_pixels == 0:\n        return -1\n    average_brightness = total_brightness / total_pixels\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        try:\n            y_true = np.array(y_true)\n            y_pred = np.array(y_pred)\n        except:\n            raise ValueError('Both inputs must be valid arrays or convertible to numpy arrays.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    residuals = y_true - y_pred\n    mse = np.mean(residuals ** 2)\n    rmse_value = np.sqrt(mse)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    intersection = np.logical_and(y_true, y_pred).sum()\n    union = np.logical_or(y_true, y_pred).sum()\n    if union == 0:\n        return 1.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    intersection = np.sum(y_true * y_pred)\n    sum_true_pred = np.sum(y_true) + np.sum(y_pred)\n    if sum_true_pred == 0:\n        return 1.0\n    dice = 2.0 * intersection / sum_true_pred\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    composite_hv = np.zeros(dim)\n    for (feature_name, feature_value) in row.items():\n        if feature_name in random_seeds:\n            np.random.seed(random_seeds[feature_name])\n            feature_name_hv = np.random.choice([-1, 1], dim)\n            np.random.seed(random_seeds[feature_name])\n            feature_value_hv = np.random.choice([-1, 1], dim)\n            feature_hv = np.multiply(feature_name_hv, feature_value_hv)\n            composite_hv = np.add(composite_hv, feature_hv)\n    composite_hv = np.sign(composite_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    tp = 0\n    fp = 0\n    tn = 0\n    fn = 0\n    for (y_true, y_pred) in data:\n        if y_true == 1 and y_pred == 1:\n            tp += 1\n        elif y_true == 0 and y_pred == 1:\n            fp += 1\n        elif y_true == 0 and y_pred == 0:\n            tn += 1\n        elif y_true == 1 and y_pred == 0:\n            fn += 1\n    return [[tn, fp], [fn, tp]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Both input vectors must have the same shape.')\n    if len(v1) == 0 or len(v2) == 0:\n        raise ValueError('Input vectors cannot be empty.')\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    dot_product = np.dot(v1, v2)\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError('The actual and predicted lists must have the same length.')\n    for i in range(len(actual)):\n        if actual[i] not in [0, 1] or predicted[i] not in [0, 1]:\n            raise ValueError('All elements in the actual and predicted lists must be either 0 or 1.')\n    tp = 0\n    fp = 0\n    tn = 0\n    fn = 0\n    for i in range(len(actual)):\n        if actual[i] == 1 and predicted[i] == 1:\n            tp += 1\n        elif actual[i] == 0 and predicted[i] == 1:\n            fp += 1\n        elif actual[i] == 0 and predicted[i] == 0:\n            tn += 1\n        elif actual[i] == 1 and predicted[i] == 0:\n            fn += 1\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    accuracy = (tp + tn) / (tp + tn + fp + fn)\n    if tp + fn == 0 or tp + fp == 0:\n        f1_score = 0\n    else:\n        precision = tp / (tp + fp)\n        recall = tp / (tp + fn)\n        f1_score = 2 * (precision * recall) / (precision + recall)\n    if tn + fp == 0:\n        specificity = 0\n    else:\n        specificity = tn / (tn + fp)\n    if tn + fn == 0:\n        negative_predictive_value = 0\n    else:\n        negative_predictive_value = tn / (tn + fn)\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean_val = np.mean(data)\n    median_val = np.median(data)\n    mode_result = stats.mode(data)\n    mode_val = mode_result.mode[0]\n    variance_val = np.var(data)\n    std_dev_val = np.std(data)\n    percentile_25 = np.percentile(data, 25)\n    percentile_50 = np.percentile(data, 50)\n    percentile_75 = np.percentile(data, 75)\n    iqr_val = percentile_75 - percentile_25\n    result = {'mean': round(mean_val, 4), 'median': round(median_val, 4), 'mode': mode_val, 'variance': round(variance_val, 4), 'standard_deviation': round(std_dev_val, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(iqr_val, 4)}\n    return result"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf = coefficient * math.exp(exponent)\n    return round(pdf, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = lam ** k * math.exp(-lam) / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    \"\"\"\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    contrast = max_pixel - min_pixel\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    result = []\n    for value in data:\n        poly_features = [round(value ** i, 8) for i in range(degree + 1)]\n        result.append(poly_features)\n    return result"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pos_enc = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            angle = pos / np.power(10000, 2 * i / d_model)\n            pos_enc[pos, i] = np.sin(angle)\n            if i + 1 < d_model:\n                pos_enc[pos, i + 1] = np.cos(angle)\n    return pos_enc.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = np.round(parameter, 5).tolist()\n    updated_m = np.round(m, 5).tolist()\n    updated_v = np.round(v, 5).tolist()\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef layer_norm(x, g, b, eps: float=1e-05):\n    mean = np.mean(x, axis=-1, keepdims=True)\n    variance = np.var(x, axis=-1, keepdims=True)\n    return g * (x - mean) / np.sqrt(variance + eps) + b\ndef multi_head_attention(x, params, hparams):\n    return x\ndef feed_forward(x, params):\n    return x\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    input_ids = encoder.encode(prompt)\n    for _ in range(n_tokens_to_generate):\n        token_embeds = params['wte'][input_ids]\n        position_ids = np.arange(len(input_ids))\n        position_embeds = params['wpe'][position_ids]\n        x = token_embeds + position_embeds\n        x = multi_head_attention(x, params, hparams)\n        x = feed_forward(x, params)\n        x = layer_norm(x, params['ln_f']['g'], params['ln_f']['b'])\n        next_token = np.random.randint(0, 3)\n        input_ids.append(next_token)\n    generated_text = encoder.decode(input_ids)\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    keys = np.random.randn(n, dimension)\n    queries = np.random.randn(n, dimension)\n    values = np.array(crystal_values).reshape(-1, 1)\n    attention_output = []\n    for i in range(n):\n        query = queries[i]\n        attention_scores = []\n        for j in range(n):\n            key = keys[j]\n            score = np.dot(query, key)\n            attention_scores.append(score)\n        attention_probs = softmax(np.array(attention_scores))\n        weighted_value = np.dot(attention_probs, values.flatten())\n        attention_output.append(weighted_value)\n    rounded_output = [round(val, 4) for val in attention_output]\n    return rounded_output"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    num_docs = len(corpus)\n    doc_lengths = [len(doc.split()) for doc in corpus]\n    avg_doc_length = np.mean(doc_lengths)\n    query_terms = query.split()\n    scores = []\n    doc_freq = Counter()\n    for term in set(query_terms):\n        for doc in corpus:\n            if term in doc:\n                doc_freq[term] += 1\n    for (i, doc) in enumerate(corpus):\n        doc_score = 0\n        doc_counter = Counter(doc.split())\n        for term in query_terms:\n            tf = doc_counter[term]\n            df = doc_freq[term]\n            idf = np.log((num_docs - df + 0.5) / (df + 0.5) + 1)\n            numerator = tf * (k1 + 1)\n            denominator = tf + k1 * (1 - b + b * (doc_lengths[i] / avg_doc_length))\n            term_score = idf * (numerator / denominator)\n            doc_score += term_score\n        scores.append(round(doc_score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    true_positives = 0\n    false_positives = 0\n    false_negatives = 0\n    for i in range(len(y_true)):\n        if y_true[i] == 1 and y_pred[i] == 1:\n            true_positives += 1\n        elif y_true[i] == 0 and y_pred[i] == 1:\n            false_positives += 1\n        elif y_true[i] == 1 and y_pred[i] == 0:\n            false_negatives += 1\n    if true_positives + false_positives == 0:\n        precision = 0\n    else:\n        precision = true_positives / (true_positives + false_positives)\n    if true_positives + false_negatives == 0:\n        recall = 0\n    else:\n        recall = true_positives / (true_positives + false_negatives)\n    if precision + recall == 0:\n        f1_score = 0\n    else:\n        f1_score = 2 * (precision * recall) / (precision + recall)\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for (i, data) in enumerate(consumption_data, start=1):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended_data.append(data - fluctuation)\n    days = np.array(range(1, len(consumption_data) + 1))\n    A = np.vstack([days, np.ones(len(days))]).T\n    (m, c) = np.linalg.lstsq(A, detrended_data, rcond=None)[0]\n    base_consumption = m * 15 + c\n    day_15_fluctuation = 10 * math.sin(2 * PI * 15 / 10)\n    total_consumption = base_consumption + day_15_fluctuation\n    rounded_consumption = round(total_consumption)\n    final_consumption = math.ceil(rounded_consumption * 1.05)\n    return final_consumption"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute query, key, and value matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute self-attention output.\n    \"\"\"\n    d_k = Q.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Implement multi-head attention mechanism.\n    \"\"\"\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    head_dim = Q.shape[-1] // n_heads\n    Q_heads = Q.reshape((Q.shape[0], n_heads, head_dim))\n    K_heads = K.reshape((K.shape[0], n_heads, head_dim))\n    V_heads = V.reshape((V.shape[0], n_heads, head_dim))\n    multi_head_outputs = []\n    for i in range(n_heads):\n        Q_head = Q_heads[:, i, :]\n        K_head = K_heads[:, i, :]\n        V_head = V_heads[:, i, :]\n        head_output = self_attention(Q_head, K_head, V_head)\n        multi_head_outputs.append(head_output)\n    multi_head_output = np.concatenate(multi_head_outputs, axis=-1)\n    multi_head_output = np.round(multi_head_output, 4)\n    return multi_head_output.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    for i in range(len(x)):\n        if x[i] == 1 and y[i] == 1:\n            a += 1\n        elif x[i] == 1 and y[i] == 0:\n            b += 1\n        elif x[i] == 0 and y[i] == 1:\n            c += 1\n        elif x[i] == 0 and y[i] == 0:\n            d += 1\n    numerator = a * d - b * c\n    denominator = ((a + b) * (c + d) * (a + c) * (b + d)) ** 0.5\n    if denominator == 0:\n        return 0\n    phi = numerator / denominator\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return max(0, min(1, 0.2 * x + 0.5))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        result = x\n    else:\n        result = alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x >= 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 30:\n        result = x\n    elif x < -30:\n        result = 0\n    else:\n        result = math.log(1 + math.exp(x))\n    return round(result, 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    first_term = np.minimum(rhos * A, clipped_rhos * A)\n    kl_div = pi_theta_old * np.log(pi_theta_old / pi_theta_ref)\n    kl_div = np.sum(kl_div)\n    objective = np.mean(first_term) - beta * kl_div\n    return round(objective, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    result = x / (1 + math.exp(-x))\n    return round(result, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_combination = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_combination))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    B = np.zeros((n_features, n_classes))\n    losses = []\n    for _ in range(iterations):\n        logits = np.dot(X, B)\n        exp_logits = np.exp(logits - np.max(logits, axis=1, keepdims=True))\n        probabilities = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        one_hot = np.eye(n_classes)[y]\n        loss = -np.mean(np.sum(one_hot * np.log(probabilities), axis=1))\n        losses.append(round(loss, 4))\n        gradient = np.dot(X.T, probabilities - one_hot) / n_samples\n        B = B - learning_rate * gradient\n    B = np.round(B, 4).tolist()\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    (num_samples, num_features) = X.shape\n    weights = np.zeros((num_features, 1))\n    bias = 0\n    loss_values = []\n    for _ in range(iterations):\n        linear_model = np.dot(X, weights) + bias\n        y_pred = 1 / (1 + np.exp(-linear_model))\n        dw = 1 / num_samples * np.dot(X.T, y_pred - y)\n        db = 1 / num_samples * np.sum(y_pred - y)\n        weights = weights - learning_rate * dw\n        bias = bias - learning_rate * db\n        cost = -1 / num_samples * np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        loss_values.append(round(cost, 4))\n    weights = weights.reshape(-1).tolist()\n    bias = [round(bias, 4)]\n    return (weights, bias, loss_values)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = Q.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = scores + mask * -1000000000.0\n    attention_weights = np.softmax(scores, axis=-1)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "def disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    from collections import Counter\n    total_apples = len(apples)\n    color_counts = Counter(apples)\n    entropy = 0\n    for count in color_counts.values():\n        probability = count / total_apples\n        entropy -= probability * probability.bit_length()\n    result = round(entropy, 4)\n    return result"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform layer normalization on the input tensor X.\n\n    Args:\n        X (np.ndarray): Input tensor of shape (batch_size, sequence_length, feature_dim).\n        gamma (np.ndarray): Scaling parameter of shape (feature_dim,).\n        beta (np.ndarray): Shifting parameter of shape (feature_dim,).\n        epsilon (float, optional): Small value to avoid division by zero. Defaults to 1e-5.\n\n    Returns:\n        list: Normalized tensor rounded to 5 decimal places and converted to a list.\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_hat = (X - mean) / np.sqrt(variance + epsilon)\n    normalized_X = gamma * X_hat + beta\n    result = np.round(normalized_X, 5).tolist()\n    return result"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_tokens = reference.split()\n    cand_tokens = candidate.split()\n    ref_counter = Counter(ref_tokens)\n    cand_counter = Counter(cand_tokens)\n    matches = 0\n    for (token, count) in cand_counter.items():\n        matches += min(count, ref_counter[token])\n    precision = matches / len(cand_tokens) if len(cand_tokens) > 0 else 0\n    recall = matches / len(ref_tokens) if len(ref_tokens) > 0 else 0\n    if precision + recall > 0:\n        f_mean = precision * recall / (alpha * recall + (1 - alpha) * precision)\n    else:\n        f_mean = 0\n    m = len(ref_tokens)\n    n = len(cand_tokens)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if ref_tokens[i - 1] == cand_tokens[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    lcs = dp[m][n]\n    chunks = 0\n    i = 0\n    j = 0\n    while i < m and j < n:\n        if ref_tokens[i] == cand_tokens[j]:\n            while i < m and j < n and (ref_tokens[i] == cand_tokens[j]):\n                i += 1\n                j += 1\n            chunks += 1\n        elif dp[i + 1][j] >= dp[i][j + 1]:\n            i += 1\n        else:\n            j += 1\n    penalty = gamma * (chunks / lcs) ** beta if lcs > 0 else 0\n    meteor = f_mean * (1 - penalty)\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    p_xy = joint_counts / total_samples\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0] * len(x)\n    result = []\n    for num in x:\n        normalized = (num - min_val) / (max_val - min_val)\n        result.append(round(normalized, 4))\n    return result"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, w2)\n    a2 = np.maximum(0, z2)\n    output = a2 + x\n    final_output = np.maximum(0, output)\n    rounded_output = np.round(final_output, 4).tolist()\n    return rounded_output"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform global average pooling on a 3D NumPy array.\n\n    Args:\n        x (np.ndarray): A 3D array of shape (height, width, channels).\n\n    Returns:\n        np.ndarray: A 1D array of shape (channels,) containing the average of each feature map.\n    \"\"\"\n    (height, width, channels) = x.shape\n    result = np.zeros((channels,))\n    for i in range(channels):\n        result[i] = np.mean(x[:, :, i])\n    return result"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    variance = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_hat = (X - mean) / np.sqrt(variance + epsilon)\n    Y = gamma[np.newaxis, :, np.newaxis, np.newaxis] * X_hat + beta[np.newaxis, :, np.newaxis, np.newaxis]\n    Y_rounded = np.round(Y, 4)\n    return Y_rounded.tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of a polynomial term c * x^n at a given point x.\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors)\n    basis = []\n    for v in vectors:\n        v = v.astype(float)\n        for b in basis:\n            v = v - np.dot(v, b) * b\n        if np.linalg.norm(v) > tol:\n            v = v / np.linalg.norm(v)\n            basis.append(v)\n    orthonormal = [np.round(vec, 4).tolist() for vec in basis]\n    return orthonormal"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    result = np.cross(a, b)\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0):\n        return -1\n    n = len(b)\n    x = []\n    for i in range(n):\n        Ai = A.copy()\n        Ai[:, i] = b\n        det_Ai = np.linalg.det(Ai)\n        xi = det_Ai / det_A\n        x.append(round(xi, 4))\n    return x"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or len(p) == 0:\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    bc_coefficient = np.sum(np.sqrt(p * q))\n    distance = -np.log(bc_coefficient)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] + b[i])\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    num_episodes = len(episodes)\n    for episode in episodes:\n        T = len(episode)\n        G = 0\n        for t in reversed(range(T)):\n            (state, action, reward) = episode[t]\n            G += reward\n            policy = np.exp(theta[state, :]) / np.sum(np.exp(theta[state, :]))\n            grad_log_policy = np.zeros((num_states, num_actions))\n            grad_log_policy[state, :] = -policy\n            grad_log_policy[state, action] += 1\n            gradient += G * grad_log_policy\n    gradient /= num_episodes\n    gradient = np.round(gradient, 4)\n    return gradient.tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = 2 * d_in * d_out\n    moe_flops = 2 * k_active * d_in * d_out\n    savings = (dense_flops - moe_flops) / dense_flops * 100\n    dense_flops = round(dense_flops, 1)\n    moe_flops = round(moe_flops, 1)\n    savings = round(savings, 1)\n    return (dense_flops, moe_flops, savings)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    raw_scores = np.dot(X, W_g)\n    noise_scores = np.dot(X, W_noise) * N\n    noisy_scores = raw_scores + noise_scores\n    topk_indices = np.argpartition(noisy_scores, -k, axis=1)[:, -k:]\n    mask = np.zeros_like(noisy_scores, dtype=bool)\n    np.put_along_axis(mask, topk_indices, True, axis=1)\n    masked_scores = np.where(mask, noisy_scores, -np.inf)\n    exp_scores = np.exp(masked_scores - np.max(masked_scores, axis=1, keepdims=True))\n    gating_probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    gating_probs = np.round(gating_probs, 4)\n    return gating_probs.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    gating_scores = np.dot(x, Wg)\n    exp_scores = np.exp(gating_scores - np.max(gating_scores, axis=1, keepdims=True))\n    gating_probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    top_k_indices = np.argsort(gating_probs, axis=1)[:, -top_k:][:, ::-1]\n    output = np.zeros((x.shape[0], We.shape[2]))\n    for i in range(x.shape[0]):\n        top_k_experts = top_k_indices[i]\n        for j in range(top_k):\n            expert_index = top_k_experts[j]\n            expert_output = np.dot(x[i], We[expert_index])\n            output[i] += gating_probs[i, expert_index] * expert_output\n    output = np.round(output, 4)\n    output = output.tolist()\n    return output"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    group_size = C // num_groups\n    X = X.reshape(B, num_groups, group_size, H, W)\n    mean = np.mean(X, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X, axis=(2, 3, 4), keepdims=True)\n    X_hat = (X - mean) / np.sqrt(var + epsilon)\n    X_hat = X_hat.reshape(B, C, H, W)\n    out = gamma * X_hat + beta\n    out = np.round(out, 4)\n    return out.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    x = start_x\n    for _ in range(max_iters):\n        df_dx = 4 * x ** 3 - 9 * x ** 2\n        new_x = x - learning_rate * df_dx\n        if np.abs(new_x - x) < tolerance:\n            break\n        x = new_x\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Implement the Dynamic Tanh (DyT) function.\n\n    Args:\n        x (np.ndarray): Input array.\n        alpha (float): Alpha parameter.\n        gamma (float): Gamma parameter.\n        beta (float): Beta parameter.\n\n    Returns:\n        list[float]: Output list after applying DyT and rounding to 4 decimals.\n    \"\"\"\n    result = gamma * np.tanh(alpha * x) + beta\n    result = np.round(result, 4)\n    return result.tolist()"}
