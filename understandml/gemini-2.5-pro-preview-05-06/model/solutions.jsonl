{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularised) Linear Regression using its closed-form solution.\n\n    Given an ndarray `data` where the last column is the target `y` and all\n    preceding columns are the features `X`, this function adds a bias (intercept)\n    term to `X`, then computes the weight vector `w_hat` using the formula:\n\n        w_hat = (X_bias^T X_bias + alpha * I)^-1 * X_bias^T y\n\n    where `X_bias` is the feature matrix with the bias term included, `alpha` is the\n    regularisation strength (>=0), and `I` is the identity matrix whose size\n    is the number of columns in `X_bias`.\n\n    Args:\n        data: A NumPy ndarray. The last column is the target vector y, and\n              all preceding columns form the feature matrix X.\n              It can be 1D for a single sample (e.g., [x1, x2, y]), or\n              2D for multiple samples (e.g., [[x11, x12, y1], [x21, x22, y2]]).\n              It's assumed that `data` has at least one column (the target y).\n        alpha: The regularisation strength (float, must be >= 0). Default is 0.0,\n               which corresponds to ordinary least squares (OLS) regression.\n\n    Returns:\n        A Python list of floats representing the weight vector (bias term first,\n        then feature weights), rounded to 4 decimal places.\n        If the matrix (X_bias^T X_bias + alpha * I) is singular (i.e., its\n        numerical determinant is close to zero, or it's otherwise non-invertible),\n        this function returns the integer -1.\n    \"\"\"\n    if data.ndim == 1:\n        data = data.reshape(1, -1)\n    X_original = data[:, :-1]\n    y_vec = data[:, -1].reshape(-1, 1)\n    num_samples = data.shape[0]\n    bias_column = np.ones((num_samples, 1))\n    X_bias = np.concatenate((bias_column, X_original), axis=1)\n    d = X_bias.shape[1]\n    X_bias_transpose_X_bias = X_bias.T @ X_bias\n    I = np.identity(d)\n    A = X_bias_transpose_X_bias + alpha * I\n    determinant_A = np.linalg.det(A)\n    if np.isclose(determinant_A, 0.0):\n        return -1\n    try:\n        A_inv = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        return -1\n    X_bias_transpose_y = X_bias.T @ y_vec\n    w_hat_matrix = A_inv @ X_bias_transpose_y\n    w_hat_flat = w_hat_matrix.flatten()\n    w_hat_rounded = np.round(w_hat_flat, 4)\n    return w_hat_rounded.tolist()"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    if n_samples == 0:\n        w_vec = np.zeros(n_features)\n        b = 0.0\n        w_rounded = [round(val, 4) for val in w_vec]\n        b_rounded = round(b, 4)\n        return (w_rounded, b_rounded)\n    alpha = np.zeros(n_samples, dtype=float)\n    b = 0.0\n    K_mat = X_train @ X_train.T\n    updates_count = 0\n    current_sample_idx = 0\n    no_update_streak = 0\n    while updates_count < n_iter:\n        if current_sample_idx == n_samples:\n            if no_update_streak >= n_samples:\n                break\n            current_sample_idx = 0\n            no_update_streak = 0\n        activation_val = np.dot(alpha * y_train, K_mat[:, current_sample_idx])\n        margin = y_train[current_sample_idx] * (activation_val + b)\n        if margin <= 0:\n            alpha[current_sample_idx] += eta\n            b += eta * y_train[current_sample_idx]\n            updates_count += 1\n            current_sample_idx = 0\n            no_update_streak = 0\n            if updates_count >= n_iter:\n                break\n        else:\n            current_sample_idx += 1\n            no_update_streak += 1\n    w_vec = np.dot(X_train.T, alpha * y_train)\n    w_rounded = [round(val, 4) for val in w_vec]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links_registry = {}\n\n    def identity_link_func(mu):\n        return mu\n\n    def identity_inv_link_func(eta):\n        return eta\n\n    def identity_derivative_func(mu):\n        return np.ones_like(mu, dtype=float)\n    links_registry['identity'] = {'link': identity_link_func, 'inv_link': identity_inv_link_func, 'derivative': identity_derivative_func}\n\n    def log_link_func(mu):\n        return np.log(mu)\n\n    def log_inv_link_func(eta):\n        return np.exp(eta)\n\n    def log_derivative_func(mu):\n        return 1.0 / mu\n    links_registry['log'] = {'link': log_link_func, 'inv_link': log_inv_link_func, 'derivative': log_derivative_func}\n\n    def logit_link_func(mu):\n        return np.log(mu / (1.0 - mu))\n\n    def logit_inv_link_func(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_derivative_func(mu):\n        return 1.0 / (mu * (1.0 - mu))\n    links_registry['logit'] = {'link': logit_link_func, 'inv_link': logit_inv_link_func, 'derivative': logit_derivative_func}\n    return links_registry"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n    depths_result = [0] * n_samples\n\n    def _recursive_build(current_indices: list[int], current_depth: int):\n        if len(current_indices) < 3:\n            for sample_idx in current_indices:\n                depths_result[sample_idx] = current_depth\n            return\n        n_features = data.shape[1]\n        if n_features == 0:\n            for sample_idx in current_indices:\n                depths_result[sample_idx] = current_depth\n            return\n        feature_idx = np.random.randint(n_features)\n        samples_feature_values = data[current_indices, feature_idx]\n        min_val = np.min(samples_feature_values)\n        max_val = np.max(samples_feature_values)\n        if min_val == max_val:\n            for sample_idx in current_indices:\n                depths_result[sample_idx] = current_depth\n            return\n        split_val = np.random.uniform(min_val, max_val)\n        current_indices_np = np.array(current_indices)\n        left_child_mask = samples_feature_values <= split_val\n        left_child_indices = list(current_indices_np[left_child_mask])\n        right_child_indices = list(current_indices_np[~left_child_mask])\n        if len(left_child_indices) == 0 or len(right_child_indices) == 0:\n            for sample_idx in current_indices:\n                depths_result[sample_idx] = current_depth\n            return\n        _recursive_build(left_child_indices, current_depth + 1)\n        _recursive_build(right_child_indices, current_depth + 1)\n    initial_indices = list(range(n_samples))\n    _recursive_build(initial_indices, 0)\n    return depths_result"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n                      Must be 0 < minsup <= 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions:\n        return {}\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    processed_transactions = [set(tx) for tx in transactions]\n    frequent_itemsets_result: Dict[Tuple[Hashable, ...], int] = {}\n    item_counts = Counter()\n    for tx_set in processed_transactions:\n        for item in tx_set:\n            item_counts[item] += 1\n    current_L_itemsets: set[Tuple[Hashable, ...]] = set()\n    for (item, count) in item_counts.items():\n        if count >= min_support_count:\n            itemset = (item,)\n            frequent_itemsets_result[itemset] = count\n            current_L_itemsets.add(itemset)\n    if not current_L_itemsets:\n        return {}\n    k = 2\n    while current_L_itemsets:\n        sorted_prev_L_itemsets = sorted(list(current_L_itemsets))\n        candidate_k_itemsets_temp: set[Tuple[Hashable, ...]] = set()\n        num_prev_itemsets = len(sorted_prev_L_itemsets)\n        for i in range(num_prev_itemsets):\n            itemset1 = sorted_prev_L_itemsets[i]\n            for j in range(i + 1, num_prev_itemsets):\n                itemset2 = sorted_prev_L_itemsets[j]\n                if itemset1[:-1] == itemset2[:-1]:\n                    candidate = itemset1 + (itemset2[-1],)\n                    candidate_k_itemsets_temp.add(candidate)\n                elif itemset1[:-1] > itemset2[:-1]:\n                    break\n        if not candidate_k_itemsets_temp:\n            break\n        candidate_k_itemsets_pruned: set[Tuple[Hashable, ...]] = set()\n        for candidate in candidate_k_itemsets_temp:\n            all_subsets_frequent = True\n            for subset in combinations(candidate, k - 1):\n                if subset not in current_L_itemsets:\n                    all_subsets_frequent = False\n                    break\n            if all_subsets_frequent:\n                candidate_k_itemsets_pruned.add(candidate)\n        if not candidate_k_itemsets_pruned:\n            break\n        candidate_counts = Counter()\n        for tx_set in processed_transactions:\n            if len(tx_set) < k:\n                continue\n            for itemset_cand in candidate_k_itemsets_pruned:\n                is_subset = True\n                for item in itemset_cand:\n                    if item not in tx_set:\n                        is_subset = False\n                        break\n                if is_subset:\n                    candidate_counts[itemset_cand] += 1\n        Lk_itemsets: set[Tuple[Hashable, ...]] = set()\n        for (itemset, count) in candidate_counts.items():\n            if count >= min_support_count:\n                frequent_itemsets_result[itemset] = count\n                Lk_itemsets.add(itemset)\n        if not Lk_itemsets:\n            break\n        current_L_itemsets = Lk_itemsets\n        k += 1\n    return frequent_itemsets_result"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    if not isinstance(data, np.ndarray):\n        raise TypeError(\"Input 'data' must be a numpy.ndarray.\")\n    if data.ndim != 2:\n        raise ValueError(\"Input 'data' must be a 2-D array.\")\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_samples:\n        raise ValueError(f'k (={k}) must be between 1 and the number of samples (={n_samples}), inclusive.')\n    centers = data[:k, :].astype(float, copy=True)\n    labels = np.zeros(n_samples, dtype=int)\n    for iteration in range(max_iter):\n        old_centers = centers.copy()\n        diff = data[:, np.newaxis, :] - centers[np.newaxis, :, :]\n        distances_sq = np.sum(diff ** 2, axis=2)\n        labels = np.argmin(distances_sq, axis=1)\n        new_centers = np.zeros_like(centers, dtype=float)\n        for j in range(k):\n            assigned_samples = data[labels == j]\n            if assigned_samples.shape[0] > 0:\n                new_centers[j] = np.mean(assigned_samples, axis=0)\n            else:\n                random_sample_idx = np.random.randint(0, n_samples)\n                new_centers[j] = data[random_sample_idx, :].astype(float, copy=True)\n        centers = new_centers\n        center_movements = np.sqrt(np.sum((centers - old_centers) ** 2, axis=1))\n        max_movement = np.max(center_movements)\n        if max_movement < epsilon:\n            break\n    rounded_centers = np.round(centers, 4).tolist()\n    labels_list = labels.tolist()\n    return (rounded_centers, labels_list)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            item_i_ratings_all_users = data[:, i]\n            item_j_ratings_all_users = data[:, j]\n            common_raters_mask = (item_i_ratings_all_users > 0) & (item_j_ratings_all_users > 0)\n            if not np.any(common_raters_mask):\n                S[i, j] = 0.0\n                S[j, i] = 0.0\n                continue\n            v1 = item_i_ratings_all_users[common_raters_mask]\n            v2 = item_j_ratings_all_users[common_raters_mask]\n            similarity = 0.0\n            if criterion == 'cosine':\n                std_v1 = np.std(v1)\n                if std_v1 > 0.001:\n                    v1_proc = v1 - np.mean(v1)\n                else:\n                    v1_proc = v1\n                std_v2 = np.std(v2)\n                if std_v2 > 0.001:\n                    v2_proc = v2 - np.mean(v2)\n                else:\n                    v2_proc = v2\n                norm_v1_proc = np.linalg.norm(v1_proc)\n                norm_v2_proc = np.linalg.norm(v2_proc)\n                if norm_v1_proc == 0 or norm_v2_proc == 0:\n                    similarity = 0.0\n                else:\n                    similarity = np.dot(v1_proc, v2_proc) / (norm_v1_proc * norm_v2_proc)\n            elif criterion == 'pearson':\n                if v1.size < 2:\n                    similarity = 0.0\n                else:\n                    corr_matrix = np.corrcoef(v1, v2)\n                    similarity = corr_matrix[0, 1]\n                    if np.isnan(similarity):\n                        similarity = 0.0\n            else:\n                raise ValueError(f\"Unknown criterion: {criterion}. Must be 'cosine' or 'pearson'.\")\n            S[i, j] = similarity\n            S[j, i] = similarity\n    user_ratings_row = data[user_ind, :]\n    rated_item_indices = np.where(user_ratings_row > 0)[0]\n    if len(rated_item_indices) == n_item:\n        return []\n    if len(rated_item_indices) == 0:\n        all_item_indices = np.arange(n_item)\n        return list(all_item_indices[:k])\n    r_vector = user_ratings_row[rated_item_indices]\n    unrated_item_indices = np.where(user_ratings_row == 0)[0]\n    item_scores = {}\n    for t_idx in unrated_item_indices:\n        numerator = 0.0\n        denominator = 0.0\n        for (i_idx, r_i_rating) in zip(rated_item_indices, r_vector):\n            similarity_t_i = S[t_idx, i_idx]\n            numerator += r_i_rating * similarity_t_i\n            denominator += np.abs(similarity_t_i)\n        if denominator == 0:\n            score_t = 0.0\n        else:\n            score_t = numerator / denominator\n        item_scores[t_idx] = score_t\n    sorted_scored_items = sorted(item_scores.items(), key=lambda item_tuple: (-item_tuple[1], item_tuple[0]))\n    recommendations = [item_idx for (item_idx, score) in sorted_scored_items]\n    return recommendations[:k]"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    if n_samples < 4:\n        return None\n    G_current_node = np.sum(g)\n    H_current_node = np.sum(h)\n    den_current_node = H_current_node + lam\n    epsilon = 1e-09\n    if den_current_node <= epsilon:\n        return None\n    s_val_current_node = G_current_node ** 2 / den_current_node\n    best_gain = 0.0\n    best_split_info = None\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        sorted_indices = np.argsort(feature_values)\n        sorted_feature_values = feature_values[sorted_indices]\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        current_G_L = 0.0\n        current_H_L = 0.0\n        for i in range(n_samples - 1):\n            current_G_L += sorted_g[i]\n            current_H_L += sorted_h[i]\n            if sorted_feature_values[i] == sorted_feature_values[i + 1]:\n                continue\n            n_L = i + 1\n            n_R = n_samples - n_L\n            if n_L < 2 or n_R < 2:\n                continue\n            current_G_R = G_current_node - current_G_L\n            current_H_R = H_current_node - current_H_L\n            den_L = current_H_L + lam\n            den_R = current_H_R + lam\n            if den_L <= epsilon or den_R <= epsilon:\n                continue\n            s_val_L = current_G_L ** 2 / den_L\n            s_val_R = current_G_R ** 2 / den_R\n            gain = 0.5 * (s_val_L + s_val_R - s_val_current_node) - gamma\n            if gain > best_gain:\n                best_gain = gain\n                threshold = sorted_feature_values[i]\n                best_split_info = (feature_idx, threshold)\n    if best_split_info is not None:\n        return best_split_info\n    else:\n        return None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n        If *x* is a list or NumPy array, its elements must be numeric and\n        if it's a list of lists, it must not be ragged.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like (list or NumPy array)\n    \n    Raises\n    ------\n    TypeError\n        If the input *x* is not a scalar, list, or NumPy array,\n        or if elements of list/array are not numeric or list is ragged.\n    \"\"\"\n    is_scalar_input = isinstance(x, (int, float))\n    if is_scalar_input:\n        x_np = np.array(x, dtype=float)\n    elif isinstance(x, list):\n        try:\n            x_np = np.array(x, dtype=float)\n        except ValueError:\n            raise TypeError('If input is a list, it must be a list of numbers or a (non-ragged) nested list of numbers that can be converted to a float NumPy array.')\n    elif isinstance(x, np.ndarray):\n        if not np.issubdtype(x.dtype, np.number):\n            raise TypeError('If input is a NumPy array, its dtype must be numeric.')\n        x_np = x.astype(float)\n    else:\n        raise TypeError('Input must be a scalar (int/float), Python list, or NumPy array.')\n    sigmoid_values_np = 1 / (1 + np.exp(-x_np))\n    gradient_values_np = sigmoid_values_np * (1 - sigmoid_values_np)\n    rounded_sigmoid_np = np.round(sigmoid_values_np, 4)\n    rounded_gradient_np = np.round(gradient_values_np, 4)\n    if is_scalar_input:\n        sigmoid_output = rounded_sigmoid_np.item()\n        gradient_output = rounded_gradient_np.item()\n    else:\n        sigmoid_output = rounded_sigmoid_np.tolist()\n        gradient_output = rounded_gradient_np.tolist()\n    return (sigmoid_output, gradient_output)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_train = len(x_train)\n    if n_train == 0:\n        return [1] * len(x_test)\n    x_train_np = np.array(x_train, dtype=float)\n    y_train_np = np.array(y_train, dtype=int)\n    x_test_np = np.array(x_test, dtype=float)\n    weights = np.ones(n_train, dtype=float) / n_train\n    stored_alphas = []\n    stored_stumps = []\n    unique_sorted_x = np.sort(np.unique(x_train_np))\n    possible_thresholds = []\n    if len(unique_sorted_x) >= 2:\n        for i in range(len(unique_sorted_x) - 1):\n            possible_thresholds.append((unique_sorted_x[i] + unique_sorted_x[i + 1]) / 2.0)\n    stability_eps = 1e-12\n    while True:\n        if len(stored_alphas) > 0:\n            ensemble_scores_train = np.zeros(n_train, dtype=float)\n            for (alpha_i, stump_i) in zip(stored_alphas, stored_stumps):\n                (d_i, theta_i) = (stump_i['d'], stump_i['theta'])\n                predictions_i = np.ones(n_train, dtype=int)\n                if d_i == 0:\n                    predictions_i[x_train_np > theta_i] = -1\n                else:\n                    predictions_i[x_train_np <= theta_i] = -1\n                ensemble_scores_train += alpha_i * predictions_i\n            pred_train = np.sign(ensemble_scores_train)\n            pred_train[pred_train == 0] = 1\n            current_train_error = np.sum(pred_train != y_train_np) / n_train\n        else:\n            pred_train_default = np.ones(n_train, dtype=int)\n            current_train_error = np.sum(pred_train_default != y_train_np) / n_train\n        if current_train_error <= epsilon:\n            break\n        if not possible_thresholds:\n            break\n        min_weighted_error = float('inf')\n        best_stump_params = None\n        best_stump_predictions_train = None\n        for d_candidate in [0, 1]:\n            for theta_candidate in possible_thresholds:\n                h_train_candidate = np.ones(n_train, dtype=int)\n                if d_candidate == 0:\n                    h_train_candidate[x_train_np > theta_candidate] = -1\n                else:\n                    h_train_candidate[x_train_np <= theta_candidate] = -1\n                misclassified_mask = h_train_candidate != y_train_np\n                weighted_error = np.sum(weights[misclassified_mask])\n                if weighted_error < min_weighted_error:\n                    min_weighted_error = weighted_error\n                    best_stump_params = {'d': d_candidate, 'theta': theta_candidate}\n                    best_stump_predictions_train = h_train_candidate\n        if best_stump_params is None:\n            break\n        err = min_weighted_error\n        if err <= stability_eps:\n            err = stability_eps\n        elif err >= 1.0 - stability_eps:\n            err = 1.0 - stability_eps\n        current_alpha = 0.5 * np.log((1.0 - err) / err)\n        if abs(current_alpha) < stability_eps:\n            break\n        stored_alphas.append(current_alpha)\n        stored_stumps.append(best_stump_params)\n        exponent = -current_alpha * y_train_np * best_stump_predictions_train\n        weights_update_factor = np.exp(exponent)\n        weights *= weights_update_factor\n        sum_weights = np.sum(weights)\n        if sum_weights < stability_eps:\n            break\n        weights /= sum_weights\n    n_test = len(x_test)\n    if n_test == 0:\n        return []\n    if not stored_alphas:\n        return [1] * n_test\n    ensemble_scores_test = np.zeros(n_test, dtype=float)\n    for (alpha_i, stump_i) in zip(stored_alphas, stored_stumps):\n        (d_i, theta_i) = (stump_i['d'], stump_i['theta'])\n        predictions_i = np.ones(n_test, dtype=int)\n        if d_i == 0:\n            predictions_i[x_test_np > theta_i] = -1\n        else:\n            predictions_i[x_test_np <= theta_i] = -1\n        ensemble_scores_test += alpha_i * predictions_i\n    final_predictions_test = np.sign(ensemble_scores_test)\n    final_predictions_test[final_predictions_test == 0] = 1\n    return final_predictions_test.astype(int).tolist()"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    m_test = X_test.shape[0]\n    n_train = X_train.shape[0]\n    if m_test == 0:\n        return []\n    if n_train == 0:\n        pred_val_for_empty_train = np.sign(b)\n        if pred_val_for_empty_train == 0:\n            pred_val_for_empty_train = 1\n        return [int(pred_val_for_empty_train)] * m_test\n    alpha_y = alpha * y_train\n    X_train_sq_norms = np.sum(X_train ** 2, axis=1)\n    X_test_sq_norms = np.sum(X_test ** 2, axis=1)\n    dot_prods = np.dot(X_train, X_test.T)\n    sq_dists = X_train_sq_norms[:, np.newaxis] - 2 * dot_prods + X_test_sq_norms[np.newaxis, :]\n    kernel_matrix = np.exp(-gamma * sq_dists)\n    decision_values = np.dot(alpha_y, kernel_matrix) + b\n    predictions_float = np.sign(decision_values)\n    predictions_float[predictions_float == 0] = 1.0\n    predicted_labels = predictions_float.astype(int).tolist()\n    return predicted_labels"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float] | int:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float] | int\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error. Both are rounded to\n        four decimals. If `k` is invalid the function returns -1.\n    \"\"\"\n    try:\n        X_np = np.array(X, dtype=float)\n    except ValueError:\n        return -1\n    if X_np.ndim == 2:\n        (m, n) = X_np.shape\n    elif X_np.ndim == 1 and X_np.size == 0:\n        (m, n) = (0, 0)\n    else:\n        return -1\n    if not 1 <= k <= min(m, n):\n        return -1\n    (U, s_vec, Vh) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    s_k_vec = s_vec[:k]\n    Vh_k = Vh[:k, :]\n    Sigma_k_matrix = np.diag(s_k_vec)\n    X_hat_np = U_k @ Sigma_k_matrix @ Vh_k\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    mse_rounded = np.round(mse, 4)\n    X_hat_rounded_np = np.round(X_hat_np, 4)\n    X_hat_list = X_hat_rounded_np.tolist()\n    return (X_hat_list, mse_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\nclass Stump:\n\n    def __init__(self, s: float, c1: float, c2: float):\n        self.s = s\n        self.c1 = c1\n        self.c2 = c2\n\n    def predict_one(self, x_val: float) -> float:\n        \"\"\"Predict for a single query point.\"\"\"\n        return self.c1 if x_val <= self.s else self.c2\n\n    def predict_many(self, x_arr: np.ndarray) -> np.ndarray:\n        \"\"\"Predict for an array of points.\"\"\"\n        return np.where(x_arr <= self.s, self.c1, self.c2)\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train_np = np.array(x_train, dtype=float)\n    y_train_np = np.array(y_train, dtype=float)\n    if len(x_train_np) == 0:\n        return 0.0\n    if len(x_train_np) != len(y_train_np):\n        raise ValueError('x_train and y_train must have the same length.')\n    sort_indices = np.argsort(x_train_np)\n    x_sorted = x_train_np[sort_indices]\n    y_sorted = y_train_np[sort_indices]\n    n_samples = len(x_sorted)\n    current_residuals = y_sorted.copy()\n    ensemble_stumps: list[Stump] = []\n    candidate_splits_raw: list[float] = []\n    if n_samples >= 2:\n        for i in range(n_samples - 1):\n            candidate_splits_raw.append((x_sorted[i] + x_sorted[i + 1]) / 2.0)\n    candidate_splits: list[float] = []\n    if candidate_splits_raw:\n        candidate_splits = sorted(list(np.unique(np.array(candidate_splits_raw))))\n    current_rss = np.sum(current_residuals ** 2)\n    while current_rss > epsilon:\n        if not candidate_splits:\n            break\n        best_stump_params_for_iteration: tuple[float, float, float] | None = None\n        min_rss_after_adding_stump_this_iteration = current_rss\n        improved_in_iteration = False\n        for s_candidate in candidate_splits:\n            mask_left = x_sorted <= s_candidate\n            residuals_left = current_residuals[mask_left]\n            residuals_right = current_residuals[~mask_left]\n            c1 = np.mean(residuals_left) if len(residuals_left) > 0 else 0.0\n            c2 = np.mean(residuals_right) if len(residuals_right) > 0 else 0.0\n            stump_predictions = np.where(mask_left, c1, c2)\n            rss_val = np.sum((current_residuals - stump_predictions) ** 2)\n            if rss_val < min_rss_after_adding_stump_this_iteration:\n                min_rss_after_adding_stump_this_iteration = rss_val\n                best_stump_params_for_iteration = (s_candidate, c1, c2)\n                improved_in_iteration = True\n        if improved_in_iteration and best_stump_params_for_iteration is not None:\n            (s, c1, c2) = best_stump_params_for_iteration\n            best_stump_obj = Stump(s, c1, c2)\n            ensemble_stumps.append(best_stump_obj)\n            predictions_from_added_stump = best_stump_obj.predict_many(x_sorted)\n            current_residuals -= predictions_from_added_stump\n            current_rss = min_rss_after_adding_stump_this_iteration\n        else:\n            break\n    final_prediction = 0.0\n    for stump in ensemble_stumps:\n        final_prediction += stump.predict_one(x_query)\n    return round(final_prediction, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a NumPy tensor of a specified shape filled with 0.0s and 1.0s.\n\n    The probability of an entry being 1.0 is determined by the sparsity value.\n    A seed can be provided for reproducible results.\n\n    Parameters:\n    ----------\n    shape : tuple[int, ...]\n        The desired shape of the output tensor. For example, (2, 3) for a 2x3 matrix.\n    sparsity : float, optional\n        The probability of generating a 1.0 for each entry. Must be in the\n        closed interval [0.0, 1.0]. Defaults to 0.5.\n    seed : int | None, optional\n        A seed for NumPy's random number generator (np.random.seed()).\n        If None, the random number generator is not seeded explicitly by this\n        function, potentially leading to different results on each call.\n        Defaults to None.\n\n    Returns:\n    -------\n    numpy.ndarray | int\n        - If sparsity is valid: A NumPy tensor of the specified `shape` with\n          `dtype` float, containing 0.0s and 1.0s. Each entry is 1.0 with\n          probability `sparsity` and 0.0 otherwise.\n        - If sparsity is outside the legal range [0.0, 1.0]: Returns -1.\n\n    Notes:\n    -----\n    - The function adheres to the specified rules:\n        1. `sparsity` must be in [0.0, 1.0].\n        2. Entries are 1.0 with probability `sparsity`.\n        3. `np.random.seed(seed)` is called if a seed is provided.\n        4. Invalid `sparsity` returns -1.\n        5. Output tensor has a floating `dtype`.\n    - The method for generating 1.0s follows the problem's example: an entry\n      becomes 1.0 if a randomly generated value (from a uniform\n      distribution [0,1)) is greater than or equal to (1.0 - sparsity).\n\n    Example:\n    --------\n    >>> result = random_binary_tensor(shape=(2, 3), sparsity=0.3, seed=42)\n    >>> print(result)\n    [[0. 1. 1.]\n     [0. 0. 0.]]\n    >>> result.dtype\n    dtype('float64')\n\n    >>> random_binary_tensor(shape=(1, 1), sparsity=0.0, seed=1)\n    array([[0.]])\n    >>> random_binary_tensor(shape=(1, 1), sparsity=1.0, seed=1)\n    array([[1.]])\n\n    >>> random_binary_tensor(shape=(2,2), sparsity=1.5) # Invalid sparsity\n    -1\n    >>> random_binary_tensor(shape=(2,2), sparsity=-0.1) # Invalid sparsity\n    -1\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_values = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_tensor_bool = random_values >= threshold\n    binary_tensor_float = binary_tensor_bool.astype(float)\n    return binary_tensor_float"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        pass\n    k_th_element_idx = n_samples // 2\n    column_d_values = data[:, d]\n    partitioned_indices = np.argpartition(column_d_values, k_th_element_idx)\n    pivot_row_index = int(partitioned_indices[k_th_element_idx])\n    median_value = data[pivot_row_index, d]\n    left_mask = np.zeros(n_samples, dtype=bool)\n    right_mask = np.zeros(n_samples, dtype=bool)\n    for i in range(k_th_element_idx):\n        original_row_idx = partitioned_indices[i]\n        if data[original_row_idx, d] < median_value:\n            left_mask[original_row_idx] = True\n    for i in range(k_th_element_idx + 1, n_samples):\n        original_row_idx = partitioned_indices[i]\n        if data[original_row_idx, d] > median_value:\n            right_mask[original_row_idx] = True\n    left_indices = np.where(left_mask)[0].tolist()\n    right_indices = np.where(right_mask)[0].tolist()\n    return (pivot_row_index, left_indices, right_indices)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n        Per problem description, this is a positive integer.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n        Per problem description, this is a positive integer.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal x must be one-dimensional.'\n    assert stride >= 1, 'stride must be a positive integer (>= 1).'\n    assert len(x) >= frame_width, 'Input signal length must be at least frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    item_size = x.itemsize\n    new_strides = (stride * item_size, item_size)\n    frames_view = as_strided(x, shape=(n_frames, frame_width), strides=new_strides, writeable=writeable)\n    return frames_view"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        arr = np.array(X, dtype=float)\n    except (TypeError, ValueError):\n        return False\n    if arr.ndim != 2:\n        return False\n    if not np.all((arr >= 0) & (arr <= 1)):\n        return False\n    sum_of_rows = arr.sum(axis=1)\n    if not np.allclose(sum_of_rows, 1, atol=1e-08, rtol=0):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    if y.ndim > 1:\n        if y.shape[0] == n and y.shape[1] == 1:\n            y = y.ravel()\n        elif y.shape[0] == 1 and y.shape[1] == n:\n            y = y.ravel()\n    if d == 0:\n        return []\n    if n == 0:\n        return np.round(np.zeros(d), 4).tolist()\n    w = np.zeros(d)\n    s = np.zeros(d)\n    if batch_size <= 0:\n        current_batch_size = n\n    else:\n        current_batch_size = min(batch_size, n)\n    for iteration in range(max_iter):\n        start_idx = iteration * current_batch_size % n\n        batch_indices = np.arange(start_idx, start_idx + current_batch_size) % n\n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n        errors_batch = X_batch @ w - y_batch\n        g_batch = 1 / current_batch_size * X_batch.T @ errors_batch\n        s = rho * s + (1 - rho) * g_batch ** 2\n        update_step = eta * g_batch / (np.sqrt(s) + eps_station)\n        w = w - update_step\n        errors_full = X @ w - y\n        g_full = 1 / n * X.T @ errors_full\n        grad_norm = np.linalg.norm(g_full)\n        if grad_norm < epsilon:\n            break\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Computes the SoftPlus activation function or its derivative (Sigmoid).\n\n    The SoftPlus function is defined as SoftPlus(x) = log(1 + exp(x)).\n    Its derivative is the logistic (sigmoid) function sigma(x) = 1 / (1 + exp(-x)).\n\n    This implementation uses numerically stable formulations.\n\n    Args:\n        x: A scalar (int or float), Python list of numbers, or NumPy array of real values.\n        deriv: A boolean flag.\n               If False (default), computes SoftPlus(x) element-wise.\n               If True, computes the derivative (Sigmoid function) element-wise.\n\n    Returns:\n        If x is a scalar: The computed value as a float, rounded to 4 decimal places.\n        If x is a list or NumPy array: A Python list of floats,\n                                     where each float is the computed value\n                                     rounded to 4 decimal places.\n                                     Returns an empty list if the input is an empty list/array.\n\n    Raises:\n        TypeError: If the input x is not a scalar, list, or NumPy array, or if\n                   list/array elements are not convertible to real numbers.\n    \"\"\"\n    is_scalar_input = False\n    if isinstance(x, (int, float)):\n        is_scalar_input = True\n        x_np = np.array([x], dtype=np.float64)\n    elif isinstance(x, list):\n        try:\n            x_np = np.array(x, dtype=np.float64)\n        except ValueError as e:\n            raise TypeError('Input list elements must be convertible to real numbers.') from e\n    elif isinstance(x, np.ndarray):\n        if not np.issubdtype(x.dtype, np.number):\n            raise TypeError('Input NumPy array must have a numeric dtype.')\n        x_np = x.astype(np.float64)\n    else:\n        raise TypeError('Input x must be a scalar (int/float), Python list, or NumPy array.')\n    with np.errstate(over='ignore', under='ignore'):\n        if deriv:\n            result_np = 1.0 / (1.0 + np.exp(-x_np))\n        else:\n            term_exp_neg_abs_x = np.exp(-np.abs(x_np))\n            result_np = np.maximum(0, x_np) + np.log1p(term_exp_neg_abs_x)\n    rounded_result_np = np.round(result_np, 4)\n    if is_scalar_input:\n        return float(rounded_result_np[0])\n    else:\n        return rounded_result_np.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if len(sequence) < N:\n        return 0.0\n    total_log_prob = 0.0\n    if N == 1:\n        unigram_counts = Counter(corpus)\n        total_corpus_tokens = len(corpus)\n        if total_corpus_tokens == 0:\n            return float('-inf')\n        for i in range(len(sequence) - N + 1):\n            token = sequence[i]\n            count_token = unigram_counts[token]\n            if count_token == 0:\n                return float('-inf')\n            log_prob_ngram = np.log(count_token) - np.log(total_corpus_tokens)\n            total_log_prob += log_prob_ngram\n    else:\n        ngram_counts = Counter()\n        for i in range(len(corpus) - N + 1):\n            ngram = tuple(corpus[i:i + N])\n            ngram_counts[ngram] += 1\n        prefix_counts = Counter()\n        for i in range(len(corpus) - (N - 1) + 1):\n            prefix = tuple(corpus[i:i + (N - 1)])\n            prefix_counts[prefix] += 1\n        for i in range(len(sequence) - N + 1):\n            current_ngram_tuple = tuple(sequence[i:i + N])\n            current_prefix_tuple = current_ngram_tuple[:-1]\n            count_ngram = ngram_counts[current_ngram_tuple]\n            count_prefix = prefix_counts[current_prefix_tuple]\n            if count_ngram == 0:\n                return float('-inf')\n            if count_prefix == 0:\n                return float('-inf')\n            log_prob_ngram = np.log(count_ngram) - np.log(count_prefix)\n            total_log_prob += log_prob_ngram\n    return round(total_log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef _soft_threshold(rho: float, lambda_val: float) -> float:\n    \"\"\"\n    Soft thresholding function: S(\u03c1, \u03bb) = sign(\u03c1) * max(|\u03c1| - \u03bb, 0).\n    lambda_val is the '\u03bb' from the problem's soft_threshold formula,\n    which is directly the 'reg_factor'.\n    \"\"\"\n    if rho > lambda_val:\n        return rho - lambda_val\n    elif rho < -lambda_val:\n        return rho + lambda_val\n    else:\n        return 0.0\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb. This is the \u03bb used directly in the\n        soft_threshold(\u03c1, \u03bb) calculation as per the problem statement.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X_np = np.array(X, dtype=float)\n    else:\n        X_np = X.astype(float)\n    if not isinstance(y, np.ndarray):\n        y_np = np.array(y, dtype=float)\n    else:\n        y_np = y.astype(float)\n    if X_np.ndim == 0:\n        X_np = np.array([[X_np.item()]], dtype=float)\n    elif X_np.ndim == 1:\n        X_np = X_np.reshape(-1, 1)\n    m = X_np.shape[0]\n    if m == 0:\n        if y_np.shape[0] == 0:\n            return [0.0] * (degree + 1)\n        else:\n            raise ValueError('Input X is empty, but y is not.')\n    if y_np.shape[0] != m:\n        raise ValueError('X and y must have the same number of samples.')\n    if y_np.ndim == 2 and y_np.shape[1] == 1:\n        y_np = y_np.flatten()\n    X_poly = np.zeros((m, degree + 1), dtype=float)\n    X_poly[:, 0] = 1.0\n    for j_pow in range(1, degree + 1):\n        X_poly[:, j_pow] = X_np[:, 0] ** j_pow\n    w = np.zeros(degree + 1, dtype=float)\n    for _ in range(n_iterations):\n        w_old = np.copy(w)\n        if degree == 0:\n            y_pred_by_features = np.zeros(m, dtype=float)\n        else:\n            y_pred_by_features = X_poly[:, 1:] @ w[1:]\n        residuals_for_bias = y_np - y_pred_by_features\n        w[0] = np.mean(residuals_for_bias)\n        for j_idx in range(1, degree + 1):\n            xj_col = X_poly[:, j_idx]\n            current_total_prediction_Xw = X_poly @ w\n            wj_xj_contribution = w[j_idx] * xj_col\n            prediction_excluding_wj_effect = current_total_prediction_Xw - wj_xj_contribution\n            term_for_rho = y_np - prediction_excluding_wj_effect\n            rho_j = xj_col.T @ term_for_rho\n            xj_T_xj = xj_col.T @ xj_col\n            if xj_T_xj == 0:\n                w[j_idx] = 0.0\n            else:\n                w[j_idx] = _soft_threshold(rho_j, reg_factor) / xj_T_xj\n        max_abs_change = np.max(np.abs(w - w_old))\n        if max_abs_change < tol:\n            break\n    return np.round(w, 4).tolist()"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculates the backward probability vector beta_t for a given time index t\n    in a discrete Hidden Markov Model.\n\n    The backward variable beta_t(i) expresses the probability of observing the\n    sequence of observations from time t+1 to T-1 (inclusive), given that the\n    HMM is in state i at time t.\n    \n    The recurrence relation for beta_t(i) (using 0-indexed states i,j and\n    0-indexed time 's' for beta_s) is:\n      beta_s(i) = sum_{j=0}^{N-1} (A[i,j] * B[j, obs[s+1]] * beta_{s+1}(j))\n    \n    The base case is:\n      beta_{T-1}(i) = 1.0 for all states i.\n\n    Args:\n        A: Transition probability matrix of shape (N, N).\n           A[i][j] is the probability of transitioning from state i to state j.\n           N is the number of states. States are 0-indexed (0 to N-1).\n        B: Emission probability matrix of shape (N, M).\n           B[j][k] is the probability of observing symbol k when in state j.\n           M is the number of unique observation symbols.\n        obs: List of observation indices (length T). obs[s] is the observation\n             at time s (0-indexed). Observations are 0-indexed integers\n             representing symbols, so values are in [0, M-1].\n             T is the total number of observations.\n        t: Integer time index (0 <= t < T) for which to calculate beta_t.\n           t is 0-indexed.\n\n    Returns:\n        A Python list containing the N backward probabilities beta_t(i)\n        for i = 0, ..., N-1, rounded to 4 decimal places.\n        Returns an empty list if N=0.\n    \"\"\"\n    A_np = np.array(A, dtype=float)\n    B_np = np.array(B, dtype=float)\n    if len(A) == 0:\n        N = 0\n    else:\n        N = A_np.shape[0]\n    T = len(obs)\n    if N == 0:\n        return []\n    beta_probs = np.zeros((T, N))\n    beta_probs[T - 1, :] = np.ones(N)\n    for s_idx in range(T - 2, t - 1, -1):\n        observation_symbol_at_s_plus_1 = obs[s_idx + 1]\n        for i in range(N):\n            sum_val = 0.0\n            for j in range(N):\n                term = A_np[i, j] * B_np[j, observation_symbol_at_s_plus_1] * beta_probs[s_idx + 1, j]\n                sum_val += term\n            beta_probs[s_idx, i] = sum_val\n    result_np_vector = beta_probs[t, :]\n    rounded_result_list = [round(val, 4) for val in result_np_vector.tolist()]\n    return rounded_result_list"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    if not A[0]:\n        return 0.0\n    if not B[0]:\n        return 0.0\n    try:\n        A_np = np.array(A, dtype=float)\n        B_np = np.array(B, dtype=float)\n        pi_np = np.array(pi, dtype=float)\n    except ValueError:\n        return 0.0\n    if pi_np.ndim != 1:\n        return 0.0\n    N = pi_np.shape[0]\n    if N == 0:\n        return 0.0\n    T = len(obs)\n    if A_np.ndim != 2 or A_np.shape[0] != N or A_np.shape[1] != N:\n        return 0.0\n    if B_np.ndim != 2 or B_np.shape[0] != N:\n        return 0.0\n    M = B_np.shape[1]\n    if M == 0:\n        return 0.0\n    for obs_idx in obs:\n        if not (isinstance(obs_idx, int) and 0 <= obs_idx < M):\n            return 0.0\n    beta = np.zeros((T, N), dtype=float)\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        o_next = obs[t + 1]\n        term_vector = B_np[:, o_next] * beta[t + 1, :]\n        beta[t, :] = A_np @ term_vector\n    o_0 = obs[0]\n    prob = np.sum(pi_np * B_np[:, o_0] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not isinstance(observations, list) or not observations:\n        return -1\n    if not isinstance(S, list):\n        return -1\n    n = len(S)\n    if n == 0:\n        return -1\n    if not all((isinstance(p, (int, float)) for p in S)):\n        return -1\n    if not isinstance(A, list) or len(A) != n:\n        return -1\n    if not all((isinstance(row, list) and len(row) == n for row in A)):\n        return -1\n    if not all((isinstance(val, (int, float)) for row in A for val in row)):\n        return -1\n    if not isinstance(B, list) or len(B) != n:\n        return -1\n    m = 0\n    if not all((isinstance(row, list) for row in B)):\n        return -1\n    if not B[0]:\n        m = 0\n    else:\n        m = len(B[0])\n    if m == 0:\n        return -1\n    if not all((len(row) == m for row in B)):\n        return -1\n    if not all((isinstance(val, (int, float)) for row in B for val in row)):\n        return -1\n    if not all((isinstance(obs, int) for obs in observations)):\n        return -1\n    if not all((0 <= obs < m for obs in observations)):\n        return -1\n    S_arr = np.array(S, dtype=float)\n    A_arr = np.array(A, dtype=float)\n    B_arr = np.array(B, dtype=float)\n    T = len(observations)\n    alpha = np.zeros((T, n), dtype=float)\n    first_obs_idx = observations[0]\n    alpha[0, :] = S_arr * B_arr[:, first_obs_idx]\n    for t in range(1, T):\n        obs_idx = observations[t]\n        sum_prev_alpha_times_transition = alpha[t - 1, :] @ A_arr\n        alpha[t, :] = sum_prev_alpha_times_transition * B_arr[:, obs_idx]\n    likelihood = np.sum(alpha[T - 1, :])\n    return round(likelihood, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "def fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    frequent_item_counts = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_item_counts:\n        return []\n    header_order = sorted(frequent_item_counts.keys(), key=lambda item: (-frequent_item_counts[item], item))\n    header_table = {item: [frequent_item_counts[item], None] for item in header_order}\n    root_node = FPTreeNode(None, 0, None)\n    item_to_global_order_rank = {item: i for (i, item) in enumerate(header_order)}\n    for transaction in transactions:\n        processed_transaction_items = [item for item in transaction if item in frequent_item_counts]\n        processed_transaction_items.sort(key=lambda item: item_to_global_order_rank[item])\n        current_node = root_node\n        for item in processed_transaction_items:\n            child_node = current_node.children.get(item)\n            if child_node:\n                child_node.increment_count()\n            else:\n                new_node = FPTreeNode(item, 1, current_node)\n                current_node.children[item] = new_node\n                child_node = new_node\n                if header_table[item][1] is None:\n                    header_table[item][1] = child_node\n                else:\n                    temp_link_node = header_table[item][1]\n                    while temp_link_node.node_link is not None:\n                        temp_link_node = temp_link_node.node_link\n                    temp_link_node.node_link = child_node\n            current_node = child_node\n    frequent_itemsets_result = []\n    _mine_fp_tree_recursive(header_table, header_order, min_support, [], frequent_itemsets_result)\n    frequent_itemsets_result.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets_result"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n        (Note: The return type hint is list[int], but -1 (an int) is returned for invalid k as per rules.)\n    \"\"\"\n    num_train_samples = len(X_train)\n    if not isinstance(k, int) or k <= 0 or k > num_train_samples:\n        return -1\n    if not X_test:\n        return []\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    predictions = []\n    for test_sample_features in X_test_np:\n        distances_sq = np.sum((X_train_np - test_sample_features) ** 2, axis=1)\n        nearest_neighbor_indices = np.argsort(distances_sq)[:k]\n        k_nearest_labels = y_train_np[nearest_neighbor_indices]\n        (unique_labels, counts) = np.unique(k_nearest_labels, return_counts=True)\n        max_count = np.max(counts)\n        labels_with_max_count = unique_labels[counts == max_count]\n        predicted_label = np.min(labels_with_max_count)\n        predictions.append(int(predicted_label))\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y_true_np = np.asarray(y)\n    y_pred_np = np.asarray(y_pred)\n    if np.issubdtype(y_pred_np.dtype, np.floating):\n        epsilon = np.finfo(y_pred_np.dtype).eps\n    else:\n        epsilon = np.finfo(float).eps\n    y_pred_plus_eps = y_pred_np + epsilon\n    log_y_pred = np.log(y_pred_plus_eps)\n    terms = y_true_np * log_y_pred\n    sum_of_terms = np.sum(terms)\n    loss = -sum_of_terms\n    rounded_loss = round(loss, 4)\n    return rounded_loss"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Dict, Tuple\nLayerCacheType = Tuple[Tuple[np.ndarray, np.ndarray, np.ndarray], np.ndarray]\ndef sigmoid(Z: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Implements the sigmoid activation function.\n\n    Parameters:\n    Z : np.ndarray \n        Numpy array of any shape, typically the output of the linear layer.\n\n    Returns:\n    A : np.ndarray \n        Output of sigmoid(Z), has the same shape as Z.\n    cache : np.ndarray \n        Z itself, stored for efficient backpropagation.\n    \"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    cache = Z\n    return (A, cache)\ndef relu(Z: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Implements the ReLU activation function.\n\n    Parameters:\n    Z : np.ndarray \n        Numpy array of any shape, typically the output of the linear layer.\n\n    Returns:\n    A : np.ndarray \n        Output of relu(Z), has the same shape as Z.\n    cache : np.ndarray \n        Z itself, stored for efficient backpropagation.\n    \"\"\"\n    A = np.maximum(0, Z)\n    cache = Z\n    return (A, cache)\ndef linear_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray) -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray, np.ndarray]]:\n    \"\"\"\n    Implements the linear part of a layer's forward propagation.\n    Z = W\u00b7A_prev + b\n\n    Parameters:\n    A_prev : np.ndarray \n        Activations from the previous layer (or input data X).\n        Shape: (size of previous layer, number of examples m).\n    W : np.ndarray \n        Weights matrix for the current layer.\n        Shape: (size of current layer n_l, size of previous layer n_{l-1}).\n    b : np.ndarray \n        Bias vector for the current layer.\n        Shape: (size of current layer n_l, 1).\n\n    Returns:\n    Z : np.ndarray \n        The pre-activation parameter (output of the linear step).\n    cache : tuple \n        A tuple containing (A_prev, W, b), stored for computing the backward pass.\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    cache = (A_prev, W, b)\n    return (Z, cache)\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str) -> Tuple[np.ndarray, LayerCacheType]:\n    \"\"\"\n    Implements the forward propagation for one layer: LINEAR step followed by ACTIVATION step.\n\n    Parameters:\n    A_prev : np.ndarray \n        Activations from the previous layer (or input data X).\n    W : np.ndarray \n        Weights matrix for the current layer.\n    b : np.ndarray \n        Bias vector for the current layer.\n    activation : str \n        The activation function to be used: \"sigmoid\" or \"relu\".\n\n    Returns:\n    A : np.ndarray \n        The output of the activation function (post-activation value).\n    cache : LayerCacheType \n        A tuple containing the linear_cache and activation_cache.\n        Specifically, ((A_prev, W, b), Z).\n    \"\"\"\n    (Z, linear_cache) = linear_forward(A_prev, W, b)\n    if activation == 'sigmoid':\n        (A, activation_cache) = sigmoid(Z)\n    elif activation == 'relu':\n        (A, activation_cache) = relu(Z)\n    else:\n        raise ValueError(\"Activation function not recognized. Use 'sigmoid' or 'relu'.\")\n    cache: LayerCacheType = (linear_cache, activation_cache)\n    return (A, cache)\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m), where n_x is the number of input features\n        and m is the number of examples.\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters:\n        'W1', 'b1', 'W2', 'b2', ..., 'WL', 'bL'.\n        Wl has shape (n_l, n_{l-1}) and bl has shape (n_l, 1).\n\n    Returns\n    -------\n    list[list[float]] \n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (n_L, m), typically (1, m) for binary classification.\n        (Note: This docstring, from the stub, describes AL, the first element of the \n        returned tuple. The function actually returns a tuple (AL, caches) \n        as per the problem's textual description and grading requirements.)\n    \"\"\"\n    caches: List[LayerCacheType] = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        Wl = parameters['W' + str(l)]\n        bl = parameters['b' + str(l)]\n        (A, cache) = linear_activation_forward(A_prev, Wl, bl, activation='relu')\n        caches.append(cache)\n    WL = parameters['W' + str(L)]\n    bL = parameters['b' + str(L)]\n    (AL, cache) = linear_activation_forward(A, WL, bL, activation='sigmoid')\n    caches.append(cache)\n    AL_rounded = np.round(AL, 4)\n    AL_list: List[List[float]] = AL_rounded.tolist()\n    return (AL_list, caches)"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = A2.size\n    if m == 0:\n        return 0.0\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    log_likelihood_terms = Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)\n    sum_of_log_likelihood_terms = np.sum(log_likelihood_terms)\n    cost = -(1 / m) * sum_of_log_likelihood_terms\n    rounded_cost = round(cost, 6)\n    return rounded_cost"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(Q, (list, np.ndarray)):\n        raise TypeError('Q must be a list or NumPy array.')\n    if not isinstance(epsilon, (float, int)):\n        raise TypeError(f'epsilon must be a float or int, got {type(epsilon)}.')\n    if not 0 <= epsilon <= 1:\n        raise ValueError(f'epsilon must be between 0 and 1 (inclusive), got {epsilon}.')\n    n = len(Q)\n    if n == 0:\n        raise ValueError('Q cannot be empty; number of actions must be at least 1.')\n    greedy_action_index = np.argmax(Q)\n    prob_non_greedy = float(epsilon) / n\n    prob_greedy = 1.0 - float(epsilon) + prob_non_greedy\n    probabilities = [0.0] * n\n    for i in range(n):\n        if i == greedy_action_index:\n            probabilities[i] = prob_greedy\n        else:\n            probabilities[i] = prob_non_greedy\n    rounded_probabilities = [round(p, 4) for p in probabilities]\n    return rounded_probabilities"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n    if not predictions[0]:\n        return []\n    final_predictions = []\n    for sample_votes in zip(*predictions):\n        vote_counts = Counter(sample_votes)\n        max_count = 0\n        if vote_counts:\n            max_count = max(vote_counts.values())\n        else:\n            pass\n        tied_labels = []\n        for (label, count) in vote_counts.items():\n            if count == max_count:\n                tied_labels.append(label)\n        tied_labels.sort()\n        winner = tied_labels[0]\n        final_predictions.append(winner)\n    return final_predictions"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        scalar_value = np.logaddexp(0.0, z)\n        return round(scalar_value, 4)\n    else:\n        z_array = np.asarray(z, dtype=float)\n        softplus_array = np.logaddexp(0.0, z_array)\n        rounded_array = np.round(softplus_array, 4)\n        return rounded_array.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef _get_attr_or_key(obj: Any, name: str, default: Any=None) -> Any:\n    \"\"\"\n    Safely retrieves an attribute from an object or a key from a dictionary.\n    \"\"\"\n    if isinstance(obj, dict):\n        return obj.get(name, default)\n    else:\n        return getattr(obj, name, default)\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    ev_estimates = _get_attr_or_key(policy, 'ev_estimates')\n    if not isinstance(ev_estimates, dict) or not ev_estimates:\n        return np.nan\n    arm_evs = _get_attr_or_key(bandit, 'arm_evs')\n    if not isinstance(arm_evs, (list, tuple)):\n        return np.nan\n    num_arms = len(arm_evs)\n    if num_arms == 0:\n        return np.nan\n    if not all((isinstance(k, int) for k in ev_estimates.keys())):\n        return np.nan\n    try:\n        sorted_arm_indices = sorted(ev_estimates.keys())\n    except TypeError:\n        return np.nan\n    ordered_policy_estimates = [ev_estimates[k] for k in sorted_arm_indices]\n    if len(ordered_policy_estimates) != num_arms:\n        return np.nan\n    squared_errors_sum = 0.0\n    for i in range(num_arms):\n        true_ev = arm_evs[i]\n        estimated_ev = ordered_policy_estimates[i]\n        if not isinstance(true_ev, (int, float)) or not isinstance(estimated_ev, (int, float)):\n            return np.nan\n        error = estimated_ev - true_ev\n        squared_errors_sum += error * error\n    mean_sq_error_value = squared_errors_sum / num_arms\n    return round(mean_sq_error_value, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    all_corpus_words = []\n    tokenized_corpus_sentences = []\n    for s in corpus:\n        words = s.split()\n        if not words:\n            continue\n        tokenized_corpus_sentences.append(words)\n        all_corpus_words.extend(words)\n    corpus_vocab = set(all_corpus_words)\n    V = len(corpus_vocab) + 1\n    n_gram_counts = Counter()\n    n_minus_1_gram_counts = Counter()\n    if N == 1:\n        current_unigram_counts = Counter()\n        total_tokens_in_corpus = 0\n        for sentence_tokens in tokenized_corpus_sentences:\n            current_unigram_counts.update(sentence_tokens)\n            total_tokens_in_corpus += len(sentence_tokens)\n        n_minus_1_gram_counts[()] = total_tokens_in_corpus\n        for (word, count) in current_unigram_counts.items():\n            n_gram_counts[word,] = count\n    else:\n        for sentence_tokens in tokenized_corpus_sentences:\n            if len(sentence_tokens) >= N - 1:\n                for i in range(len(sentence_tokens) - (N - 1) + 1):\n                    context_gram = tuple(sentence_tokens[i:i + N - 1])\n                    n_minus_1_gram_counts[context_gram] += 1\n            if len(sentence_tokens) >= N:\n                for i in range(len(sentence_tokens) - N + 1):\n                    ngram = tuple(sentence_tokens[i:i + N])\n                    n_gram_counts[ngram] += 1\n    target_tokens_original = sequence.split()\n    if len(target_tokens_original) < N:\n        return 0.0\n    target_tokens_processed = []\n    for word in target_tokens_original:\n        if word in corpus_vocab:\n            target_tokens_processed.append(word)\n        else:\n            target_tokens_processed.append('<UNK>')\n    total_log_prob = 0.0\n    num_ngrams_in_target = len(target_tokens_processed) - N + 1\n    for i in range(num_ngrams_in_target):\n        current_ngram_tuple = tuple(target_tokens_processed[i:i + N])\n        count_context_word = n_gram_counts.get(current_ngram_tuple, 0)\n        if N == 1:\n            context_tuple = ()\n        else:\n            context_tuple = current_ngram_tuple[:-1]\n        count_context = n_minus_1_gram_counts.get(context_tuple, 0)\n        numerator = count_context_word + K\n        denominator = count_context + K * V\n        if denominator == 0:\n            prob_wi_given_context = 0.0\n        else:\n            prob_wi_given_context = numerator / denominator\n        if prob_wi_given_context == 0:\n            return -float('inf')\n        total_log_prob += math.log(prob_wi_given_context)\n    return round(total_log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    eye_K = np.eye(K)\n    for iteration in range(max_iter):\n        A_H = W.T @ W + alpha * eye_K\n        B_H = W.T @ X\n        H = np.linalg.solve(A_H, B_H)\n        A_W = H @ H.T + alpha * eye_K\n        B_W = H @ X.T\n        W_T = np.linalg.solve(A_W, B_W)\n        W = W_T.T\n        reconstruction_error_matrix = X - W @ H\n        reconstruction_loss = np.linalg.norm(reconstruction_error_matrix, 'fro') ** 2\n        norm_W_sq = np.linalg.norm(W, 'fro') ** 2\n        norm_H_sq = np.linalg.norm(H, 'fro') ** 2\n        current_loss = reconstruction_loss + alpha * (norm_W_sq + norm_H_sq)\n        if current_loss < tol:\n            break\n    X_hat = W @ H\n    X_hat_rounded = X_hat.round(4)\n    return X_hat_rounded.tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    if K == 0:\n        return []\n    if m == 0:\n        return []\n    centroids = np.zeros((K, n))\n    first_centroid_idx = np.random.choice(m)\n    centroids[0] = X[first_centroid_idx]\n    if K > 1:\n        min_sq_distances_to_any_chosen_centroid = np.full(m, np.inf)\n        for k_idx_to_choose in range(1, K):\n            sq_dist_to_last_chosen = np.sum((X - centroids[k_idx_to_choose - 1]) ** 2, axis=1)\n            min_sq_distances_to_any_chosen_centroid = np.minimum(min_sq_distances_to_any_chosen_centroid, sq_dist_to_last_chosen)\n            sum_D_sq = np.sum(min_sq_distances_to_any_chosen_centroid)\n            if sum_D_sq == 0:\n                probs = np.ones(m) / m\n            else:\n                probs = min_sq_distances_to_any_chosen_centroid / sum_D_sq\n            next_centroid_idx = np.random.choice(m, p=probs)\n            centroids[k_idx_to_choose] = X[next_centroid_idx]\n    labels = np.full(m, -1, dtype=int)\n    for _iteration in range(max_iter):\n        prev_labels = labels.copy()\n        dist_sq_point_to_centroids = np.zeros((m, K))\n        for k_idx in range(K):\n            dist_sq_point_to_centroids[:, k_idx] = np.sum((X - centroids[k_idx, :]) ** 2, axis=1)\n        labels = np.argmin(dist_sq_point_to_centroids, axis=1)\n        new_centroids = centroids.copy()\n        for k_idx in range(K):\n            cluster_points = X[labels == k_idx]\n            if len(cluster_points) > 0:\n                new_centroids[k_idx, :] = np.mean(cluster_points, axis=0)\n        centroids = new_centroids\n        if np.array_equal(labels, prev_labels):\n            break\n    final_centroids_list = centroids.tolist()\n    rounded_centroids = [[round(coord, 4) for coord in c] for c in final_centroids_list]\n    sorted_centroids = sorted(rounded_centroids, key=lambda c: (c[0], tuple(c)))\n    return sorted_centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes every character of the input string using a provided vocabulary.\n    The encoded list must have a fixed length `time_steps`.\n    If the input is shorter, append padding token 0 on the right.\n    If it is longer, truncate the sequence.\n    Any character not in the vocabulary is encoded as padding token 0.\n    \"\"\"\n    encoded_sequence = [vocabulary.get(text[i], 0) for i in range(min(len(text), time_steps))]\n    if len(encoded_sequence) < time_steps:\n        padding_needed = time_steps - len(encoded_sequence)\n        encoded_sequence.extend([0] * padding_needed)\n    return encoded_sequence\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list/array of integer ids back to text using an inverse vocabulary.\n    Padding tokens (0) must be ignored during decoding.\n    \"\"\"\n    decoded_chars = []\n    for token_id_val in indices:\n        token_id = int(token_id_val)\n        if token_id != 0:\n            char = inverse_vocab.get(token_id)\n            if char is not None:\n                decoded_chars.append(char)\n    return ''.join(decoded_chars)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Puts everything together:\n    - Encodes raw text with string_to_int.\n    - Calls model.predict on the encoded batch (batch size 1).\n    - Applies argmax over the last axis for predicted ids.\n    - Decodes ids with int_to_string.\n    Returns the decoded prediction string.\n    \"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_batch = np.array([encoded_input], dtype=np.int32)\n    model_output_logits = model.predict(input_batch)\n    predicted_ids_batch = np.argmax(model_output_logits, axis=-1)\n    predicted_ids_sequence = predicted_ids_batch[0]\n    decoded_string = int_to_string(predicted_ids_sequence, inv_output_vocabulary)\n    return decoded_string"}
{"task_id": 113, "completion_id": 0, "solution": "EXAMPLES = ['default_global_example1', 'default_global_example2']\ndef run_example(model_callable, input_vocab, inv_output_vocab, example_str):\n    \"\"\"\n    Mock implementation of run_example.\n    It calls the model and converts its string output to a list of characters.\n    \"\"\"\n    predicted_string = model_callable(example_str)\n    if predicted_string == '__SIGNAL_RUN_EXAMPLE_TO_RETURN_EMPTY_LIST__':\n        return []\n    return list(predicted_string)\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples_to_process = EXAMPLES\n    else:\n        examples_to_process = examples\n    all_predictions = []\n    for example_string in examples_to_process:\n        char_list_output = run_example(model, input_vocabulary, inv_output_vocabulary, example_string)\n        predicted_string = ''.join(char_list_output)\n        print(f'input:  {example_string}')\n        print(f'output:  {predicted_string}')\n        all_predictions.append(predicted_string)\n    return all_predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    if w.ndim == 1:\n        w_col = w.reshape(-1, 1)\n    else:\n        w_col = w\n    if y.ndim == 1:\n        y_col = y.reshape(-1, 1)\n    else:\n        y_col = y\n    z = np.dot(X, w_col)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p_clipped = np.clip(p, epsilon, 1 - epsilon)\n    term_y_eq_1 = y_col * np.log(p_clipped)\n    term_y_eq_0 = (1 - y_col) * np.log(1 - p_clipped)\n    loss = -(1 / m) * np.sum(term_y_eq_1 + term_y_eq_0)\n    error = p - y_col\n    gradient = 1 / m * np.dot(X.T, error)\n    loss_rounded = float(np.round(loss, 4))\n    gradient_rounded = np.round(gradient, 4)\n    gradient_list = gradient_rounded.tolist()\n    return (loss_rounded, gradient_list)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\nclass DecisionStump:\n    \"\"\"\n    A simple decision stump classifier.\n    A decision stump is a decision tree with only one split.\n    It makes predictions based on a single feature, a threshold, and a polarity.\n    \"\"\"\n\n    def __init__(self):\n        self.polarity: int = 1\n        self.feature_idx: int = None\n        self.threshold: float = None\n        self.alpha: float = None\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Predict labels for input samples X.\n        Args:\n            X: 2-D NumPy array of shape (n_samples, n_features).\n        Returns:\n            1-D NumPy array of predicted labels (-1 or 1).\n        \"\"\"\n        n_samples = X.shape[0]\n        if self.feature_idx is None:\n            return np.ones(n_samples, dtype=int)\n        X_column = X[:, self.feature_idx]\n        predictions = np.ones(n_samples, dtype=int)\n        if self.polarity == 1:\n            predictions[X_column <= self.threshold] = 1\n            predictions[X_column > self.threshold] = -1\n        else:\n            predictions[X_column <= self.threshold] = -1\n            predictions[X_column > self.threshold] = 1\n        return predictions\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    n_test_samples = X_test.shape[0]\n    if n_test_samples == 0:\n        return []\n    (m, n_features) = X_train.shape\n    if m == 0:\n        return [1] * n_test_samples\n    if n_features == 0:\n        count_plus_one = np.sum(y_train == 1)\n        count_minus_one = m - count_plus_one\n        if count_plus_one >= count_minus_one:\n            majority_class = 1\n        else:\n            majority_class = -1\n        return [majority_class] * n_test_samples\n    weights = np.full(m, 1 / m, dtype=float)\n    classifiers = []\n    epsilon_guard = 1e-10\n    for _ in range(n_clf):\n        best_stump_for_iteration = None\n        min_weighted_error = float('inf')\n        for feature_idx in range(n_features):\n            X_column = X_train[:, feature_idx]\n            unique_thresholds = np.unique(X_column)\n            for threshold in unique_thresholds:\n                for polarity in [1, -1]:\n                    current_stump_candidate = DecisionStump()\n                    current_stump_candidate.feature_idx = feature_idx\n                    current_stump_candidate.threshold = threshold\n                    current_stump_candidate.polarity = polarity\n                    predictions_on_train = current_stump_candidate.predict(X_train)\n                    misclassified_mask = y_train != predictions_on_train\n                    weighted_error = np.sum(weights[misclassified_mask])\n                    if weighted_error < min_weighted_error:\n                        min_weighted_error = weighted_error\n                        best_stump_for_iteration = current_stump_candidate\n        epsilon_t = min_weighted_error\n        alpha_t = 0.5 * np.log((1.0 - epsilon_t + epsilon_guard) / (epsilon_t + epsilon_guard))\n        if best_stump_for_iteration is not None:\n            best_stump_for_iteration.alpha = alpha_t\n            classifiers.append(best_stump_for_iteration)\n            predictions_t_on_train = best_stump_for_iteration.predict(X_train)\n            weights *= np.exp(-alpha_t * y_train * predictions_t_on_train)\n            sum_weights = np.sum(weights)\n            if sum_weights < epsilon_guard:\n                weights = np.full(m, 1 / m, dtype=float)\n            else:\n                weights /= sum_weights\n        else:\n            pass\n    y_pred_test_scores = np.zeros(n_test_samples, dtype=float)\n    if not classifiers:\n        return [1] * n_test_samples\n    for clf in classifiers:\n        if clf.alpha is not None:\n            predictions = clf.predict(X_test)\n            y_pred_test_scores += clf.alpha * predictions\n    final_predictions_test = np.sign(y_pred_test_scores)\n    final_predictions_test[final_predictions_test == 0] = 1\n    return [int(p) for p in final_predictions_test]"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep.\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n    (n_samples, n_features) = X.shape\n    class_labels = np.unique(y)\n    class_means = {}\n    class_sample_counts = {}\n    S_W = np.zeros((n_features, n_features))\n    for label in class_labels:\n        X_c = X[y == label]\n        class_sample_counts[label] = X_c.shape[0]\n        mu_c = np.mean(X_c, axis=0)\n        class_means[label] = mu_c\n        Z_c = X_c - mu_c\n        S_W += Z_c.T @ Z_c\n    S_B = np.zeros((n_features, n_features))\n    mu_global = np.mean(X, axis=0)\n    for label in class_labels:\n        N_c = class_sample_counts[label]\n        mu_c = class_means[label]\n        mean_diff = (mu_c - mu_global).reshape(n_features, 1)\n        S_B += N_c * (mean_diff @ mean_diff.T)\n    S_W_inv = np.linalg.pinv(S_W)\n    A = S_W_inv @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvectors_sorted = eigenvectors[:, sorted_indices]\n    W = eigenvectors_sorted[:, :n_components]\n    for j in range(W.shape[1]):\n        eigenvec_col = W[:, j]\n        non_zero_indices = np.nonzero(eigenvec_col)[0]\n        if len(non_zero_indices) > 0:\n            first_non_zero_element_index = non_zero_indices[0]\n            if eigenvec_col[first_non_zero_element_index] < 0:\n                W[:, j] *= -1\n    X_projected = X @ W\n    X_projected_rounded = np.round(X_projected, 4)\n    return X_projected_rounded.tolist()"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    start_pos = (0, 0)\n    end_pos = (n - 1, n - 1)\n    if grid[start_pos[0]][start_pos[1]] == '#' or grid[end_pos[0]][end_pos[1]] == '#':\n        return -1\n    if grid[start_pos[0]][start_pos[1]] == 'F' or grid[end_pos[0]][end_pos[1]] == 'F':\n        return -1\n    if n == 1:\n        return 0\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    fire_q = deque()\n    for r_init_fire in range(n):\n        for c_init_fire in range(n):\n            if grid[r_init_fire][c_init_fire] == 'F':\n                fire_time[r_init_fire][c_init_fire] = 0\n                fire_q.append((r_init_fire, c_init_fire))\n    while fire_q:\n        (r_fire, c_fire) = fire_q.popleft()\n        current_fire_t = fire_time[r_fire][c_fire]\n        for (dr, dc) in directions:\n            (nr_fire, nc_fire) = (r_fire + dr, c_fire + dc)\n            if 0 <= nr_fire < n and 0 <= nc_fire < n and (grid[nr_fire][nc_fire] != '#') and (fire_time[nr_fire][nc_fire] == math.inf):\n                fire_time[nr_fire][nc_fire] = current_fire_t + 1\n                fire_q.append((nr_fire, nc_fire))\n    agent_q = deque()\n    min_agent_arrival_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    min_agent_arrival_time[start_pos[0]][start_pos[1]] = 0\n    agent_q.append((start_pos, 0))\n    while agent_q:\n        ((r_agent, c_agent), agent_t) = agent_q.popleft()\n        for (dr, dc) in directions:\n            (nr_agent, nc_agent) = (r_agent + dr, c_agent + dc)\n            agent_arrival_at_neighbor_t = agent_t + 1\n            if 0 <= nr_agent < n and 0 <= nc_agent < n and (grid[nr_agent][nc_agent] != '#'):\n                if agent_arrival_at_neighbor_t < fire_time[nr_agent][nc_agent]:\n                    if agent_arrival_at_neighbor_t < min_agent_arrival_time[nr_agent][nc_agent]:\n                        min_agent_arrival_time[nr_agent][nc_agent] = agent_arrival_at_neighbor_t\n                        if (nr_agent, nc_agent) == end_pos:\n                            return agent_arrival_at_neighbor_t\n                        agent_q.append(((nr_agent, nc_agent), agent_arrival_at_neighbor_t))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    k-Nearest Neighbors (k-NN) classifier.\n\n    Given a labelled training set (X_train, y_train) and an unlabeled test set X_test,\n    this function predicts labels for X_test.\n\n    1. Computes the distance between each test sample and every training sample\n       using one of three metrics: 'euclidean', 'manhattan', 'cosine'.\n    2. For every test sample, finds the k training samples with the smallest distance.\n    3. Predicts the class by majority vote among those k neighbours.\n       In case of a tie, returns the smallest label value.\n    4. If an unknown metric string is supplied, falls back to the Euclidean metric.\n\n    Args:\n        X_train: 2D NumPy array of training data (samples x features).\n        y_train: 1D NumPy array of training labels.\n        X_test: 2D NumPy array of test data (samples x features).\n        k: Integer, the number of nearest neighbors.\n        metric: String, the distance metric ('euclidean', 'manhattan', 'cosine').\n                Defaults to 'euclidean'.\n\n    Returns:\n        A 1-D NumPy array of the predicted labels for X_test.\n    \"\"\"\n    num_test_samples = X_test.shape[0]\n    num_train_samples = X_train.shape[0]\n    if num_test_samples == 0:\n        return np.array([], dtype=y_train.dtype)\n    if k <= 0:\n        raise ValueError('k must be a positive integer.')\n    if num_train_samples == 0:\n        raise ValueError('X_train cannot be empty for k-NN classification.')\n    predicted_labels = np.zeros(num_test_samples, dtype=y_train.dtype)\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    epsilon = 1e-09\n    for i in range(num_test_samples):\n        test_sample = X_test[i]\n        distances: np.ndarray\n        if metric == 'euclidean':\n            distances = np.linalg.norm(X_train - test_sample, axis=1)\n        elif metric == 'manhattan':\n            distances = np.linalg.norm(X_train - test_sample, ord=1, axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, test_sample)\n            norm_X_train = np.linalg.norm(X_train, axis=1)\n            norm_test_sample = np.linalg.norm(test_sample)\n            current_distances_cosine = np.ones(num_train_samples)\n            is_test_sample_zero = norm_test_sample < epsilon\n            is_X_train_sample_zero = norm_X_train < epsilon\n            mask_both_zero = is_X_train_sample_zero & is_test_sample_zero\n            current_distances_cosine[mask_both_zero] = 0.0\n            mask_neither_zero = ~is_X_train_sample_zero & ~is_test_sample_zero\n            if np.any(mask_neither_zero):\n                denominator = norm_X_train[mask_neither_zero] * norm_test_sample\n                sim_values = dot_product[mask_neither_zero] / denominator\n                sim_values = np.clip(sim_values, -1.0, 1.0)\n                current_distances_cosine[mask_neither_zero] = 1.0 - sim_values\n            distances = current_distances_cosine\n        actual_k = min(k, num_train_samples)\n        nearest_neighbor_indices = np.argsort(distances)[:actual_k]\n        nearest_neighbor_labels = y_train[nearest_neighbor_indices]\n        (unique_labels, counts) = np.unique(nearest_neighbor_labels, return_counts=True)\n        max_count = np.max(counts)\n        majority_vote_labels = unique_labels[counts == max_count]\n        predicted_labels[i] = np.min(majority_vote_labels)\n    return predicted_labels"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_train_samples = X.shape[0]\n    n_test_samples = X_test.shape[0]\n    if k <= 0:\n        raise ValueError('k must be a positive integer.')\n    if n_test_samples == 0:\n        return []\n    if n_train_samples == 0:\n        raise ValueError('Training set X cannot be empty if X_test is not empty.')\n    actual_k = min(k, n_train_samples)\n    predictions = []\n    for i in range(n_test_samples):\n        test_sample = X_test[i]\n        if metric == 'euclidean':\n            all_distances = np.sqrt(np.sum((X - test_sample) ** 2, axis=1))\n        elif metric == 'manhattan':\n            all_distances = np.sum(np.abs(X - test_sample), axis=1)\n        elif metric == 'cosine':\n            dot_products = np.dot(X, test_sample)\n            norm_X = np.linalg.norm(X, axis=1)\n            norm_test_sample = np.linalg.norm(test_sample)\n            denominators = norm_X * norm_test_sample\n            epsilon = 1e-12\n            div_denominators = np.where(denominators == 0, epsilon, denominators)\n            cosine_similarities = dot_products / div_denominators\n            cosine_similarities = np.clip(cosine_similarities, -1.0, 1.0)\n            all_distances = 1.0 - cosine_similarities\n        else:\n            raise ValueError(f\"Unknown metric: {metric}. Must be 'euclidean', 'manhattan', or 'cosine'.\")\n        sorted_indices = np.argsort(all_distances)\n        k_nearest_indices = sorted_indices[:actual_k]\n        k_neighbour_labels = y[k_nearest_indices]\n        (unique_labels, counts) = np.unique(k_neighbour_labels, return_counts=True)\n        max_count = np.max(counts)\n        tied_labels = unique_labels[counts == max_count]\n        predicted_label = np.min(tied_labels)\n        predictions.append(predicted_label)\n    return np.array(predictions).tolist()"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state_np = np.asarray(state, dtype=float)\n    W1 = weights['W1']\n    b1 = weights['b1']\n    W2 = weights['W2']\n    b2 = weights['b2']\n    W3 = weights['W3']\n    b3 = weights['b3']\n    z1 = np.dot(state_np, W1) + b1\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, W2) + b2\n    a2 = np.maximum(0, z2)\n    z3 = np.dot(a2, W3) + b3\n    action_np = np.tanh(z3)\n    action_rounded_np = np.round(action_np, 4)\n    action_list = action_rounded_np.tolist()\n    return action_list"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n_orig) = X.shape\n    if fit_intercept:\n        intercept_col = np.ones((m, 1))\n    else:\n        intercept_col = np.zeros((m, 1))\n    X_aug = np.hstack((intercept_col, X))\n    n_aug = X_aug.shape[1]\n    w_aug = np.zeros(n_aug)\n    if n_orig > 0:\n        sum_sq_x_cols = np.sum(X_aug[:, 1:] ** 2, axis=0)\n    else:\n        sum_sq_x_cols = np.array([])\n    for _ in range(max_iters):\n        if fit_intercept:\n            if n_orig > 0:\n                current_pred_features_only = X_aug[:, 1:] @ w_aug[1:]\n            else:\n                current_pred_features_only = np.zeros(m)\n            mean_residual = np.mean(y - current_pred_features_only)\n            w_aug[0] = mean_residual\n        for j_feature_idx in range(n_orig):\n            j_idx_aug = j_feature_idx + 1\n            w_aug[j_idx_aug] = 0.0\n            predictions_with_wj_zero = X_aug @ w_aug\n            partial_residual_r_j = y - predictions_with_wj_zero\n            x_j_column = X_aug[:, j_idx_aug]\n            rho_j = x_j_column.T @ partial_residual_r_j\n            current_sum_sq_x_j = sum_sq_x_cols[j_feature_idx]\n            tau = lambda_param * m\n            s_val: float\n            if rho_j < -tau:\n                s_val = rho_j + tau\n            elif rho_j > tau:\n                s_val = rho_j - tau\n            else:\n                s_val = 0.0\n            if current_sum_sq_x_j == 0:\n                w_aug[j_idx_aug] = 0.0\n            else:\n                w_aug[j_idx_aug] = s_val / current_sum_sq_x_j\n    bias_float = round(w_aug[0], 4)\n    if n_orig > 0:\n        weights_list = [round(w, 4) for w in w_aug[1:]]\n    else:\n        weights_list = []\n    return (weights_list, bias_float)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x_arr = np.asarray(x)\n    y_arr = np.asarray(y)\n    if len(x_arr) != len(y_arr):\n        return -1\n    N = len(x_arr)\n    if N == 0:\n        return 0.0\n    num_differences = np.sum(x_arr != y_arr)\n    normalized_distance = num_differences / N\n    return round(normalized_distance, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    supported_windows = ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']\n    if window not in supported_windows:\n        raise ValueError(f\"Unknown window type: '{window}'. Supported types are: {supported_windows}\")\n    if window == 'generalized_cosine':\n        if coefficients is None or not coefficients:\n            raise ValueError('Coefficients must be provided and be non-empty for generalized_cosine window.')\n    common_term_multiplier = 2 * np.pi / (N - 1)\n    window_coeffs_list = []\n    for n_idx in range(N):\n        arg_base = common_term_multiplier * n_idx\n        current_sample_value = 0.0\n        if window == 'hamming':\n            current_sample_value = 0.54 - 0.46 * np.cos(arg_base)\n        elif window == 'hann':\n            current_sample_value = 0.5 - 0.5 * np.cos(arg_base)\n        elif window == 'blackman_harris':\n            a_bh = [0.35875, 0.48829, 0.14128, 0.01168]\n            current_sample_value = a_bh[0] * np.cos(0 * arg_base) - a_bh[1] * np.cos(1 * arg_base) + a_bh[2] * np.cos(2 * arg_base) - a_bh[3] * np.cos(3 * arg_base)\n        elif window == 'generalized_cosine':\n            assert coefficients is not None\n            term_sum = 0.0\n            for (k_idx, coeff_ak) in enumerate(coefficients):\n                term_sum += coeff_ak * np.cos(k_idx * arg_base)\n            current_sample_value = term_sum\n        window_coeffs_list.append(round(current_sample_value, 4))\n    return window_coeffs_list"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef _sigmoid(z: np.ndarray) -> np.ndarray:\n    \"\"\"Numerically stable sigmoid function.\"\"\"\n    z_clipped = np.clip(z, -500, 500)\n    return 1.0 / (1.0 + np.exp(-z_clipped))\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required,\n        unless all labels are identical (special case).\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    if not isinstance(X_train, list) or not isinstance(y_train, list) or (not isinstance(X_test, list)):\n        raise TypeError('Inputs X_train, y_train, X_test must be lists.')\n    if not y_train:\n        raise ValueError('y_train cannot be empty.')\n    try:\n        y_train_np = np.array(y_train, dtype=int)\n    except ValueError:\n        raise ValueError('y_train must contain numeric labels convertible to int.')\n    if y_train_np.ndim != 1:\n        raise ValueError('y_train must be a 1D list of labels.')\n    unique_labels = np.unique(y_train_np)\n    num_test_samples = len(X_test)\n    if len(unique_labels) == 1:\n        single_label = unique_labels[0]\n        return [int(single_label)] * num_test_samples\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must contain exactly two distinct numeric labels for binary classification (or one unique label for the special case).')\n    if not X_train:\n        raise ValueError('X_train cannot be empty if y_train has multiple unique labels.')\n    if not all((isinstance(row, list) for row in X_train)):\n        raise ValueError('Each element of X_train must be a list of features.')\n    try:\n        X_train_np = np.array(X_train, dtype=float)\n    except ValueError:\n        raise ValueError('X_train could not be converted to a 2D NumPy array of floats. Check for non-numeric values or inconsistent row lengths.')\n    if X_train_np.ndim != 2:\n        raise ValueError('X_train must form a 2D matrix (list of lists with consistent feature counts).')\n    (N_train, M_features) = X_train_np.shape\n    if N_train != len(y_train_np):\n        raise ValueError('X_train and y_train must have the same number of samples.')\n    if N_train == 0:\n        raise ValueError('X_train has 0 samples, but y_train is non-empty and has multiple labels.')\n    if not X_test:\n        X_test_np = np.empty((0, M_features), dtype=float)\n    else:\n        if not all((isinstance(row, list) for row in X_test)):\n            raise ValueError('Each element of X_test must be a list of features.')\n        try:\n            X_test_np = np.array(X_test, dtype=float)\n        except ValueError:\n            raise ValueError('X_test could not be converted to a 2D NumPy array of floats. Check for non-numeric values or inconsistent row lengths.')\n        if X_test_np.ndim != 2:\n            raise ValueError('X_test must form a 2D matrix (list of lists with consistent feature counts).')\n        if X_test_np.shape[0] > 0 and X_test_np.shape[1] != M_features:\n            raise ValueError(f'X_test features mismatch. Expected {M_features} features (from X_train), but X_test samples have {X_test_np.shape[1]} features.')\n    N_test = X_test_np.shape[0]\n    (label_0_orig, label_1_orig) = (unique_labels[0], unique_labels[1])\n    original_to_internal = {label_0_orig: 0, label_1_orig: 1}\n    internal_to_original = {0: label_0_orig, 1: label_1_orig}\n    y_train_mapped = np.array([original_to_internal[label] for label in y_train_np], dtype=int)\n    X_train_intercept = np.concatenate((np.ones((N_train, 1)), X_train_np), axis=1)\n    if N_test == 0:\n        return []\n    X_test_intercept = np.concatenate((np.ones((N_test, 1)), X_test_np), axis=1)\n    D_intercept = X_train_intercept.shape[1]\n    w = np.zeros(D_intercept)\n    if not (isinstance(batch_size, int) and batch_size > 0):\n        raise ValueError('batch_size must be a positive integer.')\n    if not (isinstance(epochs, int) and epochs >= 0):\n        raise ValueError('epochs must be a non-negative integer.')\n    if not isinstance(learning_rate, (int, float)) or learning_rate < 0:\n        raise ValueError('learning_rate must be a non-negative number.')\n    current_iter_batch_size = min(batch_size, N_train)\n    for epoch in range(epochs):\n        indices = np.arange(N_train)\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train_intercept[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        for i in range(0, N_train, current_iter_batch_size):\n            X_batch = X_train_shuffled[i:i + current_iter_batch_size]\n            y_batch = y_train_shuffled[i:i + current_iter_batch_size]\n            num_in_batch = X_batch.shape[0]\n            if num_in_batch == 0:\n                continue\n            z_batch = X_batch.dot(w)\n            p_batch = _sigmoid(z_batch)\n            error = p_batch - y_batch\n            gradient = X_batch.T.dot(error) / num_in_batch\n            w = w - learning_rate * gradient\n    z_test = X_test_intercept.dot(w)\n    p_test = _sigmoid(z_test)\n    y_pred_internal = (p_test >= 0.5).astype(int)\n    y_pred_original = [int(internal_to_original[pred]) for pred in y_pred_internal]\n    return y_pred_original"}
{"task_id": 176, "completion_id": 0, "solution": "def _find_best_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> tuple[DecisionStump, float, np.ndarray]:\n    (n_samples, n_features) = X.shape\n    best_stump_params = {'feature_index': 0, 'threshold': X[0, 0] if n_samples > 0 and n_features > 0 else 0.0, 'polarity': 1, 'min_error': np.inf, 'predictions': np.ones(n_samples, dtype=np.float64)}\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_thresholds = np.unique(feature_values)\n        for threshold in unique_thresholds:\n            for polarity in [1, -1]:\n                current_predictions = np.ones(n_samples, dtype=np.float64)\n                if polarity == 1:\n                    current_predictions[feature_values >= threshold] = -1.0\n                else:\n                    current_predictions[feature_values < threshold] = -1.0\n                misclassified_mask = current_predictions != y\n                weighted_error = np.sum(sample_weights[misclassified_mask])\n                update = False\n                if weighted_error < best_stump_params['min_error']:\n                    update = True\n                elif weighted_error == best_stump_params['min_error']:\n                    if feature_idx < best_stump_params['feature_index']:\n                        update = True\n                    elif feature_idx == best_stump_params['feature_index']:\n                        if threshold < best_stump_params['threshold']:\n                            update = True\n                        elif threshold == best_stump_params['threshold']:\n                            if polarity == 1 and best_stump_params['polarity'] == -1:\n                                update = True\n                if update:\n                    best_stump_params['min_error'] = weighted_error\n                    best_stump_params['feature_index'] = feature_idx\n                    best_stump_params['threshold'] = threshold\n                    best_stump_params['polarity'] = polarity\n                    best_stump_params['predictions'] = current_predictions\n    stump = DecisionStump()\n    stump.feature_index = best_stump_params['feature_index']\n    stump.threshold = best_stump_params['threshold']\n    stump.polarity = best_stump_params['polarity']\n    return (stump, best_stump_params['min_error'], best_stump_params['predictions'])\ndef adaboost_predict(X_train_list: list[list[int | float]], y_train_list: list[int], X_test_list: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train_list, dtype=np.float64)\n    y_train_orig = np.array(y_train_list, dtype=np.int64)\n    X_test = np.array(X_test_list, dtype=np.float64)\n    if X_train.shape[0] == 0:\n        if X_test.shape[0] == 0:\n            return []\n        return [0] * X_test.shape[0]\n    if X_train.ndim == 1:\n        pass\n    if X_test.shape[0] == 0:\n        return []\n    if X_test.ndim == 1 and X_test.shape[0] > 0:\n        pass\n    (n_samples, n_features) = X_train.shape\n    if n_features == 0:\n        return [0] * X_test.shape[0]\n    if X_test.shape[1] != n_features:\n        if X_test.shape[1] == 0:\n            return [0] * X_test.shape[0]\n    y_train = np.array([1.0 if y_i == 1 else -1.0 for y_i in y_train_orig], dtype=np.float64)\n    sample_weights = np.full(n_samples, 1.0 / n_samples, dtype=np.float64)\n    weak_learners: list[DecisionStump] = []\n    for _ in range(n_estimators):\n        (stump, error_t, stump_predictions_train) = _find_best_stump(X_train, y_train, sample_weights)\n        alpha_t = 0.5 * np.log((1.0 - error_t) / (error_t + 1e-10))\n        stump.alpha = alpha_t\n        weak_learners.append(stump)\n        if error_t == 0:\n            break\n        update_factor = np.exp(-alpha_t * y_train * stump_predictions_train)\n        sample_weights *= update_factor\n        sum_weights = np.sum(sample_weights)\n        if sum_weights == 0 or np.isnan(sum_weights):\n            break\n        sample_weights /= sum_weights\n    final_predictions_scores = np.zeros(X_test.shape[0], dtype=np.float64)\n    if not weak_learners:\n        pass\n    else:\n        for learner_stump in weak_learners:\n            if learner_stump.alpha is None or np.isnan(learner_stump.alpha):\n                continue\n            stump_test_predictions = learner_stump.predict(X_test)\n            final_predictions_scores += learner_stump.alpha * stump_test_predictions\n    y_pred_test = [1 if score > 0 else 0 for score in final_predictions_scores]\n    return y_pred_test"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1.0 on\n        invalid input (if any argument is non-positive or not an integer).\n    \"\"\"\n    if not (isinstance(n_dims, int) and n_dims > 0 and isinstance(num_particles, int) and (num_particles > 0) and isinstance(num_iterations, int) and (num_iterations > 0)):\n        return -1.0\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    rng = np.random.default_rng(seed)\n\n    def sphere_function(x_matrix: np.ndarray) -> np.ndarray | float:\n        return np.sum(x_matrix ** 2, axis=-1 if x_matrix.ndim > 1 else None)\n    positions = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    p_best_positions = np.copy(positions)\n    p_best_values = sphere_function(p_best_positions)\n    g_best_idx = np.argmin(p_best_values)\n    g_best_position = np.copy(p_best_positions[g_best_idx])\n    g_best_value = p_best_values[g_best_idx]\n    for _ in range(num_iterations):\n        r1_array = rng.uniform(0, 1, size=(num_particles, n_dims))\n        r2_array = rng.uniform(0, 1, size=(num_particles, n_dims))\n        cognitive_component = c1 * r1_array * (p_best_positions - positions)\n        social_component = c2 * r2_array * (g_best_position - positions)\n        velocities = w * velocities + cognitive_component + social_component\n        positions = positions + velocities\n        positions = np.clip(positions, lower_bound, upper_bound)\n        current_objective_values = sphere_function(positions)\n        improvement_mask = current_objective_values < p_best_values\n        p_best_values[improvement_mask] = current_objective_values[improvement_mask]\n        p_best_positions[improvement_mask] = positions[improvement_mask]\n        current_iteration_min_p_best_idx = np.argmin(p_best_values)\n        if p_best_values[current_iteration_min_p_best_idx] < g_best_value:\n            g_best_value = p_best_values[current_iteration_min_p_best_idx]\n            g_best_position = np.copy(p_best_positions[current_iteration_min_p_best_idx])\n    return round(g_best_value, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train_np = np.array(X_train, dtype=float)\n    X_test_np = np.array(X_test, dtype=float)\n    num_train_samples = X_train_np.shape[0]\n    if num_train_samples == 0:\n        effective_k = 0\n    elif k == 0 or k > num_train_samples:\n        effective_k = num_train_samples\n    else:\n        effective_k = k\n    predictions = []\n    for test_sample_np in X_test_np:\n        if effective_k == 0:\n            if task == 'classification':\n                predictions.append(None)\n            elif task == 'regression':\n                predictions.append(float('nan'))\n            else:\n                raise ValueError(\"Task must be 'classification' or 'regression'\")\n            continue\n        distances_and_labels = []\n        for i in range(num_train_samples):\n            train_sample_np = X_train_np[i]\n            distance = np.linalg.norm(test_sample_np - train_sample_np)\n            distances_and_labels.append((distance, y_train[i]))\n        distances_and_labels.sort(key=lambda x: x[0])\n        k_nearest_neighbours = distances_and_labels[:effective_k]\n        neighbour_labels = [label for (dist, label) in k_nearest_neighbours]\n        if task == 'classification':\n            counts = Counter(neighbour_labels)\n            max_frequency = 0\n            for label_count in counts.values():\n                if label_count > max_frequency:\n                    max_frequency = label_count\n            tied_labels = []\n            for (label, count) in counts.items():\n                if count == max_frequency:\n                    tied_labels.append(label)\n            tied_labels.sort()\n            predicted_label = tied_labels[0]\n            predictions.append(predicted_label)\n        elif task == 'regression':\n            numeric_neighbour_labels = np.array(neighbour_labels, dtype=float)\n            mean_value = np.mean(numeric_neighbour_labels)\n            rounded_mean = round(mean_value, 4)\n            predictions.append(rounded_mean)\n        else:\n            raise ValueError(\"Task must be 'classification' or 'regression'\")\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "def _gini_impurity(y: np.ndarray) -> float:\n    if y.size == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / y.size\n    return 1.0 - np.sum(probabilities ** 2)\ndef _majority_class(y: np.ndarray) -> int:\n    if y.size == 0:\n        raise ValueError('Cannot compute majority class of an empty array.')\n    (unique_labels, counts) = np.unique(y, return_counts=True)\n    return unique_labels[np.argmax(counts)]\ndef _gini_gain(y_parent: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    parent_gini = _gini_impurity(y_parent)\n    n_parent = y_parent.size\n    if n_parent == 0:\n        return 0.0\n    n_left = y_left.size\n    n_right = y_right.size\n    gini_left = _gini_impurity(y_left)\n    gini_right = _gini_impurity(y_right)\n    weighted_children_gini = n_left / n_parent * gini_left + n_right / n_parent * gini_right\n    return parent_gini - weighted_children_gini\ndef _find_best_split(X: np.ndarray, y: np.ndarray):\n    (n_samples, n_features) = X.shape\n    if n_samples <= 1:\n        return None\n    best_split_info = {}\n    max_gain = 0.0\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_sorted_values = np.unique(feature_values)\n        if len(unique_sorted_values) <= 1:\n            continue\n        potential_thresholds = (unique_sorted_values[:-1] + unique_sorted_values[1:]) / 2.0\n        for threshold in potential_thresholds:\n            left_indices = np.where(feature_values <= threshold)[0]\n            right_indices = np.where(feature_values > threshold)[0]\n            (y_left, y_right) = (y[left_indices], y[right_indices])\n            current_gain = _gini_gain(y, y_left, y_right)\n            if current_gain > max_gain:\n                max_gain = current_gain\n                best_split_info = {'feature_index': feature_idx, 'threshold': threshold, 'left_indices': left_indices, 'right_indices': right_indices}\n    if max_gain > 0:\n        return best_split_info\n    else:\n        return None\ndef _predict_sample_traverse(node: Node, x_sample: np.ndarray) -> int:\n    current_node = node\n    while not current_node.is_leaf_node():\n        if x_sample[current_node.feature_index] <= current_node.threshold:\n            current_node = current_node.left\n        else:\n            current_node = current_node.right\n    return current_node.value\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def _build_tree_recursive(X: np.ndarray, y: np.ndarray, current_depth: int) -> Node:\n        unique_labels_node = np.unique(y)\n        if len(unique_labels_node) == 1:\n            return Node(value=unique_labels_node[0])\n        current_node_majority = _majority_class(y)\n        if max_depth is not None and current_depth >= max_depth:\n            return Node(value=current_node_majority)\n        best_split_info = _find_best_split(X, y)\n        if best_split_info is None:\n            return Node(value=current_node_majority)\n        feature_idx = best_split_info['feature_index']\n        threshold = best_split_info['threshold']\n        left_indices = best_split_info['left_indices']\n        right_indices = best_split_info['right_indices']\n        (X_left, y_left) = (X[left_indices], y[left_indices])\n        left_child = _build_tree_recursive(X_left, y_left, current_depth + 1)\n        (X_right, y_right) = (X[right_indices], y[right_indices])\n        right_child = _build_tree_recursive(X_right, y_right, current_depth + 1)\n        return Node(feature_index=feature_idx, threshold=threshold, left=left_child, right=right_child)\n    if y_train.size == 0:\n        if X_test.shape[0] == 0:\n            return []\n        return [0] * X_test.shape[0]\n    root_node = _build_tree_recursive(X_train, y_train, current_depth=0)\n    if X_test.shape[0] == 0:\n        return []\n    predictions = [_predict_sample_traverse(root_node, x_sample) for x_sample in X_test]\n    return predictions"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X_np = np.asarray(X)\n    y_np = np.asarray(y)\n    if X_np.ndim == 1:\n        X_np = X_np.reshape(-1, 1)\n    (n_samples, n_features) = X_np.shape\n\n    def calculate_gini(labels_node):\n        n_node_samples = len(labels_node)\n        if n_node_samples == 0:\n            return 0.0\n        (_, counts) = np.unique(labels_node, return_counts=True)\n        proportions = counts / n_node_samples\n        gini = 1.0 - np.sum(proportions ** 2)\n        return gini\n    gini_whole_dataset = calculate_gini(y_np)\n    if n_samples == 0:\n        return (-1, None, round(gini_whole_dataset, 4))\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini_split_val = float('inf')\n    found_valid_split = False\n    for feature_idx in range(n_features):\n        feature_column = X_np[:, feature_idx]\n        unique_threshold_candidates = np.unique(feature_column)\n        for threshold in unique_threshold_candidates:\n            left_mask = feature_column <= threshold\n            right_mask = feature_column > threshold\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            found_valid_split = True\n            y_left = y_np[left_mask]\n            y_right = y_np[right_mask]\n            gini_left = calculate_gini(y_left)\n            gini_right = calculate_gini(y_right)\n            n_left = len(y_left)\n            n_right = len(y_right)\n            current_weighted_gini = n_left / n_samples * gini_left + n_right / n_samples * gini_right\n            if current_weighted_gini < best_gini_split_val - 1e-12:\n                best_gini_split_val = current_weighted_gini\n                best_feature_index = feature_idx\n                best_threshold_value = threshold\n            elif abs(current_weighted_gini - best_gini_split_val) < 1e-12:\n                if feature_idx < best_feature_index:\n                    best_gini_split_val = current_weighted_gini\n                    best_feature_index = feature_idx\n                    best_threshold_value = threshold\n                elif feature_idx == best_feature_index:\n                    if threshold < best_threshold_value:\n                        best_threshold_value = threshold\n    if not found_valid_split:\n        return (-1, None, round(gini_whole_dataset, 4))\n    else:\n        return (best_feature_index, float(best_threshold_value), round(best_gini_split_val, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def _euclidean_calc(x_np, y_np):\n        return np.sqrt(np.sum((x_np - y_np) ** 2))\n\n    def _manhattan_calc(x_np, y_np):\n        return np.sum(np.abs(x_np - y_np))\n\n    def _chebyshev_calc(x_np, y_np):\n        return np.max(np.abs(x_np - y_np))\n\n    def _cosine_calc(x_np, y_np):\n        norm_x = np.linalg.norm(x_np)\n        norm_y = np.linalg.norm(y_np)\n        dot_product = np.dot(x_np, y_np)\n        similarity = dot_product / (norm_x * norm_y)\n        similarity = np.clip(similarity, -1.0, 1.0)\n        return 1.0 - similarity\n    _metric_calculations = {'euclidean': _euclidean_calc, 'manhattan': _manhattan_calc, 'chebyshev': _chebyshev_calc, 'cosine': _cosine_calc}\n\n    def d(vec1, vec2):\n        if name not in _metric_calculations:\n            return -1\n        if not (isinstance(vec1, (list, tuple, np.ndarray)) and isinstance(vec2, (list, tuple, np.ndarray))):\n            return -1\n        try:\n            x_np = np.array(vec1, dtype=float)\n            y_np = np.array(vec2, dtype=float)\n        except (TypeError, ValueError):\n            return -1\n        if x_np.ndim != 1 or y_np.ndim != 1:\n            return -1\n        if x_np.shape[0] == 0:\n            return -1\n        if x_np.shape[0] != y_np.shape[0]:\n            return -1\n        if name == 'cosine':\n            norm_x = np.linalg.norm(x_np)\n            norm_y = np.linalg.norm(y_np)\n            if norm_x == 0.0 or norm_y == 0.0:\n                return -1\n        calculation_func = _metric_calculations[name]\n        try:\n            result = calculation_func(x_np, y_np)\n            if np.isnan(result) or np.isinf(result):\n                return -1\n            return round(float(result), 4)\n        except Exception:\n            return -1\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom itertools import product\nimport numpy as np\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim: List[Union[int, float]] = []\n    action_ids: Union[List[Tuple[int, ...]], None] = None\n    action_dim: int = 0\n    action_space = env.action_space\n    if not md_action:\n        if not cont_action:\n            action_dim = 1\n            if not hasattr(action_space, 'n'):\n                raise ValueError(\"Discrete action space (md_action=False, cont_action=False) is missing '.n' attribute.\")\n            num_actions = action_space.n\n            n_actions_per_dim = [num_actions]\n            action_ranges = [range(num_actions)]\n            action_ids = list(product(*action_ranges))\n        else:\n            if not hasattr(action_space, 'shape'):\n                raise ValueError(\"Continuous action space (md_action=False, cont_action=True) is missing '.shape' attribute.\")\n            space_shape = action_space.shape\n            if not isinstance(space_shape, tuple) or not space_shape:\n                raise ValueError(\"Continuous action space '.shape' must be a non-empty tuple for md_action=False.\")\n            action_dim = space_shape[0]\n            n_actions_per_dim = [np.inf] * action_dim\n    else:\n        if not hasattr(action_space, 'spaces'):\n            raise ValueError(\"Multi-dimensional action space (md_action=True) is missing '.spaces' attribute.\")\n        sub_spaces = action_space.spaces\n        if not hasattr(sub_spaces, '__len__') or not hasattr(sub_spaces, '__iter__'):\n            raise ValueError(\"Multi-dimensional action space '.spaces' attribute must be a sized iterable (e.g. list, tuple).\")\n        action_dim = len(sub_spaces)\n        temp_action_ranges_for_product: List[range] = []\n        for sub_space in sub_spaces:\n            if hasattr(sub_space, 'n'):\n                n_actions_per_dim.append(sub_space.n)\n                if not cont_action:\n                    temp_action_ranges_for_product.append(range(sub_space.n))\n            elif hasattr(sub_space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                if not cont_action:\n                    raise ValueError('Inconsistency: cont_action is False, but a continuous sub-space was found in md_action space.')\n            else:\n                raise ValueError('Sub-space in multi-dimensional space is of an unknown type (missing .n and .shape).')\n        if not cont_action:\n            action_ids = list(product(*temp_action_ranges_for_product))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    if not phi:\n        T = 0\n    else:\n        T = phi[0].shape[1]\n    if V == 0:\n        return []\n    if T == 0:\n        return [[] for _ in range(V)]\n    beta_unnormalized = np.zeros((V, T), dtype=np.float64)\n    occurring_words_mask = np.zeros(V, dtype=bool)\n    for d_idx in range(len(corpus)):\n        phi_d = phi[d_idx]\n        doc = corpus[d_idx]\n        for n_idx in range(len(doc)):\n            word_idx = doc[n_idx]\n            if 0 <= word_idx < V:\n                beta_unnormalized[word_idx, :] += phi_d[n_idx, :]\n                occurring_words_mask[word_idx] = True\n    num_occurring_words = np.sum(occurring_words_mask)\n    beta_normalized = np.zeros((V, T), dtype=np.float64)\n    for t_idx in range(T):\n        current_col_unnormalized = beta_unnormalized[:, t_idx]\n        col_sum = np.sum(current_col_unnormalized)\n        if col_sum > 0:\n            normalized_col = current_col_unnormalized / col_sum\n            beta_normalized[:, t_idx] = normalized_col\n        elif num_occurring_words > 0:\n            value_for_occurring_words = 1.0 / num_occurring_words\n            beta_normalized[occurring_words_mask, t_idx] = value_for_occurring_words\n        else:\n            pass\n    beta_rounded = np.round(beta_normalized, 4)\n    final_beta_list_of_lists = []\n    for v_row_idx in range(V):\n        final_beta_list_of_lists.append([float(x) for x in beta_rounded[v_row_idx, :]])\n    return final_beta_list_of_lists"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef _assign_samples_and_calculate_cost(X_data: np.ndarray, current_medoid_indices: list[int], n_samples: int, k_clusters: int) -> tuple[float, list[int]]:\n    \"\"\"\n    Assigns each sample to the closest medoid and calculates the total cost.\n    Tie-breaking: chooses the medoid that appears first in current_medoid_indices.\n    Labels are 0 to k_clusters-1, corresponding to the order in current_medoid_indices.\n    \"\"\"\n    total_cost = 0.0\n    labels = np.empty(n_samples, dtype=int)\n    current_medoids_data = X_data[current_medoid_indices]\n    for i in range(n_samples):\n        sample = X_data[i]\n        min_dist = float('inf')\n        assigned_label = -1\n        for medoid_list_idx in range(k_clusters):\n            medoid_data_point = current_medoids_data[medoid_list_idx]\n            dist = np.linalg.norm(sample - medoid_data_point)\n            if dist < min_dist:\n                min_dist = dist\n                assigned_label = medoid_list_idx\n        labels[i] = assigned_label\n        total_cost += min_dist\n    return (total_cost, labels.tolist())\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, _) = X.shape\n    current_medoid_indices = list(range(k))\n    while True:\n        (cost_at_iteration_start, _) = _assign_samples_and_calculate_cost(X, current_medoid_indices, n_samples, k)\n        best_cost_reduction_this_iteration = 0.0\n        best_swap_info = None\n        current_medoid_indices_set = set(current_medoid_indices)\n        for m_list_idx_swap_out in range(k):\n            for p_original_idx_in_X in range(n_samples):\n                if p_original_idx_in_X in current_medoid_indices_set:\n                    continue\n                potential_medoid_indices = list(current_medoid_indices)\n                potential_medoid_indices[m_list_idx_swap_out] = p_original_idx_in_X\n                (cost_of_potential_config, _) = _assign_samples_and_calculate_cost(X, potential_medoid_indices, n_samples, k)\n                reduction = cost_at_iteration_start - cost_of_potential_config\n                if reduction > best_cost_reduction_this_iteration:\n                    best_cost_reduction_this_iteration = reduction\n                    best_swap_info = (m_list_idx_swap_out, p_original_idx_in_X)\n        if best_swap_info is not None:\n            (idx_in_medoids_list_to_replace, new_medoid_original_idx) = best_swap_info\n            current_medoid_indices[idx_in_medoids_list_to_replace] = new_medoid_original_idx\n        else:\n            break\n    (_, final_labels) = _assign_samples_and_calculate_cost(X, current_medoid_indices, n_samples, k)\n    return final_labels"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n\n    def _create_polynomial_features(X_orig, current_degree):\n        if X_orig.shape[1] == 0:\n            return np.empty((X_orig.shape[0], 0))\n        X_poly_list = []\n        for i in range(X_orig.shape[1]):\n            original_feature_col = X_orig[:, i:i + 1]\n            for d_power in range(1, current_degree + 1):\n                X_poly_list.append(original_feature_col ** d_power)\n        return np.hstack(X_poly_list)\n    try:\n        x_train_arr = np.array(x_train, dtype=float)\n        y_train_arr = np.array(y_train, dtype=float).reshape(-1)\n        x_test_arr = np.array(x_test, dtype=float)\n    except ValueError:\n        return -1\n    if not isinstance(degree, int) or degree < 1:\n        pass\n    if n_iterations < 1:\n        return -1\n    if x_train_arr.ndim == 1:\n        if x_train_arr.size == 0:\n            m = 0\n            n_original_features_train = 0\n            x_train_arr_proc = np.empty((0, 0))\n        else:\n            return -1\n    elif x_train_arr.ndim == 2:\n        m = x_train_arr.shape[0]\n        n_original_features_train = x_train_arr.shape[1]\n        x_train_arr_proc = x_train_arr\n    else:\n        return -1\n    if x_test_arr.ndim == 1:\n        if x_test_arr.size == 0:\n            n_test_samples = 0\n            n_original_features_test = 0\n            x_test_arr_proc = np.empty((0, 0))\n        else:\n            return -1\n    elif x_test_arr.ndim == 2:\n        n_test_samples = x_test_arr.shape[0]\n        n_original_features_test = x_test_arr.shape[1]\n        x_test_arr_proc = x_test_arr\n    else:\n        return -1\n    if n_original_features_train != n_original_features_test:\n        return -1\n    if y_train_arr.shape[0] != m:\n        return -1\n    x_train_poly = _create_polynomial_features(x_train_arr_proc, degree)\n    x_test_poly = _create_polynomial_features(x_test_arr_proc, degree)\n    num_poly_features = x_train_poly.shape[1]\n    x_train_scaled = np.empty_like(x_train_poly)\n    x_test_scaled = np.empty_like(x_test_poly)\n    if num_poly_features > 0:\n        if m > 0:\n            train_means = np.mean(x_train_poly, axis=0)\n            train_stds = np.std(x_train_poly, axis=0)\n            for j in range(num_poly_features):\n                if train_stds[j] == 0:\n                    x_train_scaled[:, j] = 0.0\n                    if n_test_samples > 0:\n                        x_test_scaled[:, j] = 0.0\n                else:\n                    x_train_scaled[:, j] = (x_train_poly[:, j] - train_means[j]) / train_stds[j]\n                    if n_test_samples > 0:\n                        x_test_scaled[:, j] = (x_test_poly[:, j] - train_means[j]) / train_stds[j]\n        elif n_test_samples > 0:\n            x_test_scaled = np.zeros_like(x_test_poly)\n    X_train_final = np.hstack((np.ones((m, 1)), x_train_scaled))\n    X_test_final = np.hstack((np.ones((n_test_samples, 1)), x_test_scaled))\n    num_total_features = X_train_final.shape[1]\n    w = np.zeros(num_total_features)\n    if m > 0:\n        alpha1 = reg_factor * l1_ratio\n        alpha2 = reg_factor * (1 - l1_ratio)\n        for _ in range(n_iterations):\n            predictions_train = X_train_final.dot(w)\n            errors = predictions_train - y_train_arr\n            grad_mse = 1 / m * X_train_final.T.dot(errors)\n            dw = grad_mse.copy()\n            if num_total_features > 1:\n                l1_grad_penalty = alpha1 * np.sign(w[1:])\n                l2_grad_penalty = alpha2 * w[1:]\n                dw[1:] += l1_grad_penalty + l2_grad_penalty\n            w -= learning_rate * dw\n    if n_test_samples == 0:\n        return []\n    y_test_pred = X_test_final.dot(w)\n    y_test_pred_rounded = np.round(y_test_pred, 4)\n    return y_test_pred_rounded.tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    probabilities_np = sigmoid(predicted_np)\n    gradient_np = actual_np * sigmoid(-actual_np * predicted_np)\n    hessian_np = probabilities_np * (1 - probabilities_np)\n    gradient_rounded_np = np.round(gradient_np, 6)\n    hessian_rounded_np = np.round(hessian_np, 6)\n    probabilities_rounded_np = np.round(probabilities_np, 6)\n    gradient_list = gradient_rounded_np.tolist()\n    hessian_list = hessian_rounded_np.tolist()\n    probability_list = probabilities_rounded_np.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def _calculate_hand_value(hand: list[int]) -> int:\n        \"\"\"\n        Calculates the score of a hand according to Blackjack rules.\n        - Sum of cards.\n        - If hand contains an Ace and sum + 10 <= 21, one Ace counts as 11.\n        - Returns the score, which might be > 21 if the hand is inherently a bust.\n        \"\"\"\n        score = sum(hand)\n        has_ace = 1 in hand\n        if has_ace and score + 10 <= 21:\n            score += 10\n        return score\n\n    def _is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"\n        Checks if a hand is a natural blackjack.\n        A natural blackjack is a two-card hand consisting of one Ace (1)\n        and one 10-value card (10).\n        \"\"\"\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_score = _calculate_hand_value(player)\n    dealer_score = _calculate_hand_value(dealer)\n    player_has_natural = _is_natural_blackjack(player)\n    if player_score > 21:\n        return -1.0\n    if dealer_score > 21:\n        return 1.0\n    if player_score > dealer_score:\n        if player_has_natural:\n            return 1.5\n        else:\n            return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\n    \n    This function assumes that 'actual' and 'predicted' are NumPy arrays \n    of the same shape and contain only non-negative, numeric values. \n    These validations are expected to be performed by the calling function.\n    \n    The formula for each element i is:\n    error_i = (log(1 + actual_i) - log(1 + predicted_i))^2\n    \"\"\"\n    log1p_actual = np.log1p(actual)\n    log1p_predicted = np.log1p(predicted)\n    squared_errors = (log1p_actual - log1p_predicted) ** 2\n    return squared_errors\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    MSLE = mean_i [ log(1 + actual_i) - log(1 + predicted_i) ]^2.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length/shape as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid \n        (e.g., different lengths/shapes, negative values, non-numeric types), \n        the function returns -1.\n    \"\"\"\n    try:\n        actual_np = np.array(actual, dtype=float)\n        predicted_np = np.array(predicted, dtype=float)\n    except (TypeError, ValueError):\n        return -1\n    if actual_np.shape != predicted_np.shape:\n        return -1\n    if not (np.all(actual_np >= 0) and np.all(predicted_np >= 0)):\n        return -1\n    if actual_np.size == 0:\n        return 0.0\n    element_wise_sle = squared_log_error(actual_np, predicted_np)\n    msle = np.mean(element_wise_sle)\n    rounded_msle = round(msle, 4)\n    return float(rounded_msle)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a Python scalar (int/float) the return value is a float.\n        Otherwise (e.g. list, np.ndarray, np.float64), it is a Python list\n        with the same shape as the input (for 0-dim inputs like np.array(x)\n        or np.float64(x), the output is [sigmoid_value]).\n    \"\"\"\n    if isinstance(z, (int, float)):\n        z_float = float(z)\n        if z_float >= 0:\n            val = 1 / (1 + np.exp(-z_float))\n        else:\n            exp_z = np.exp(z_float)\n            val = exp_z / (1 + exp_z)\n        return round(val, 4)\n    try:\n        z_arr = np.array(z, dtype=float)\n    except ValueError as e:\n        raise TypeError(\"Input could not be converted to a numeric NumPy array. Ensure it's a list of numbers, a regular (non-jagged) nested list of numbers, or a NumPy array of numbers.\") from e\n    sigmoid_arr = np.empty_like(z_arr, dtype=float)\n    pos_mask = z_arr >= 0\n    sigmoid_arr[pos_mask] = 1 / (1 + np.exp(-z_arr[pos_mask]))\n    neg_mask = z_arr < 0\n    exp_z_neg_values = np.exp(z_arr[neg_mask])\n    sigmoid_arr[neg_mask] = exp_z_neg_values / (1 + exp_z_neg_values)\n    rounded_arr = np.round(sigmoid_arr, 4)\n    result_after_tolist = rounded_arr.tolist()\n    if not isinstance(result_after_tolist, list):\n        return [result_after_tolist]\n    else:\n        return result_after_tolist"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef _apply_leaky_relu_to_scalar(x, slope_a):\n    \"\"\"Applies Leaky ReLU to a single number x using slope_a for negative values.\"\"\"\n    if x >= 0:\n        return x\n    else:\n        return x * slope_a\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return [_apply_leaky_relu_to_scalar(z, a)]\n    elif isinstance(z, list):\n        processed_list = []\n        for item in z:\n            if isinstance(item, (int, float)):\n                processed_list.append(_apply_leaky_relu_to_scalar(item, a))\n            elif isinstance(item, list):\n                processed_list.append(leaky_relu(item, a))\n            else:\n                raise TypeError(f\"Unsupported type '{type(item).__name__}' found in list. List elements must be numbers or (nested) lists of numbers.\")\n        return processed_list\n    elif isinstance(z, np.ndarray):\n        activated_nd_array = np.where(z >= 0, z, z * a)\n        result_as_list = activated_nd_array.tolist()\n        if activated_nd_array.ndim == 0:\n            return [result_as_list]\n        else:\n            return result_as_list\n    else:\n        raise TypeError(\"Input 'z' must be a Python scalar (int/float), a list (possibly nested), or a numpy.ndarray.\")"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    n_test_samples = X_test.shape[0]\n    if n_test_samples == 0:\n        return []\n    if n_clf == 0 or n_samples == 0 or n_features == 0:\n        return [1] * n_test_samples\n    sample_weights = np.full(n_samples, 1.0 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        best_stump_info = None\n        min_weighted_error = float('inf')\n        for feature_idx in range(n_features):\n            feature_values_train = X_train[:, feature_idx]\n            thresholds = np.unique(feature_values_train)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    current_train_predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        current_train_predictions[feature_values_train < threshold] = -1\n                    else:\n                        current_train_predictions[feature_values_train < threshold] = 1\n                        current_train_predictions[feature_values_train >= threshold] = -1\n                    misclassified_mask = current_train_predictions != y_train\n                    weighted_error = np.sum(sample_weights[misclassified_mask])\n                    if weighted_error < min_weighted_error:\n                        min_weighted_error = weighted_error\n                        best_stump_info = {'feature_index': feature_idx, 'threshold': threshold, 'polarity': polarity, 'predictions_on_train': current_train_predictions}\n        if best_stump_info is None:\n            alpha = 0.0\n        else:\n            error = min_weighted_error\n            alpha = 0.5 * np.log((1.0 - error) / (error + 1e-10))\n        if best_stump_info is not None:\n            stump_params_for_prediction = {'feature_index': best_stump_info['feature_index'], 'threshold': best_stump_info['threshold'], 'polarity': best_stump_info['polarity']}\n            classifiers.append((stump_params_for_prediction, alpha))\n            if not np.isnan(alpha):\n                h_t_x_train = best_stump_info['predictions_on_train']\n                exponent = -alpha * y_train * h_t_x_train\n                sample_weights = sample_weights * np.exp(exponent)\n                sum_w = np.sum(sample_weights)\n                if np.isinf(sum_w):\n                    inf_mask = np.isinf(sample_weights)\n                    sample_weights[~inf_mask] = 0.0\n                    num_inf_weights = np.sum(inf_mask)\n                    if num_inf_weights > 0:\n                        sample_weights[inf_mask] = 1.0 / num_inf_weights\n                    else:\n                        sample_weights = np.zeros(n_samples)\n                elif sum_w > 1e-15:\n                    sample_weights = sample_weights / sum_w\n                else:\n                    sample_weights = np.zeros(n_samples)\n    y_pred_scores = np.zeros(n_test_samples)\n    for (stump_params, alpha_val) in classifiers:\n        if np.isnan(alpha_val) or alpha_val == 0:\n            continue\n        feature_idx = stump_params['feature_index']\n        threshold = stump_params['threshold']\n        polarity = stump_params['polarity']\n        stump_predictions_on_test = np.ones(n_test_samples)\n        if X_test.shape[1] > feature_idx:\n            test_feature_values = X_test[:, feature_idx]\n            if polarity == 1:\n                stump_predictions_on_test[test_feature_values < threshold] = -1\n            else:\n                stump_predictions_on_test[test_feature_values < threshold] = 1\n                stump_predictions_on_test[test_feature_values >= threshold] = -1\n        y_pred_scores += alpha_val * stump_predictions_on_test\n    final_predictions_np = np.sign(y_pred_scores)\n    final_predictions_np[final_predictions_np == 0] = 1\n    return final_predictions_np.astype(int).tolist()"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers. Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix. Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor. If `shape` has fewer than\n        two dimensions the function returns -1.\n        Note: The type hint list[list[float]] implies a 2D matrix. If `shape`\n        has more than 2 dimensions, the returned list will be more deeply nested.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    if not all((isinstance(dim, int) and dim > 0 for dim in shape)):\n        raise ValueError('All dimensions in shape must be positive integers.')\n    d0 = shape[0]\n    d_rest_val = np.prod(shape[1:])\n    shape_A = (d0, int(d_rest_val))\n    A = np.random.randn(shape_A[0], shape_A[1])\n    (U, _, Vh) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == shape_A:\n        Q = U\n    else:\n        Q = Vh\n    result_array = Q.reshape(shape) * scale\n    return result_array.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef relu(x: np.ndarray) -> np.ndarray:\n    \"\"\"Rectified Linear Unit activation.\"\"\"\n    return np.maximum(0, x)\ndef softmax(x: np.ndarray) -> np.ndarray:\n    \"\"\"Softmax activation for a batch of logits.\n    \n    Args:\n        x: A NumPy array of logits. For this problem, it will be shape (1, N_actions).\n    \n    Returns:\n        A NumPy array of probabilities, same shape as x.\n    \"\"\"\n    e_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n    return e_x / np.sum(e_x, axis=-1, keepdims=True)\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s_np = np.array(state, dtype=float).reshape(1, 3)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    z1_linear = s_np @ W1 + b1\n    z1 = relu(z1_linear)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    z2_linear = z1 @ W2 + b2\n    z2 = relu(z2_linear)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    z3_linear = z2 @ W3 + b3\n    z3 = relu(z3_linear)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    logits = z3 @ Wa + ba\n    action_probs_np = softmax(logits)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    state_value_np = z3 @ Wc + bc\n    action_probs_list = [round(p, 4) for p in action_probs_np.flatten()]\n    state_value_scalar = round(state_value_np.item(), 4)\n    return (action_probs_list, state_value_scalar)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef relu(x: np.ndarray) -> np.ndarray:\n    \"\"\"Rectified Linear Unit activation function.\"\"\"\n    return np.maximum(0, x)\ndef softmax(x: np.ndarray) -> np.ndarray:\n    \"\"\"Softmax activation function.\n    Subtracts the maximum value for numerical stability.\n    \"\"\"\n    if x.size == 0:\n        return np.array([])\n    x_proc = np.atleast_1d(x)\n    x_shifted = x_proc - np.max(x_proc, axis=-1, keepdims=True)\n    exp_x = np.exp(x_shifted)\n    sum_exp_x = np.sum(exp_x, axis=-1, keepdims=True)\n    result = exp_x / sum_exp_x\n    return result\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    current_h = np.array(state, dtype=np.float64)\n    W1 = np.array(params['W1'], dtype=np.float64)\n    b1 = np.array(params['b1'], dtype=np.float64)\n    W2 = np.array(params['W2'], dtype=np.float64)\n    b2 = np.array(params['b2'], dtype=np.float64)\n    W3 = np.array(params['W3'], dtype=np.float64)\n    b3 = np.array(params['b3'], dtype=np.float64)\n    Wa = np.array(params['Wa'], dtype=np.float64)\n    ba = np.array(params['ba'], dtype=np.float64)\n    Wc = np.array(params['Wc'], dtype=np.float64)\n    bc = np.array(params['bc'], dtype=np.float64)\n    current_h = relu(np.dot(current_h, W1) + b1)\n    current_h = relu(np.dot(current_h, W2) + b2)\n    final_hidden_vec = relu(np.dot(current_h, W3) + b3)\n    actor_scores = np.dot(final_hidden_vec, Wa) + ba\n    probabilities_np = softmax(actor_scores)\n    value_output_np = np.dot(final_hidden_vec, Wc) + bc\n    state_value_scalar = float(value_output_np)\n    rounded_probabilities = [round(p, 4) for p in probabilities_np.tolist()]\n    rounded_value = round(state_value_scalar, 4)\n    return (rounded_probabilities, rounded_value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient based on provided formulas.\n\n    The penalty is defined as per the problem statement:\n        R(w) = \u03b1 \u00b7 [ \u03bb \u00b7 ||w||\u2082 + (1\u2212\u03bb)\u00b70.5\u00b7w\u1d40w ]\n    The gradient is defined as per the problem statement:\n        \u2207R(w) = \u03b1 \u00b7 [ \u03bb \u00b7 sign(w) + (1\u2212\u03bb) \u00b7 w ]\n    \n    Note: The problem statement's definition of \"Elastic-Net\" and its components\n    (penalty R(w) and gradient \u2207R(w)) are used directly. Standard Elastic-Net\n    typically uses ||w||\u2081 (L1 norm) in the penalty where ||w||\u2082 (L2 norm) is written\n    in this problem's R(w) formula. The provided gradient \u2207R(w) formula\n    corresponds to a penalty with an L1 norm term, not an L2 norm term.\n    This implementation strictly follows the formulas as provided in the problem\n    description for R(w) and \u2207R(w) respectively.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float, \u03b1 in formulas).\n        l1_ratio: Mixing parameter (float in [0, 1], \u03bb in formulas).\n                  The problem description refers to \u03bb as \"the L1 ratio\".\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False (the penalty value R(w)), rounded to 4 decimals.\n        list[float] if *gradient* is True (the gradient \u2207R(w)),\n        with elements rounded to 4 decimals.\n        \n    Raises:\n        ValueError: If alpha < 0 or l1_ratio is not in [0, 1].\n    \"\"\"\n    w_arr = np.atleast_1d(np.asarray(w, dtype=float))\n    if alpha < 0:\n        raise ValueError('alpha must be non-negative (alpha >= 0).')\n    if not 0 <= l1_ratio <= 1:\n        raise ValueError('l1_ratio must be between 0 and 1 (0 <= lambda <= 1).')\n    if alpha == 0:\n        if gradient:\n            return [0.0] * len(w_arr)\n        else:\n            return 0.0\n    if gradient:\n        sign_w = np.sign(w_arr)\n        grad_component1 = l1_ratio * sign_w\n        grad_component2 = (1 - l1_ratio) * w_arr\n        grad_vector = alpha * (grad_component1 + grad_component2)\n        rounded_grad_list = [round(val, 4) for val in grad_vector.tolist()]\n        return rounded_grad_list\n    else:\n        norm_w_l2 = np.linalg.norm(w_arr, ord=2)\n        w_transpose_w = np.dot(w_arr, w_arr)\n        penalty_component1 = l1_ratio * norm_w_l2\n        penalty_component2 = (1 - l1_ratio) * 0.5 * w_transpose_w\n        penalty_value = alpha * (penalty_component1 + penalty_component2)\n        rounded_penalty_value = round(penalty_value, 4)\n        return rounded_penalty_value"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X: np.ndarray, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name == 'X' or param_name == 'y':\n        return None\n    actual_param_name = param_name\n    if param_name == 'Ba':\n        actual_param_name = 'ba'\n    elif param_name == 'Bx':\n        actual_param_name = 'bx'\n    if actual_param_name not in model.parameters:\n        raise ValueError(f\"Parameter '{actual_param_name}' (derived from '{param_name}') not found in model.parameters.\")\n    X_float64 = X.astype(np.float64)\n    epsilon_float64 = np.float64(epsilon)\n    original_model_param_array = model.parameters[actual_param_name]\n    grads = np.zeros_like(original_model_param_array, dtype=np.float64)\n    for multi_idx in np.ndindex(original_model_param_array.shape):\n        original_value = np.float64(original_model_param_array[multi_idx])\n        model_plus = deepcopy(model)\n        model_plus.parameters[actual_param_name] = model_plus.parameters[actual_param_name].astype(np.float64)\n        model_plus.parameters[actual_param_name][multi_idx] = original_value + epsilon_float64\n        predictions_plus = []\n        for t_step in range(n_t):\n            X_t = X_float64[:, :, t_step]\n            y_pred_t_plus = model_plus.forward(X_t)\n            predictions_plus.append(y_pred_t_plus.astype(np.float64))\n        loss_plus = np.float64(loss_func(predictions_plus))\n        model_minus = deepcopy(model)\n        model_minus.parameters[actual_param_name] = model_minus.parameters[actual_param_name].astype(np.float64)\n        model_minus.parameters[actual_param_name][multi_idx] = original_value - epsilon_float64\n        predictions_minus = []\n        for t_step in range(n_t):\n            X_t = X_float64[:, :, t_step]\n            y_pred_t_minus = model_minus.forward(X_t)\n            predictions_minus.append(y_pred_t_minus.astype(np.float64))\n        loss_minus = np.float64(loss_func(predictions_minus))\n        numerator = loss_plus - loss_minus\n        denominator = 2 * epsilon_float64\n        num_grad_element = numerator / denominator\n        grads[multi_idx] = num_grad_element\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\nclass DecisionStump:\n    \"\"\"\n    A simple decision stump classifier.\n    A decision stump is a decision tree with only one split.\n    It makes predictions based on a single feature, a threshold, and a polarity.\n    \"\"\"\n\n    def __init__(self):\n        self.polarity: int = 1\n        self.feature_idx: int = None\n        self.threshold: float = None\n        self.alpha: float = None\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Predict labels for input samples X.\n        Args:\n            X: 2-D NumPy array of shape (n_samples, n_features).\n        Returns:\n            1-D NumPy array of predicted labels (-1 or 1).\n        \"\"\"\n        n_samples = X.shape[0]\n        if self.feature_idx is None:\n            return np.ones(n_samples, dtype=int)\n        X_column = X[:, self.feature_idx]\n        predictions = np.ones(n_samples, dtype=int)\n        if self.polarity == 1:\n            predictions[X_column <= self.threshold] = 1\n            predictions[X_column > self.threshold] = -1\n        else:\n            predictions[X_column <= self.threshold] = -1\n            predictions[X_column > self.threshold] = 1\n        return predictions\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    n_test_samples = X_test.shape[0]\n    if n_test_samples == 0:\n        return []\n    (m, n_features) = X_train.shape\n    if m == 0:\n        return [1] * n_test_samples\n    if n_features == 0:\n        count_plus_one = np.sum(y_train == 1)\n        count_minus_one = m - count_plus_one\n        if count_plus_one >= count_minus_one:\n            majority_class = 1\n        else:\n            majority_class = -1\n        return [majority_class] * n_test_samples\n    weights = np.full(m, 1 / m, dtype=float)\n    classifiers = []\n    epsilon_guard = 1e-10\n    for _ in range(n_clf):\n        best_stump_for_iteration = None\n        min_weighted_error = float('inf')\n        for feature_idx in range(n_features):\n            X_column = X_train[:, feature_idx]\n            unique_thresholds = np.unique(X_column)\n            for threshold in unique_thresholds:\n                for polarity in [1, -1]:\n                    current_stump_candidate = DecisionStump()\n                    current_stump_candidate.feature_idx = feature_idx\n                    current_stump_candidate.threshold = threshold\n                    current_stump_candidate.polarity = polarity\n                    predictions_on_train = current_stump_candidate.predict(X_train)\n                    misclassified_mask = y_train != predictions_on_train\n                    weighted_error = np.sum(weights[misclassified_mask])\n                    if weighted_error < min_weighted_error:\n                        min_weighted_error = weighted_error\n                        best_stump_for_iteration = current_stump_candidate\n        epsilon_t = min_weighted_error\n        alpha_t = 0.5 * np.log((1.0 - epsilon_t + epsilon_guard) / (epsilon_t + epsilon_guard))\n        if best_stump_for_iteration is not None:\n            best_stump_for_iteration.alpha = alpha_t\n            classifiers.append(best_stump_for_iteration)\n            predictions_t_on_train = best_stump_for_iteration.predict(X_train)\n            weights *= np.exp(-alpha_t * y_train * predictions_t_on_train)\n            sum_weights = np.sum(weights)\n            if sum_weights < epsilon_guard:\n                weights = np.full(m, 1 / m, dtype=float)\n            else:\n                weights /= sum_weights\n        else:\n            pass\n    y_pred_test_scores = np.zeros(n_test_samples, dtype=float)\n    if not classifiers:\n        return [1] * n_test_samples\n    for clf in classifiers:\n        if clf.alpha is not None:\n            predictions = clf.predict(X_test)\n            y_pred_test_scores += clf.alpha * predictions\n    final_predictions_test = np.sign(y_pred_test_scores)\n    final_predictions_test[final_predictions_test == 0] = 1\n    return [int(p) for p in final_predictions_test]"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if not isinstance(shape, tuple):\n        raise TypeError('Shape must be a tuple of integers.')\n    if not shape:\n        raise ValueError('Shape tuple cannot be empty.')\n    if not all((isinstance(dim, int) and dim > 0 for dim in shape)):\n        raise ValueError('Shape dimensions must be positive integers.')\n    n_dim = len(shape)\n    if n_dim < 2:\n        raise ValueError('Shape must have at least two dimensions for well-defined fan_in and fan_out.')\n    if n_dim == 2:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    else:\n        out_channels = shape[0]\n        in_channels = shape[1]\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n    initialized_tensor = np.random.normal(loc=0.0, scale=std_dev, size=shape)\n    return initialized_tensor"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {vertex: i for (i, vertex) in enumerate(V)}\n    adj_map = {vertex: set() for vertex in V}\n    for (u, v_node) in E:\n        adj_map[u].add(v_node)\n        adj_map[v_node].add(u)\n    G = []\n    for vertex in V:\n        neighbors_set = adj_map[vertex]\n        sorted_neighbors = sorted(list(neighbors_set), key=lambda neighbor_node: vertex_to_index[neighbor_node])\n        G.append(sorted_neighbors)\n    return G"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    if n_samples == 0:\n        return {'feature_index': 0, 'threshold': 0.0, 'polarity': 1, 'weighted_error': 0.0}\n    min_weighted_error = float('inf')\n    best_stump = {}\n    if n_features == 0:\n        return {'feature_index': 0, 'threshold': 0.0, 'polarity': 1, 'weighted_error': np.sum(sample_weights)}\n    for feature_j in range(n_features):\n        feature_values = X[:, feature_j]\n        indices = np.argsort(feature_values)\n        sorted_x_col = feature_values[indices]\n        sorted_y = y[indices]\n        sorted_weights = sample_weights[indices]\n        current_error_p1 = np.sum(sorted_weights[sorted_y == 1])\n        if current_error_p1 < min_weighted_error:\n            min_weighted_error = current_error_p1\n            best_stump = {'feature_index': feature_j, 'threshold': sorted_x_col[0], 'polarity': 1, 'weighted_error': current_error_p1}\n        for k in range(n_samples - 1):\n            current_error_p1 -= sorted_y[k] * sorted_weights[k]\n            if sorted_x_col[k] != sorted_x_col[k + 1]:\n                if current_error_p1 < min_weighted_error:\n                    min_weighted_error = current_error_p1\n                    best_stump = {'feature_index': feature_j, 'threshold': sorted_x_col[k + 1], 'polarity': 1, 'weighted_error': current_error_p1}\n        current_error_m1 = np.sum(sorted_weights[sorted_y == -1])\n        if current_error_m1 < min_weighted_error:\n            min_weighted_error = current_error_m1\n            best_stump = {'feature_index': feature_j, 'threshold': sorted_x_col[0], 'polarity': -1, 'weighted_error': current_error_m1}\n        for k in range(n_samples - 1):\n            current_error_m1 += sorted_y[k] * sorted_weights[k]\n            if sorted_x_col[k] != sorted_x_col[k + 1]:\n                if current_error_m1 < min_weighted_error:\n                    min_weighted_error = current_error_m1\n                    best_stump = {'feature_index': feature_j, 'threshold': sorted_x_col[k + 1], 'polarity': -1, 'weighted_error': current_error_m1}\n    if not best_stump:\n        pass\n    if best_stump:\n        best_stump['threshold'] = round(float(best_stump['threshold']), 4)\n        best_stump['weighted_error'] = round(float(best_stump['weighted_error']), 4)\n    else:\n        return {'feature_index': 0, 'threshold': 0.0, 'polarity': 1, 'weighted_error': round(float(np.sum(sample_weights)), 4)}\n    return best_stump"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    def _calculate_entropy(labels):\n        if not labels:\n            return 0.0\n        n_labels = len(labels)\n        counts = Counter(labels)\n        entropy = 0.0\n        for count in counts.values():\n            p_i = count / n_labels\n            if p_i > 0:\n                entropy -= p_i * math.log2(p_i)\n        return entropy\n    n = len(feature)\n    if n < 2:\n        return (None, 0.0)\n    data = sorted(zip(map(float, feature), target), key=lambda x: x[0])\n    sorted_features = [item[0] for item in data]\n    sorted_targets = [item[1] for item in data]\n    H_parent = _calculate_entropy(sorted_targets)\n    if H_parent == 0.0:\n        return (None, 0.0)\n    best_threshold = None\n    max_ig = 0.0\n    for i in range(n - 1):\n        if sorted_features[i] < sorted_features[i + 1]:\n            current_threshold = (sorted_features[i] + sorted_features[i + 1]) / 2.0\n            L_targets = sorted_targets[:i + 1]\n            R_targets = sorted_targets[i + 1:]\n            n_L = len(L_targets)\n            n_R = len(R_targets)\n            H_L = _calculate_entropy(L_targets)\n            H_R = _calculate_entropy(R_targets)\n            current_ig = H_parent - n_L / n * H_L - n_R / n * H_R\n            if current_ig > max_ig:\n                max_ig = current_ig\n                best_threshold = current_threshold\n    if best_threshold is None or max_ig <= 0.0:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(max_ig, 4))"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals():\n        obj = globals()[name]\n        if callable(obj):\n            return obj\n    raise ValueError('Invalid initialization function.')"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, H_out, W_out), dtype=np.float64)\n    grad_input = np.zeros(X.shape, dtype=np.float64)\n    for n in range(N):\n        for c in range(C):\n            for h_idx_out in range(H_out):\n                for w_idx_out in range(W_out):\n                    h_start = h_idx_out * s_h\n                    h_end = h_start + p_h\n                    w_start = w_idx_out * s_w\n                    w_end = w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, h_idx_out, w_idx_out] = np.mean(window)\n    pool_area = float(p_h * p_w)\n    for n in range(N):\n        for c in range(C):\n            for h_idx_out in range(H_out):\n                for w_idx_out in range(W_out):\n                    h_start = h_idx_out * s_h\n                    h_end = h_start + p_h\n                    w_start = w_idx_out * s_w\n                    w_end = w_start + p_w\n                    grad_val = accum_grad[n, c, h_idx_out, w_idx_out]\n                    distributed_grad = grad_val / pool_area\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += distributed_grad\n    pooled_output_rounded = np.round(pooled_output, 4)\n    grad_input_rounded = np.round(grad_input, 4)\n    return (pooled_output_rounded.tolist(), grad_input_rounded.tolist())"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b) -> bool:\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if type(tree_a) is not type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, rtol=0, atol=1e-08)\n    elif isinstance(tree_a, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, rtol=0, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        pass"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n                 Columns from this index to the end are subject to swapping.\n\n    Returns:\n        A tuple containing the two children matrices as lists of lists of floats.\n        If the parent matrices do not have the same shape, or if inputs are\n        not valid 2D matrices (e.g., ragged lists, or not convertible to 2D),\n        the function must return ``-1``.\n    \"\"\"\n    try:\n        p1_np = np.array(parent1, dtype=float)\n        p2_np = np.array(parent2, dtype=float)\n    except ValueError:\n        return -1\n    if p1_np.ndim != 2 or p2_np.ndim != 2:\n        return -1\n    if p1_np.shape != p2_np.shape:\n        return -1\n    child1_part_from_p1 = p1_np[:, :cutoff]\n    child1_part_from_p2 = p2_np[:, cutoff:]\n    child1_np = np.concatenate((child1_part_from_p1, child1_part_from_p2), axis=1)\n    child2_part_from_p2 = p2_np[:, :cutoff]\n    child2_part_from_p1 = p1_np[:, cutoff:]\n    child2_np = np.concatenate((child2_part_from_p2, child2_part_from_p1), axis=1)\n    child1_list = child1_np.tolist()\n    child2_list = child2_np.tolist()\n    return (child1_list, child2_list)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    v2i = G.get('_V2I')\n    if not v2i:\n        return {}\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in v2i.keys()}\n    is_directed: bool = G['is_directed']\n    for edge_list_for_one_vertex in G['_G']:\n        for (u, v, weight) in edge_list_for_one_vertex:\n            adj[u].append((v, float(weight)))\n            if not is_directed:\n                adj[v].append((u, float(weight)))\n    for label in adj:\n        unique_neighbor_tuples = list(set(adj[label]))\n        adj[label] = sorted(unique_neighbor_tuples, key=lambda x: x[0])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate. A value is considered binary if it is\n        numerically equal to 0 or 1. For boolean arrays, True and False\n        are acceptable (corresponding to 1 and 0).\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    arr = np.asanyarray(x)\n    try:\n        is_element_binary_mask = (arr == 0) | (arr == 1)\n        is_all_binary_np_bool = np.all(is_element_binary_mask)\n        return bool(is_all_binary_np_bool)\n    except TypeError:\n        return False"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus or if the query is\n        too short, the function returns float('-inf').\n    \"\"\"\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    total_tokens_in_corpus_for_unigram = 0\n    BOL = '<bol>'\n    EOL = '<eol>'\n    if N == 1:\n        for sentence_str in corpus:\n            tokens = sentence_str.split()\n            if not tokens:\n                continue\n            for token in tokens:\n                ngram_counts[token,] += 1\n            total_tokens_in_corpus_for_unigram += len(tokens)\n    else:\n        for sentence_str in corpus:\n            tokens = sentence_str.split()\n            padded_tokens = [BOL] * (N - 1) + tokens + [EOL]\n            if len(padded_tokens) < N:\n                continue\n            for i in range(len(padded_tokens) - N + 1):\n                ngram = tuple(padded_tokens[i:i + N])\n                prefix = tuple(padded_tokens[i:i + N - 1])\n                ngram_counts[ngram] += 1\n                prefix_counts[prefix] += 1\n    query_tokens_raw = query.split()\n    if N == 1:\n        processed_query_tokens = query_tokens_raw\n    else:\n        processed_query_tokens = [BOL] * (N - 1) + query_tokens_raw + [EOL]\n    if len(processed_query_tokens) < N:\n        return float('-inf')\n    total_log_prob = 0.0\n    num_query_ngrams_to_process = len(processed_query_tokens) - N + 1\n    for i in range(num_query_ngrams_to_process):\n        if N == 1:\n            current_ngram_tuple = (processed_query_tokens[i],)\n            count_ngram = ngram_counts[current_ngram_tuple]\n            denominator_count = total_tokens_in_corpus_for_unigram\n            if denominator_count == 0:\n                return float('-inf')\n            if count_ngram == 0:\n                return float('-inf')\n            prob = count_ngram / denominator_count\n            total_log_prob += math.log(prob)\n        else:\n            current_ngram_tuple = tuple(processed_query_tokens[i:i + N])\n            current_prefix_tuple = tuple(processed_query_tokens[i:i + N - 1])\n            count_ngram = ngram_counts[current_ngram_tuple]\n            count_prefix = prefix_counts[current_prefix_tuple]\n            if count_prefix == 0:\n                return float('-inf')\n            if count_ngram == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n            total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, _) = X.shape\n    if n_samples == 0:\n        return []\n    if k <= 0:\n        pass\n    R = np.sum(X * X, axis=1, keepdims=True)\n    G = X @ X.T\n    dist_sq = R - 2 * G + R.T\n    dist_sq = np.maximum(dist_sq, 0)\n    norms = np.sqrt(dist_sq)\n    W = 1.0 / (1.0 + norms)\n    np.fill_diagonal(W, 0)\n    D_diag = np.sum(W, axis=1)\n    D = np.diag(D_diag)\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    if k == 0:\n        return [0] * n_samples\n    current_centroids = E[:k, :].copy()\n    kmeans_labels = np.full(n_samples, -1, dtype=int)\n    max_iters_kmeans = 100\n    for _ in range(max_iters_kmeans):\n        diff_expanded = E[:, np.newaxis, :] - current_centroids[np.newaxis, :, :]\n        dist_sq_matrix = np.sum(diff_expanded ** 2, axis=2)\n        new_kmeans_labels = np.argmin(dist_sq_matrix, axis=1)\n        if np.array_equal(kmeans_labels, new_kmeans_labels):\n            break\n        kmeans_labels = new_kmeans_labels\n        for j_cluster in range(k):\n            points_in_cluster = E[kmeans_labels == j_cluster]\n            if len(points_in_cluster) > 0:\n                current_centroids[j_cluster] = np.mean(points_in_cluster, axis=0)\n            else:\n                random_idx = np.random.choice(n_samples)\n                current_centroids[j_cluster] = E[random_idx, :]\n    return kmeans_labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    header_str = '-' * 25 + ' DEBUG ' + '-' * 25\n    footer_str = '-' * 23 + ' END DEBUG ' + '-' * 23\n    prev_idx = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_idx]\n    (curr_mine, curr_label) = params[ix]\n    gold_prev = golds[prev_label]\n    gold_curr = golds[curr_label]\n    result_string = f'{header_str}\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{gold_prev}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{gold_curr}{warn_str}\\n{footer_str}'\n    return result_string"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N_samples, M_original_features).\n        y: Target vector of shape (N_samples,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length (M_features).\n        V: Prior scale matrix hyperparameter for *b*. This V corresponds to the\n            matrix V_prior in the prior b | \u03c3\u00b2 ~ N(\u03bc, \u03c3\u00b2V_prior).\n            Accepts:\n            - None: V_prior is treated as an identity matrix.\n            - Scalar s: V_prior is treated as s * I (scalar times identity matrix).\n            - 1-D sequence (list, tuple, 1D np.ndarray): V_prior is treated as a\n              diagonal matrix with these elements on the diagonal.\n            - 2-D np.ndarray: V_prior is treated as this full matrix.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients (\u03bc_b),\n        rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        raise TypeError('X must be a numpy array.')\n    if not isinstance(y, np.ndarray):\n        raise TypeError('y must be a numpy array.')\n    if X.ndim != 2:\n        raise ValueError(f'X must be a 2D array, got ndim={X.ndim}')\n    if y.ndim != 1:\n        raise ValueError(f'y must be a 1D array, got ndim={y.ndim}')\n    (N_samples, M_original_features) = X.shape\n    if N_samples != y.shape[0]:\n        raise ValueError(f'Number of samples in X ({N_samples}) must match number of samples in y ({y.shape[0]}).')\n    if fit_intercept:\n        X_processed = np.hstack([np.ones((N_samples, 1)), X])\n        M_features = M_original_features + 1\n    else:\n        X_processed = X.copy()\n        M_features = M_original_features\n    if M_features == 0:\n        return []\n    if isinstance(mu, (int, float)):\n        mu_prior_vec = np.full(M_features, float(mu))\n    elif isinstance(mu, (list, tuple, np.ndarray)):\n        _mu_arr = np.array(mu, dtype=float)\n        if _mu_arr.ndim == 0:\n            mu_prior_vec = np.full(M_features, _mu_arr.item())\n        elif _mu_arr.ndim == 1:\n            if _mu_arr.shape[0] == 1 and M_features > 1:\n                mu_prior_vec = np.full(M_features, _mu_arr[0])\n            elif _mu_arr.shape[0] == M_features:\n                mu_prior_vec = _mu_arr\n            else:\n                raise ValueError(f'mu, if array-like, must have {M_features} elements or be a scalar/single-element array to broadcast. Got shape {_mu_arr.shape} for M_features={M_features}.')\n        else:\n            raise ValueError(f'mu must be a scalar or 1D array-like. Got ndim={_mu_arr.ndim}')\n    else:\n        raise TypeError(f'Unsupported type for mu: {type(mu)}. Must be scalar, list, tuple, or numpy array.')\n    mu_prior_vec = mu_prior_vec.reshape(M_features)\n    if V is None:\n        V_inv_prior_scale_matrix = np.eye(M_features)\n    elif isinstance(V, (int, float)):\n        if V <= 0:\n            raise ValueError('Scalar V (hyperparameter for prior scale) must be positive.')\n        V_inv_prior_scale_matrix = np.eye(M_features) / V\n    elif isinstance(V, (list, tuple)):\n        V_diag_elements = np.array(V, dtype=float)\n        if len(V_diag_elements) != M_features:\n            raise ValueError(f'V, if a list/tuple (for diagonal V_prior), must have length M_features={M_features}. Got {len(V_diag_elements)}.')\n        if np.any(V_diag_elements <= 0):\n            raise ValueError('Diagonal elements of V_prior (from list/tuple) must be positive.')\n        V_inv_prior_scale_matrix = np.diag(1.0 / V_diag_elements)\n    elif isinstance(V, np.ndarray):\n        V_arr = V.astype(float)\n        if V_arr.ndim == 0:\n            scalar_v = V_arr.item()\n            if scalar_v <= 0:\n                raise ValueError('Scalar V (from ndarray for V_prior) must be positive.')\n            V_inv_prior_scale_matrix = np.eye(M_features) / scalar_v\n        elif V_arr.ndim == 1:\n            if len(V_arr) != M_features:\n                raise ValueError(f'V, if a 1D np.ndarray (for diagonal V_prior), must have length M_features={M_features}. Got {len(V_arr)}.')\n            if np.any(V_arr <= 0):\n                raise ValueError('Diagonal elements of V_prior (from 1D ndarray) must be positive.')\n            V_inv_prior_scale_matrix = np.diag(1.0 / V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M_features, M_features):\n                raise ValueError(f'V, if a 2D np.ndarray (for V_prior), must have shape ({M_features}, {M_features}). Got {V_arr.shape}.')\n            try:\n                V_inv_prior_scale_matrix = np.linalg.inv(V_arr)\n            except np.linalg.LinAlgError:\n                raise ValueError('V_prior matrix (from 2D ndarray) is singular and cannot be inverted.')\n        else:\n            raise ValueError('V, if an np.ndarray, must be scalar, 1D, or 2D to define V_prior.')\n    else:\n        raise TypeError(f'Unsupported type for V: {type(V)}. Must be None, scalar, list, tuple, or numpy array.')\n    XTX = X_processed.T @ X_processed\n    Sigma_b_inv_matrix = V_inv_prior_scale_matrix + XTX\n    XTy = X_processed.T @ y\n    right_hand_side_term = V_inv_prior_scale_matrix @ mu_prior_vec + XTy\n    try:\n        mu_b_posterior = np.linalg.solve(Sigma_b_inv_matrix, right_hand_side_term)\n    except np.linalg.LinAlgError:\n        raise ValueError('The matrix (V_prior_inv + X\u1d40X) is singular. Cannot solve for posterior mean. This might be due to N_samples < M_features and a non-informative prior, or collinear features in X.')\n    mu_b_rounded = np.round(mu_b_posterior, 4)\n    return mu_b_rounded.tolist()"}
{"task_id": 308, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef _hz_to_mel(hz: float) -> float:\n    \"\"\"Converts a frequency from Hertz to Mels.\"\"\"\n    return 2595 * math.log10(1 + hz / 700.0)\ndef _mel_to_hz(mel: float) -> float:\n    \"\"\"Converts a frequency from Mels to Hertz.\"\"\"\n    return 700 * (10 ** (mel / 2595.0) - 1.0)\ndef _safe_divide(num: float, den: float) -> float:\n    \"\"\"\n    Performs division, handling den=0.0 cases to compute filter slopes.\n    - num/0 where num > 0  => inf\n    - num/0 where num < 0  => -inf\n    - 0/0 => 1.0 (This occurs when a DFT bin is at the peak of a zero-width slope segment)\n    \"\"\"\n    if den == 0.0:\n        if num == 0.0:\n            return 1.0\n        elif num > 0.0:\n            return float('inf')\n        else:\n            return float('-inf')\n    return num / den\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if n_filters == 0:\n        return []\n    f_fs = float(fs)\n    f_min_freq = float(min_freq)\n    f_max_freq = f_fs / 2.0 if max_freq is None else float(max_freq)\n    mel_min = _hz_to_mel(f_min_freq)\n    mel_max = _hz_to_mel(f_max_freq)\n    mel_corner_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_corner_freqs = [_mel_to_hz(m) for m in mel_corner_points]\n    n_fft_bins = N // 2 + 1\n    dft_freqs = [k * f_fs / float(N) for k in range(n_fft_bins)]\n    filterbank_matrix = [[0.0 for _ in range(n_fft_bins)] for _ in range(n_filters)]\n    for m in range(n_filters):\n        f_left = hz_corner_freqs[m]\n        f_center = hz_corner_freqs[m + 1]\n        f_right = hz_corner_freqs[m + 2]\n        for (k_idx, f_k) in enumerate(dft_freqs):\n            val_left_slope = _safe_divide(f_k - f_left, f_center - f_left)\n            val_right_slope = _safe_divide(f_right - f_k, f_right - f_center)\n            filterbank_matrix[m][k_idx] = max(0.0, min(val_left_slope, val_right_slope))\n    if normalize:\n        for m in range(n_filters):\n            norm_denom = hz_corner_freqs[m + 2] - hz_corner_freqs[m]\n            if norm_denom != 0.0:\n                norm_factor = 2.0 / norm_denom\n                for k_idx in range(n_fft_bins):\n                    filterbank_matrix[m][k_idx] *= norm_factor\n            else:\n                for k_idx in range(n_fft_bins):\n                    filterbank_matrix[m][k_idx] = 0.0\n    final_filterbank = [[round(val, 4) for val in row] for row in filterbank_matrix]\n    return final_filterbank"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    window_samples = []\n    for n in range(window_len):\n        arg_factor = np.pi * float(n) / float(N)\n        cos_term1 = np.cos(2 * arg_factor)\n        cos_term2 = np.cos(4 * arg_factor)\n        cos_term3 = np.cos(6 * arg_factor)\n        sample_value = a0 - a1 * cos_term1 + a2 * cos_term2 - a3 * cos_term3\n        rounded_sample_value = round(sample_value, 4)\n        window_samples.append(rounded_sample_value)\n    return window_samples"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\nDIGAMMA_THRESHOLD = 6.0\ndef _digamma(x_orig):\n    \"\"\"\n    Computes the digamma function \u03c8(x_orig) using recursion for small x_orig\n    and an asymptotic expansion for larger x_orig.\n    \"\"\"\n    x = float(x_orig)\n    if x <= 0:\n        raise ValueError('Input to digamma function must be positive.')\n    sum_reciprocal_terms = 0.0\n    x_shifted = x\n    while x_shifted < DIGAMMA_THRESHOLD:\n        sum_reciprocal_terms += 1.0 / x_shifted\n        x_shifted += 1.0\n    z = x_shifted\n    log_z = math.log(z)\n    inv_z = 1.0 / z\n    inv_z_sq = inv_z * inv_z\n    inv_z_p4 = inv_z_sq * inv_z_sq\n    inv_z_p6 = inv_z_p4 * inv_z_sq\n    psi_z_approx = log_z - 0.5 * inv_z - 1.0 / 12.0 * inv_z_sq + 1.0 / 120.0 * inv_z_p4 - 1.0 / 252.0 * inv_z_p6\n    return psi_z_approx - sum_reciprocal_terms\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_np = np.asarray(gamma, dtype=float)\n    gamma_dt = gamma_np[d, t]\n    sum_gamma_d_k = np.sum(gamma_np[d, :])\n    psi_gamma_dt = _digamma(gamma_dt)\n    psi_sum_gamma_d_k = _digamma(sum_gamma_d_k)\n    result = psi_gamma_dt - psi_sum_gamma_d_k\n    rounded_result = round(result, 4)\n    return rounded_result"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    header = '-' * 25 + ' DEBUG ' + '-' * 25\n    footer = '-' * 23 + ' END DEBUG ' + '-' * 23\n    report = f'{header}\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n{footer}'\n    return report"}
{"task_id": 318, "completion_id": 0, "solution": "def _find_best_stump(X_train, y_train, weights):\n    \"\"\"\n    Finds the best decision stump for the current iteration of AdaBoost.\n    Iterates through all features, all possible thresholds for each feature,\n    and both polarities to find the stump that minimizes weighted error.\n    \"\"\"\n    best_stump_obj = DecisionStump()\n    min_weighted_error = float('inf')\n    (n_samples, n_features) = X_train.shape\n    best_stump_predictions_on_train = None\n    for feature_idx in range(n_features):\n        X_column = X_train[:, feature_idx]\n        sorted_indices = np.argsort(X_column)\n        sorted_x_feature = X_column[sorted_indices]\n        sorted_y = y_train[sorted_indices]\n        sorted_weights = weights[sorted_indices]\n        for polarity in [1, -1]:\n            if polarity == 1:\n                current_error = np.sum(sorted_weights[sorted_y == -1])\n            else:\n                current_error = np.sum(sorted_weights[sorted_y == 1])\n            if current_error < min_weighted_error:\n                min_weighted_error = current_error\n                best_stump_obj.polarity = polarity\n                best_stump_obj.feature_idx = feature_idx\n                best_stump_obj.threshold = sorted_x_feature[0]\n            for i in range(n_samples - 1):\n                y_i = sorted_y[i]\n                w_i = sorted_weights[i]\n                if polarity == 1:\n                    if y_i == 1:\n                        current_error += w_i\n                    else:\n                        current_error -= w_i\n                elif y_i == 1:\n                    current_error -= w_i\n                else:\n                    current_error += w_i\n                if sorted_x_feature[i] != sorted_x_feature[i + 1]:\n                    if current_error < min_weighted_error:\n                        min_weighted_error = current_error\n                        best_stump_obj.polarity = polarity\n                        best_stump_obj.feature_idx = feature_idx\n                        best_stump_obj.threshold = sorted_x_feature[i + 1]\n    best_stump_predictions_on_train = best_stump_obj.predict(X_train)\n    return (best_stump_obj, min_weighted_error, best_stump_predictions_on_train)\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples_train, n_features_train) = X_train.shape\n    n_samples_test = X_test.shape[0]\n    if n_samples_train == 0:\n        return [1] * n_samples_test\n    if n_features_train == 0:\n        return [1] * n_samples_test\n    weights = np.full(n_samples_train, 1.0 / n_samples_train)\n    stumps_list = []\n    alphas_list = []\n    for m_round in range(n_estimators):\n        (stump, weighted_error, stump_preds_train) = _find_best_stump(X_train, y_train, weights)\n        epsilon_m = weighted_error\n        alpha_m = 0.5 * np.log((1.0 - epsilon_m + 1e-10) / (epsilon_m + 1e-10))\n        stumps_list.append(stump)\n        alphas_list.append(alpha_m)\n        weights *= np.exp(-alpha_m * y_train * stump_preds_train)\n        sum_weights = np.sum(weights)\n        if sum_weights == 0 or not np.isfinite(sum_weights) or sum_weights < 1e-100:\n            if m_round < n_estimators - 1:\n                weights = np.full(n_samples_train, 1.0 / n_samples_train)\n            else:\n                pass\n        else:\n            weights /= sum_weights\n    if n_samples_test == 0:\n        return []\n    final_scores = np.zeros(n_samples_test)\n    if not alphas_list:\n        return [1] * n_samples_test\n    for i in range(len(alphas_list)):\n        stump = stumps_list[i]\n        alpha = alphas_list[i]\n        if not np.isfinite(alpha):\n            continue\n        predictions_test_stump_i = stump.predict(X_test)\n        final_scores += alpha * predictions_test_stump_i\n    y_pred_test = np.sign(final_scores)\n    y_pred_test[y_pred_test == 0] = 1\n    return [int(label) for label in y_pred_test]"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        k_max = N // 2\n        k_values = np.arange(k_max + 1)\n        frequencies = k_values * (fs / N)\n    else:\n        frequencies = np.fft.fftfreq(N, d=1.0 / fs)\n    rounded_frequencies = np.round(frequencies, 4)\n    return rounded_frequencies.tolist()"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true_np = np.asarray(y_true, dtype=float)\n    predictions_np = np.asarray(predictions, dtype=float)\n    oob_mask_np = np.asarray(oob_mask, dtype=bool)\n    n_samples = y_true_np.shape[0]\n    if n_samples == 0:\n        return -1.0\n    if predictions_np.ndim != 2 or predictions_np.shape[1] == 0:\n        return -1.0\n    oob_selected_predictions = np.where(oob_mask_np, predictions_np, np.nan)\n    with np.errstate(invalid='ignore'):\n        avg_oob_pred_per_sample = np.nanmean(oob_selected_predictions, axis=1)\n    valid_oob_sample_mask = ~np.isnan(avg_oob_pred_per_sample)\n    num_valid_oob_samples = np.sum(valid_oob_sample_mask)\n    if num_valid_oob_samples == 0:\n        return -1.0\n    y_true_for_valid_samples = y_true_np[valid_oob_sample_mask]\n    avg_oob_preds_for_valid_samples = avg_oob_pred_per_sample[valid_oob_sample_mask]\n    squared_errors = (y_true_for_valid_samples - avg_oob_preds_for_valid_samples) ** 2\n    mean_oob_squared_error = np.mean(squared_errors)\n    return round(mean_oob_squared_error, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in set(transaction):\n            item_counts[item] += 1\n    frequent_items_with_support = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    fp_tree_root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        unique_items_in_transaction = set(transaction)\n        current_path_items = [item for item in unique_items_in_transaction if item in frequent_items_with_support]\n        ordered_path = sorted(current_path_items, key=lambda item: (-frequent_items_with_support[item], item))\n        current_node = fp_tree_root\n        for item in ordered_path:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n    return fp_tree_root"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef linear_kernel(X: Union[List[List[Union[int, float]]], 'np.ndarray'], Y: Union[List[List[Union[int, float]]], 'np.ndarray', None]=None, c0: Union[int, float]=0) -> Union[List[List[float]], int]:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    try:\n        X_np = np.asarray(X, dtype=float)\n    except ValueError:\n        return -1\n    if X_np.ndim == 1:\n        if X_np.shape[0] == 0:\n            return []\n        else:\n            return -1\n    elif X_np.ndim != 2:\n        return -1\n    if X_np.shape[0] == 0:\n        return []\n    N = X_np.shape[0]\n    C_X = X_np.shape[1]\n    if Y is None:\n        Y_np = X_np\n    else:\n        try:\n            Y_np_orig = np.asarray(Y, dtype=float)\n        except ValueError:\n            return -1\n        if Y_np_orig.ndim == 1:\n            if Y_np_orig.shape[0] == 0:\n                Y_np = np.empty((0, C_X), dtype=float)\n            else:\n                return -1\n        elif Y_np_orig.ndim == 2:\n            if Y_np_orig.shape[1] != C_X:\n                return -1\n            Y_np = Y_np_orig\n        else:\n            return -1\n    c0_float = float(c0)\n    kernel_matrix_np = X_np @ Y_np.T + c0_float\n    kernel_matrix_rounded_np = np.round(kernel_matrix_np, 4)\n    result_list = kernel_matrix_rounded_np.tolist()\n    return result_list"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    def _to_rounded_list(arr: np.ndarray) -> list:\n        rounded_arr = np.round(arr, 8)\n        if rounded_arr.ndim == 0:\n            return [rounded_arr.item()]\n        else:\n            return rounded_arr.tolist()\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    if np.all(grad == 0):\n        param_updated = param.copy()\n    else:\n        bias_correction1 = 1 - beta1 ** t\n        m_hat_t = m_t / bias_correction1\n        bias_correction2 = 1 - beta2 ** t\n        v_hat_t = v_t / bias_correction2\n        param_updated = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    updated_param_list = _to_rounded_list(param_updated)\n    new_m_list = _to_rounded_list(m_t)\n    new_v_list = _to_rounded_list(v_t)\n    return (updated_param_list, new_m_list, new_v_list)"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * N)\n    rewards_np = np.asarray(rewards)\n    elite_indices = np.argsort(rewards_np)[::-1][:num_retain]\n    elite_samples = theta_samples[elite_indices]\n    mean_elite = np.mean(elite_samples, axis=0)\n    variance_elite = np.var(elite_samples, axis=0)\n    mean_rounded = np.round(mean_elite, 4)\n    variance_rounded = np.round(variance_elite, 4)\n    mean_list = mean_rounded.tolist()\n    variance_list = variance_rounded.tolist()\n    return (mean_list, variance_list)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    counts = Counter(labels)\n    n_labels = sum(counts.values())\n    if n_labels == 0:\n        return 0.0\n    if len(counts) == 1:\n        return 0.0\n    entropy_val = 0.0\n    for count in counts.values():\n        p_i = count / n_labels\n        entropy_val -= p_i * math.log2(p_i)\n    return round(entropy_val, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch_X) = X.shape\n    (kernel_rows, kernel_cols, in_ch_W, out_ch) = W.shape\n    in_ch = in_ch_X\n    d_rate = dilation + 1\n    eff_kernel_rows = (kernel_rows - 1) * d_rate + 1\n    eff_kernel_cols = (kernel_cols - 1) * d_rate + 1\n    if isinstance(pad, int):\n        pr1 = pr2 = pc1 = pc2 = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pr1 = pr2 = pad[0]\n            pc1 = pc2 = pad[1]\n        elif len(pad) == 4:\n            (pr1, pr2, pc1, pc2) = (pad[0], pad[1], pad[2], pad[3])\n        else:\n            pass\n    elif pad == 'same':\n        total_pad_rows = (in_rows - 1) * stride + eff_kernel_rows - in_rows\n        total_pad_cols = (in_cols - 1) * stride + eff_kernel_cols - in_cols\n        total_pad_rows = max(0, total_pad_rows)\n        total_pad_cols = max(0, total_pad_cols)\n        pr1 = total_pad_rows // 2\n        pr2 = total_pad_rows - pr1\n        pc1 = total_pad_cols // 2\n        pc2 = total_pad_cols - pc1\n    else:\n        pass\n    X_padded = np.pad(X, pad_width=((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant', constant_values=0)\n    (_, padded_in_rows, padded_in_cols, _) = X_padded.shape\n    _out_rows_calc = (padded_in_rows - eff_kernel_rows) // stride + 1\n    _out_cols_calc = (padded_in_cols - eff_kernel_cols) // stride + 1\n    out_rows = max(0, _out_rows_calc)\n    out_cols = max(0, _out_cols_calc)\n    (sN, sH, sW, sC) = X_padded.strides\n    X_strided = np.lib.stride_tricks.as_strided(X_padded, shape=(n_ex, out_rows, out_cols, kernel_rows, kernel_cols, in_ch), strides=(sN, sH * stride, sW * stride, sH * d_rate, sW * d_rate, sC), writeable=False)\n    im2col_matrix = X_strided.reshape(n_ex * out_rows * out_cols, kernel_rows * kernel_cols * in_ch)\n    W_reshaped = W.reshape(kernel_rows * kernel_cols * in_ch_W, out_ch)\n    output_flat = im2col_matrix @ W_reshaped\n    output_final = output_flat.reshape(n_ex, out_rows, out_cols, out_ch)\n    return output_final.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if n_samples == 0:\n        scores_arr = np.empty((0, 0))\n        evr_list = []\n        return (scores_arr.tolist(), evr_list)\n    if n_features == 0:\n        scores_arr = np.empty((n_samples, 0))\n        evr_list = []\n        return (scores_arr.tolist(), evr_list)\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n    if np.allclose(centered_data, 0.0):\n        num_components_to_use = min(n_components, n_features)\n        scores_arr = np.zeros((n_samples, num_components_to_use))\n        evr_list = [0.0] * num_components_to_use\n        return (np.round(scores_arr, 4).tolist(), evr_list)\n    if solver == 'svd':\n        (_, s, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        components = Vt\n        explained_variance_values = s ** 2\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigen_values, eigen_vectors) = np.linalg.eigh(cov_matrix)\n        sort_indices = np.argsort(eigen_values)[::-1]\n        sorted_eigen_values = eigen_values[sort_indices]\n        sorted_eigen_vectors = eigen_vectors[:, sort_indices]\n        components = sorted_eigen_vectors.T\n        explained_variance_values = np.maximum(0, sorted_eigen_values)\n    else:\n        raise ValueError(\"Solver must be 'svd' or 'eigen'\")\n    num_available_components = components.shape[0]\n    num_components_to_keep = min(n_components, num_available_components)\n    kept_components = components[:num_components_to_keep, :]\n    total_explained_variance = np.sum(explained_variance_values)\n    if total_explained_variance > 0:\n        all_ratios = explained_variance_values / total_explained_variance\n        final_explained_variance_ratio = all_ratios[:num_components_to_keep]\n    else:\n        final_explained_variance_ratio = np.zeros(num_components_to_keep)\n    for i in range(num_components_to_keep):\n        direction_vector = kept_components[i, :]\n        first_non_zero_loading = 0.0\n        for loading_value in direction_vector:\n            if loading_value != 0.0:\n                first_non_zero_loading = loading_value\n                break\n        if first_non_zero_loading < 0:\n            kept_components[i, :] *= -1\n    scores_arr = centered_data @ kept_components.T\n    rounded_scores_list = np.round(scores_arr, 4).tolist()\n    rounded_evr_list = np.round(final_explained_variance_ratio, 4).tolist()\n    return (rounded_scores_list, rounded_evr_list)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool) -> int | float:\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        probabilities = leaf.value\n        if not isinstance(probabilities, (list, tuple)):\n            raise TypeError(f'For classification, leaf.value is expected to be a list or tuple of probabilities, but got {type(probabilities).__name__}.')\n        if not probabilities:\n            raise ValueError('For classification, leaf.value (probabilities) cannot be an empty sequence.')\n        max_idx = 0\n        for i in range(1, len(probabilities)):\n            if probabilities[i] > probabilities[max_idx]:\n                max_idx = i\n        return max_idx\n    else:\n        value = leaf.value\n        if not isinstance(value, (int, float)):\n            raise TypeError(f'For regression, leaf.value is expected to be a scalar (int or float), but got {type(value).__name__}.')\n        return value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if not isinstance(data, np.ndarray):\n        raise TypeError(\"Input 'data' must be a NumPy array.\")\n    if data.ndim != 2:\n        raise ValueError(\"Input 'data' must be a 2-D array.\")\n    (n_samples, _) = data.shape\n    if not isinstance(K, int) or K <= 0:\n        raise ValueError('K must be a positive integer.')\n    if n_samples == 0 and K > 0:\n        raise ValueError(\"Input 'data' cannot be empty if K > 0.\")\n    if K == 1:\n        if n_samples == 0:\n            return [[]]\n            if n_samples == 0:\n                return []\n        centroid_coords_np = np.mean(data, axis=0)\n        rounded_centroid_coords = [round(coord, 4) for coord in centroid_coords_np]\n        return [rounded_centroid_coords]\n    if K > n_samples:\n        raise ValueError(f'K ({K}) cannot be greater than the number of samples ({n_samples}) for the specified initialization method (first K samples).')\n    centroids = np.array(data[:K, :], dtype=np.float64, copy=True)\n    tolerance = 1e-06\n    for _ in range(max_iters):\n        old_centroids = centroids.copy()\n        distances_to_centroids = np.zeros((n_samples, K))\n        for k_idx in range(K):\n            distances_to_centroids[:, k_idx] = np.linalg.norm(data - old_centroids[k_idx, :], axis=1)\n        labels = np.argmin(distances_to_centroids, axis=1)\n        current_iteration_new_centroids = np.zeros_like(old_centroids)\n        for k_idx in range(K):\n            samples_in_cluster_k = data[labels == k_idx]\n            if samples_in_cluster_k.shape[0] > 0:\n                current_iteration_new_centroids[k_idx, :] = np.mean(samples_in_cluster_k, axis=0)\n            else:\n                current_iteration_new_centroids[k_idx, :] = old_centroids[k_idx, :]\n        centroids = current_iteration_new_centroids\n        max_coordinate_change = np.max(np.abs(centroids - old_centroids))\n        if max_coordinate_change < tolerance:\n            break\n    final_centroids_list_of_lists = centroids.tolist()\n    final_centroids_list_of_lists.sort()\n    result_centroids = []\n    for centroid_coords_list in final_centroids_list_of_lists:\n        rounded_coords = [round(coord, 4) for coord in centroid_coords_list]\n        result_centroids.append(rounded_coords)\n    return result_centroids"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]] | int:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data. It's assumed that if it's a list, it's structured\n        to be convertible into a 2D NumPy array (e.g., not ragged).\n        Input numbers are expected to be non-negative as per problem description context.\n\n    Returns\n    -------\n    list[list[float]] | int \n        The row-normalised matrix rounded to 4 decimals, as a list of lists.\n        Returns -1 if normalisation is impossible (e.g., a row sums to 0,\n        input is scalar, input is >2D, or input cannot be converted to a numeric array).\n        Note: The return type hint in the original stub was list[list[float]], \n        but to accommodate the requirement \"return -1\", it has been updated to \n        list[list[float]] | int, assuming Python 3.10+ syntax for Union types.\n        For older Python versions, typing.Union[list[list[float]], int] would be used.\n    \"\"\"\n    try:\n        matrix = np.array(data, dtype=float)\n    except ValueError:\n        return -1\n    if matrix.ndim == 0:\n        return -1\n    if matrix.ndim == 1:\n        if matrix.size == 0:\n            return []\n        matrix = matrix.reshape(1, -1)\n    elif matrix.ndim > 2:\n        return -1\n    if matrix.shape[0] == 0:\n        return []\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized_matrix = matrix / row_sums[:, np.newaxis]\n    rounded_matrix = np.round(normalized_matrix, 4)\n    return rounded_matrix.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> PyTuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def _is_single_space_continuous(space_obj: Space, is_composite_flag: bool) -> bool:\n        \"\"\"Helper function to determine continuity for a single space.\"\"\"\n        if not is_composite_flag:\n            return isinstance(space_obj, Box)\n        elif isinstance(space_obj, Tuple):\n            return all((isinstance(sub_space, Box) for sub_space in space_obj.spaces))\n        elif isinstance(space_obj, Dict):\n            return all((isinstance(sub_space, Box) for sub_space in space_obj.spaces.values()))\n        else:\n            return False\n    cont_action = _is_single_space_continuous(env.action_space, tuple_action)\n    cont_obs = _is_single_space_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates or updates[0].shape[0] == 0:\n        if regression:\n            return np.array([], dtype=float)\n        else:\n            return np.array([], dtype=int)\n    stacked_updates = np.array(updates, dtype=float)\n    sum_of_updates = np.sum(stacked_updates, axis=0)\n    running_prediction = -learning_rate * sum_of_updates\n    if regression:\n        return np.round(running_prediction, 4)\n    else:\n        logits = running_prediction\n        max_logits = np.max(logits, axis=1, keepdims=True)\n        stabilized_logits = logits - max_logits\n        exp_logits = np.exp(stabilized_logits)\n        sum_exp_logits = np.sum(exp_logits, axis=1, keepdims=True)\n        probabilities = exp_logits / sum_exp_logits\n        predicted_classes = np.argmax(probabilities, axis=1)\n        return predicted_classes"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        raise TypeError('Input X must be a NumPy ndarray.')\n    if not isinstance(W, np.ndarray):\n        raise TypeError('Kernel W must be a NumPy ndarray.')\n    if X.ndim != 3:\n        raise ValueError(f'Input X must be a 3D array (n_examples, signal_length, in_channels), got {X.ndim} dimensions.')\n    if W.ndim != 3:\n        raise ValueError(f'Kernel W must be a 3D array (kernel_width, in_channels, out_channels), got {W.ndim} dimensions.')\n    (N, L_in, C_in) = X.shape\n    (K, C_in_kernel, C_out) = W.shape\n    if C_in != C_in_kernel:\n        raise ValueError(f'Input channels of X ({C_in}) and W ({C_in_kernel}) must match.')\n    if not isinstance(stride, int) or stride <= 0:\n        raise ValueError('Stride must be a positive integer.')\n    if not isinstance(dilation, int) or dilation < 0:\n        raise ValueError('Dilation must be a non-negative integer.')\n    D_rate = dilation + 1\n    if K == 0:\n        effective_kernel_width = 0\n    else:\n        effective_kernel_width = (K - 1) * D_rate + 1\n    if isinstance(pad, str):\n        if pad.lower() == 'same':\n            if L_in == 0:\n                L_out_same = 0\n            else:\n                L_out_same = (L_in + stride - 1) // stride\n            pad_needed = (L_out_same - 1) * stride + effective_kernel_width - L_in\n            total_pad = max(0, pad_needed)\n            p_left = total_pad // 2\n            p_right = total_pad - p_left\n        else:\n            raise ValueError(\"Invalid string for pad. Must be 'same'.\")\n    elif isinstance(pad, int):\n        if pad < 0:\n            raise ValueError('Integer padding must be non-negative.')\n        p_left = pad\n        p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (p_left, p_right) = pad\n        if not (isinstance(p_left, int) and isinstance(p_right, int) and (p_left >= 0) and (p_right >= 0)):\n            raise ValueError('Padding tuple must contain two non-negative integers (p_left, p_right).')\n    else:\n        raise ValueError(\"Invalid type for pad. Must be int, 2-tuple (non-negative ints), or 'same'.\")\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant', constant_values=0.0)\n    L_in_padded = X_padded.shape[1]\n    if L_in_padded < effective_kernel_width:\n        L_out = 0\n    else:\n        L_out = (L_in_padded - effective_kernel_width) // stride + 1\n    output = np.zeros((N, L_out, C_out))\n    for n in range(N):\n        for l_out_idx in range(L_out):\n            input_window_start_idx = l_out_idx * stride\n            for c_out_idx in range(C_out):\n                current_sum = 0.0\n                for k_idx in range(K):\n                    input_spatial_idx = input_window_start_idx + k_idx * D_rate\n                    for c_in_idx in range(C_in):\n                        current_sum += X_padded[n, input_spatial_idx, c_in_idx] * W[k_idx, c_in_idx, c_out_idx]\n                output[n, l_out_idx, c_out_idx] = current_sum\n    return output.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    y_arr = np.asarray(y)\n    if y_arr.size == 0:\n        return 0.0\n    N = y_arr.size\n    (_, counts) = np.unique(y_arr, return_counts=True)\n    p_c = counts / N\n    sum_p_c_squared = np.sum(p_c ** 2)\n    gini_impurity = 1.0 - sum_p_c_squared\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n), where m is the number of samples\n                        and n is the number of features.\n        y (np.ndarray): Target vector of shape (m,) or (m, 1).\n        learning_rate (float): The learning rate for gradient descent. Defaults to 0.01.\n        n_iterations (int): The number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        tuple[list[float], float] | int: A tuple containing:\n            - A list of learned weight coefficients (theta), rounded to 4 decimal places.\n            - The learned bias (intercept), rounded to 4 decimal places.\n        Returns -1 if the input data (X and y) have an inconsistent number of samples.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (num_samples, num_features) = X.shape\n    if num_samples == 0:\n        weights_list = [0.0] * num_features\n        bias = 0.0\n        return (weights_list, bias)\n    theta = np.zeros((num_features, 1))\n    b = 0.0\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    for _ in range(n_iterations):\n        y_hat = np.dot(X, theta) + b\n        error = y_hat - y\n        dw = 2 / num_samples * np.dot(X.T, error)\n        db = 2 / num_samples * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    weights_list = [round(weight, 4) for weight in theta.flatten().tolist()]\n    bias = round(b, 4)\n    return (weights_list, bias)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n    This means the entry at row i, column j must be equal to the entry\n    at row j, column i for all valid indices (i, j).\n    Floating point equality is checked using an absolute tolerance:\n    abs(a - b) <= 1e-8.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    num_rows = len(X)\n    if num_rows == 0:\n        return True\n    num_cols = len(X[0])\n    if num_rows != num_cols:\n        return False\n    for i in range(num_rows):\n        if len(X[i]) != num_cols:\n            return False\n    for i in range(num_rows):\n        for j in range(i, num_rows):\n            element_ij = X[i][j]\n            element_ji = X[j][i]\n            if not np.allclose(element_ij, element_ji, atol=1e-08, rtol=0):\n                return False\n    return True"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculates the negative gradient for logistic loss as used in Gradient Boosting.\n\n    The true label y_i for each sample is 0 or 1. The current model prediction\n    f_i is a real number. Gradient Boosting internally converts labels to y'_i = 2y_i - 1.\n    The problem states the logistic loss as L(y', f) = log(1 + exp(-2 y' f)).\n    The negative gradient of the loss (or a related version suitable for boosting)\n    with respect to f is given by the formula g_i = y'_i / (1 + exp(y'_i * f_i)).\n    This function implements g_i.\n\n    Args:\n        y: A list of binary class labels (0 or 1).\n        f: A list of current prediction scores (floats).\n\n    Returns:\n        A list of negative gradients g_i, each rounded to four decimal places.\n        Returns -1 if any label in y is not 0 or 1.\n    \"\"\"\n    for y_label in y:\n        if y_label not in (0, 1):\n            return -1\n    negative_gradients = []\n    for i in range(len(y)):\n        y_i_original = y[i]\n        f_i = f[i]\n        y_prime_i = 2 * y_i_original - 1\n        term = y_prime_i * f_i\n        g_i: float\n        if term >= 0:\n            exp_minus_term = np.exp(-term)\n            if 1 + exp_minus_term == 0:\n                g_i = y_prime_i * exp_minus_term\n            else:\n                g_i = y_prime_i * exp_minus_term / (1 + exp_minus_term)\n        else:\n            exp_term = np.exp(term)\n            g_i = y_prime_i / (1 + exp_term)\n        rounded_g_i = round(g_i, 4)\n        negative_gradients.append(rounded_g_i)\n    return negative_gradients"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\nALPHA = 1.6732632423543772\nSCALE = 1.0507009873554805\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x_arr = np.asarray(x, dtype=float)\n    if order == 0:\n        result = np.where(x_arr > 0, SCALE * x_arr, SCALE * ALPHA * (np.exp(x_arr) - 1))\n    elif order == 1:\n        result = np.where(x_arr > 0, SCALE, SCALE * ALPHA * np.exp(x_arr))\n    elif order == 2:\n        result = np.where(x_arr > 0, 0.0, SCALE * ALPHA * np.exp(x_arr))\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    rounded_result = np.round(result, 4)\n    output = rounded_result.tolist()\n    return output"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    n_samples = len(x_arr)\n    if n_samples == 0:\n        return []\n    y_hat = np.full(n_samples, np.mean(y_arr), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y_arr - y_hat\n        sorted_indices = np.argsort(x_arr)\n        x_sorted = x_arr[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        best_t_split = None\n        min_overall_sse = float('inf')\n        optimal_r_bar_L = None\n        optimal_r_bar_R = None\n        found_at_least_one_valid_split = False\n        if n_samples >= 2:\n            for j in range(n_samples - 1):\n                if x_sorted[j] < x_sorted[j + 1]:\n                    candidate_t = (x_sorted[j] + x_sorted[j + 1]) / 2.0\n                    current_split_residuals_L = residuals_sorted[:j + 1]\n                    current_split_residuals_R = residuals_sorted[j + 1:]\n                    r_bar_L_for_candidate_t = np.mean(current_split_residuals_L)\n                    r_bar_R_for_candidate_t = np.mean(current_split_residuals_R)\n                    sse_L_for_candidate_t = np.sum((current_split_residuals_L - r_bar_L_for_candidate_t) ** 2)\n                    sse_R_for_candidate_t = np.sum((current_split_residuals_R - r_bar_R_for_candidate_t) ** 2)\n                    current_split_sse = sse_L_for_candidate_t + sse_R_for_candidate_t\n                    if current_split_sse < min_overall_sse:\n                        min_overall_sse = current_split_sse\n                        best_t_split = candidate_t\n                        optimal_r_bar_L = r_bar_L_for_candidate_t\n                        optimal_r_bar_R = r_bar_R_for_candidate_t\n                        found_at_least_one_valid_split = True\n        current_stump_predictions = np.zeros(n_samples, dtype=float)\n        if not found_at_least_one_valid_split:\n            global_mean_residual = np.mean(residuals)\n            current_stump_predictions.fill(global_mean_residual)\n        else:\n            for i in range(n_samples):\n                if x_arr[i] <= best_t_split:\n                    current_stump_predictions[i] = optimal_r_bar_L\n                else:\n                    current_stump_predictions[i] = optimal_r_bar_R\n        y_hat += learning_rate * current_stump_predictions\n    y_hat_rounded = np.round(y_hat, 4)\n    return y_hat_rounded.tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    denominator = np.sqrt(Eg_next + epsilon)\n    w_next = w - learning_rate * grad / denominator\n    w_next_rounded = np.round(w_next, 4)\n    Eg_next_rounded = np.round(Eg_next, 4)\n    w_next_list = w_next_rounded.tolist()\n    Eg_next_list = Eg_next_rounded.tolist()\n    return (w_next_list, Eg_next_list)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_np = np.array(x, dtype=float)\n    if not derivative:\n        output_np = np.where(x_np >= 0, x_np, alpha * (np.exp(x_np) - 1))\n    else:\n        derivative_val_for_negative_inputs = alpha * (np.exp(x_np) - 1) + alpha\n        output_np = np.where(x_np >= 0, 1.0, derivative_val_for_negative_inputs)\n    result_list = [round(val, 4) for val in output_np]\n    return result_list"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def _process_list_data(data_list: list):\n        \"\"\"Helper function to process a single list (actions or observations).\"\"\"\n        if not data_list:\n            return (False, False, False, 0, [], [])\n        first_element = data_list[0]\n        is_tuple_like = isinstance(first_element, (list, tuple)) or (isinstance(first_element, np.ndarray) and first_element.ndim > 0)\n        structured_data = []\n\n        def _normalize_value(val):\n            \"\"\"Converts numpy scalars or 0-dim arrays to Python native types.\"\"\"\n            if isinstance(val, np.generic):\n                return val.item()\n            return val\n        if is_tuple_like:\n            for item in data_list:\n                current_point_normalized = [_normalize_value(sub_el) for sub_el in item]\n                structured_data.append(current_point_normalized)\n            if not structured_data or not structured_data[0]:\n                dim = 0\n            else:\n                dim = len(structured_data[0])\n        else:\n            for item in data_list:\n                structured_data.append([_normalize_value(item)])\n            dim = 1\n        is_multidim = is_tuple_like and dim > 1\n        is_continuous = False\n        if dim > 0:\n            for point_values in structured_data:\n                for val in point_values:\n                    if isinstance(val, float):\n                        if val % 1 != 0:\n                            is_continuous = True\n                            break\n                if is_continuous:\n                    break\n        n_per_dim_list = []\n        ids_per_dim_list = []\n        if dim > 0:\n            for d_idx in range(dim):\n                dim_values = [point[d_idx] for point in structured_data]\n                unique_dim_values = sorted(list(set(dim_values)))\n                n_per_dim_list.append(len(unique_dim_values))\n                ids_per_dim_list.append(unique_dim_values)\n        return (is_tuple_like, is_multidim, is_continuous, dim, n_per_dim_list, ids_per_dim_list)\n    (is_tuple_act, is_multidim_act, is_continuous_act, dim_act, n_per_dim_act, ids_per_dim_act) = _process_list_data(actions)\n    (is_tuple_obs, is_multidim_obs, is_continuous_obs, dim_obs, n_per_dim_obs, ids_per_dim_obs) = _process_list_data(observations)\n    results = {'tuple_actions': is_tuple_act, 'tuple_observations': is_tuple_obs, 'multidim_actions': is_multidim_act, 'multidim_observations': is_multidim_obs, 'continuous_actions': is_continuous_act, 'continuous_observations': is_continuous_obs, 'n_actions_per_dim': n_per_dim_act, 'n_obs_per_dim': n_per_dim_obs, 'action_dim': dim_act, 'obs_dim': dim_obs, 'action_ids': ids_per_dim_act, 'obs_ids': ids_per_dim_obs}\n    return results"}
{"task_id": 413, "completion_id": 0, "solution": "class DecisionTreeRegressorNP:\n    \"\"\"\n    Simplified CART Regression Tree implemented with NumPy.\n    - Binary splitting\n    - Mean Squared Error (MSE) as split criterion\n    - Stops when max_depth is reached or no further reduction in error\n    \"\"\"\n\n    def __init__(self, max_depth=3):\n        self.max_depth = max_depth\n        self.root = None\n\n    def _calculate_mse(self, y: np.ndarray) -> float:\n        \"\"\"Calculates Mean Squared Error.\"\"\"\n        if len(y) <= 1:\n            return 0.0\n        return np.var(y)\n\n    def _find_best_split(self, X: np.ndarray, y: np.ndarray):\n        \"\"\"Finds the best feature and threshold to split the data.\"\"\"\n        (n_samples, n_features) = X.shape\n        if n_samples <= 1:\n            return None\n        current_node_mse = self._calculate_mse(y)\n        if current_node_mse == 0:\n            return None\n        best_split_info = {'feature_index': None, 'threshold': None, 'left_indices': None, 'right_indices': None, 'split_mse': current_node_mse}\n        for feature_idx in range(n_features):\n            feature_values = X[:, feature_idx]\n            unique_thresholds = np.unique(feature_values)\n            for threshold in unique_thresholds:\n                left_indices = np.where(feature_values <= threshold)[0]\n                right_indices = np.where(feature_values > threshold)[0]\n                if len(left_indices) == 0 or len(right_indices) == 0:\n                    continue\n                (y_left, y_right) = (y[left_indices], y[right_indices])\n                mse_split = (len(y_left) * self._calculate_mse(y_left) + len(y_right) * self._calculate_mse(y_right)) / n_samples\n                if mse_split < best_split_info['split_mse']:\n                    best_split_info['split_mse'] = mse_split\n                    best_split_info['feature_index'] = feature_idx\n                    best_split_info['threshold'] = threshold\n                    best_split_info['left_indices'] = left_indices\n                    best_split_info['right_indices'] = right_indices\n        if best_split_info['feature_index'] is None:\n            return None\n        return best_split_info\n\n    def _build_tree_recursive(self, X: np.ndarray, y: np.ndarray, current_depth: int) -> Node:\n        n_samples = len(y)\n        leaf_value = np.mean(y) if n_samples > 0 else 0.0\n        is_pure_node = n_samples > 0 and len(np.unique(y)) == 1\n        if current_depth >= self.max_depth or n_samples <= 1 or is_pure_node:\n            return Node(value=leaf_value)\n        split_info = self._find_best_split(X, y)\n        if split_info is None:\n            return Node(value=leaf_value)\n        (left_X, left_y) = (X[split_info['left_indices']], y[split_info['left_indices']])\n        (right_X, right_y) = (X[split_info['right_indices']], y[split_info['right_indices']])\n        if len(left_y) == 0 or len(right_y) == 0:\n            return Node(value=leaf_value)\n        left_child = self._build_tree_recursive(left_X, left_y, current_depth + 1)\n        right_child = self._build_tree_recursive(right_X, right_y, current_depth + 1)\n        return Node(feature_index=split_info['feature_index'], threshold=split_info['threshold'], left_child=left_child, right_child=right_child)\n\n    def fit(self, X: np.ndarray, y: np.ndarray):\n        if len(y) == 0:\n            self.root = Node(value=0.0)\n            return\n        self.root = self._build_tree_recursive(X, y, 0)\n\n    def _predict_sample_recursive(self, sample: np.ndarray, node: Node) -> float:\n        if node.is_leaf_node():\n            return node.value\n        if sample[node.feature_index] <= node.threshold:\n            return self._predict_sample_recursive(sample, node.left_child)\n        else:\n            return self._predict_sample_recursive(sample, node.right_child)\n\n    def predict(self, X_query: np.ndarray) -> np.ndarray:\n        if X_query.shape[0] == 0:\n            return np.array([])\n        predictions = np.array([self._predict_sample_recursive(sample, self.root) for sample in X_query])\n        return predictions\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    n_train_samples = X_train.shape[0]\n    n_test_samples = X_test.shape[0]\n    if n_train_samples == 0:\n        if n_test_samples == 0:\n            return []\n        return [0.0] * n_test_samples\n    initial_prediction_value = np.mean(y_train)\n    current_train_predictions = np.full(n_train_samples, initial_prediction_value, dtype=float)\n    if n_test_samples > 0:\n        current_test_predictions = np.full(n_test_samples, initial_prediction_value, dtype=float)\n    else:\n        current_test_predictions = np.array([], dtype=float)\n    for _ in range(n_estimators):\n        residuals = y_train - current_train_predictions\n        tree = DecisionTreeRegressorNP(max_depth=max_depth)\n        tree.fit(X_train, residuals)\n        train_tree_preds = tree.predict(X_train)\n        current_train_predictions += learning_rate * train_tree_preds\n        if n_test_samples > 0:\n            test_tree_preds = tree.predict(X_test)\n            current_test_predictions += learning_rate * test_tree_preds\n    if n_test_samples == 0:\n        return []\n    final_predictions = [round(float(val), 4) for val in current_test_predictions]\n    return final_predictions"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the Probability Density Function (PDF) of a multivariate Gaussian distribution.\n\n    Args:\n        X (numpy.ndarray): Array of data points, shape (n_samples, n_features).\n                           If 1D, treated as (n_samples, 1), implying n_features=1.\n        mean (numpy.ndarray): Mean vector, shape (n_features,).\n                              It can also be (1, n_features) or (n_features, 1),\n                              in which case it will be flattened.\n        cov (numpy.ndarray): Covariance matrix, shape (n_features, n_features).\n                             Must be positive-definite.\n\n    Returns:\n        list: A Python list of PDF values for each sample in X, with each value\n              rounded to four decimal places.\n    \"\"\"\n    X_np = np.asarray(X)\n    mean_np = np.asarray(mean)\n    cov_np = np.asarray(cov)\n    if cov_np.ndim != 2 or cov_np.shape[0] != cov_np.shape[1]:\n        raise ValueError(f'Covariance matrix must be 2D and square. Got shape {cov_np.shape}.')\n    d = cov_np.shape[0]\n    if X_np.ndim == 1:\n        if d != 1:\n            raise ValueError(f'X is 1D (implying n_features=1), but covariance matrix implies n_features={d}.')\n        X_processed = X_np.reshape(-1, 1)\n    elif X_np.ndim == 2:\n        if X_np.shape[1] != d:\n            raise ValueError(f'X has {X_np.shape[1]} features, but covariance matrix implies n_features={d}.')\n        X_processed = X_np\n    else:\n        raise ValueError(f'X must be a 1D or 2D array. Got {X_np.ndim} dimensions.')\n    if mean_np.size != d:\n        raise ValueError(f'Mean vector has {mean_np.size} elements, inconsistent with n_features={d} (from covariance matrix).')\n    mean_processed = mean_np.flatten()\n    n_samples = X_processed.shape[0]\n    if n_samples == 0:\n        return []\n    try:\n        det_cov = np.linalg.det(cov_np)\n        inv_cov = np.linalg.inv(cov_np)\n    except np.linalg.LinAlgError:\n        raise ValueError('Covariance matrix is singular and cannot be inverted.')\n    if det_cov <= 0:\n        raise ValueError('Covariance matrix is not positive-definite (its determinant is not positive).')\n    term_in_sqrt = (2 * math.pi) ** d * det_cov\n    norm_const_denom_sqrt = math.sqrt(term_in_sqrt)\n    if norm_const_denom_sqrt == 0:\n        raise ValueError('Denominator of normalization constant is zero, implies non-positive definite covariance or other issues.')\n    norm_const = 1.0 / norm_const_denom_sqrt\n    diff = X_processed - mean_processed\n    mahalanobis_sq_array = np.sum(diff @ inv_cov * diff, axis=1)\n    exponent_array = -0.5 * mahalanobis_sq_array\n    pdf_vals_array = norm_const * np.exp(exponent_array)\n    pdf_values_rounded = [round(val, 4) for val in pdf_vals_array]\n    return pdf_values_rounded"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if y.ndim == 2 and y.shape[1] == 1:\n        y = y.ravel()\n    elif y.ndim != 1:\n        raise ValueError('y must be a 1D array or a 2D column vector.')\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f'Number of samples in X ({X.shape[0]}) must match number of samples in y ({y.shape[0]}).')\n    (N_train, M_orig) = X.shape\n    if X_new.ndim != 2:\n        raise ValueError(f'X_new must be a 2D array. Got ndim={X_new.ndim}.')\n    (N_new, M_orig_new) = X_new.shape\n    if M_orig != M_orig_new:\n        raise ValueError(f'Number of features in X ({M_orig}) must match number of features in X_new ({M_orig_new}).')\n    if fit_intercept:\n        X_train_aug = np.hstack([np.ones((N_train, 1)), X])\n        X_test_aug = np.hstack([np.ones((N_new, 1)), X_new])\n        M_eff = M_orig + 1\n    else:\n        X_train_aug = X\n        X_test_aug = X_new\n        M_eff = M_orig\n    if M_eff == 0:\n        return [0.0] * N_new\n    if isinstance(mu, (float, int)):\n        mu_prior_vec = np.full(M_eff, float(mu))\n    elif isinstance(mu, np.ndarray):\n        if mu.ndim == 0:\n            mu_prior_vec = np.full(M_eff, float(mu.item()))\n        elif mu.ndim == 1:\n            if mu.shape[0] != M_eff:\n                raise ValueError(f'If mu is a vector, its length must be M_eff ({M_eff}). Got length {mu.shape[0]}.')\n            mu_prior_vec = mu.astype(float)\n        else:\n            raise ValueError('mu must be a scalar or a 1D NumPy array.')\n    else:\n        raise TypeError('mu must be a float, int, or a NumPy array.')\n    if V is None:\n        V_inv = np.eye(M_eff)\n    elif isinstance(V, (float, int)):\n        scalar_v = float(V)\n        if scalar_v <= 0:\n            raise ValueError('If V is a scalar, it must be positive.')\n        V_inv = np.eye(M_eff) * (1.0 / scalar_v)\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 0:\n            scalar_v = float(V.item())\n            if scalar_v <= 0:\n                raise ValueError('If V is a scalar (from NumPy array), it must be positive.')\n            V_inv = np.eye(M_eff) * (1.0 / scalar_v)\n        elif V.ndim == 1:\n            if V.shape[0] != M_eff:\n                raise ValueError(f'If V is a 1D array, its length must be M_eff ({M_eff}). Got length {V.shape[0]}.')\n            if not np.all(V > 0):\n                raise ValueError('If V is a 1D array, all its elements (diagonal of V matrix) must be positive.')\n            V_inv = np.diag(1.0 / V)\n        elif V.ndim == 2:\n            if V.shape != (M_eff, M_eff):\n                raise ValueError(f'If V is a 2D array, its shape must be (M_eff, M_eff), i.e. ({M_eff}, {M_eff}). Got {V.shape}.')\n            try:\n                V_inv = np.linalg.inv(V)\n            except np.linalg.LinAlgError:\n                raise ValueError('V matrix is not invertible. Ensure it is positive definite as stated.')\n        else:\n            raise ValueError('V (if NumPy array) must be scalar (0D), 1D, or 2D.')\n    else:\n        raise TypeError('V must be a float, int, NumPy array, or None.')\n    if N_train == 0:\n        mu_p = mu_prior_vec\n    else:\n        XTX = X_train_aug.T @ X_train_aug\n        XTy = X_train_aug.T @ y\n        posterior_precision_matrix = V_inv + XTX\n        try:\n            Sigma_p = np.linalg.inv(posterior_precision_matrix)\n        except np.linalg.LinAlgError:\n            raise ValueError('Posterior precision matrix is not invertible. This may indicate issues with prior V or data X.')\n        rhs_for_mu_p = V_inv @ mu_prior_vec + XTy\n        mu_p = Sigma_p @ rhs_for_mu_p\n    y_pred_map_raw = X_test_aug @ mu_p\n    y_pred_map_rounded = np.round(y_pred_map_raw, 4)\n    return y_pred_map_rounded.tolist()"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"\n    Computes the Root Mean Squared Logarithmic Error (RMSLE).\n\n    RMSLE is defined as sqrt( (1/n) * sum( (log(1 + predicted_i) - log(1 + actual_i))^2 ) ).\n    The logarithm used is the natural logarithm.\n\n    Args:\n        actual: A list of non-negative, finite ground-truth values.\n                Elements must be numbers (int or float).\n        predicted: A list of non-negative, finite predicted values.\n                   Elements must be numbers (int or float).\n\n    Returns:\n        The calculated RMSLE rounded to four decimal places.\n        Returns -1.0 if the inputs are invalid. Invalid inputs include:\n            - Lists of different lengths.\n            - Lists containing non-numeric elements (as per isinstance check).\n            - Lists containing NaN (Not a Number) or infinite values.\n            - Lists containing negative numbers.\n        Returns 0.0 if both lists are empty (as n=0 implies no error).\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1.0\n\n    def is_valid_element(val) -> bool:\n        if not isinstance(val, (int, float)):\n            return False\n        if isinstance(val, float):\n            if math.isnan(val) or math.isinf(val):\n                return False\n        if val < 0:\n            return False\n        return True\n    if not (all((is_valid_element(x) for x in actual)) and all((is_valid_element(x) for x in predicted))):\n        return -1.0\n    n = len(actual)\n    if n == 0:\n        return 0.0\n    actual_np = np.array(actual, dtype=float)\n    predicted_np = np.array(predicted, dtype=float)\n    log_actual_plus_1 = np.log1p(actual_np)\n    log_predicted_plus_1 = np.log1p(predicted_np)\n    log_differences = log_predicted_plus_1 - log_actual_plus_1\n    squared_log_differences = np.square(log_differences)\n    mean_squared_log_differences = np.mean(squared_log_differences)\n    rmsle = np.sqrt(mean_squared_log_differences)\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n        denominator = window_len - 1\n        window_coeffs = 0.5 - 0.5 * np.cos(2 * math.pi * n / denominator)\n    else:\n        n_intermediate = np.arange(window_len + 1)\n        denominator = window_len\n        window_intermediate_coeffs = 0.5 - 0.5 * np.cos(2 * math.pi * n_intermediate / denominator)\n        window_coeffs = window_intermediate_coeffs[:-1]\n    rounded_coeffs = np.round(window_coeffs, 4)\n    return rounded_coeffs.tolist()"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    num_dimensions = len(shape)\n    if num_dimensions == 4:\n        out_channels = shape[0]\n        in_channels = shape[1]\n        kernel_height = shape[2]\n        kernel_width = shape[3]\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    if y_np.size == 0:\n        m = 0\n    else:\n        m = y_np.shape[0]\n    if m == 0:\n        return []\n    y_mean = np.mean(y_np)\n    if n_estimators <= 0 or learning_rate == 0.0:\n        y_pred_final = np.full(m, y_mean, dtype=float)\n        return [round(val, 4) for val in y_pred_final.tolist()]\n    y_hat = np.full(m, y_mean, dtype=float)\n    ones_column = np.ones((m, 1), dtype=float)\n    X_b = np.concatenate((ones_column, X_np), axis=1)\n    for _ in range(n_estimators):\n        residuals = y_np - y_hat\n        (theta, _, _, _) = np.linalg.lstsq(X_b, residuals, rcond=None)\n        h_t_X = X_b @ theta\n        y_hat = y_hat + learning_rate * h_t_X\n    y_pred_final_rounded = [round(val, 4) for val in y_hat.tolist()]\n    return y_pred_final_rounded"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    is_python_scalar_input = isinstance(x, (int, float))\n    try:\n        x_np = np.array(x, dtype=float)\n    except ValueError:\n        pass\n    x_np = np.array(x, dtype=float)\n    sigma_x_val = 1 / (1 + np.exp(-x_np))\n    if order == 0:\n        result_np = sigma_x_val\n    elif order == 1:\n        result_np = sigma_x_val * (1 - sigma_x_val)\n    elif order == 2:\n        result_np = sigma_x_val * (1 - sigma_x_val) * (1 - 2 * sigma_x_val)\n    rounded_result_np = np.round(result_np, 4)\n    if is_python_scalar_input:\n        return rounded_result_np.item()\n    else:\n        return rounded_result_np.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]] | int:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]] | int\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    try:\n        y_arr = np.array(y, dtype=int)\n    except ValueError:\n        raise ValueError('Input y must contain numerical values convertible to integers.')\n    if y_arr.ndim == 0:\n        y_arr = y_arr.reshape(1)\n    elif y_arr.ndim > 1:\n        if y_arr.size > 0:\n            raise ValueError('Input y must be a 1-D sequence.')\n    if y_arr.size == 0:\n        return []\n    if np.any(y_arr < 0):\n        raise ValueError('All class indices in y must be non-negative.')\n    max_label = np.max(y_arr)\n    if num_classes is None:\n        num_classes = max_label + 1\n    else:\n        if not isinstance(num_classes, int):\n            raise TypeError(f'num_classes must be an integer or None, got {type(num_classes)}.')\n        if num_classes < max_label + 1:\n            return -1\n    one_hot_matrix_np = np.eye(num_classes, dtype=int)[y_arr]\n    return one_hot_matrix_np.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[int]]\n        List of transactions; each transaction is itself a list of items.\n        Items are integers, which are hashable and comparable.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n        Each tuple contains items in ascending (lexicographic) order.\n    \"\"\"\n    num_transactions = len(transactions)\n    if num_transactions == 0:\n        return []\n    min_sup_count = min_sup * num_transactions\n    item_support_counts: dict[int, int] = {}\n    for transaction in transactions:\n        unique_items_in_transaction: set[int] = set(transaction)\n        for item in unique_items_in_transaction:\n            item_support_counts[item] = item_support_counts.get(item, 0) + 1\n    L1: list[tuple[int, ...]] = []\n    for (item, count) in item_support_counts.items():\n        if count >= min_sup_count:\n            L1.append((item,))\n    L1.sort()\n    all_frequent_itemsets: list[tuple[int, ...]] = list(L1)\n    Lk_minus_1: list[tuple[int, ...]] = L1\n    k = 2\n    transaction_item_sets: list[set[int]] = [set(t) for t in transactions]\n    while Lk_minus_1:\n        Ck_generated: list[tuple[int, ...]] = []\n        len_Lk_minus_1 = len(Lk_minus_1)\n        for i in range(len_Lk_minus_1):\n            for j in range(i + 1, len_Lk_minus_1):\n                itemset1 = Lk_minus_1[i]\n                itemset2 = Lk_minus_1[j]\n                if itemset1[:-1] == itemset2[:-1] and itemset1[-1] < itemset2[-1]:\n                    candidate = itemset1 + (itemset2[-1],)\n                    Ck_generated.append(candidate)\n                elif itemset1[:-1] < itemset2[:-1]:\n                    break\n        Ck_pruned: list[tuple[int, ...]] = []\n        Lk_minus_1_set: set[tuple[int, ...]] = set(Lk_minus_1)\n        for candidate in Ck_generated:\n            is_valid_candidate = True\n            for subset in itertools.combinations(candidate, k - 1):\n                if subset not in Lk_minus_1_set:\n                    is_valid_candidate = False\n                    break\n            if is_valid_candidate:\n                Ck_pruned.append(candidate)\n        Ck = Ck_pruned\n        if not Ck:\n            break\n        candidate_counts: dict[tuple[int, ...], int] = {cand: 0 for cand in Ck}\n        for t_set in transaction_item_sets:\n            for candidate_tuple in Ck:\n                is_subset_of_transaction = True\n                for item_in_candidate in candidate_tuple:\n                    if item_in_candidate not in t_set:\n                        is_subset_of_transaction = False\n                        break\n                if is_subset_of_transaction:\n                    candidate_counts[candidate_tuple] += 1\n        Lk: list[tuple[int, ...]] = []\n        for (candidate_tuple, count) in candidate_counts.items():\n            if count >= min_sup_count:\n                Lk.append(candidate_tuple)\n        Lk.sort()\n        if not Lk:\n            break\n        all_frequent_itemsets.extend(Lk)\n        Lk_minus_1 = Lk\n        k += 1\n    return all_frequent_itemsets"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    if not predictions:\n        return ([], [])\n    if not predictions[0]:\n        return ([], [])\n    predictions_np = np.array(predictions, dtype=float)\n    averaged_probabilities_np = np.mean(predictions_np, axis=0)\n    rounded_probabilities_np = np.round(averaged_probabilities_np, 4)\n    predicted_labels_np = np.argmax(rounded_probabilities_np, axis=1)\n    averaged_probabilities_list = rounded_probabilities_np.tolist()\n    predicted_labels_list = predicted_labels_np.tolist()\n    return (averaged_probabilities_list, predicted_labels_list)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]] | int:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    if not isinstance(X, list):\n        return -1\n    if not X:\n        return []\n    try:\n        X_np = np.array(X, dtype=float)\n    except ValueError:\n        return -1\n    if X_np.ndim != 2:\n        return -1\n    (N, C) = X_np.shape\n    M: int\n    Y_np: np.ndarray\n    if Y is None:\n        Y_np = X_np\n        M = N\n    else:\n        if not isinstance(Y, list):\n            return -1\n        if not Y:\n            M = 0\n            if C > 0:\n                return -1\n            Y_np = np.empty((0, C), dtype=float)\n        else:\n            try:\n                Y_np = np.array(Y, dtype=float)\n            except ValueError:\n                return -1\n            if Y_np.ndim != 2:\n                return -1\n            (M, C_Y) = Y_np.shape\n            if C_Y != C:\n                return -1\n    sigma_processed_val: float | np.ndarray\n    is_sigma_scalar: bool\n    if sigma is None:\n        if C == 0:\n            return -1\n        sigma_processed_val = np.sqrt(C / 2.0)\n        if sigma_processed_val <= 0:\n            return -1\n        is_sigma_scalar = True\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma_processed_val = float(sigma)\n        is_sigma_scalar = True\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        if C == 0:\n            sigma_processed_val = np.array([], dtype=float)\n            is_sigma_scalar = False\n        else:\n            if not all((isinstance(s_val, (int, float)) for s_val in sigma)):\n                return -1\n            try:\n                sigma_arr_cand = np.array(sigma, dtype=float)\n            except (TypeError, ValueError):\n                return -1\n            if not np.all(np.isfinite(sigma_arr_cand) & (sigma_arr_cand > 0)):\n                return -1\n            sigma_processed_val = sigma_arr_cand\n            is_sigma_scalar = False\n    else:\n        return -1\n    kernel_matrix_py_list = [[0.0] * M for _ in range(N)]\n    for i in range(N):\n        x_i = X_np[i, :]\n        for j in range(M):\n            y_j = Y_np[j, :]\n            squared_sum_scaled: float\n            if C == 0:\n                squared_sum_scaled = 0.0\n            else:\n                diff = x_i - y_j\n                if is_sigma_scalar:\n                    squared_norm_diff = np.sum(diff ** 2)\n                    squared_sum_scaled = squared_norm_diff / sigma_processed_val ** 2\n                else:\n                    scaled_diff = diff / sigma_processed_val\n                    squared_sum_scaled = np.sum(scaled_diff ** 2)\n            kernel_val = np.exp(-0.5 * squared_sum_scaled)\n            kernel_matrix_py_list[i][j] = round(kernel_val, 4)\n    return kernel_matrix_py_list"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef _calculate_entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculates Shannon entropy for a set of labels.\"\"\"\n    if labels.size == 0:\n        return 0.0\n    (_, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / labels.size\n    entropy = -np.sum((p * np.log2(p) for p in probabilities if p > 0))\n    return entropy\ndef _calculate_majority_label(labels: np.ndarray) -> int:\n    \"\"\"\n    Calculates the majority label in a set of labels.\n    Ties are broken by choosing the smallest label value.\n    Assumes labels is non-empty, as per usage in decision_stump.\n    \"\"\"\n    (unique_labels, counts) = np.unique(labels, return_counts=True)\n    max_count = np.max(counts)\n    majority_candidates = unique_labels[counts == max_count]\n    return np.min(majority_candidates)\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=int)\n    (n_samples, n_features) = X_np.shape\n    if n_samples == 0:\n        if y_np.size == 0:\n            pass\n    H_parent = _calculate_entropy(y_np)\n    current_best_split_params = {'gain': 0.0, 'feature_index': -1, 'threshold': float('inf'), 'left_majority': None, 'right_majority': None}\n    epsilon = 1e-09\n    for j in range(n_features):\n        feature_values = X_np[:, j]\n        unique_sorted_values = np.unique(feature_values)\n        if len(unique_sorted_values) < 2:\n            continue\n        possible_thresholds = []\n        for i in range(len(unique_sorted_values) - 1):\n            thr = (unique_sorted_values[i] + unique_sorted_values[i + 1]) / 2.0\n            possible_thresholds.append(thr)\n        for t in possible_thresholds:\n            left_indices = feature_values <= t\n            right_indices = feature_values > t\n            y_left = y_np[left_indices]\n            y_right = y_np[right_indices]\n            if y_left.size == 0 or y_right.size == 0:\n                continue\n            p_left = y_left.size / n_samples\n            p_right = y_right.size / n_samples\n            H_left = _calculate_entropy(y_left)\n            H_right = _calculate_entropy(y_right)\n            current_gain = H_parent - (p_left * H_left + p_right * H_right)\n            new_potential_best = False\n            if current_gain > current_best_split_params['gain'] + epsilon:\n                new_potential_best = True\n            elif abs(current_gain - current_best_split_params['gain']) < epsilon:\n                if j < current_best_split_params['feature_index']:\n                    new_potential_best = True\n                elif j == current_best_split_params['feature_index']:\n                    if t < current_best_split_params['threshold']:\n                        new_potential_best = True\n            if new_potential_best:\n                current_best_split_params['gain'] = current_gain\n                current_best_split_params['feature_index'] = j\n                current_best_split_params['threshold'] = t\n                current_best_split_params['left_majority'] = _calculate_majority_label(y_left)\n                current_best_split_params['right_majority'] = _calculate_majority_label(y_right)\n    if current_best_split_params['gain'] > epsilon:\n        return (current_best_split_params['feature_index'], round(current_best_split_params['threshold'], 4), current_best_split_params['left_majority'], current_best_split_params['right_majority'])\n    else:\n        overall_majority_label = _calculate_majority_label(y_np)\n        return (-1, None, overall_majority_label, overall_majority_label)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, (list, np.ndarray)):\n        raise TypeError('Input X must be a list of lists or a NumPy ndarray.')\n    if isinstance(X, list):\n        X_np = np.array(X, dtype=object)\n    else:\n        X_np = X\n    if X_np.ndim == 1 and X_np.shape[0] == 0:\n        return [[], []]\n    if X_np.ndim == 0:\n        raise ValueError('Input X must be a 2-D structure (list of lists or 2-D NumPy array).')\n    if X_np.ndim == 1:\n        raise ValueError('Input X must be a 2-D structure. A 1-D array is not a list of samples.')\n    if X_np.shape[0] == 0:\n        return [[], []]\n    if X_np.shape[1] == 0:\n        return [[], X_np.tolist()]\n    try:\n        feature_values = X_np[:, feature_i]\n    except IndexError:\n        raise\n    is_numeric_threshold = isinstance(threshold, (int, float))\n    if is_numeric_threshold:\n        condition_mask = np.zeros(len(feature_values), dtype=bool)\n        for (i, val) in enumerate(feature_values):\n            try:\n                if val >= threshold:\n                    condition_mask[i] = True\n            except TypeError:\n                pass\n    else:\n        condition_mask = feature_values == threshold\n    subset1_np = X_np[condition_mask]\n    subset2_np = X_np[~condition_mask]\n    subset1 = subset1_np.tolist()\n    subset2 = subset2_np.tolist()\n    return [subset1, subset2]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not 0 <= gamma <= 1:\n        return -1\n    if not isinstance(Q, np.ndarray) or Q.ndim != 2:\n        return -1\n    if not isinstance(Q_next, np.ndarray) or Q_next.ndim != 2:\n        return -1\n    batch_size = Q.shape[0]\n    n_actions_q = Q.shape[1]\n    if Q_next.shape[0] != batch_size:\n        return -1\n    if len(actions) != batch_size:\n        return -1\n    if len(rewards) != batch_size:\n        return -1\n    if len(dones) != batch_size:\n        return -1\n    if Q_next.shape[1] != n_actions_q:\n        return -1\n    for i in range(batch_size):\n        action_idx = actions[i]\n        try:\n            if not isinstance(action_idx, int):\n                return -1\n            if not 0 <= action_idx < n_actions_q:\n                return -1\n        except TypeError:\n            return -1\n    y = np.copy(Q)\n    for i in range(batch_size):\n        reward_i = rewards[i]\n        action_i = actions[i]\n        if dones[i]:\n            target = reward_i\n        else:\n            max_q_next_val = np.max(Q_next[i])\n            target = reward_i + gamma * max_q_next_val\n        y[i, action_i] = target\n    y_rounded = np.round(y, 4)\n    result_list = y_rounded.tolist()\n    return result_list"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if len(labels) == 0:\n        return []\n    _cleaned_labels_as_py_int = []\n    current_max_label = 0\n    for x in labels:\n        label_as_py_int: int\n        if isinstance(x, (int, np.integer)):\n            label_as_py_int = int(x)\n        elif isinstance(x, (float, np.floating)):\n            if x == int(x):\n                label_as_py_int = int(x)\n            else:\n                return -1\n        else:\n            try:\n                float_x = float(x)\n                if float_x == int(float_x):\n                    label_as_py_int = int(float_x)\n                else:\n                    return -1\n            except (ValueError, TypeError):\n                return -1\n        if label_as_py_int < 0:\n            return -1\n        _cleaned_labels_as_py_int.append(label_as_py_int)\n        if label_as_py_int > current_max_label:\n            current_max_label = label_as_py_int\n    num_classes_to_use: int\n    if num_classes is None:\n        num_classes_to_use = current_max_label + 1\n    else:\n        if num_classes <= current_max_label:\n            return -1\n        num_classes_to_use = num_classes\n    one_hot_result = []\n    for label_val in _cleaned_labels_as_py_int:\n        row = [0] * num_classes_to_use\n        row[label_val] = 1\n        one_hot_result.append(row)\n    return one_hot_result"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x_np = np.array(x, dtype=float)\n    y_np = np.array(y, dtype=float)\n    n_samples = len(y_np)\n    if n_samples == 0:\n        return []\n    y_mean = np.mean(y_np)\n    y_hat = np.full(n_samples, y_mean, dtype=float)\n    if n_estimators <= 0:\n        return np.round(y_hat, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y_np - y_hat\n        if np.all(residuals == 0.0):\n            break\n        unique_x_sorted = np.unique(x_np)\n        potential_splits = []\n        if len(unique_x_sorted) > 1:\n            potential_splits = unique_x_sorted[:-1]\n        best_split_t = None\n        best_v_L = 0.0\n        best_v_R = 0.0\n        min_sse = float('inf')\n        is_split_found = False\n        if not potential_splits:\n            pass\n        else:\n            for t_candidate in potential_splits:\n                left_indices = np.where(x_np <= t_candidate)[0]\n                right_indices = np.where(x_np > t_candidate)[0]\n                residuals_left = residuals[left_indices]\n                residuals_right = residuals[right_indices]\n                v_L_candidate = np.mean(residuals_left)\n                v_R_candidate = np.mean(residuals_right)\n                sse_left = np.sum((residuals_left - v_L_candidate) ** 2)\n                sse_right = np.sum((residuals_right - v_R_candidate) ** 2)\n                current_sse = sse_left + sse_right\n                if current_sse < min_sse:\n                    min_sse = current_sse\n                    best_split_t = t_candidate\n                    best_v_L = v_L_candidate\n                    best_v_R = v_R_candidate\n                    is_split_found = True\n        stump_prediction_r = np.zeros_like(residuals, dtype=float)\n        if is_split_found:\n            stump_prediction_r[x_np <= best_split_t] = best_v_L\n            stump_prediction_r[x_np > best_split_t] = best_v_R\n        else:\n            mean_residual_all = np.mean(residuals)\n            stump_prediction_r = np.full_like(residuals, mean_residual_all, dtype=float)\n        y_hat += learning_rate * stump_prediction_r\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    if next_state is None:\n        expected_value_at_s_prime = 0.0\n    else:\n        q_values_at_s_prime = q_table[next_state]\n        num_actions = len(q_values_at_s_prime)\n        if num_actions == 0:\n            expected_value_at_s_prime = 0.0\n        else:\n            max_q_at_s_prime = np.max(q_values_at_s_prime)\n            sum_q_at_s_prime = sum(q_values_at_s_prime)\n            expected_value_at_s_prime = (1 - epsilon) * max_q_at_s_prime + epsilon / num_actions * sum_q_at_s_prime\n    td_target = reward + gamma * expected_value_at_s_prime\n    q_table[state][action] += lr * (td_target - q_table[state][action])\n    for i in range(len(q_table)):\n        for j in range(len(q_table[i])):\n            q_table[i][j] = round(q_table[i][j], 4)\n    return q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train_parts = []\n    Y_train_parts = []\n    X_val_parts = []\n    Y_val_parts = []\n    for i in range(m):\n        label = (i - 0.5) * 2.0\n        x_cluster_offset = np.floor(i / 2)\n        x_min = (x_cluster_offset + 0.1) * 10.0\n        x_max = (x_cluster_offset + 0.9) * 10.0\n        y_row_index = i % 2\n        y_min = (y_row_index * interval + 0.1) * 10.0\n        y_max = (y_row_index * interval + 0.9) * 10.0\n        if n_train > 0:\n            x_coords_train = np.random.uniform(low=x_min, high=x_max, size=n_train)\n            y_coords_train = np.random.uniform(low=y_min, high=y_max, size=n_train)\n            x_coords_train_rounded = np.round(x_coords_train, 4)\n            y_coords_train_rounded = np.round(y_coords_train, 4)\n            class_X_train = np.column_stack((x_coords_train_rounded, y_coords_train_rounded))\n            X_train_parts.append(class_X_train)\n            class_Y_train = np.full(n_train, label)\n            Y_train_parts.append(class_Y_train)\n        if n_val > 0:\n            x_coords_val = np.random.uniform(low=x_min, high=x_max, size=n_val)\n            y_coords_val = np.random.uniform(low=y_min, high=y_max, size=n_val)\n            x_coords_val_rounded = np.round(x_coords_val, 4)\n            y_coords_val_rounded = np.round(y_coords_val, 4)\n            class_X_val = np.column_stack((x_coords_val_rounded, y_coords_val_rounded))\n            X_val_parts.append(class_X_val)\n            class_Y_val = np.full(n_val, label)\n            Y_val_parts.append(class_Y_val)\n    if X_train_parts:\n        X_train = np.concatenate(X_train_parts, axis=0)\n    else:\n        X_train = np.empty((0, 2))\n    if Y_train_parts:\n        Y_train = np.concatenate(Y_train_parts, axis=0)\n    else:\n        Y_train = np.empty((0,))\n    if X_val_parts:\n        X_val = np.concatenate(X_val_parts, axis=0)\n    else:\n        X_val = np.empty((0, 2))\n    if Y_val_parts:\n        Y_val = np.concatenate(Y_val_parts, axis=0)\n    else:\n        Y_val = np.empty((0,))\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n        It's crucial that t is 1-indexed (starts at 1).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape and broadly same type as ``w``)\n        * ``m_new`` \u2013 updated first moment (corresponds to m_t in Adam paper, to be used as m_prev in next step)\n        * ``v_new`` \u2013 updated second moment (corresponds to v_t in Adam paper, to be used as v_prev in next step)\n    \"\"\"\n    if m_prev is None:\n        if isinstance(w, np.ndarray):\n            m_prev = np.zeros_like(w, dtype=float)\n        else:\n            m_prev = 0.0\n    if v_prev is None:\n        if isinstance(w, np.ndarray):\n            v_prev = np.zeros_like(w, dtype=float)\n        else:\n            v_prev = 0.0\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat_t = m_t / (1 - b1 ** t)\n    v_hat_t = v_t / (1 - b2 ** t)\n    denominator = np.sqrt(v_hat_t) + eps\n    w_new = w - learning_rate * m_hat_t / denominator\n    return (w_new, m_t, v_t)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if not rewards:\n        return []\n    num_arms = len(rewards[0])\n    if num_arms == 0:\n        return []\n    if seed is not None:\n        np.random.seed(seed)\n    estimated_values = np.full(num_arms, ev_prior, dtype=float)\n    pull_counts = np.zeros(num_arms, dtype=int)\n    num_timesteps = len(rewards)\n    for t in range(num_timesteps):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            chosen_arm = np.argmax(estimated_values)\n        observed_reward = rewards[t][chosen_arm]\n        pull_counts[chosen_arm] += 1\n        current_arm_pull_count = pull_counts[chosen_arm]\n        estimated_values[chosen_arm] = estimated_values[chosen_arm] + (observed_reward - estimated_values[chosen_arm]) / current_arm_pull_count\n    final_rounded_estimates = [round(val, 4) for val in estimated_values]\n    return final_rounded_estimates"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n    labels = [-2] * n_samples\n    current_cluster_id = 0\n\n    def get_neighbors(point_idx: int) -> list[int]:\n        neighbors = []\n        for i in range(n_samples):\n            distance = np.linalg.norm(data[point_idx] - data[i])\n            if distance <= eps:\n                neighbors.append(i)\n        return neighbors\n    for i in range(n_samples):\n        if labels[i] != -2:\n            continue\n        neighbor_indices = get_neighbors(i)\n        if len(neighbor_indices) < min_samples:\n            labels[i] = -1\n            continue\n        labels[i] = current_cluster_id\n        queue = list(neighbor_indices)\n        head = 0\n        while head < len(queue):\n            current_point_idx = queue[head]\n            head += 1\n            if labels[current_point_idx] == -1:\n                labels[current_point_idx] = current_cluster_id\n                continue\n            if labels[current_point_idx] != -2:\n                continue\n            labels[current_point_idx] = current_cluster_id\n            current_neighbor_indices = get_neighbors(current_point_idx)\n            if len(current_neighbor_indices) >= min_samples:\n                for new_neighbor_idx in current_neighbor_indices:\n                    if labels[new_neighbor_idx] == -2 or labels[new_neighbor_idx] == -1:\n                        queue.append(new_neighbor_idx)\n        current_cluster_id += 1\n    return labels"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    try:\n        y_arr = np.asarray(y)\n    except Exception as e:\n        raise TypeError(f'Input y could not be converted to a NumPy array. Original error: {e}')\n    if y_arr.ndim == 0:\n        raise ValueError('Input y must be a 1-D array-like sequence, not a scalar.')\n    if y_arr.ndim > 1:\n        raise ValueError(f'Input y must be a 1-D array-like sequence. Got ndim={y_arr.ndim}.')\n    if not np.issubdtype(y_arr.dtype, np.integer):\n        if np.any(y_arr != y_arr.astype(int)):\n            raise ValueError('Input y must contain integer labels. Found non-integer values (e.g., floats with fractional parts).')\n        y_arr = y_arr.astype(int)\n    if np.any(y_arr < 0):\n        raise ValueError('All labels in y must be non-negative.')\n    n = y_arr.shape[0]\n    if num_classes is None:\n        if n == 0:\n            num_classes_actual = 0\n        else:\n            num_classes_actual = np.max(y_arr) + 1\n    else:\n        if not isinstance(num_classes, int):\n            raise TypeError('num_classes must be an integer or None.')\n        if num_classes < 0:\n            raise ValueError('num_classes cannot be negative.')\n        num_classes_actual = num_classes\n        if n > 0:\n            if np.any(y_arr >= num_classes_actual):\n                offending_label_idx = np.where(y_arr >= num_classes_actual)[0][0]\n                offending_label = y_arr[offending_label_idx]\n                raise ValueError(f'A label ({offending_label}) is not smaller than num_classes ({num_classes_actual}).')\n    result = np.zeros((n, num_classes_actual), dtype=int)\n    if n > 0:\n        result[np.arange(n), y_arr] = 1\n    return result"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n    X_train_np = np.array(X_train, dtype=float)\n    y_train_np = np.array(y_train, dtype=float)\n\n    def _calculate_sse(y_values_np: np.ndarray) -> float:\n        if len(y_values_np) == 0:\n            return 0.0\n        mean_y = np.mean(y_values_np)\n        sse = np.sum((y_values_np - mean_y) ** 2)\n        return float(sse)\n\n    def _find_best_split(X_node_np: np.ndarray, y_node_np: np.ndarray):\n        n_samples = len(y_node_np)\n        if n_samples < 2:\n            return None\n        best_split_info = {'threshold': None, 'left_indices': None, 'right_indices': None, 'sse': float('inf')}\n        unique_X_sorted = np.unique(X_node_np)\n        if len(unique_X_sorted) < 2:\n            return None\n        split_candidates = (unique_X_sorted[:-1] + unique_X_sorted[1:]) / 2.0\n        for threshold_val in split_candidates:\n            left_indices = np.where(X_node_np <= threshold_val)[0]\n            right_indices = np.where(X_node_np > threshold_val)[0]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            y_left = y_node_np[left_indices]\n            y_right = y_node_np[right_indices]\n            current_total_sse = _calculate_sse(y_left) + _calculate_sse(y_right)\n            if current_total_sse < best_split_info['sse']:\n                best_split_info['sse'] = current_total_sse\n                best_split_info['threshold'] = threshold_val\n                best_split_info['left_indices'] = left_indices\n                best_split_info['right_indices'] = right_indices\n        if best_split_info['threshold'] is None:\n            return None\n        return (best_split_info['threshold'], best_split_info['left_indices'], best_split_info['right_indices'])\n\n    def _build_tree(current_X_np: np.ndarray, current_y_np: np.ndarray, current_depth: int):\n        if current_depth == max_depth or len(current_y_np) < 2:\n            leaf_value = float(np.mean(current_y_np))\n            return {'is_leaf': True, 'value': leaf_value}\n        split_result = _find_best_split(current_X_np, current_y_np)\n        if split_result is None:\n            leaf_value = float(np.mean(current_y_np))\n            return {'is_leaf': True, 'value': leaf_value}\n        (threshold, left_indices, right_indices) = split_result\n        (X_left_child, y_left_child) = (current_X_np[left_indices], current_y_np[left_indices])\n        (X_right_child, y_right_child) = (current_X_np[right_indices], current_y_np[right_indices])\n        left_subtree = _build_tree(X_left_child, y_left_child, current_depth + 1)\n        right_subtree = _build_tree(X_right_child, y_right_child, current_depth + 1)\n        return {'is_leaf': False, 'threshold': float(threshold), 'left': left_subtree, 'right': right_subtree}\n    tree_root_node = _build_tree(X_train_np, y_train_np, 0)\n\n    def _predict_one_sample(x_value: float | int, node: dict) -> float:\n        if node['is_leaf']:\n            return node['value']\n        if float(x_value) <= node['threshold']:\n            return _predict_one_sample(x_value, node['left'])\n        else:\n            return _predict_one_sample(x_value, node['right'])\n    predictions_list = [_predict_one_sample(x_val, tree_root_node) for x_val in X_test]\n    return predictions_list"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values (int or float).\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if len(x) == 0:\n        return []\n    diagonal_matrix_np = np.diag(x)\n    result: list[list[int | float]] = diagonal_matrix_np.tolist()\n    return result"}
{"task_id": 491, "completion_id": 0, "solution": "def _fp_growth_mine_recursive(tree_root, current_header_table, min_sup, prefix, frequent_itemsets_result, items_to_iterate_ordered):\n    path_from_root = _is_single_path(tree_root)\n    if path_from_root is not None:\n        path_items_only = [p_item for (p_item, p_count) in path_from_root]\n        for i in range(1, len(path_items_only) + 1):\n            for comb_items in itertools.combinations(path_items_only, i):\n                new_itemset = prefix + comb_items\n                frequent_itemsets_result.append(tuple(sorted(list(new_itemset))))\n        return\n    for item in reversed(items_to_iterate_ordered):\n        new_prefix_extended = prefix + (item,)\n        frequent_itemsets_result.append(tuple(sorted(list(new_prefix_extended))))\n        conditional_patterns = []\n        curr_node_for_item = current_header_table[item][0]\n        while curr_node_for_item is not None:\n            path_segment_count = curr_node_for_item.count\n            cond_path_segment = []\n            parent_tracker = curr_node_for_item.parent\n            while parent_tracker.item is not None:\n                cond_path_segment.append(parent_tracker.item)\n                parent_tracker = parent_tracker.parent\n            if cond_path_segment:\n                conditional_patterns.append((list(reversed(cond_path_segment)), path_segment_count))\n            curr_node_for_item = curr_node_for_item.node_link\n        if not conditional_patterns:\n            continue\n        cond_item_counts = collections.Counter()\n        for (path_seg, path_seg_count_val) in conditional_patterns:\n            for itm_in_path_seg in path_seg:\n                cond_item_counts[itm_in_path_seg] += path_seg_count_val\n        cond_frequent_items_with_counts = {itm: c for (itm, c) in cond_item_counts.items() if c >= min_sup}\n        if not cond_frequent_items_with_counts:\n            continue\n        cond_f_list_items_ordered = sorted(cond_frequent_items_with_counts.keys(), key=lambda i: (-cond_frequent_items_with_counts[i], i))\n        cond_tree_root = FPNode(None, 0, None)\n        cond_header_table = {itm: [None, cond_frequent_items_with_counts[itm]] for itm in cond_f_list_items_ordered}\n        item_to_pos_cond = {item_k: pos for (pos, item_k) in enumerate(cond_f_list_items_ordered)}\n        for (path_seg, path_seg_count_val) in conditional_patterns:\n            filtered_cond_trx = [itm for itm in path_seg if itm in cond_frequent_items_with_counts]\n            filtered_cond_trx.sort(key=lambda itm: item_to_pos_cond[itm])\n            if filtered_cond_trx:\n                _insert_tree(filtered_cond_trx, cond_tree_root, cond_header_table, path_seg_count_val)\n        if cond_tree_root.children:\n            _fp_growth_mine_recursive(cond_tree_root, cond_header_table, min_sup, tuple(sorted(list(new_prefix_extended))), frequent_itemsets_result, cond_f_list_items_ordered)\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    if not isinstance(min_sup, int) or not min_sup > 0:\n        raise ValueError('min_sup must be an integer > 0')\n    frequent_itemsets_result = []\n    item_counts = collections.Counter()\n    for trx in transactions:\n        for item in trx:\n            item_counts[item] += 1\n    frequent_items_initial_counts = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    if not frequent_items_initial_counts:\n        return []\n    f_list_items_ordered_global = sorted(frequent_items_initial_counts.keys(), key=lambda item: (-frequent_items_initial_counts[item], item))\n    item_to_pos_global = {item: pos for (pos, item) in enumerate(f_list_items_ordered_global)}\n    processed_transactions_for_tree = []\n    for trx in transactions:\n        filtered_trx = [item for item in trx if item in frequent_items_initial_counts]\n        filtered_trx.sort(key=lambda item: item_to_pos_global[item])\n        if filtered_trx:\n            processed_transactions_for_tree.append(filtered_trx)\n    root = FPNode(None, 0, None)\n    header_table_global = {item: [None, frequent_items_initial_counts[item]] for item in f_list_items_ordered_global}\n    for ordered_trx_items in processed_transactions_for_tree:\n        _insert_tree(ordered_trx_items, root, header_table_global, 1)\n    _fp_growth_mine_recursive(root, header_table_global, min_sup, tuple(), frequent_itemsets_result, f_list_items_ordered_global)\n    frequent_itemsets_result.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets_result"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]] | int:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    if not X:\n        return []\n    X_np = np.array(X, dtype=float)\n    (n_samples, n_features) = X_np.shape\n    feature_definitions = []\n    for d_current in range(degree + 1):\n        for indices_tuple in combinations_with_replacement(range(n_features), d_current):\n            feature_definitions.append(indices_tuple)\n    num_output_features = len(feature_definitions)\n    X_poly_np = np.empty((n_samples, num_output_features), dtype=float)\n    for (j, indices_tuple) in enumerate(feature_definitions):\n        if not indices_tuple:\n            X_poly_np[:, j] = 1.0\n        else:\n            selected_features_for_all_samples = X_np[:, list(indices_tuple)]\n            X_poly_np[:, j] = np.prod(selected_features_for_all_samples, axis=1)\n    return X_poly_np.tolist()"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    try:\n        data = np.asarray(y, dtype=np.float64)\n    except (TypeError, ValueError) as e:\n        raise e\n    if data.size == 0:\n        return -1\n    mse_value = np.var(data)\n    rounded_mse = round(float(mse_value), 4)\n    return rounded_mse"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D Python list or NumPy array containing numeric values.\n           Can also be a scalar, which is treated as a length-one vector.\n           If x is a multi-dimensional array-like structure, it will be flattened\n           to ensure the output lists are 1-D.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places. The lists are 1-D.\n    \"\"\"\n    x_arr_temp = np.array(x, dtype=float)\n    x_arr = x_arr_temp.flatten()\n    y_arr = slope * x_arr + intercept\n    grad_arr = np.full_like(x_arr, slope)\n    grad2_arr = np.zeros_like(x_arr)\n    y_rounded = np.round(y_arr, 4)\n    grad_rounded = np.round(grad_arr, 4)\n    grad2_rounded = np.round(grad2_arr, 4)\n    y_list = y_rounded.tolist()\n    grad_list = grad_rounded.tolist()\n    grad2_list = grad2_rounded.tolist()\n    return (y_list, grad_list, grad2_list)"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        pass\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    if n_samples == 0:\n        return []\n    standardized_data = np.array(data, dtype=float)\n    means = np.mean(standardized_data, axis=0)\n    standardized_data -= means\n    pop_std_devs = np.std(standardized_data, axis=0, ddof=0)\n    for j in range(n_features):\n        if pop_std_devs[j] != 0:\n            standardized_data[:, j] /= pop_std_devs[j]\n    if n_samples <= 1:\n        cov_matrix = np.zeros((n_features, n_features))\n    else:\n        cov_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(sorted_eigenvectors.shape[1]):\n        eigenvector_col = sorted_eigenvectors[:, i]\n        max_abs_val_idx = np.argmax(np.abs(eigenvector_col))\n        if eigenvector_col[max_abs_val_idx] < 0:\n            sorted_eigenvectors[:, i] = -eigenvector_col\n    projection_matrix_W = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ projection_matrix_W\n    rounded_projected_data = np.round(projected_data, 4)\n    return rounded_projected_data.tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_idx = None\n        self.threshold = None\n        self.value_left = 0.0\n        self.value_right = 0.0\n\n    def fit(self, X: np.ndarray, y: np.ndarray):\n        (n_samples, n_features) = X.shape\n        if n_samples == 0 or n_features == 0:\n            return\n        best_mse = float('inf')\n        if y.ndim > 1:\n            y = y.ravel()\n        for feature_idx_loop in range(n_features):\n            feature_values = X[:, feature_idx_loop]\n            unique_thresholds = np.unique(feature_values)\n            for threshold_loop in unique_thresholds:\n                left_mask = feature_values <= threshold_loop\n                right_mask = feature_values > threshold_loop\n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                current_val_left = np.mean(y_left) if len(y_left) > 0 else 0.0\n                current_val_right = np.mean(y_right) if len(y_right) > 0 else 0.0\n                mse_left = np.sum((y_left - current_val_left) ** 2)\n                mse_right = np.sum((y_right - current_val_right) ** 2)\n                current_mse = mse_left + mse_right\n                if current_mse < best_mse:\n                    best_mse = current_mse\n                    self.feature_idx = feature_idx_loop\n                    self.threshold = threshold_loop\n                    self.value_left = current_val_left\n                    self.value_right = current_val_right\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        n_samples = X.shape[0]\n        if self.feature_idx is None:\n            return np.full(n_samples, 0.0)\n        if X.ndim == 1 or X.shape[1] == 0:\n            return np.full(n_samples, 0.0)\n        feature_col = X[:, self.feature_idx]\n        predictions = np.where(feature_col <= self.threshold, self.value_left, self.value_right)\n        return predictions\ndef gradient_boosting_classifier(X_train_list: list[list[float]], y_train_list: list[int], X_test_list: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train_list)\n    y_train = np.array(y_train_list, dtype=float)\n    X_test = np.array(X_test_list)\n    n_train_samples = X_train.shape[0]\n    n_test_samples = X_test.shape[0]\n    if n_train_samples == 0:\n        c = 0.5\n    else:\n        c = np.mean(y_train) if len(y_train) > 0 else 0.5\n    F_train = np.full(n_train_samples, c)\n    F_test = np.full(n_test_samples, c)\n    for _ in range(n_estimators):\n        if n_train_samples == 0:\n            break\n        residuals = y_train - F_train\n        stump = DecisionStump()\n        current_X_train = X_train\n        if current_X_train.ndim == 1:\n            pass\n        stump.fit(current_X_train, residuals)\n        h_m_train_preds = stump.predict(current_X_train)\n        F_train += learning_rate * h_m_train_preds\n        h_m_test_preds = stump.predict(X_test)\n        F_test += learning_rate * h_m_test_preds\n    predicted_labels = [1 if score > 0.5 else 0 for score in F_test]\n    return predicted_labels"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the sigmoid function element-wise.\n    \n    Args:\n        x: Input NumPy array.\n        \n    Returns:\n        NumPy array after applying sigmoid function.\n    \"\"\"\n    return 1.0 / (1.0 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    m = X.shape[0]\n    h0_activations = np.dot(X, W) + hbias\n    h0_prob = sigmoid(h0_activations)\n    if k == 0:\n        v_k_prob = X\n        h_k_prob = h0_prob\n    else:\n        current_h_prob_for_gibbs = h0_prob\n        for _ in range(k):\n            v_k_activations = np.dot(current_h_prob_for_gibbs, W.T) + vbias\n            current_v_prob_for_gibbs = sigmoid(v_k_activations)\n            h_k_activations = np.dot(current_v_prob_for_gibbs, W) + hbias\n            current_h_prob_for_gibbs = sigmoid(h_k_activations)\n        v_k_prob = current_v_prob_for_gibbs\n        h_k_prob = current_h_prob_for_gibbs\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    W_new_rounded = np.round(W_new, 4)\n    return W_new_rounded.tolist()"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.0.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector. It can be a Python list of floats or integers,\n        or a NumPy 1-D array of floats or integers.\n    y : list[float] | np.ndarray\n        Second input vector. It can be a Python list of floats or integers,\n        or a NumPy 1-D array of floats or integers.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places.\n        Returns -1.0 if the input vectors have different lengths.\n\n    Raises\n    ------\n    ValueError\n        If inputs cannot be converted to 1D numerical arrays (e.g., contain\n        non-numeric types like strings, or are multi-dimensional structures\n        that do not represent 1D vectors).\n    \"\"\"\n    try:\n        x_arr = np.asarray(x, dtype=float)\n        y_arr = np.asarray(y, dtype=float)\n    except ValueError as e:\n        raise ValueError(f'Input vectors must contain real numbers and be convertible to 1D numerical arrays. Original error: {e}')\n    if x_arr.ndim != 1:\n        raise ValueError(f'Input vector x must be one-dimensional. Detected {x_arr.ndim} dimensions.')\n    if y_arr.ndim != 1:\n        raise ValueError(f'Input vector y must be one-dimensional. Detected {y_arr.ndim} dimensions.')\n    if x_arr.shape[0] != y_arr.shape[0]:\n        return -1.0\n    if x_arr.shape[0] == 0:\n        return 0.0\n    abs_differences = np.abs(x_arr - y_arr)\n    max_difference = np.max(abs_differences)\n    rounded_distance = round(max_difference, 4)\n    return float(rounded_distance)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    batch_size = y.shape[0]\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1.0 - eps)\n    recon_loss_terms = y * np.log(y_pred_clipped) + (1.0 - y) * np.log(1.0 - y_pred_clipped)\n    recon_loss_sum_total = -np.sum(recon_loss_terms)\n    sigma_sq = np.exp(t_log_var)\n    kl_terms = 1.0 + t_log_var - t_mean ** 2 - sigma_sq\n    kl_divergence_sum_total = -0.5 * np.sum(kl_terms)\n    total_batch_loss = recon_loss_sum_total + kl_divergence_sum_total\n    average_loss = total_batch_loss / batch_size\n    rounded_average_loss = round(average_loss, 6)\n    return rounded_average_loss"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    w_np = np.array(w, dtype=float)\n    V_np = np.array(V, dtype=float)\n    n_samples = X_np.shape[0]\n    if n_samples == 0:\n        return []\n    linear_term = X_np @ w_np\n    if X_np.shape[1] == 0 or V_np.shape[1] == 0:\n        interaction_term = np.zeros(n_samples)\n    else:\n        xv_prod = X_np @ V_np\n        term1_sum_sq = xv_prod ** 2\n        x_sq_v_sq_prod = X_np ** 2 @ V_np ** 2\n        interaction_inside_sum = term1_sum_sq - x_sq_v_sq_prod\n        sum_over_f = np.sum(interaction_inside_sum, axis=1)\n        interaction_term = 0.5 * sum_over_f\n    y_pred_np = w0 + linear_term + interaction_term\n    y_pred_rounded = np.round(y_pred_np, 4)\n    return y_pred_rounded.tolist()"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    is_python_scalar_input = isinstance(z, (int, float))\n    try:\n        z_arr = np.asarray(z, dtype=np.float64)\n    except Exception as e:\n        pass\n    z_arr = np.asarray(z, dtype=np.float64)\n    sig_z = np.zeros_like(z_arr, dtype=np.float64)\n    positive_or_zero_mask = z_arr >= 0\n    sig_z[positive_or_zero_mask] = 1.0 / (1.0 + np.exp(-z_arr[positive_or_zero_mask]))\n    negative_mask = z_arr < 0\n    exp_values_for_negative_z = np.exp(z_arr[negative_mask])\n    sig_z[negative_mask] = exp_values_for_negative_z / (1.0 + exp_values_for_negative_z)\n    rounded_sig_z = np.round(sig_z, 4)\n    if is_python_scalar_input:\n        return rounded_sig_z.item()\n    else:\n        return rounded_sig_z.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable, Any\nimport functools\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    @functools.wraps(function)\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> Any:\n        \"\"\"\n        Wrapper function that performs pre-processing on actual and predicted\n        arrays before calling the decorated metric function.\n        \"\"\"\n        actual_processed = actual\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual_processed = actual.argmax(axis=1)\n        predicted_processed = predicted\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted_processed = predicted.argmax(axis=1)\n        return function(actual_processed, predicted_processed)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list, or NumPy ndarray of sigmoid outputs.\n           Can be scalar, 1-D, or 2-D.\n           Python lists can be nested (e.g., for 2-D).\n           NumPy inputs can also include NumPy scalar types (e.g., np.float64, np.int32).\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n        - If input is scalar (Python float/int, NumPy scalar), returns Python float.\n        - If input is 1-D list or 1-D NumPy array, returns Python list of floats.\n        - If input is 2-D list or 2-D NumPy array, returns Python nested list of floats.\n        - If input is an empty list `[]`, returns an empty list `[]`.\n        - If input is a list containing empty lists, e.g. `[[]]`, returns `[[]]`.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        grad_array = z * (1 - z)\n        rounded_array = np.round(grad_array, 4)\n        if rounded_array.ndim == 0:\n            return rounded_array.item()\n        else:\n            return rounded_array.tolist()\n    elif isinstance(z, (int, float, np.generic)):\n        val = z * (1 - z)\n        rounded_val = np.round(val, 4)\n        if isinstance(rounded_val, np.generic):\n            return rounded_val.item()\n        else:\n            return float(rounded_val)\n    elif isinstance(z, list):\n        return [sigmoid_grad(element) for element in z]\n    else:\n        raise TypeError(f'Input type not supported. Must be a Python scalar (int, float), Python list (or nested list), NumPy ndarray, or NumPy scalar. Received type: {type(z)}')"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    if grid_n == 0:\n        return []\n    X_np = np.array(X, dtype=float)\n    if X_np.ndim != 2 or X_np.shape[1] != 2:\n        raise ValueError('Input data X must be a list of [x1, x2] pairs, which forms an n x 2 array where n > 0 to determine the grid range.')\n    (x1_min, x1_max) = (X_np[:, 0].min(), X_np[:, 0].max())\n    (x2_min, x2_max) = (X_np[:, 1].min(), X_np[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (xx1, xx2) = np.meshgrid(x1_plot, x2_plot, indexing='xy')\n    (w1, w2) = (W[0], W[1])\n    Z_values = w1 * xx1 + w2 * xx2 + b\n    labels_np = np.where(Z_values >= 0, 1, -1)\n    labels_list = labels_np.tolist()\n    return labels_list"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (n_samples_train, n_features) = X_train.shape\n    epsilon = 1e-09\n    means_params = np.zeros((2, n_features))\n    stds_params = np.zeros((2, n_features))\n    priors_params = np.zeros(2)\n    classes = [0, 1]\n    for c in classes:\n        X_c = X_train[y_train == c]\n        n_c = X_c.shape[0]\n        if n_c == 0:\n            priors_params[c] = 0.0\n            means_params[c, :] = 0.0\n            stds_params[c, :] = epsilon\n        else:\n            priors_params[c] = n_c / float(n_samples_train)\n            means_params[c, :] = np.mean(X_c, axis=0)\n            stds_params[c, :] = np.std(X_c, axis=0) + epsilon\n    m_samples_test = X_test.shape[0]\n    log_posteriors_for_classes = np.zeros((m_samples_test, 2))\n    log_sqrt_2pi = 0.5 * np.log(2 * np.pi)\n    for c in classes:\n        if priors_params[c] == 0:\n            log_posteriors_for_classes[:, c] = -np.inf\n            continue\n        log_prior_c = np.log(priors_params[c])\n        means_c = means_params[c, :]\n        stds_c = stds_params[c, :]\n        log_stds_c_broadcast = np.log(stds_c)\n        log_coeff_per_feature = -log_sqrt_2pi - log_stds_c_broadcast\n        sq_diff_matrix = (X_test - means_c) ** 2\n        var_c_broadcast = stds_c ** 2\n        exp_term_matrix = -sq_diff_matrix / (2 * var_c_broadcast)\n        log_likelihood_matrix = log_coeff_per_feature + exp_term_matrix\n        sum_log_likelihoods_c = np.sum(log_likelihood_matrix, axis=1)\n        log_posteriors_for_classes[:, c] = log_prior_c + sum_log_likelihoods_c\n    predicted_class_indices = np.argmax(log_posteriors_for_classes, axis=1)\n    predictions = predicted_class_indices.tolist()\n    return predictions"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost for binary classification.\n\n    The formula for binary cross-entropy (also known as log-loss) is:\n               J = -1/m * \u03a3 [ y*ln(a) + (1-y)*ln(1-a) ]\n    where:\n        m is the number of training examples.\n        y is an element of the ground-truth label vector Y (0 or 1).\n        a is an element of the model's predicted probability vector AL.\n\n    Arguments:\n    AL -- NumPy array of predicted probabilities from the model's last layer.\n          These values should be in the open interval (0,1).\n          Shape must be (1, m) or (m,), where m is the number of examples.\n    Y  -- NumPy array of true labels (ground-truth). Each label must be 0 or 1.\n          Shape must be identical to AL: (1, m) or (m,).\n\n    Returns:\n    float -- The calculated binary cross-entropy cost as a built-in Python float.\n             The internal precision of the calculation is maintained; any rounding\n             (e.g., to 4 decimal places for printing) should be handled by the caller.\n    \"\"\"\n    m = Y.size\n    if m == 0:\n        return 0.0\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    cost_terms = Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)\n    sum_of_cost_terms = np.sum(cost_terms)\n    cost = -(1 / m) * sum_of_cost_terms\n    return float(cost)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n                    'pi': initial state probabilities (N,)\n                    'A': state transition matrix (N x N)\n                    'B': emission matrix (N x M)\n        observations (list[int]): Sequence of observation indices (length T).\n        t (int): Time step for which the posterior distribution is required.\n                 Must be in the range [0, T-1].\n\n    Returns:\n        list[float]: Posterior probabilities \u03b3\u209c(i) for each state s\u1d62 at time t.\n                     The list has N elements.\n                     Returns an empty list if t is out of range [0, T-1]\n                     or if the observations sequence is empty.\n    \"\"\"\n    T = len(observations)\n    if not 0 <= t < T:\n        return []\n    pi = np.array(hmm['pi'], dtype=float)\n    A = np.array(hmm['A'], dtype=float)\n    B = np.array(hmm['B'], dtype=float)\n    N = A.shape[0]\n    alpha = np.zeros((T, N), dtype=float)\n    alpha[0, :] = pi * B[:, observations[0]]\n    for tau in range(1, T):\n        obs_at_tau = observations[tau]\n        for j in range(N):\n            sum_prev_alpha_A = 0.0\n            for i in range(N):\n                sum_prev_alpha_A += alpha[tau - 1, i] * A[i, j]\n            alpha[tau, j] = sum_prev_alpha_A * B[j, obs_at_tau]\n    beta = np.zeros((T, N), dtype=float)\n    beta[T - 1, :] = 1.0\n    for tau in range(T - 2, -1, -1):\n        obs_at_tau_plus_1 = observations[tau + 1]\n        for i in range(N):\n            sum_A_B_beta = 0.0\n            for j in range(N):\n                sum_A_B_beta += A[i, j] * B[j, obs_at_tau_plus_1] * beta[tau + 1, j]\n            beta[tau, i] = sum_A_B_beta\n    numerator_terms = alpha[t, :] * beta[t, :]\n    denominator = np.sum(numerator_terms)\n    if denominator == 0.0:\n        gamma_t_vector = [0.0] * N\n    else:\n        gamma_t_vector_np = numerator_terms / denominator\n        gamma_t_vector = gamma_t_vector_np.tolist()\n    rounded_gamma_t_vector = [round(val, 4) for val in gamma_t_vector]\n    return rounded_gamma_t_vector"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n    NOISE = -1\n    UNVISITED = 0\n    labels = [UNVISITED] * n_samples\n    if data.shape[1] == 0:\n        dist_matrix = np.zeros((n_samples, n_samples))\n    else:\n        sum_sq_rows = np.sum(data ** 2, axis=1)\n        dist_sq = -2 * np.dot(data, data.T) + sum_sq_rows[:, np.newaxis] + sum_sq_rows[np.newaxis, :]\n        dist_sq[dist_sq < 0] = 0\n        dist_matrix = np.sqrt(dist_sq)\n    neighborhoods = []\n    for i in range(n_samples):\n        neighbor_indices = np.where(dist_matrix[i, :] <= eps)[0]\n        neighborhoods.append(list(neighbor_indices))\n    is_core = [False] * n_samples\n    for i in range(n_samples):\n        if len(neighborhoods[i]) >= min_samples:\n            is_core[i] = True\n    current_cluster_id = 0\n    for i in range(n_samples):\n        if labels[i] != UNVISITED or not is_core[i]:\n            continue\n        current_cluster_id += 1\n        labels[i] = current_cluster_id\n        q = deque()\n        q.append(i)\n        while q:\n            current_point_idx = q.popleft()\n            for neighbor_idx in neighborhoods[current_point_idx]:\n                if labels[neighbor_idx] == UNVISITED:\n                    labels[neighbor_idx] = current_cluster_id\n                    if is_core[neighbor_idx]:\n                        q.append(neighbor_idx)\n                elif labels[neighbor_idx] == NOISE:\n                    labels[neighbor_idx] = current_cluster_id\n    for i in range(n_samples):\n        if labels[i] == UNVISITED:\n            labels[i] = NOISE\n    return labels"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef _gmm_multivariate_gaussian_pdf(X: np.ndarray, mean: np.ndarray, cov: np.ndarray, D: int, min_pdf_val: float=1e-300) -> np.ndarray:\n    \"\"\"\n    Helper function to compute Multivariate Gaussian PDF values.\n    Uses log-probabilities for numerical stability.\n\n    Args:\n        X (np.ndarray): Data points, shape (N, D).\n        mean (np.ndarray): Mean of the Gaussian component, shape (D,).\n        cov (np.ndarray): Covariance matrix of the Gaussian component, shape (D, D).\n        D (int): Number of features/dimensions.\n        min_pdf_val (float): Minimum value for PDF if calculation results in issues.\n\n    Returns:\n        np.ndarray: PDF values for each data point, shape (N,).\n    \"\"\"\n    N = X.shape[0]\n    mean_reshaped = mean.reshape(1, D)\n    try:\n        (sign, log_det_cov) = np.linalg.slogdet(cov)\n        if sign <= 0:\n            return np.full(N, min_pdf_val, dtype=np.float64)\n        inv_cov = np.linalg.inv(cov)\n    except np.linalg.LinAlgError:\n        return np.full(N, min_pdf_val, dtype=np.float64)\n    log_norm_const_part = -0.5 * (D * np.log(2 * np.pi) + log_det_cov)\n    X_minus_mean = X - mean_reshaped\n    try:\n        mahalanobis_sq = np.einsum('ni,ij,nj->n', X_minus_mean, inv_cov, X_minus_mean)\n    except ValueError:\n        return np.full(N, min_pdf_val, dtype=np.float64)\n    log_pdf = log_norm_const_part - 0.5 * mahalanobis_sq\n    pdf_values = np.exp(log_pdf)\n    pdf_values = np.nan_to_num(pdf_values, nan=min_pdf_val, posinf=np.finfo(np.float64).max, neginf=min_pdf_val)\n    pdf_values = np.maximum(pdf_values, min_pdf_val)\n    return pdf_values\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Args:\n        data (np.ndarray): A 2-D NumPy array of shape (N, D) containing N samples\n                           with D features.\n        k (int): The number of Gaussian components (clusters).\n        max_iter (int, optional): The maximum number of EM iterations. Defaults to 200.\n        epsilon (float, optional): The tolerance for convergence. The algorithm stops\n                                   if the maximum absolute change in mixture weights\n                                   between iterations is less than epsilon. Defaults to 1e-4.\n\n    Returns:\n        list[int]: A list of length N containing the final cluster label (0 to K-1)\n                   for each sample. Labels are sorted such that component 0 has the\n                   smallest first-coordinate mean, component 1 the next, and so on.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    if N == 0:\n        return []\n    rng = np.random.RandomState(0)\n    weights = rng.rand(k).astype(np.float64)\n    weights /= np.sum(weights)\n    try:\n        mean_indices = rng.choice(N, k, replace=False)\n        means = data[mean_indices].astype(np.float64)\n    except ValueError as e:\n        raise ValueError(f'N ({N}) must be >= K ({k}) for current mean initialization (random choice without replacement).') from e\n    reg_cov = 1e-06\n    if N > 1:\n        if D == 1:\n            initial_cov_val = np.var(data)\n            if initial_cov_val < reg_cov:\n                initial_cov_val = reg_cov\n            initial_cov_mat = np.array([[initial_cov_val]], dtype=np.float64)\n        elif N > D:\n            initial_cov_mat = np.cov(data, rowvar=False).astype(np.float64)\n        else:\n            feature_vars = np.var(data, axis=0, dtype=np.float64)\n            mean_var = np.mean(feature_vars)\n            if mean_var == 0 or np.isnan(mean_var):\n                mean_var = 1.0\n            initial_cov_mat = np.eye(D, dtype=np.float64) * mean_var\n        initial_cov_mat += np.eye(D, dtype=np.float64) * reg_cov\n    else:\n        initial_cov_mat = np.eye(D, dtype=np.float64)\n    covariances = np.array([np.copy(initial_cov_mat) for _ in range(k)], dtype=np.float64)\n    for iteration in range(max_iter):\n        weights_old = np.copy(weights)\n        pdf_values_all_components = np.zeros((N, k), dtype=np.float64)\n        for j in range(k):\n            pdf_values_all_components[:, j] = _gmm_multivariate_gaussian_pdf(data, means[j], covariances[j], D)\n        weighted_pdfs = pdf_values_all_components * weights\n        sum_weighted_pdfs = np.sum(weighted_pdfs, axis=1, keepdims=True)\n        sum_weighted_pdfs = np.maximum(sum_weighted_pdfs, np.finfo(np.float64).tiny)\n        responsibilities = weighted_pdfs / sum_weighted_pdfs\n        N_k_effective = np.sum(responsibilities, axis=0) + 10 * np.finfo(np.float64).eps\n        weights = N_k_effective / np.sum(N_k_effective)\n        for j in range(k):\n            means[j] = np.sum(responsibilities[:, j].reshape(N, 1) * data, axis=0) / N_k_effective[j]\n            diff_from_mean = data - means[j]\n            resp_j_col_broadcast = responsibilities[:, j].reshape(N, 1)\n            weighted_sum_outer_prods = np.dot((diff_from_mean * resp_j_col_broadcast).T, diff_from_mean)\n            covariances[j] = weighted_sum_outer_prods / N_k_effective[j]\n            covariances[j] += np.eye(D) * reg_cov\n        if np.max(np.abs(weights - weights_old)) < epsilon:\n            break\n    final_pdf_values = np.zeros((N, k), dtype=np.float64)\n    for j in range(k):\n        final_pdf_values[:, j] = _gmm_multivariate_gaussian_pdf(data, means[j], covariances[j], D)\n    final_weighted_pdfs = final_pdf_values * weights\n    final_sum_weighted_pdfs = np.sum(final_weighted_pdfs, axis=1, keepdims=True)\n    final_sum_weighted_pdfs = np.maximum(final_sum_weighted_pdfs, np.finfo(np.float64).tiny)\n    final_responsibilities = final_weighted_pdfs / final_sum_weighted_pdfs\n    final_labels_raw = np.argmax(final_responsibilities, axis=1)\n    sorted_original_indices = np.argsort(means[:, 0])\n    old_label_to_new_label_map = np.zeros(k, dtype=int)\n    for new_label in range(k):\n        old_label = sorted_original_indices[new_label]\n        old_label_to_new_label_map[old_label] = new_label\n    final_labels_sorted = np.array([old_label_to_new_label_map[old_label] for old_label in final_labels_raw])\n    return final_labels_sorted.tolist()"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef _kmeans(X: np.ndarray, n_clusters: int, initial_centroid_indices: list[int], max_iter: int=300) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Performs K-means clustering.\n    Args:\n        X: Data points, shape (N, d_features).\n        n_clusters: Number of clusters.\n        initial_centroid_indices: List of indices in X to use as initial centroids.\n                                  It's assumed len(initial_centroid_indices) == n_clusters\n                                  and max(initial_centroid_indices) < X.shape[0].\n        max_iter: Maximum number of iterations.\n    Returns:\n        labels: Cluster labels for each point, shape (N,).\n        centroids: Final centroids, shape (n_clusters, d_features).\n    \"\"\"\n    (N, d_features) = X.shape\n    if N == 0:\n        return (np.array([], dtype=int), np.array([]).reshape(0, d_features if d_features > 0 else 0))\n    if n_clusters == 0:\n        return (np.zeros(N, dtype=int), np.array([]).reshape(0, d_features if d_features > 0 else 0))\n    centroids = X[initial_centroid_indices, :].copy()\n    labels = np.full(N, -1, dtype=int)\n    for _iteration in range(max_iter):\n        distances_sq = np.zeros((N, n_clusters))\n        for i in range(n_clusters):\n            diff = X - centroids[i, :]\n            distances_sq[:, i] = np.sum(diff ** 2, axis=1)\n        new_labels = np.argmin(distances_sq, axis=1)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        new_centroids = np.zeros((n_clusters, d_features))\n        for i in range(n_clusters):\n            cluster_points = X[labels == i]\n            if len(cluster_points) > 0:\n                new_centroids[i, :] = np.mean(cluster_points, axis=0)\n            else:\n                new_centroids[i, :] = centroids[i, :]\n        centroids = new_centroids\n    return (labels, centroids)\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, _) = data.shape\n    if n_cluster == 1:\n        return [0] * N\n    if N == 0:\n        return []\n    if n_cluster <= 0:\n        raise ValueError('Number of clusters must be positive.')\n    sum_sq_data = np.sum(data ** 2, axis=1)\n    dist_sq = sum_sq_data[:, np.newaxis] + sum_sq_data[np.newaxis, :] - 2 * np.dot(data, data.T)\n    dist_sq = np.maximum(dist_sq, 0)\n    W = np.exp(-gamma * dist_sq)\n    degrees = np.sum(W, axis=1)\n    L_unnormalized = np.diag(degrees) - W\n    if method == 'unnormalized':\n        L = L_unnormalized\n    elif method == 'normalized':\n        diag_D_inv_sqrt = np.zeros_like(degrees, dtype=float)\n        non_zero_degree_indices = degrees > 1e-12\n        diag_D_inv_sqrt[non_zero_degree_indices] = degrees[non_zero_degree_indices] ** (-0.5)\n        D_inv_sqrt = np.diag(diag_D_inv_sqrt)\n        L = D_inv_sqrt @ L_unnormalized @ D_inv_sqrt\n    else:\n        raise ValueError(\"method must be 'unnormalized' or 'normalized'\")\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1, keepdims=True)\n        U = np.divide(U, norms, out=np.zeros_like(U), where=norms != 0)\n    initial_centroid_indices = list(range(n_cluster))\n    (kmeans_labels, _) = _kmeans(U, n_cluster, initial_centroid_indices, max_iter=300)\n    final_labels = np.full(N, -1, dtype=int)\n    next_new_label = 0\n    processed_kmeans_cluster_ids = set()\n    for i in range(N):\n        original_kmeans_label_of_sample_i = kmeans_labels[i]\n        if original_kmeans_label_of_sample_i not in processed_kmeans_cluster_ids:\n            indices_in_this_kmeans_cluster = np.where(kmeans_labels == original_kmeans_label_of_sample_i)[0]\n            final_labels[indices_in_this_kmeans_cluster] = next_new_label\n            processed_kmeans_cluster_ids.add(original_kmeans_label_of_sample_i)\n            next_new_label += 1\n        if next_new_label == n_cluster:\n            break\n    return final_labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term (Python float).\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N, dtype=float)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated_in_this_pass = False\n        for i in range(N):\n            g_val = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g_val + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated_in_this_pass = True\n        if not updated_in_this_pass:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w_final = np.round(w, 4).tolist()\n    b_final = float(np.round(b, 4))\n    return (w_final, b_final)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n                     In recursive calls, this will be the current node.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    if hasattr(current_node, 'y') and current_node.y is not None:\n        return current_node.y\n    if task_type == 'classification':\n        feature_index = current_node.label\n        feature_value_from_sample = features[feature_index]\n        next_node_to_traverse = None\n        for child_node in current_node.child:\n            if hasattr(child_node, 'x') and child_node.x == feature_value_from_sample:\n                next_node_to_traverse = child_node\n                break\n        if next_node_to_traverse is None:\n            next_node_to_traverse = current_node.child[1]\n        return predict_sample(next_node_to_traverse, features, task_type)\n    elif task_type == 'regression':\n        feature_index = current_node.label\n        feature_value_from_sample = features[feature_index]\n        split_point = current_node.s\n        if feature_value_from_sample <= split_point:\n            next_node_to_traverse = current_node.child[0]\n        else:\n            next_node_to_traverse = current_node.child[1]\n        return predict_sample(next_node_to_traverse, features, task_type)\n    else:\n        raise ValueError(f\"Invalid task_type: '{task_type}'. Must be 'classification' or 'regression'.\")"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef _calculate_entropy(labels: np.ndarray) -> float:\n    \"\"\"Helper function to calculate entropy of a set of labels.\n    Entropy H(S) = - sum_{c in C} p(c) * log2(p(c))\n    \"\"\"\n    if labels.size == 0:\n        return 0.0\n    (_, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / labels.size\n    entropy = 0.0\n    for p in probabilities:\n        if p > 0:\n            entropy -= p * math.log2(p)\n    return entropy\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    if n_features == 0:\n        return (-1, 0.0)\n    if n_samples == 0:\n        return (0, 0.0)\n    H_y = _calculate_entropy(y)\n    if H_y == 0:\n        return (0, 0.0)\n    max_info_gain = -1.0\n    best_feature_index = 0\n    for feature_idx in range(n_features):\n        current_feature_column = X[:, feature_idx]\n        conditional_entropy_H_y_A = 0.0\n        unique_feature_values = np.unique(current_feature_column)\n        for value in unique_feature_values:\n            subset_mask = current_feature_column == value\n            y_subset = y[subset_mask]\n            P_A_value = y_subset.size / n_samples\n            H_y_given_A_value = _calculate_entropy(y_subset)\n            conditional_entropy_H_y_A += P_A_value * H_y_given_A_value\n        current_info_gain = H_y - conditional_entropy_H_y_A\n        if current_info_gain > max_info_gain:\n            max_info_gain = current_info_gain\n            best_feature_index = feature_idx\n    if max_info_gain < 0.0:\n        max_info_gain = 0.0\n    final_max_info_gain = round(max_info_gain, 6)\n    if final_max_info_gain == -0.0:\n        final_max_info_gain = 0.0\n    return (best_feature_index, final_max_info_gain)"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\nGAMMA = 0.5772156649\nclass Node:\n    \"\"\"Represents a node in the Isolation Tree.\"\"\"\n\n    def __init__(self, is_leaf: bool=False, split_feature: int=None, split_threshold: float=None, left_child=None, right_child=None, num_samples_in_leaf: int=0):\n        self.is_leaf = is_leaf\n        self.split_feature = split_feature\n        self.split_threshold = split_threshold\n        self.left_child = left_child\n        self.right_child = right_child\n        self.num_samples_in_leaf = num_samples_in_leaf\ndef _c_func(n_in_leaf: int) -> float:\n    \"\"\"\n    Path length correction for a leaf node with n_in_leaf samples.\n    c(1)=0, c(n)=2\u00b7ln(n\u22121)+0.5772156649\u22122\u00b7(n\u22121)/n for n>1.\n    \"\"\"\n    if n_in_leaf <= 1:\n        return 0.0\n    val_n_minus_1 = float(n_in_leaf - 1)\n    return 2 * math.log(val_n_minus_1) + GAMMA - 2 * val_n_minus_1 / float(n_in_leaf)\ndef _phi_func(n_subsample: int) -> float:\n    \"\"\"\n    Normalization factor phi for anomaly score calculation.\n    \u03c6 = 2\u00b7ln(n\u22121) \u2212 2\u00b7(n\u22121)/n\n    n is sample_size_used for tree construction.\n    \"\"\"\n    if n_subsample <= 1:\n        return 1.0\n    if n_subsample == 2:\n        return -1.0\n    val_n_minus_1 = float(n_subsample - 1)\n    return 2 * math.log(val_n_minus_1) - 2 * val_n_minus_1 / float(n_subsample)\ndef _build_itree_recursive(current_data: np.ndarray, current_depth: int, height_limit: int, n_total_features: int) -> Node:\n    \"\"\"Recursively builds an isolation tree.\"\"\"\n    n_samples_node = current_data.shape[0]\n    if current_depth >= height_limit or n_samples_node <= 1:\n        return Node(is_leaf=True, num_samples_in_leaf=n_samples_node)\n    split_feature_idx = np.random.randint(n_total_features)\n    feature_values = current_data[:, split_feature_idx]\n    min_val = np.min(feature_values)\n    max_val = np.max(feature_values)\n    split_threshold_val = np.random.uniform(min_val, max_val)\n    left_mask = current_data[:, split_feature_idx] <= split_threshold_val\n    right_mask = np.logical_not(left_mask)\n    left_child_node = _build_itree_recursive(current_data[left_mask], current_depth + 1, height_limit, n_total_features)\n    right_child_node = _build_itree_recursive(current_data[right_mask], current_depth + 1, height_limit, n_total_features)\n    return Node(is_leaf=False, split_feature=split_feature_idx, split_threshold=split_threshold_val, left_child=left_child_node, right_child=right_child_node)\ndef _get_path_length_for_point(point: np.ndarray, node: Node, current_path_edges: int) -> float:\n    \"\"\"Calculates path length for a point in a given tree.\"\"\"\n    if node.is_leaf:\n        return float(current_path_edges) + _c_func(node.num_samples_in_leaf)\n    if point[node.split_feature] <= node.split_threshold:\n        return _get_path_length_for_point(point, node.left_child, current_path_edges + 1)\n    else:\n        return _get_path_length_for_point(point, node.right_child, current_path_edges + 1)\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\"\"\"\n    np.random.seed(42)\n    if epsilon == 0.0:\n        return []\n    (n_total_samples, n_total_features) = data.shape\n    if n_total_samples == 0:\n        return []\n    if sample_size >= n_total_samples:\n        actual_sample_size_used = n_total_samples\n    else:\n        actual_sample_size_used = sample_size\n    if actual_sample_size_used == 0:\n        return []\n    if actual_sample_size_used == 1:\n        height_limit = 0\n    else:\n        height_limit = math.ceil(math.log2(actual_sample_size_used))\n    all_path_lengths_sum = np.zeros(n_total_samples, dtype=float)\n    if n_trees == 0:\n        avg_path_lengths = np.zeros(n_total_samples, dtype=float)\n    else:\n        for _ in range(n_trees):\n            if actual_sample_size_used == n_total_samples:\n                subsample_data = data\n            else:\n                subsample_indices = np.random.choice(n_total_samples, actual_sample_size_used, replace=False)\n                subsample_data = data[subsample_indices]\n            tree_root = _build_itree_recursive(subsample_data, 0, height_limit, n_total_features)\n            for i in range(n_total_samples):\n                point_to_evaluate = data[i]\n                all_path_lengths_sum[i] += _get_path_length_for_point(point_to_evaluate, tree_root, 0)\n        avg_path_lengths = all_path_lengths_sum / n_trees\n    phi = _phi_func(actual_sample_size_used)\n    if phi == 0.0:\n        anomaly_scores = np.ones(n_total_samples, dtype=float)\n    else:\n        exponents = -avg_path_lengths / phi\n        anomaly_scores = np.power(2.0, exponents)\n        anomaly_scores = np.nan_to_num(anomaly_scores, nan=1.0)\n    num_outliers = math.ceil(epsilon * n_total_samples)\n    if num_outliers == 0:\n        return []\n    sorted_score_indices = np.argsort(anomaly_scores)[::-1]\n    outlier_indices_np = sorted_score_indices[:num_outliers]\n    return sorted(outlier_indices_np.tolist())"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    num_samples_train = X_train.shape[0]\n    if X_test.shape[0] == 0:\n        return []\n    if num_samples_train == 0:\n        unique_labels_for_default = sorted(list(set(y_train)))\n        default_pred_label = unique_labels_for_default[0] if unique_labels_for_default else 0\n        return [int(default_pred_label)] * X_test.shape[0]\n    num_features_dim = X_train.shape[1]\n    unique_labels = sorted(list(set(y_train)))\n    if not unique_labels:\n        return [0] * X_test.shape[0]\n    feature_map = {}\n    feature_idx_counter = 0\n    if num_features_dim > 0:\n        for col_idx in range(num_features_dim):\n            unique_values_in_col = set(X_train[:, col_idx])\n            for val in unique_values_in_col:\n                for label_k in unique_labels:\n                    feature_tuple = (col_idx, val, label_k)\n                    if feature_tuple not in feature_map:\n                        feature_map[feature_tuple] = feature_idx_counter\n                        feature_idx_counter += 1\n    num_total_features = len(feature_map)\n    if num_total_features == 0:\n        default_pred_label = unique_labels[0]\n        return [int(default_pred_label)] * X_test.shape[0]\n    empirical_counts = np.zeros(num_total_features, dtype=float)\n    if num_features_dim > 0:\n        for i in range(num_samples_train):\n            x_i = X_train[i]\n            y_i = y_train[i]\n            for col_idx in range(num_features_dim):\n                feature_val = x_i[col_idx]\n                feature_tuple = (col_idx, feature_val, y_i)\n                if feature_tuple in feature_map:\n                    j = feature_map[feature_tuple]\n                    empirical_counts[j] += 1.0\n    empirical_expectations = empirical_counts / num_samples_train\n    C_gis = float(num_features_dim)\n    weights = np.zeros(num_total_features, dtype=float)\n    LOG_SMOOTH = 1e-10\n    for iteration in range(n_iter):\n        model_expected_counts = np.zeros(num_total_features, dtype=float)\n        for i in range(num_samples_train):\n            x_i = X_train[i]\n            raw_scores = {}\n            for y_cand in unique_labels:\n                current_sum_w_f = 0.0\n                for col_idx in range(num_features_dim):\n                    feature_val = x_i[col_idx]\n                    feature_tuple = (col_idx, feature_val, y_cand)\n                    j = feature_map[feature_tuple]\n                    current_sum_w_f += weights[j]\n                raw_scores[y_cand] = current_sum_w_f\n            current_max_score = -float('inf')\n            if raw_scores:\n                for y_c_loop in unique_labels:\n                    current_max_score = max(current_max_score, raw_scores[y_c_loop])\n            if current_max_score == -float('inf'):\n                current_max_score = 0.0\n            exp_scores = {}\n            sum_exp_scores_Z_x = 0.0\n            for y_cand in unique_labels:\n                exp_val = math.exp(raw_scores[y_cand] - current_max_score)\n                exp_scores[y_cand] = exp_val\n                sum_exp_scores_Z_x += exp_val\n            for y_cand in unique_labels:\n                prob_y_given_xi = 0.0\n                if sum_exp_scores_Z_x > 0:\n                    prob_y_given_xi = exp_scores[y_cand] / sum_exp_scores_Z_x\n                elif len(unique_labels) > 0:\n                    prob_y_given_xi = 1.0 / len(unique_labels)\n                if prob_y_given_xi > 0:\n                    for col_idx in range(num_features_dim):\n                        feature_val = x_i[col_idx]\n                        feature_tuple = (col_idx, feature_val, y_cand)\n                        j = feature_map[feature_tuple]\n                        model_expected_counts[j] += prob_y_given_xi\n        model_expectations = model_expected_counts / num_samples_train\n        max_abs_update = 0.0\n        for j in range(num_total_features):\n            emp_exp_j = empirical_expectations[j]\n            mod_exp_j = model_expectations[j]\n            dw = 1.0 / C_gis * (math.log(emp_exp_j + LOG_SMOOTH) - math.log(mod_exp_j + LOG_SMOOTH))\n            weights[j] += dw\n            if abs(dw) > max_abs_update:\n                max_abs_update = abs(dw)\n        if max_abs_update < epsilon:\n            break\n    y_pred_test = []\n    for i in range(X_test.shape[0]):\n        x_test_sample = X_test[i]\n        scores_for_labels = {}\n        for y_cand in unique_labels:\n            current_score = 0.0\n            for col_idx in range(num_features_dim):\n                if col_idx >= x_test_sample.shape[0]:\n                    continue\n                feature_val = x_test_sample[col_idx]\n                feature_tuple = (col_idx, feature_val, y_cand)\n                if feature_tuple in feature_map:\n                    j = feature_map[feature_tuple]\n                    current_score += weights[j]\n            scores_for_labels[y_cand] = current_score\n        best_label_for_sample = unique_labels[0]\n        max_score_val = scores_for_labels.get(best_label_for_sample, -float('inf'))\n        for idx in range(1, len(unique_labels)):\n            y_l = unique_labels[idx]\n            current_label_score = scores_for_labels.get(y_l, -float('inf'))\n            if current_label_score > max_score_val:\n                max_score_val = current_label_score\n                best_label_for_sample = y_l\n        y_pred_test.append(int(best_label_for_sample))\n    return y_pred_test"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    num_docs = len(data)\n    if num_docs == 0:\n        return ([], set())\n    doc_freq_counter = Counter()\n    for (_, words_iterable) in data:\n        unique_words_in_doc = set(words_iterable)\n        doc_freq_counter.update(unique_words_in_doc)\n    word_ratios_list = []\n    for (word, count) in doc_freq_counter.items():\n        ratio = round(count / num_docs, 4)\n        word_ratios_list.append((word, ratio))\n    sorted_word_ratios = sorted(word_ratios_list, key=lambda item: item[1], reverse=True)\n    top_k_words_set = set()\n    if cut_off is None:\n        for (word, _) in sorted_word_ratios:\n            top_k_words_set.add(word)\n    elif cut_off > 0:\n        for (word, _) in sorted_word_ratios[:cut_off]:\n            top_k_words_set.add(word)\n    return (sorted_word_ratios, top_k_words_set)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    n_samples = X.shape[0]\n    alpha_y = alpha * y\n    w = np.dot(X.T, alpha_y)\n    w_dot_x = np.dot(X, w)\n    diffs = y - w_dot_x\n    b = np.mean(diffs)\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    b_float = float(b_rounded)\n    return (w_list, b_float)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data: np.ndarray, k: int, epsilon: float=1.5):\n    \"\"\"\n    Computes the Local Outlier Factor (LOF) for each sample in the dataset.\n\n    Args:\n        data (np.ndarray): The input data, where rows are samples and columns are features.\n        k (int): The number of nearest neighbors to consider. Must be 1 <= k < n.\n        epsilon (float): The threshold for classifying a sample as an outlier.\n                         Samples with LOF > epsilon are considered outliers.\n\n    Returns:\n        tuple: A tuple containing:\n            - list_of_scores (list): LOF scores for each sample, rounded to 4 decimal places.\n            - list_of_outlier_indices (list): Ascending list of indices of samples\n                                              whose LOF score is strictly larger than epsilon.\n    \"\"\"\n    n = data.shape[0]\n    if not 1 <= k < n:\n        raise ValueError(f'k must be in range [1, n-1). Received k={k}, n={n}')\n    sum_X_sq = np.sum(data ** 2, axis=1, keepdims=True)\n    dist_sq = sum_X_sq + sum_X_sq.T - 2 * np.dot(data, data.T)\n    dist_sq = np.maximum(dist_sq, 0)\n    dist_matrix = np.sqrt(dist_sq)\n    k_distances_arr = np.zeros(n)\n    N_k_indices_list = [[] for _ in range(n)]\n    for i in range(n):\n        distances_from_i = dist_matrix[i, :]\n        sorted_indices = np.argsort(distances_from_i)\n        k_distances_arr[i] = distances_from_i[sorted_indices[k]]\n        N_k_indices_list[i] = sorted_indices[1:k + 1].tolist()\n    LRD_values = np.zeros(n)\n    numerical_stability_epsilon = 1e-10\n    for i in range(n):\n        sum_reach_dist = 0.0\n        current_N_k_indices = N_k_indices_list[i]\n        for neighbor_idx in current_N_k_indices:\n            k_distance_of_neighbor = k_distances_arr[neighbor_idx]\n            dist_i_neighbor = dist_matrix[i, neighbor_idx]\n            reach_dist_i_neighbor = np.maximum(k_distance_of_neighbor, dist_i_neighbor)\n            sum_reach_dist += reach_dist_i_neighbor\n        LRD_values[i] = k / (sum_reach_dist + numerical_stability_epsilon)\n    LOF_scores = np.zeros(n)\n    for i in range(n):\n        sum_LRD_neighbors_num = 0.0\n        current_N_k_indices = N_k_indices_list[i]\n        for neighbor_idx in current_N_k_indices:\n            sum_LRD_neighbors_num += LRD_values[neighbor_idx]\n        avg_LRD_neighbors = sum_LRD_neighbors_num / k\n        LOF_scores[i] = avg_LRD_neighbors / LRD_values[i]\n    rounded_LOF_scores = np.round(LOF_scores, 4).tolist()\n    outlier_indices = np.where(LOF_scores > epsilon)[0].tolist()\n    return (rounded_LOF_scores, outlier_indices)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n        X_train shape: (m * n_train, 2)\n        X_val shape: (m * n_val, 2)\n        y_train shape: (m * n_train,)\n        y_val shape: (m * n_val,)\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((m * n_train, 2), dtype=np.float64)\n    y_train = np.zeros(m * n_train, dtype=int)\n    X_val = np.zeros((m * n_val, 2), dtype=np.float64)\n    y_val = np.zeros(m * n_val, dtype=int)\n    current_train_idx = 0\n    current_val_idx = 0\n    for c in range(m):\n        base = 10 * (c // 2)\n        low = float(base + 1)\n        high = float(base + 9)\n        for _ in range(n_train):\n            x = random.uniform(low, high)\n            y = random.uniform(low, high)\n            X_train[current_train_idx, 0] = round(x, 4)\n            X_train[current_train_idx, 1] = round(y, 4)\n            y_train[current_train_idx] = c\n            current_train_idx += 1\n        for _ in range(n_val):\n            x = random.uniform(low, high)\n            y = random.uniform(low, high)\n            X_val[current_val_idx, 0] = round(x, 4)\n            X_val[current_val_idx, 1] = round(y, 4)\n            y_val[current_val_idx] = c\n            current_val_idx += 1\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centroids = X[:k, :].copy()\n    prev_assignments = np.full(m, -1, dtype=int)\n    current_assignments = np.zeros(m, dtype=int)\n    if max_iters == 0:\n        X_reshaped = X[:, np.newaxis, :]\n        centroids_reshaped = centroids[np.newaxis, :, :]\n        diff = X_reshaped - centroids_reshaped\n        distances_sq = np.sum(diff ** 2, axis=2)\n        current_assignments = np.argmin(distances_sq, axis=1)\n    else:\n        for _iteration in range(max_iters):\n            X_reshaped = X[:, np.newaxis, :]\n            centroids_reshaped = centroids[np.newaxis, :, :]\n            diff = X_reshaped - centroids_reshaped\n            distances_sq = np.sum(diff ** 2, axis=2)\n            current_assignments = np.argmin(distances_sq, axis=1)\n            if np.array_equal(current_assignments, prev_assignments):\n                break\n            new_centroids_calc = np.zeros_like(centroids)\n            for j in range(k):\n                points_in_cluster_j = X[current_assignments == j]\n                if len(points_in_cluster_j) > 0:\n                    new_centroids_calc[j, :] = np.mean(points_in_cluster_j, axis=0)\n                else:\n                    new_centroids_calc[j, :] = centroids[j, :]\n            centroids = new_centroids_calc\n            prev_assignments = current_assignments.copy()\n        else:\n            X_reshaped = X[:, np.newaxis, :]\n            centroids_reshaped = centroids[np.newaxis, :, :]\n            diff = X_reshaped - centroids_reshaped\n            distances_sq = np.sum(diff ** 2, axis=2)\n            current_assignments = np.argmin(distances_sq, axis=1)\n    rounded_centroids = np.round(centroids, 4).tolist()\n    labels_list = current_assignments.tolist()\n    return (labels_list, rounded_centroids)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Performs batch gradient descent for the given number of iterations\n    and returns the learned weight vector and bias. All returned values\n    must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float. Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0.0 or iterations == 0 or m == 0:\n        w_rounded = [0.0] * n\n        b_rounded = 0.0\n        return (w_rounded, b_rounded)\n    for _ in range(iterations):\n        y_hat = X @ w + b\n        r = y - y_hat\n        grad_w_mse = -2 * (X.T @ r)\n        signs_w = np.sign(w)\n        signs_w[w == 0] = -1.0\n        grad_w_l1 = l1_penalty * signs_w\n        grad_w_l2 = 2 * l2_penalty * w\n        grad_w = grad_w_mse + grad_w_l1 + grad_w_l2\n        grad_b = -2 * np.sum(r)\n        mean_grad_w = grad_w / m\n        mean_grad_b = grad_b / m\n        w = w - learning_rate * mean_grad_w\n        b = b - learning_rate * mean_grad_b\n    w_rounded = [round(weight_val, 4) for weight_val in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_activations = np.array(x, dtype=np.float64)\n    num_layers = len(weights)\n    for i in range(num_layers):\n        layer_weights_as_list = weights[i]\n        num_neurons_in_layer = len(layer_weights_as_list)\n        if num_neurons_in_layer == 0:\n            current_activations = np.array([], dtype=np.float64)\n            continue\n        W_layer = np.array(layer_weights_as_list, dtype=np.float64)\n        augmented_activations = np.concatenate(([1.0], current_activations))\n        z_values = W_layer @ augmented_activations\n        if i < num_layers - 1:\n            current_activations = np.maximum(0, z_values)\n        else:\n            current_activations = z_values\n    rounded_output = np.round(current_activations, 4)\n    if rounded_output.shape[0] == 0:\n        return []\n    elif rounded_output.shape[0] == 1:\n        return float(rounded_output[0])\n    else:\n        return rounded_output.tolist()"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    if k == 0:\n        return []\n    (n_samples, _) = X.shape\n    centroids = X[:k, :].copy()\n    for _ in range(max_iters):\n        old_centroids = centroids.copy()\n        distances_sq = np.zeros((n_samples, k))\n        for j in range(k):\n            distances_sq[:, j] = np.sum((X - centroids[j, :]) ** 2, axis=1)\n        labels = np.argmin(distances_sq, axis=1)\n        current_iter_centroids = np.zeros_like(centroids)\n        for j in range(k):\n            points_in_cluster_j = X[labels == j]\n            if points_in_cluster_j.shape[0] > 0:\n                current_iter_centroids[j, :] = np.mean(points_in_cluster_j, axis=0)\n            else:\n                current_iter_centroids[j, :] = old_centroids[j, :]\n        centroids = current_iter_centroids\n        shifts = np.sqrt(np.sum((centroids - old_centroids) ** 2, axis=1))\n        if np.all(shifts < 0.0001):\n            break\n    centroids_list = centroids.tolist()\n    sorted_centroids_list = sorted(centroids_list)\n    final_rounded_centroids = []\n    for centroid_coords in sorted_centroids_list:\n        rounded_coords = [round(coord, 4) for coord in centroid_coords]\n        final_rounded_centroids.append(rounded_coords)\n    return final_rounded_centroids"}
