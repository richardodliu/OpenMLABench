{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Args:\n        data: An ndarray where the last column is the target y and all preceding columns are features x.\n        alpha: Regularisation strength (>= 0)\n    \n    Returns:\n        A list of floats representing the weight vector after applying Ridge regression.\n        Returns -1 if the matrix (X^T X + alpha I) is not invertible.\n    \n    Raises:\n        ValueError: If the input data is not a valid numpy array.\n    \"\"\"\n    if not isinstance(data, np.ndarray):\n        raise ValueError('Input must be a numpy array')\n    X = np.column_stack((data[:-1], np.ones(data.shape[1])))\n    n_features = X.shape[1]\n    X_T_X = np.dot(X.T, X)\n    matrix = X_T_X + alpha * np.eye(n_features)\n    det_matrix = np.linalg.det(matrix)\n    if det_matrix == 0:\n        return [-1.0]\n    inverse_matrix = np.linalg.inv(matrix)\n    weights = np.dot(inverse_matrix, X_T_X.T)\n    rounded_weights = [round(w, 4) for w in weights]\n    return rounded_weights"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Dual-form perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    alpha = np.zeros_like(y_train)\n    b = 0.0\n    for i in range(n_iter):\n        current_activation = 0.0\n        current_activation = np.dot(alpha, X_train[i]) + b\n        margin = current_activation + b\n        if margin <= 0:\n            alpha[i] += eta * y_train[i]\n            b += eta * y_train[i]\n            alpha = np.zeros_like(y_train)\n            b = 0.0\n        elif not any((gradient > 0 for gradient in alpha)):\n            break\n    w = np.round(alpha, 4)\n    b_rounded = np.round(b, 4)\n    return (w, b_rounded)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n    scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {'identity': lambda mu: mu, 'log': lambda mu: np.log(mu), 'logit': lambda mu: np.log(1 / (1 + np.exp(-mu)))}\n    return links"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    tree = {}\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return indices\n        feature_index = np.random.choice(np.arange(len(indices)))\n        down = min(data[indices, feature_index])\n        up = max(data[indices, feature_index])\n        v = np.random.uniform(down, up)\n        left_child = build_tree(indices[indices < v])\n        right_child = build_tree(indices[indices > v])\n        path = [feature_index] + [left_child, right_child]\n        tree[indices] = path\n    build_tree(data.shape[0])\n    depths = []\n    for index in data[:, 0]:\n        path = tree[index]\n        depth = len(path) - 1\n        depths.append(depth)\n    return depths"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"\n    Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    item_counts = [Counter(transaction) for transaction in transactions]\n    itemsets = []\n    for i in range(len(item_counts)):\n        for j in range(i + 1):\n            if i == j:\n                support = sum((1 for cnt in item_counts[i] if cnt >= minsup * N))\n                itemsets.append((tuple(transactions[i][j]), support))\n            else:\n                support = sum((1 for cnt in item_counts[i] if cnt >= minsup * N))\n                itemsets.append((tuple(transactions[i][j]), support))\n    itemsets.sort(key=lambda x: tuple(x))\n    result = {item: value for (item, value) in itemsets if value >= math.ceil(minsup * N)}\n    return result"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centers = data[:k]\n    for _ in range(max_iter):\n        distances = np.sqrt((data - centers).dot(data - centers))\n        labels = np.argmin(distances, axis=0)\n        new_centers = np.mean(centers[labels], axis=0)\n        change = np.max(np.abs(new_centers - centers), axis=0)\n        if change < epsilon:\n            break\n        centers = round(new_centers, 4)\n    if max_iter > 0:\n        if change > epsilon:\n            return ([round(center, 4) for center in centers], labels)\n        else:\n            return ([round(center, 4) for center in centers], labels)\n    else:\n        return ([round(center, 4) for center in centers], labels)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    (n_user, n_item) = data.shape\n    r = data[user_ind, :]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(n_item):\n            if i == j:\n                continue\n            rated_users = set()\n            for row in data:\n                if row[i] > 0 and row[j] > 0:\n                    rated_users.add(row.index)\n            if not rated_users:\n                S[i, j] = S[j, i] = 0.0\n            elif criterion == 'cosine':\n                v1 = r[rated_users].copy()\n                v2 = data[rated_users, j].copy()\n                mean_v1 = np.mean(v1)\n                std_v1 = np.std(v1)\n                if std_v1 > 0.001:\n                    v1 = (v1 - mean_v1) / std_v1\n                else:\n                    v1 = v1\n                mean_v2 = np.mean(v2)\n                std_v2 = np.std(v2)\n                if std_v2 > 0.001:\n                    v2 = (v2 - mean_v2) / std_v2\n                else:\n                    v2 = v2\n                score = np.dot(v1, v2) / np.sqrt(np.sum(v1 ** 2) * np.sum(v2 ** 2))\n                S[i, j] = score\n            else:\n                v1 = r[rated_users].copy()\n                v2 = data[rated_users, j].copy()\n                corr_coeff = np.corrcoef(v1, v2)[0][1]\n                S[i, j] = corr_coeff\n    unrated_items = [item for item in range(n_item) if data[user_ind, item] == 0]\n    scores = []\n    for t in unrated_items:\n        total = 0.0\n        for i in range(n_item):\n            if i in rated_users:\n                total += data[user_ind, i] * S[t, i]\n        if total == 0:\n            score = 0.0\n        else:\n            denominator = np.sqrt(np.sum((S[t, i] ** 2 for i in rated_users)))\n            score = total / denominator\n        scores.append(score)\n    sorted_scores = sorted(scores, reverse=True)\n    result = []\n    for (idx, score) in enumerate(sorted_scores[:k]):\n        result.append(unrated_items[idx])\n    return result"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair `(feature_index, threshold)` describing the optimal split, or\n        `None` if no valid split yields a positive gain.\n    \"\"\"\n    n_features = X.shape[1]\n    n_instances = X.shape[0]\n    thresholds = []\n    for i in range(n_features):\n        for val in np.unique(X[:, i]):\n            thresholds.append(val)\n    max_gain = -np.inf\n    best_split = None\n    for idx in range(len(thresholds)):\n        threshold = thresholds[idx]\n        loss = -(1 / 2) * sum(g) ** 2 / (sum(h) + lam) + gamma\n        left_child = X[X[:, i] < threshold]\n        right_child = X[X[:, i] >= threshold]\n        gain_left = loss - calculate_loss(left_child, g, h, gamma, lam)\n        gain_right = loss - calculate_loss(right_child, g, h, gamma, lam)\n        if gain_left > max_gain or (gain_left == max_gain and (left_child.shape[0] >= 2 and right_child.shape[0] >= 2)):\n            max_gain = gain_left\n            best_split = (idx, threshold)\n        elif gain_right > max_gain or (gain_right == max_gain and (left_child.shape[0] >= 2 and right_child.shape[0] >= 2)):\n            max_gain = gain_right\n            best_split = (idx, threshold)\n    return best_split if max_gain != -np.inf else None\ndef calculate_loss(node, g, h, gamma, lam):\n    \"\"\"Calculate the regularized loss for a leaf node.\"\"\"\n    sum_g = sum(g[node])\n    sum_h = sum(h[node])\n    loss = -(1 / 2) * sum_g ** 2 / (sum_h + lam) + gamma\n    return loss"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"\n    Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        x_list = x.tolist()\n        sigmoid_x = [np.sigmoid(val) for val in x_list]\n        gradient_x = [np.diff(x_list, axis=0) / (1.0 - np.sum(x_list, axis=0)) for _ in range(len(x_list))]\n        return tuple(map(lambda y: round(y, 4), (sigmoid_x, gradient_x)))\n    elif isinstance(x, list):\n        x_array = np.array(x)\n        sigmoid_x = [np.sigmoid(val) for val in x_array]\n        gradient_x = [np.diff(x_array, axis=0) / (1.0 - np.sum(x_array, axis=0)) for _ in range(len(x_array))]\n        return tuple(map(lambda y: round(y, 4), (sigmoid_x, gradient_x)))\n    else:\n        sigmoid_x = np.sigmoid(x)\n        gradient_x = np.diff([x], axis=0) / (1.0 - np.sum([x], axis=0))\n        return tuple(map(lambda y: round(y, 4), (sigmoid_x, gradient_x)))"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    weights = np.ones(len(x_train)) / len(x_train)\n\n    def get_stump_indices(sorted_x, threshold):\n        if not sorted_x:\n            return []\n        indices = []\n        for i in range(len(sorted_x)):\n            if sorted_x[i] <= threshold:\n                indices.append(i)\n        return indices\n\n    def compute_error(stump, x, y):\n        sum_terms = 0\n        for (i, val) in enumerate(x):\n            prediction = sign(stump[0] * val + stump[1])\n            if prediction == y:\n                sum_terms += 1\n        return abs(sum_terms) / len(x)\n\n    def compute_alpha(error):\n        return 0.5 * math.log((1 - error) / error)\n    while True:\n        sorted_x = np.sort(x_train)\n        selected_stumps = []\n        for threshold in get_stump_indices(sorted_x, x_train):\n            (d, theta) = (sorted_x[threshold], sorted_x[threshold + 1])\n            if d == 0:\n                stump = [0, 1]\n            else:\n                stump = [1, 1]\n            selected_stumps.append((stump, threshold))\n        best_stump = None\n        best_error = float('inf')\n        for (stump, threshold) in selected_stumps:\n            current_error = compute_error(stump, x_train, y_train)\n            if current_error < best_error:\n                best_error = current_error\n                best_stump = stump\n        alpha = compute_alpha(best_error)\n        new_weights = np.copy(weights)\n        new_weights *= alpha\n        normalized_weights = new_weights / np.sum(new_weights)\n        weights = normalized_weights\n        training_error = compute_error(best_stump, x_train, y_train)\n        if training_error <= epsilon:\n            break\n        print(f'Training stopped with error {training_error}')\n    final_classifier = []\n    for (i, val) in enumerate(x_test):\n        prediction = sign(\u03b1 * np.dot(final_classifier, val))\n        final_classifier.append(prediction)\n    return final_classifier"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    result = []\n    for x_test in X_test:\n        score = 0\n        for i in range(len(alpha)):\n            term = alpha[i] * y_train[i] * math.exp(-gamma * np.linalg.norm(x_test - X_train[i], axis=1) ** 2)\n            score += term\n        result.append(1 if score > 0 else -1)\n    return result"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"\n    Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(X, list) or not isinstance(X[0], list):\n        raise ValueError('Input must be a list of lists')\n    if len(X) == 0:\n        return (-1, 0)\n    (m, n) = (len(X), len(X[0]))\n    if k < 1 or k > min(m, n):\n        return (-1, -1)\n    (U, s, Vt) = np.linalg.svd(X, full_matrices=False)\n    truncated_svd = U[:k] @ Vt\n    X_hat = truncated_svd\n    X_hat_rounded = np.round(X_hat, 4)\n    mse = np.mean((X - X_hat) ** 2)\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded.tolist(), mse_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_values = np.array(x_train)\n    n_samples = len(x_values)\n    split_points = []\n    for i in range(n_samples - 1):\n        mid = (x_values[i] + x_values[i + 1]) / 2\n        split_points.append(mid)\n    ensemble = []\n    while True:\n        current_residuals = []\n        for s in split_points:\n            left_mean = np.mean(y_train[x_values <= s])\n            right_mean = np.mean(y_train[x_values > s])\n            c1 = left_mean if x_values <= s else None\n            c2 = right_mean if x_values > s else None\n            new_residuals = [(left_mean, right_mean, c1, c2)]\n            new_residuals = [residual for (_, _, _, residual) in new_residuals]\n            min_stump = min(new_residuals, key=lambda x: x[0] ** 2 + x[1] ** 2)\n        ensemble.append(min_stump)\n        total_residuals_squared = np.sum([a ** 2 for (a, b, c, d) in ensemble])\n        if total_residuals_squared < epsilon:\n            break\n    prediction = 0.0\n    for stump in ensemble:\n        if x_query <= stump[2]:\n            prediction += stump[1]\n        else:\n            prediction += stump[3]\n    return round(prediction, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a binary tensor with 0.0 and 1.0 values.\n    \n    Args:\n        shape: The desired shape of the output tensor.\n        sparsity: The probability of generating a 1.0 value (must be in [0,1]).\n        seed: Optional seed to ensure reproducible results (None for default).\n    \n    Returns:\n        A NumPy array containing only 0.0 and 1.0 values.\n    \"\"\"\n    if not isinstance(shape, tuple) or len(shape) != len(shape[0]):\n        raise ValueError('Shape must be a tuple of integers.')\n    if not 0 <= sparsity <= 1:\n        return np.array([-1], dtype=np.float64)\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape) * sparsity\n    threshold = 1 - sparsity\n    tensor[tensor >= threshold] = 1.0\n    return tensor.astype(np.float64)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    median_value = data[d].median()\n    pivot_index = np.argpartition(data[d], median_value)\n    left_indices = pivot_index[:pivot_index.index(median_value)]\n    right_indices = pivot_index[pivot_index.index(median_value):]\n    return (pivot_index[0], left_indices, right_indices)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"\n    Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        raise TypeError('Input must be a NumPy array')\n    if stride < 1:\n        raise ValueError('Stride must be at least 1')\n    if len(x) < frame_width:\n        raise ValueError('Frame width cannot exceed the length of the signal')\n    n_frames = (len(x) - frame_width) // stride + 1\n    arr = as_strided(x, (n_frames, frame_width), (stride, frame_width))\n    if writeable:\n        arr.flags.writeable = True\n    return arr"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if not isinstance(X, (list, np.ndarray)):\n        return False\n    if len(X) == 0 or len(X[0]) == 0:\n        return False\n    for row in X:\n        if any((x < 0 or x > 1 for x in row)):\n            return False\n    for row in X:\n        if not np.allclose(np.sum(row), 1.0, atol=1e-08):\n            return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n    batch_size : int, optional\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of rows')\n    w = np.zeros_like(X)\n    g = np.dot(X.T, X * w - y).flatten()\n    s = np.zeros_like(g)\n    s[:] += g ** 2\n    best_gradient_sq = 10000000000.0\n    for iteration in range(max_iter):\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        s = rho * s + (1 - rho) * g ** 2\n        current_gradient_sq = np.linalg.norm(g) ** 2\n        if current_gradient_sq < epsilon:\n            break\n        if iteration >= max_iter:\n            break\n        best_gradient_sq = min(best_gradient_sq, current_gradient_sq)\n    return np.round(w, 4).tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Implement the SoftPlus activation function with gradient support.\n    \n    Parameters:\n    x (np.ndarray or list): The input array containing real values.\n    deriv (bool): If True, returns the element-wise sigmoid of `x`. Otherwise, returns the SoftPlus value.\n    \n    Returns:\n        np.ndarray: The result as a NumPy array. If `deriv` is True, returns the sigmoid; if scalar, returns float rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    if not isinstance(x, np.ndarray):\n        x = np.array([x])\n    if deriv:\n        return np.sigmoid(x) * np.log(1 + np.exp(x))\n    else:\n        return np.log(1 + np.exp(x)) if np.isfinite(x) else x\n    rounded_values = [round(val * 10000 / 10000.0, 4) for val in x]\n    return rounded_values"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"\n    Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Args:\n        corpus: A list of word tokens.\n        sequence: A list of word tokens.\n        N: The order of the N-gram model (\u22651).\n\n    Returns:\n        float: The total log-probability of the sequence under the resulting unsmoothed language model, rounded to 4 decimal places.\n        If any required count is zero, return float('-inf').\n\n    Raises:\n        ValueError: If N < 1 or N > len(sequence).\n    \"\"\"\n    if N < 1 or N > len(sequence):\n        raise ValueError(f'Sequence length must be between 1 and {len(sequence)}')\n    n_gram_counts = Counter()\n    for i in range(len(corpus)):\n        current_window = corpus[i:i + N]\n        n_gram_counts.update(current_window)\n    for i in range(len(sequence) - N + 1):\n        start = i\n        end = i + N\n        window = sequence[start:end]\n        num = 0\n        denom = 0\n        if len(window) == 1:\n            if not n_gram_counts.get(window[0], 0):\n                return float('-inf')\n            num = n_gram_counts[window[0]]\n            denom = len(corpus)\n        else:\n            for j in range(N):\n                if not n_gram_counts.get(window[j], 0):\n                    return float('-inf')\n        if num == 0 or denom == 0:\n            return float('-inf')\n    log_probabilities = []\n    for i in range(len(sequence) - N + 1):\n        window = sequence[i:i + N]\n        prob = 1.0 / (num / denom) if denom != 0 else 0.0\n        log_prob = np.log(prob)\n        log_probabilities.append(log_prob)\n    total_log_prob = sum(log_probabilities)\n    rounded_total = round(total_log_prob, 4)\n    return rounded_total"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"\n    Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n    \n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n    \n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, ..., w_degree] rounded to four decimal places.\n    \"\"\"\n    X_poly = np.column_stack([np.ones((X.shape[0], 1)), X ** degree])\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        w[0] = np.mean(y - X_poly[:, 0] * w[0])\n        for j in range(1, degree + 1):\n            loss = y - X_poly[:, j] * w[j]\n            predicted = X_poly[:, j] * w[j]\n            residual = loss - predicted\n            rho = np.dot(w, X_poly[:, j]) + np.dot(residual, X_poly[:, j])\n            w[j] = np.clip(np.sign(rho) * max(abs(rho) - reg_factor, 0), -1e-08, 100000000.0)\n            weights_change = np.abs(w[j] - w[j - 1])\n            if weights_change < tol:\n                break\n    coefficients = np.round(w[1:], 4)\n    return coefficients.tolist()"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Returns the backward probability vector for the given HMM at time t.\"\"\"\n    if not isinstance(obs, list) or len(obs) != len(A) or len(obs) != len(B):\n        raise ValueError('obs must be a list of length equal to A and B')\n    N = A.shape[1]\n    M = B.shape[1]\n    beta = [0.0] * N\n    if t == T - 1:\n        beta[t] = 1.0\n    for i in range(N):\n        current_a = A[i][t]\n        current_b = B[i][obs[t]]\n        beta[t] *= current_a * current_b\n    return round(beta, 4)"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(pi)\n    T = len(obs)\n    beta = [1.0 for _ in range(N)]\n    for t in range(T - 1, -1, -1):\n        for i in range(N):\n            beta[t][i] = sum(B[i][obs[t + 1]] * A[obs[t]][i] * beta[t + 1][i])\n    total = pi[0] * beta[0][0]\n    total = round(total, 6)\n    return total"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimal places, or \u22121 on invalid input.\n    \"\"\"\n    if len(observations) == 0:\n        return -1.0\n    m = len(B)\n    n = len(A[0])\n    if len(S) != n or len(observations) != m:\n        return -1.0\n    for obs in observations:\n        if not 0 <= obs < m:\n            return -1.0\n    forward = np.zeros(len(observations))\n    for i in range(len(observations)):\n        current_prob = 1.0\n        for j in range(n):\n            current_prob *= B[j][observations[i]]\n        forward[i] = current_prob\n    normalized_forward = forward / np.max(forward)\n    return round(normalized_forward, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"\n    Discover every frequent item-set in transactions with FP-Growth.\n\n    A transaction is represented by a list of items (strings). min_support is the minimum number of transactions an item-set has to appear in.\n    The result must be deterministic:\n        - Items inside each item-set are sorted lexicographically.\n        - The outer list is sorted by (len(itemset), itemset).\n    \"\"\"\n    item_counts = Counter()\n    for trans in transactions:\n        for item in trans:\n            item_counts[item] += 1\n\n    def build_tree(items):\n        if not items:\n            return {}\n        root = {'name': '', 'support': 0}\n        for item in items:\n            if item not in root['items']:\n                root['items'][item] = {'name': item, 'count': 1}\n        for child in build_tree(items[:-1]):\n            root['children'].append(child)\n        return root\n\n    def mine_tree(root, min_support):\n        if min_support <= 0:\n            return []\n        current_count = root['support']\n        if current_count >= min_support:\n            return [root['name']]\n        children = root['children']\n        results = []\n        for child in children:\n            results.extend(mine_tree(child, min_support))\n        return results\n    item_sets = []\n    for item in item_counts:\n        if item_counts[item] >= min_support:\n            item_set = sorted([item])\n            item_sets.append(item_set)\n    item_sets.sort(key=lambda x: (len(x), x))\n    return item_sets"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"\n    Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > len(X_train):\n        return [-1]\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    distances = np.linalg.norm(X_train_np - X_test_np, axis=1)\n    predicted_labels = []\n    for i in range(len(X_test)):\n        closest_indices = np.argsort(distances[:k])\n        closest_labels = [y_train[np.argmin(closest_indices[i])]]\n        predicted_labels.append(closest_labels[0])\n    sorted_votes = np.unique(predicted_labels, False)\n    sorted_votes.sort()\n    result = [int(v) for v in sorted_votes]\n    return result"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"\n    Compute the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true class labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    if not y.shape == y_pred.shape:\n        raise ValueError('Shapes of y and y_pred must match.')\n    if len(y) == 0 or any((row < 0 for row in y)) or any((row > 1 for row in y)):\n        return 0.0\n    for row in y:\n        if any((1 - x >= 0 for x in row)):\n            continue\n        else:\n            raise ValueError('All probabilities must be positive')\n    for row in y:\n        if not np.any(row.astype(int)):\n            raise ValueError('All probabilities must be integers')\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    total_loss = 0.0\n    (n_samples, n_classes) = (y.shape[0], y.shape[1])\n    for i in range(n_samples):\n        for j in range(n_classes):\n            current_y = y[i][j]\n            current_\u0177 = y_pred[i][j]\n            log_term = np.log(current_\u0177 + np.finfo(float).eps)\n            total_loss += current_y * log_term\n    return round(total_loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a regular Python list.\n    \"\"\"\n    caches = []\n    (W1, b1) = (parameters['W1'], parameters['b1'])\n    (W2, b2) = (parameters['W2'], parameters['b2'])\n    ...\n    Z1 = np.dot(W1, X) + b1\n    A1 = np.tanh(Z1)\n    caches.append((W1, b1, X))\n    Z2 = np.dot(W2, A1) + b2\n    A2 = np.sigmoid(Z2)\n    caches.append((W2, b2, A1))\n    for i in range(2, len(parameters)):\n        (W, b) = (parameters[f'W{i}'], parameters[f'b{i}'])\n        Z = np.dot(W, A[i - 1]) + b\n        A = np.tanh(Z)\n        caches.append((W, b, A))\n    AL = A.tolist()\n    return AL"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost between A2 and Y.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,)\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    A2_clipped = np.clip(A2, 1e-15, 1.0 - 1e-15)\n    m = A2_clipped.shape[1]\n    J = np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    return round(J, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    if n == 0:\n        return []\n    a_star_index = -1\n    max_q = -float('inf')\n    for (i, q) in enumerate(Q):\n        if q > max_q or (q == max_q and i < a_star_index):\n            a_star_index = i\n            max_q = q\n    base = (1 - epsilon) / n\n    p_greedy = base\n    p_other = epsilon / n\n    probabilities = [p_greedy, p_other] * n\n    rounded_probabilities = np.round(probabilities, 4)\n    return rounded_probabilities"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions or not all((isinstance(p, (int, float)) for p in predictions)):\n        return []\n    num_samples = len(predictions[0])\n    num_columns = len(predictions[0][0]) if predictions else 0\n    result = []\n    for i in range(num_samples):\n        current_result = []\n        vote_counts = Counter()\n        for j in range(num_columns):\n            class_label = predictions[i][j]\n            vote_counts[class_label] += 1\n        max_vote = max(vote_counts.values())\n        tie_breakers = [label for (label, count) in vote_counts.items() if count == max_vote]\n        selected_class = min(tie_breakers)\n        current_result.append(selected_class)\n        result.append(current_result)\n    return result"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, list):\n        return np.array(list(map(lambda x: np.logaddexp(0.0, x), z))).tolist()\n    elif isinstance(z, np.ndarray):\n        return np.array(list(map(lambda x: np.logaddexp(0.0, x), z))).tolist()\n    else:\n        return round(np.logaddexp(0.0, z), 4)"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not policy or not isinstance(policy, dict):\n        return np.nan\n    arm_indices = sorted(policy.keys())\n    squared_errors = [(policy[arm] - bandit['arm_evs'][arm]) ** 2 for arm in arm_indices]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    vocab_size = len(corpus)\n    vocab = set()\n    for s in corpus:\n        words = s.split()\n        for word in words:\n            vocab.add(word)\n    log_prob = 0.0\n    if len(sequence) < N:\n        return 0.0\n    n_grams = []\n    current_word = ''\n    for word in sequence.split():\n        current_word += word\n        n_grams.append(current_word)\n    for i in range(len(n_grams)):\n        context = ' '.join(n_grams[i - N + 1:i])\n        count = Counter(context)\n        if K == 0:\n            prob = 0.0\n        else:\n            num = sum(count.values()) + K\n            denom = sum(count.values()) + K * len(vocab)\n            prob = num / denom * math.log(K)\n        log_prob += prob\n    return round(log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    W = np.random.rand(X.shape[0], K)\n    H = np.random.rand(K, X.shape[1])\n\n    def loss(W, H):\n        return np.linalg.norm(X - W * H, ord=2) ** 2 + alpha * (np.linalg.norm(W, ord=2) ** 2 + np.linalg.norm(H, ord=2) ** 2)\n    for _ in range(max_iter):\n        H_new = np.dot(X, W.T).round(4)\n        W_new = np.dot(W, H_new.T).round(4)\n        current_loss = loss(W_new, H_new)\n        if abs(current_loss) < tol:\n            break\n        else:\n            W = W_new\n            H = H_new\n    X_hat = np.dot(H, W.T).round(4).tolist()\n    return X_hat"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to four decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n    centroids = []\n    indices = np.random.permutation(len(X))\n    for i in range(K):\n        centroids.append(X[indices[i]])\n    for _ in range(max_iter):\n        labels = np.argmin(np.linalg.norm(X - centroids, axis=1))\n        new_centroids = []\n        for i in range(len(X)):\n            idx = labels[i]\n            new_centroids.append(X[i, idx])\n        centroids = new_centroids\n    centroids = [round(c, 4) for c in centroids]\n    centroids.sort(key=lambda x: (x[0], x[1]))\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string into a fixed-length list of integer token ids.\n    \n    Args:\n        text: The input string to encode.\n        time_steps: The number of time steps in the output sequence.\n        vocabulary: A dictionary mapping characters to their indices.\n        \n    Returns:\n        A list of integers representing the encoded tokens.\n    \"\"\"\n    result = []\n    for char in text:\n        if char in vocabulary:\n            result.append(vocabulary[char])\n        else:\n            result.append(0)\n    return result[:time_steps] if len(result) <= time_steps else result[:time_steps] + [0]\ndef int_to_string(indices: np.ndarray, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer IDs back to a human-readable string.\n    \n    Args:\n        indices: A 1D array of integer IDs.\n        inverse_vocab: A dictionary mapping IDs to their corresponding characters.\n        \n    Returns:\n        A string formed from the decoded tokens.\n    \"\"\"\n    decoded = []\n    for id in indices:\n        if id != 0:\n            decoded.append(inverse_vocab[id])\n    return ''.join(decoded)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Runs the example function for character-level sequence encoding and decoding.\n    \n    Args:\n        model: The neural model that processes the input.\n        input_vocabulary: Dictionary mapping characters to their indices.\n        inv_output_vocabulary: Dictionary mapping IDs to their characters.\n        text: The input text string to process.\n        \n    Returns:\n        The predicted string after decoding from the model's output.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(encoded.reshape(1, -1))\n    predicted_ids = prediction.argmax(-1)\n    decoded = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    predictions = []\n    if examples is None:\n        examples = 'EXAMPLES'\n    for example in examples:\n        predictions.append(model(example))\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    m = X.shape[0]\n    p = np.sigmoid(np.dot(X, w))\n    p = np.clip(p, 1e-20, 1)\n    loss = -np.sum(y * np.log(p) + (1 - y) * np.log(1 - p)) / m\n    grad = np.dot(X.T, p - y).flatten()\n    loss_rounded = round(loss, 4)\n    grad_rounded = np.round(grad, 4).tolist()\n    return (loss_rounded, grad_rounded)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    weights = np.ones(n_clf)\n    for _ in range(n_clf):\n        alpha_t = 0.5 * np.log((1 - np.sign(y_train)) / np.sign(y_train))\n        current_sum = np.sum(weights * X_train)\n        if current_sum == 0:\n            current_sum = 1\n        label = current_sum * np.sign(y_train)\n        weights *= label\n    predictions = X_test * weights\n    return predictions.tolist()"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"\n    Perform Multi-Class Linear Discriminant Analysis (LDA) and project the data.\n\n    Parameters:\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and n_features).\n\n    Returns:\n    list[list[float]]\n        The data projected onto the first n_components LDA directions. Each inner list corresponds to one sample.\n        All values are rounded to four decimal places.\n    \"\"\"\n    (n_samples, d) = X.shape\n    mu = np.mean(X[y == 0, :], axis=0)\n    mu_1 = np.mean(X[y == 1, :], axis=0)\n    mu_2 = np.mean(X[y == 2, :], axis=0)\n    mu_3 = np.mean(X[y == 3, :], axis=0)\n    mu_4 = np.mean(X[y == 4, :], axis=0)\n    S_W = np.zeros((d, d))\n    for c in range(n_samples):\n        x = X[c, :]\n        mu_c = mu[c]\n        mu_c_mean = np.mean(x)\n        S_W += (x - mu_c) ** 2\n    total_samples = n_samples\n    mu_global = np.mean(X, axis=0)\n    S_B = np.zeros((d, d))\n    for c in range(total_samples):\n        x = X[c, :]\n        mu_c = mu_global\n        mu_c_mean = np.mean(x)\n        S_B += (mu_c - mu_c_mean) ** 2\n    A = np.linalg.inv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    det_sign = np.prod(eigenvalues > 0)\n    flipped_eigenvectors = []\n    for (i, (val, vec)) in enumerate(zip(eigenvalues, eigenvectors)):\n        if val > 0:\n            flipped_eigenvectors.append((-vec).tolist())\n        else:\n            flipped_eigenvectors.append(vec.tolist())\n    eigenvalues_sorted = sorted(eigenvalues, reverse=True)\n    selected_eigenvectors = [eigenvecs[i] for i in range(min(len(eigenvalues_sorted), n_components))]\n    projected_X = np.dot(selected_eigenvectors, X)\n    projected_X_rounded = np.round(projected_X, 4)\n    return np.round(projected_X_rounded, 4)"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"\n    Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n    wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n    cell marked with 'F' and spreads to the four neighboring cells every\n    minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    fires = []\n    for (i, row) in enumerate(grid):\n        for (j, cell) in enumerate(row):\n            if cell == 'F':\n                fires.append((i, j))\n    (rows, cols) = (n, n)\n    start = (0, 0)\n    goal = (rows - 1, cols - 1)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    queue = deque()\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue.append((start[0], start[1], 0))\n    visited[start[0]][start[1]] = True\n    while queue:\n        (x, y, time) = queue.popleft()\n        if (x, y) == (goal[0], goal[1]):\n            return time\n        if (x, y) in fires:\n            continue\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if not visited[nx][ny]:\n                    if grid[nx][ny] != '#' and (not (nx, ny) in fires):\n                        visited[nx][ny] = True\n                        queue.append((nx, ny, time + 1))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Implement the k-Nearest Neighbors (k-NN) classifier.\n    \n    Parameters:\n    - X_train: Training data with labels in y_train\n    - y_train: Labels for training data\n    - X_test: Test data to predict\n    - k: Number of neighbors to consider\n    - metric: The distance metric to use ('euclidean', 'manhattan', or 'cosine')\n    \n    Returns:\n    - A 1-D NumPy array containing the predicted labels.\n    \"\"\"\n    if metric == 'euclidean':\n\n        def compute_distance(samples, label):\n            return np.linalg.norm(samples - label)\n        distances = np.zeros((len(X_test), len(X_train)))\n        for (i, test_sample) in enumerate(X_test):\n            for (j, train_label) in enumerate(y_train):\n                distance = compute_distance(test_sample, train_label)\n                distances[i, j] = distance\n    elif metric == 'manhattan':\n\n        def compute_distance(samples, label):\n            return np.sum(samples - label)\n        distances = np.zeros((len(X_test), len(X_train)))\n        for (i, test_sample) in enumerate(X_test):\n            for (j, train_label) in enumerate(y_train):\n                distance = compute_distance(test_sample, train_label)\n                distances[i, j] = distance\n    elif metric == 'cosine':\n\n        def compute_distance(samples, label):\n            cos_sim = np.dot(samples - label, samples - label) / (np.linalg.norm(samples - label) * np.linalg.norm(samples - label))\n            return 1 - cos_sim\n    else:\n        distances = np.zeros((len(X_test), len(X_train)))\n        for (i, test_sample) in enumerate(X_test):\n            for (j, train_label) in enumerate(y_train):\n                distance = np.linalg.norm(test_sample - train_label)\n                distances[i, j] = distance\n    predictions = []\n    for (test_sample_index, test_sample) in enumerate(X_test):\n        distances_for_neighbors = distances[test_sample_index, :]\n        distances_for_neighbors.sort()\n        selected_neighbors = distances_for_neighbors[:k]\n        label = None\n        for neighbor in selected_neighbors:\n            label = y_train[neighbors.index(neighbor)]\n        predictions.append(label)\n    return np.array(predictions)"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    X_train = X.copy()\n    X_test = X_test.copy()\n    if X.ndim == 1:\n        X = X.reshape((X.shape[0], X.shape[1]))\n    if X_test.ndim == 1:\n        X_test = X_test.reshape((X_test.shape[0], X_test.shape[1]))\n    if X_test.shape[0] < k:\n        X_test = X_test[:X_test.shape[0]]\n    n_samples = X_train.shape[0]\n    m_samples = X_test.shape[0]\n    distances = []\n\n    def compute_euclidean_distance(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def compute_manhattan_distance(x, y):\n        return np.sum(np.abs(x - y))\n\n    def compute_cosine_distance(x, y):\n        dot_product = np.dot(x, y)\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        return 1 - dot_product / (norm_x * norm_y)\n    if metric == 'euclidean':\n        dist = compute_euclidean_distance\n    elif metric == 'manhattan':\n        dist = compute_manhattan_distance\n    elif metric == 'cosine':\n        dist = compute_cosine_distance\n    else:\n        raise ValueError('Unknown metric')\n    for i in range(m_samples):\n        test_sample = X_test[i]\n        closest_labels = []\n        for j in range(n_samples):\n            train_sample = X_train[j]\n            distance = dist(train_sample, test_sample)\n            if k > len(closest_labels):\n                closest_labels.append(j)\n        majority_vote = [y[i] for i in closest_labels]\n        if len(set(majority_vote)) == 1:\n            predicted_label = majority_vote[0]\n        else:\n            predicted_label = min(majority_vote)\n        distances.append(predicted_label)\n    return np.array(distances).tolist()"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"\n    Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is: Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    if not isinstance(state, np.ndarray):\n        raise ValueError('Input must be a numpy array.')\n    if not isinstance(weights, dict):\n        raise ValueError('Weights must be a dictionary.')\n    W1 = weights['W1']\n    b1 = weights['b1']\n    W2 = weights['W2']\n    b2 = weights['b2']\n    W3 = weights['W3']\n    b3 = weights['b3']\n    action = np.zeros(len(state))\n    x = np.dot(state, W1)\n    x += b1\n    x = np.maximum(0, x)\n    x = np.dot(x, W2)\n    x += b2\n    x = np.maximum(0, x)\n    x = np.dot(x, W3)\n    x += b3\n    x = np.tanh(x)\n    action = round(x, 4)\n    return action.tolist()"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    X = np.insert(X, 0, values=np.zeros((X.shape[0], 1)), axis=1)\n    weights = np.zeros_like(X.shape[1])\n    bias = 0.0\n    if fit_intercept:\n        bias = (np.mean(y) - np.sum(X[:, 0] * y) / X.shape[0]) / X.shape[0]\n    for _ in range(max_iters):\n        for j in range(1, X.shape[1]):\n            w_j = np.zeros_like(weights[j])\n            w_j[j] = 0.0\n            r_j = y - X[:, j] * weights[j]\n            a = np.dot(X[:, j], r_j)\n            tau = lambda_param * max_iters\n            weights[j] = np.sign(a) * np.max(np.abs(a) - tau, 0)\n            if j == 0:\n                bias = (np.mean(y) - np.sum(X[:, 0] * y) / X.shape[0]) / X.shape[0]\n    weights_list = np.round(weights, 4)\n    bias_float = round(bias, 4)\n    return (weights_list, bias_float)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)) or not isinstance(y, (list, np.ndarray)):\n        raise ValueError('Inputs must be either a list or a NumPy array')\n    if not len(x) == len(y):\n        return -1\n    d = sum((1 for i in range(len(x)) if x[i] != y[i]))\n    return round(d / len(x), 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"\n    Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not window in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unknown window name')\n    if N <= 0:\n        raise ValueError('N must be a positive integer')\n    if window == 'hamming':\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * i / (N - 1)), 4) for i in range(N)]\n    elif window == 'hann':\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * i / (N - 1)), 4) for i in range(N)]\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * i / (N - 1)) + a2 * np.cos(4 * np.pi * i / (N - 1)) - a3 * np.cos(6 * np.pi * i / (N - 1)), 4) for i in range(N)]\n    elif window == 'generalized_cosine':\n        if not coefficients:\n            raise ValueError('Generalized cosine requires coefficients')\n        a_coefficients = coefficients\n        return [round((a * np.cos(2 * np.pi * i / (N - 1)) for (i, a) in enumerate(a_coefficients))) for a in a_coefficients]\n    if N == 1:\n        return [1.0] * N\n    return [round(0.54 - 0.46 * np.cos(2 * np.pi * i / (N - 1)), 4) for i in range(N)] if window == 'hamming' else [round(0.5 - 0.5 * np.cos(2 * np.pi * i / (N - 1)), 4) for i in range(N)] if window == 'hann' else [round(a0 - a1 * np.cos(2 * np.pi * i / (N - 1)) + a2 * np.cos(4 * np.pi * i / (N - 1)) - a3 * np.cos(6 * np.pi * i / (N - 1)), 4) for i in range(N)] if window == 'blackman_harris' else [round((a * np.cos(2 * np.pi * i / (N - 1)) for (i, a) in enumerate(coefficients))) for a in coefficients]"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"\n    Train a binary Logistic Regression classifier using mini-batch Gradient Descent and return predictions for the test set.\n    \n    Parameters:\n    X_train : list[list[float]] - Training feature matrix\n    y_train : list[int] - Training labels (exactly two distinct values)\n    X_test : list[list[float]] - Test feature matrix\n    epochs : int, default 5000 - Number of passes over training data\n    learning_rate : float, default 0.1 - Step size in Gradient Descent updates\n    batch_size : int, default 32 - Number of samples per mini-batch\n    \n    Returns:\n    list[int] - Predicted labels for each sample in X_test\n    \"\"\"\n    X_train = np.insert(X_train, 0, [1.0], axis=1)\n    X_test = np.insert(X_test, 0, [1.0], axis=1)\n    W = np.zeros((len(y_train), len(X_train[0])))\n\n    def predict_prob(X):\n        for _ in range(epochs):\n            idx = np.arange(len(X))\n            batch_idx = np.random.permutation(idx)\n            for i in range(batch_size):\n                x_batch = X[batch_idx[i]]\n                y_batch = y_train[batch_idx[i]]\n                loss = -np.dot(W.T, x_batch) + np.log(1 / (1 + np.exp(-np.dot(W, x_batch))))\n                loss = np.sum(loss) / batch_size\n                W += learning_rate * (loss / batch_size)\n        return W.T @ X > 0.5\n    predicted_labels = predict_prob(X_test)\n    return predicted_labels"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    w = [1.0] * n_estimators\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    m = len(X_train_np)\n    predictions = []\n    for _ in range(n_estimators):\n        best_stump = None\n        min_error = float('inf')\n        for i in range(m):\n            h_t = X_train_np[i, :]\n            if np.abs(y_train_np[i]) == 1:\n                break\n            error_t = np.sum(w * (y_train_np[i] != h_t[0])) / m\n            current_stump = {'feature_index': i, 'threshold': h_t[1], 'polarity': 1 if h_t[1] < 0 else -1}\n            if error_t < min_error or (error_t == min_error and current_stump['feature_index'] < best_stump.get('feature_index', -1) and (current_stump['threshold'] < best_stump.get('threshold', 0)) and (current_stump['polarity'] < best_stump.get('polarity', 1))):\n                best_stump = current_stump\n        alpha_t = 0.5 * np.log((1 - error_t) / (error_t + 1e-10))\n        new_weights = w * np.exp(-alpha_t * y_train_np[i] * h_t[1])\n        total_weight = np.sum(new_weights)\n        new_weights /= total_weight\n        w = new_weights\n    aggregated_votes = []\n    for i in range(len(X_test_np)):\n        vote = 0\n        for j in range(n_estimators):\n            feature_index = X_test_np[i, :][j]\n            threshold = X_test_np[i, 1]\n            polarity = 1 if threshold < 0 else -1\n            prediction = X_train_np[i, :][j]\n            vote += prediction * w[j]\n        predictions.append(1 if vote > 0 else 0)\n    return predictions"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not (n_dims > 0 and num_particles > 0 and (num_iterations > 0)):\n        return -1\n    rng = np.random.default_rng(seed)\n    x = rng.uniform(-1, 1, size=(num_particles, n_dims))\n    v = rng.uniform(-1, 1, size=(num_particles, n_dims))\n    global_best = None\n    personal_best = None\n    for _ in range(num_iterations):\n        w = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        r1 = rng.uniform(0, 1)\n        r2 = rng.uniform(0, 1)\n        v_new = w * v + c1 * r1 * (personal_best[0] - x[0]) + c2 * r2 * (global_best[0] - x[0])\n        x_new = np.clip(x + v_new, -1, 1)\n        if np.min(x_new) == personal_best[0]:\n            personal_best = x_new\n        if np.min(x_new) == global_best[0]:\n            global_best = x_new\n    min_value = np.min(global_best)\n    return round(min_value, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"\n    Pure-function implementation of the k-Nearest Neighbours algorithm.\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k <= 0 or len(X_train) == 0:\n        return []\n    if k < 1 or k > len(X_train):\n        return []\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    distances = np.sqrt(np.sum((X_train_np - X_test_np) ** 2, axis=1))\n    nearest_indices = np.argsort(distances[:k])\n    if task == 'classification':\n        label_counts = Counter(y_train[nearest_indices[:k]])\n        return [label_counts[i] for i in sorted(label_counts.keys())]\n    else:\n        mean_values = np.mean(y_train[nearest_indices[:k]], rounding_mode='rounding')\n        rounded_mean = round(mean_values, 4)\n        return [rounded_mean] + [mean_values for _ in X_test_np]"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nimport math\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"\n    Build a binary decision tree from scratch using Gini impurity and recursive binary splitting.\n    \n    Parameters:\n    X_train (np.ndarray): Training feature matrix of shape (n_samples, n_features).\n    y_train (np.ndarray): Integer class labels for the training data, shape (n_samples,).\n    X_test (np.ndarray): Test feature matrix to classify, shape (m_samples, n_features).\n    max_depth (int | None): Maximum allowed depth. If None, no depth limit.\n\n    Returns:\n    list[int]: Predicted class label for each row in X_test.\n    \"\"\"\n    if max_depth is None:\n        max_depth = float('inf')\n\n    def predict_leaf(X):\n        return [y_train[i] for i in range(len(X))]\n\n    def build_tree(node, left, right, current_depth, current_gini):\n        if current_depth > max_depth:\n            return predict_leaf(X_test)\n        if not left or not right:\n            if y_train[left] == y_train[right]:\n                return [y_train[left]]\n            else:\n                return [y_train[left], y_train[right]]\n        feature_values = np.unique(X_train[left], axis=0)\n        mid_points = np.sort(feature_values)\n        gain = 0\n        best_split = (feature_values, mid_points[1])\n        for (feature, mid) in zip(mid_points, mid_points[1]):\n            threshold = mid\n            left_subset = X_train[left][feature_values < threshold]\n            right_subset = X_train[right][feature_values >= threshold]\n            gini_left = calculate_gini(left_subset, y_train[left], 0)\n            gini_right = calculate_gini(right_subset, y_train[right], 0)\n            gain = max(gain, gini_left + gini_right)\n            best_split = (feature, threshold)\n        if gain <= 0:\n            return [y_train[left], y_train[right]]\n        left_child = build_tree(best_split, left, right, current_depth + 1, current_gini)\n        right_child = build_tree(best_split, left, right, current_depth + 1, current_gini)\n        if len(left_child) == 0 or len(right_child) == 0:\n            return [y_train[left], y_train[right]]\n        else:\n            return [left_child[-1], right_child[-1]]\n    root = build_tree(0, 0, 0, 0, 0)\n    return [predict_leaf(X_test[i]) for i in range(len(X_test))]\ndef calculate_gini(subset, y_labels, class_label):\n    \"\"\"Calculate Gini impurity for a subset.\"\"\"\n    n = len(y_labels)\n    unique_y = np.unique(y_labels)\n    counts = np.bincount(y_labels, weights=1 / n, label='class')\n    return -counts * (1 - np.sum(counts, axis=0) / n)"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best feature index and threshold that minimizes the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(feature_index, threshold, gini)` where\n        `gini` is rounded to 4 decimal places.  If no valid split exists,\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    if not X or not y:\n        return (-1, None, round(np.sum(y), 4))\n    n_samples = len(X)\n    n_features = len(X[0]) if isinstance(X, list) else len(X)\n    if n_samples == 0:\n        return (-1, None, round(0, 4))\n    total_samples = n_samples\n    total_classes = len(set(y))\n    g_total = 0\n    for class_label in set(y):\n        p = (y == class_label) / total_samples\n        g_total += 1 - np.sum(p * p)\n    g_total = round(g_total, 4)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = g_total\n    for feature_idx in range(n_features):\n        feature_values = [x[feature_idx] for x in X]\n        unique_vals = np.unique(feature_values)\n        unique_vals_sorted = np.sort(unique_vals)\n        if len(unique_vals_sorted) == 0:\n            continue\n        for v in unique_vals_sorted:\n            left_count = sum((1 for x in X if x[feature_idx] <= v))\n            right_count = n_samples - left_count\n            if left_count == 0 or right_count == 0:\n                continue\n            node_left = left_count / total_samples\n            node_right = right_count / total_samples\n            g_left = 1 - node_left ** 2\n            g_right = 1 - node_right ** 2\n            weight = 1.0 / (left_count + right_count)\n            current_gini = (node_left * g_left + node_right * g_right) * weight\n            if current_gini < best_gini:\n                best_gini = current_gini\n                best_feature_index = feature_idx\n                best_threshold_value = v\n            elif current_gini == best_gini:\n                if feature_idx < best_feature_index:\n                    best_feature_index = feature_idx\n                    best_threshold_value = v\n                elif feature_idx == best_feature_index:\n                    if v < best_threshold_value:\n                        best_threshold_value = v\n            else:\n                pass\n    if best_feature_index == -1:\n        return (-1, None, g_total)\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"\n    Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    if name not in ['euclidean', 'manhattan', 'chebyshev', 'cosine']:\n        return -1\n\n    def d(x, y):\n        if not isinstance(x, list) and (not isinstance(y, list)):\n            return -1\n        if not all((isinstance(v, list) for v in x)):\n            return -1\n        if not all((len(v) == len(x) for v in x)):\n            return -1\n        if not x or not y:\n            return -1\n        if name == 'cosine':\n            if np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0:\n                return -1\n        if name == 'euclidean':\n            return round(np.sqrt(sum(((xi - yi) ** 2 for (xi, yi) in zip(x, y)))), 4)\n        elif name == 'manhattan':\n            return round(sum((abs(xi - yi) for (xi, yi) in zip(x, y))), 4)\n        elif name == 'chebyshev':\n            return round(max((abs(xi - yi) for (xi, yi) in zip(x, y))), 4)\n        else:\n            dot_product = np.dot(x, y)\n            norm_x = np.linalg.norm(x)\n            norm_y = np.linalg.norm(y)\n            return round(1 - dot_product / (norm_x * norm_y), 4)\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if not env.action_space.n:\n        return ([], [], 0)\n    n_actions_per_dim = []\n    if cont_action:\n        for i in range(len(env.action_space.shape)):\n            n_actions_per_dim.append(np.inf)\n        return ([], [], len(env.action_space.shape))\n    action_ids = []\n    action_dim = len(env.action_space.shape)\n    for dim_idx in range(action_dim):\n        if not isinstance(env.action_space.shape[dim_idx], tuple):\n            continue\n        sub_shape = env.action_space.shape[dim_idx]\n        if cont_action:\n            n_actions_per_dim[dim_idx] = np.inf\n        else:\n            values = [val for val in range(sub_shape[0])]\n            for vals in product(*[range(val) for val in sub_shape]):\n                action_ids.append(tuple(vals))\n    if all((1 for _ in range(action_dim))) and (not cont_action):\n        action_ids = list(product(*[env.action_space.shape[i] for i in range(action_dim)]))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    beta = np.zeros((V, len(phi[0])))\n    for (d_idx, doc) in enumerate(corpus):\n        N_d = len(doc)\n        T_topics = phi[d_idx].shape[1]\n        for (t_idx, topic_prob) in enumerate(phi[d_idx]):\n            total = np.sum(topic_prob)\n            if total != 0:\n                beta[t_idx, d_idx] = topic_prob / total\n    normalized_beta = beta / beta.sum(axis=1)\n    rounded_beta = np.round(normalized_beta, 4)\n    return rounded_beta"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Partitioning Around Medoids (PAM) clustering algorithm.\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n    \n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    medoids = X[:k]\n    while True:\n        distances = []\n        for i in range(len(X)):\n            if i < len(medoids):\n                distances.append(np.linalg.norm(X[i] - medoids[i]))\n        best_swap = None\n        best_reduction = float('inf')\n        for m_idx in range(k):\n            for non_med_idx in range(len(X)):\n                if m_idx != non_med_idx:\n                    new_medoids = medoids.copy()\n                    (new_medoids[m_idx], new_medoids[non_med_idx]) = (new_medoids[non_med_idx], new_medoids[m_idx])\n                    new_distances = []\n                    for i in range(len(X)):\n                        if i < len(new_medoids):\n                            new_distances.append(np.linalg.norm(X[i] - new_medoids[i]))\n                    original_cost = sum(distances)\n                    new_cost = sum(new_distances)\n                    if new_cost < best_reduction:\n                        best_reduction = new_cost\n                        best_swap = (m_idx, non_med_idx)\n                        if new_cost < best_reduction:\n                            best_reduction = new_cost\n                            best_swap = (m_idx, non_med_idx)\n        if not best_swap:\n            break\n        medoids = new_medoids\n        distances = []\n        for i in range(len(X)):\n            if i < len(medoids):\n                distances.append(np.linalg.norm(X[i] - medoids[i]))\n        labels = [0] * len(X)\n        for i in range(len(X)):\n            min_dist = float('inf')\n            idx = -1\n            for j in range(len(medoids)):\n                dist = np.linalg.norm(X[i] - medoids[j])\n                if dist < min_dist or (dist == min_dist and j < idx):\n                    idx = j\n                    min_dist = dist\n            labels[i] = idx\n    return labels"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"\n    Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor: float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio: float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations: int, default 3000\n        Number of gradient descent iterations.\n    learning_rate: float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the inputs are invalid (different feature counts, or non-positive `n_iterations`).\n    \"\"\"\n    if not isinstance(x_train, list) or not isinstance(x_train[0], list):\n        raise ValueError('x_train must be a list of lists')\n    if not isinstance(y_train, list) or not isinstance(y_train[0], float):\n        raise ValueError('y_train must be a list of floats')\n    if not isinstance(x_test, list) or not isinstance(x_test[0], list):\n        raise ValueError('x_test must be a list of lists')\n    if len(x_train) != len(x_test):\n        raise ValueError('Number of rows in x_train and x_test must be equal.')\n    if not np.array_equal(x_train[0], x_test[0]):\n        raise ValueError('x_train and x_test must have the same shape.')\n    X = np.column_stack((np.ones(len(x_train)), x_train))\n    if not (len(X.shape) == 2 and len(X[0].shape) == 1):\n        raise ValueError('Feature matrix should have shape (n_samples, n_features + 1)')\n    X_train = np.array(x_train)\n    X_test = np.array(x_test)\n    if len(X_train) < 1:\n        raise ValueError('x_train must contain at least one feature')\n    if len(X_test) < 1:\n        raise ValueError('x_test must contain at least one feature')\n    if n_iterations <= 0:\n        return -1\n    if len(X_train) != len(X_test):\n        return -1\n    X_train = np.array(x_train)\n    X_test = np.array(x_test)\n    if X_train.shape != X_test.shape:\n        return -1\n    if len(y_train) != X_train.shape[1]:\n        return -1\n    for i in range(X_train.shape[1] - 1):\n        X_train[:, i] = X_train[:, i] / np.std(X_train[:, i])\n    if len(X_train) != len(X_test):\n        return -1\n    w = np.zeros(X_train.shape[1] + 1)\n    loss = []\n    for _ in range(n_iterations):\n        dw = np.dot(X_train.T, y_train - w) * learning_rate\n        w += learning_rate * dw\n        loss.append(np.mean((y_train - w) ** 2))\n        if abs(loss[-1]) < reg_factor:\n            break\n    predictions = np.dot(X_test, w)\n    predictions = np.round(predictions, 4).tolist()\n    return predictions"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    grad = []\n    for (a, p) in zip(actual, predicted):\n        z = -a * p\n        grad_i = a * np.exp(-z) * (1 - np.exp(-z))\n        grad.append(round(grad_i, 6))\n    hess = []\n    for p in predicted:\n        prob = np.sigmoid(p)\n        hess_i = prob * (1 - prob)\n        hess.append(round(hess_i, 6))\n    prob = []\n    for p in predicted:\n        prob_i = np.sigmoid(p)\n        prob.append(round(prob_i, 6))\n    return (np.array(grad), np.array(hess), np.array(prob))"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    player_value = sum(player)\n    dealer_value = sum(dealer)\n    if len(player) == 2 and 1 in player and (10 in player):\n        if player_value == 11:\n            reward = 1.5\n        else:\n            reward = 1.0\n    else:\n        player_bust = player_value > 21\n        dealer_bust = dealer_value > 21\n        if player_bust:\n            reward = -1.0\n        elif dealer_bust:\n            reward = +1.0\n        elif player_value > dealer_value:\n            reward = +1.0\n        elif player_value < dealer_value:\n            reward = -1.0\n        else:\n            reward = 0.0\n    return reward"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"\n    Helper function to compute the squared logarithmic errors.\n    \n    Parameters:\n    actual (list or tuple): True values\n    predicted (list or tuple): Predicted values\n    \n    Returns:\n    numpy.ndarray: Element-wise squared log errors\n    \"\"\"\n    if not all((isinstance(x, (int, float)) for x in actual)) or not all((isinstance(x, (int, float)) for x in predicted)):\n        return np.zeros_like(actual)\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return np.zeros_like(actual)\n    return (np.log10(1 + actual) - np.log10(1 + predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"\n    Calculate Mean Squared Logarithmic Error (MSLE).\n    \n    Parameters:\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Must be same length as `actual` and contain only non-negative numbers.\n    \n    Returns:\n    float\n        The MSLE rounded to 4 decimals. Returns -1 if input validation fails.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if not all((isinstance(x, (int, float)) for x in actual)) or not all((isinstance(x, (int, float)) for x in predicted)):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    squared_errors = squared_log_error(actual, predicted)\n    return np.mean(squared_errors) * 100"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z_array = np.array(z)\n    if np.ndim(z_array) == 1:\n        result = np.where(z_array > 0, 1 / (1 + np.exp(-z_array)), 1 - 1 / (1 + np.exp(-z_array)))\n    else:\n        result = np.where(z_array >= 0, 1 / (1 + np.exp(-z_array)), 1 - 1 / (1 + np.exp(-z_array)))\n    rounded_result = round(result, 4)\n    return rounded_result.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.array(list(np.tolist(z))).tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(x, a) for x in z]\n    else:\n        return list(leaky_relu(z))"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test: 2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in X_test. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n\n    def stump_classifier(X, y):\n        threshold = X[:, feature_index]\n        polarity = 1 if y < threshold else -1\n        return (feature_index, threshold, polarity)\n    sample_weights = [1.0] * n_clf\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        for i in range(len(X_train.columns)):\n            feature_index = i\n            threshold = X_train[feature_index].mean()\n            polarity = 1 if y_train[i] < threshold else -1"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.linalg import svd\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return [-1]\n    if len(shape) == 2:\n        (d0, d1) = shape\n        k = min(d0, d1)\n        A = np.random.normal(loc=0, scale=1.0, size=(d0, d1))\n        (U, singular_values, V_t) = svd(A, full_matrices=False)\n        Q = U if U.shape == (d0, d1) else V_t\n        Q = Q.reshape((d0, d1))\n        scaled_Q = Q * scale\n        flat = scaled_Q.tolist()\n        if len(flat) <= len(shape[0]):\n            flat = flat[:len(shape[0])]\n        flat = flat.reshape(shape[0], -1)\n        for i in range(len(flat)):\n            for j in range(i + 1):\n                if abs(flat[i] @ flat[j]) < 1e-06 * scale:\n                    print('Orthogonality check failed')\n                    return -1\n        return flat\n    else:\n        (d0, d1) = shape\n        k = min(d0, d1)\n        A = np.random.normal(loc=0, scale=1.0, size=(d0, d1))\n        (U, singular_values, V_t) = svd(A, full_matrices=False)\n        Q = U if U.shape == (d0, k) else V_t\n        Q = Q.reshape((d0, k))\n        scaled_Q = Q * scale\n        flat = scaled_Q.tolist()\n        if len(flat) <= len(shape[0]):\n            flat = flat[:len(shape[0])]\n        flat = flat.reshape(shape[0], -1)\n        for i in range(len(flat)):\n            for j in range(i + 1):\n                if abs(flat[i] @ flat[j]) < 1e-06 * scale:\n                    print('Orthogonality check failed')\n                    return -1\n        return flat"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    z1 = np.dot(state, np.array([1.0, 1.0, 1.0, 1.0]))\n    z2 = np.dot(z1, np.array([1.0, 1.0, 1.0, 1.0])) * 4.0\n    z3 = np.dot(z2, np.array([1.0, 1.0, 1.0, 1.0])) * 16.0\n    logits = z3 * 64.0\n    action_probs = np.softmax(logits)\n    state_value = z3\n    action_probs_rounded = np.round(action_probs, 4)\n    state_value_rounded = round(state_value, 4)\n    return (action_probs_rounded, state_value_rounded)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"\n    Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is:\n    state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU\n    \u2514\u2500 actor head (Dense \u2192 soft-max) \u2192 action probabilities\n    \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    (W1, b1) = (params['W1'], params['b1'])\n    (W2, b2) = (params['W2'], params['b2'])\n    (W3, b3) = (params['W3'], params['b3'])\n    (Wa, ba) = (params['Wa'], params['ba'])\n    (Wc, bc) = (params['Wc'], params['bc'])\n    hidden_state = np.dot(state, W1) + b1\n    hidden_state = np.relu(hidden_state)\n    raw_scores = np.dot(hidden_state, Wa) + ba\n    probabilities = np.exp(raw_scores) / np.sum(raw_scores)\n    rounded_probabilities = np.round(probabilities, 4)\n    rounded_value = round(np.dot(hidden_state, Wc) + bc, 4)\n    if np.isclose(rounded_probabilities[-1], 0.0, atol=0.0001):\n        rounded_probabilities[-1] = 1.0\n    if np.isclose(rounded_value, 0.0, atol=0.0001):\n        rounded_value = 0.0\n    return (rounded_probabilities, rounded_value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    if not gradient:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=2) + (1 - l1_ratio) * np.sum(w ** 2))\n        return round(penalty, 4)\n    grad = alpha * (np.sign(w) * l1_ratio + (1 - l1_ratio) * w)\n    return round(grad.tolist(), 4)"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name, n_t, X, epsilon):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    lower_case = param_name.lower()\n    param = model.parameters[param_name]\n    temp_param = deepcopy(param)\n    predictions = model.forward(X)\n    grads = np.zeros((n_t, len(temp_param)))\n    for t in range(n_t):\n        for delta in [epsilon, -epsilon]:\n            new_param = temp_param + delta * np.eye(len(temp_param))\n            pred = model.forward(X)\n            loss = loss_func(pred)\n            partial_derivative = loss - loss_func(np.array([new_param])) / (2 * epsilon)\n            grads[t, lower_case] = partial_derivative\n    return grads.T.astype(np.float64)"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    weights = np.ones_like(y_train)\n\n    def stump_error(x, y):\n        return sum((1 for (x_val, y_val) in zip(x, y) if x_val != y_val))\n\n    def stump_weight(x, y):\n        return 1 / (2 * np.log((1 - stump_error(x, y)) / stump_error(x, y)))\n    clf = []\n    for _ in range(n_clf):\n        stump = {}\n        stump['alpha'] = stump_weight(X_train[0], y_train[0])\n        stump['error'] = stump_error(X_train[0], y_train[0])\n        stump['votes'] = [1] * len(X_train[0])\n        clf.append(stump)\n        weights *= stump['alpha']\n        new_weights = np.array([w / np.sum(weights) for w in weights])\n        for i in range(len(X_train)):\n            X_i = X_train[i]\n            y_i = y_train[i]\n            error = stump_error(X_i, y_i)\n            vote_count = np.sum([1 if v > 0 else -1 for v in stump['votes']])\n            if error < 0:\n                stump['votes'][i] = 1\n            elif error > 0:\n                stump['votes'][i] = -1\n            weights[i] = new_weights[i] * (1 / np.sum(new_weights))\n    predictions = []\n    for x in X_test:\n        total_vote = 0\n        for stump in clf:\n            total_vote += stump['votes'] * x\n        predictions.append(-1 if total_vote < 0 else 1)\n    return predictions"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    receptive_field_size = 1\n    for dim in shape[1:]:\n        receptive_field_size *= dim\n    fan_in = shape[0] * receptive_field_size\n    fan_out = shape[1] * receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, s, shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"\n    Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    G = [[] for _ in range(len(V))]\n    for (u, v) in E:\n        G[V.index(u)].append(v)\n        G[V.index(v)].append(u)\n    return G"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump for a binary classification task.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    best_feature_index = -1\n    best_threshold = -np.inf\n    best_polarity = -1\n    best_weighted_error = 0.0\n    for feature_idx in range(n_features):\n        for val in np.unique(X[:, feature_idx]):\n            p = 1.0\n            if val < X[:, feature_idx]:\n                p = 1.0\n            else:\n                p = -1.0\n            error = sum((sample_weights * (p != y[i]) for i in range(n_samples)))\n            if error < best_weighted_error or (error == best_weighted_error and feature_idx < best_feature_index):\n                best_weighted_error = error\n                best_threshold = val\n                best_polarity = p\n                best_feature_index = feature_idx\n    return {'feature_index': best_feature_index, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(best_weighted_error, 4)}"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(feature, np.ndarray):\n        feature = np.array(feature)\n    if not isinstance(target, np.ndarray):\n        target = np.array(target)\n    n = len(feature)\n    n_classes = len(np.unique(target))\n    if n == 0:\n        return (None, 0.0)\n    if n == 1:\n        return (feature[0], 0.0)\n\n    def entropy(class_label_counts):\n        if not class_label_counts:\n            return 0.0\n        counts = Counter(class_label_counts)\n        entropy = -sum((count * math.log(count, 2) for count in counts.values()))\n        return entropy\n    best_threshold = None\n    best_gain = 0.0\n    for t in get_all_possible_splits(feature, target):\n        left = [x for x in feature if x < t]\n        right = [x for x in feature if x >= t]\n        parent_entropy = entropy(Counter(target))\n        left_entropy = entropy(Counter(target[left]))\n        right_entropy = entropy(Counter(target[right]))\n        left_count = len(left)\n        right_count = len(right)\n        left_gain = parent_entropy - left_count / n * left_entropy\n        right_gain = parent_entropy - right_count / n * right_entropy\n        current_gain = left_gain + right_gain\n        if current_gain > best_gain or (current_gain == best_gain and t < best_threshold):\n            best_threshold = t\n            best_gain = current_gain\n    threshold_rounded = round(best_threshold, 4)\n    info_rounded = round(best_gain, 4)\n    return (threshold_rounded, info_rounded)"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    try:\n        func = globals()[name]\n        if isinstance(func, Callable):\n            return func\n        else:\n            raise ValueError('Invalid initialization function.')\n    except KeyError:\n        raise ValueError('Invalid initialization function.') from None"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n\n    Args:\n        X: Input 4-D NumPy array with shape (N, C, H, W)\n        pool_shape: Pooling window size (p_h, p_w)\n        stride: Stride for sliding the window\n        accum_grad: Gradient of loss with respect to every pooled value\n\n    Returns:\n        A tuple containing the computed pooled output and gradient input.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    new_H = (H - pool_shape[0] + 2 * stride[0]) // stride[0]\n    new_W = (W - pool_shape[1] + 2 * stride[1]) // stride[1]\n    pooled_output = np.zeros((N, C, new_H, new_W))\n    for batch in range(N):\n        for ch in range(C):\n            for h in range(new_H):\n                for w in range(new_W):\n                    mean = np.mean(X[batch, ch, h * pool_shape[0] + 1:h * pool_shape[0] + pool_shape[0] + 1, w * pool_shape[1] + 1:w * pool_shape[1] + pool_shape[1] + 1])\n                    pooled_output[batch, ch, h, w] = mean\n    grad_input = np.zeros_like(X)\n    for batch in range(N):\n        for ch in range(C):\n            for h in range(new_H):\n                for w in range(new_W):\n                    num_elements = (h * pool_shape[0] + w * pool_shape[1] + 1) // (stride[0] + stride[1])\n                    delta = accum_grad[batch, ch, h, w] / num_elements\n                    grad_input[batch, ch, h, w] += delta\n    pooled_output_rounded = np.round(pooled_output, 4).tolist()\n    grad_input_rounded = np.round(grad_input, 4).tolist()\n    return (pooled_output_rounded, grad_input_rounded)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\ndef compare_trees(tree_a, tree_b):\n    if tree_a is None and tree_b is None:\n        return True\n    if tree_a is None or tree_b is None:\n        return False\n    if tree_a.left is not tree_b.left or tree_a.right is not tree_b.right:\n        return False\n    if tree_a.feature != tree_b.feature:\n        return False\n    threshold_a = tree_a.threshold\n    threshold_b = tree_b.threshold\n    if abs(threshold_a - threshold_b) > 1e-08:\n        return False\n    leaves_a = [leaf.value for leaf in tree_a.left]\n    leaves_b = [leaf.value for leaf in tree_b.left]\n    if np.allclose(leaves_a, leaves_b, atol=1e-08):\n        return True\n    return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"\n    Perform a single-point column crossover on two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent matrices do not have the same shape, return -1.\n    \"\"\"\n    if len(parent1) != len(parent2):\n        return -1\n    if cutoff < 0 or cutoff >= len(parent1[0]):\n        return -1\n    child1 = []\n    child2 = []\n    for col in range(len(parent1[0])):\n        if col < cutoff:\n            child1.append(parent1[col])\n        else:\n            child2.append(parent2[col])\n    child1 = np.array(child1).tolist()\n    child2 = np.array(child2).tolist()\n    return (child1, child2)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"\n    Convert a custom graph dictionary into a plain adjacency dictionary.\n    \n    Parameters:\n    G : dict\n        A graph represented as a dictionary with the keys:\n          - 'is_directed' (bool)\n          - '_V2I'        (dict mapping vertex label -> index)\n          - '_G'          (list of adjacency lists, each edge is a tuple (source_label, target_label, weight))\n    \n    Returns:\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples. For undirected graphs every edge appears once in each direction and the neighbour lists are sorted alphabetically.\n    \"\"\"\n    if not G:\n        return {}\n    vertex_to_index = {key: idx for (idx, key) in G['_V2I'].items()}\n    adj = {}\n    for (i, edge) in enumerate(G['_G']):\n        (source_label, target_label, weight) = edge\n        if G['is_directed']:\n            adj[vertex_to_index[source_label]].append((target_label, weight))\n        else:\n            adj[target_label].append((source_label, weight))\n            adj[source_label].append((target_label, weight))\n    for label in sorted(adj.keys()):\n        adj[label] = sorted(adj[label])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x_float = np.array(x)\n    return np.all(x_float == [0.0, 1.0])"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"\n    Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    padded_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        padded_tokens = [f'<bol>'] + tokens + ['<eol>']\n        padded_corpus.append(' '.join(padded_tokens))\n    token_counts = Counter()\n    for i in range(len(padded_corpus)):\n        if N == 1:\n            count = token_counts[padded_corpus[i]]\n            token_counts[padded_corpus[i]] = count\n        else:\n            prefix = padded_corpus[i - N + 1] if i >= N - 1 else ''\n            suffix = padded_corpus[i]\n            current_count = token_counts.get(prefix + suffix, 0)\n            token_counts[prefix + suffix] += current_count\n    log_probabilities = []\n    for i in range(len(padded_corpus)):\n        if N == 1:\n            if padded_corpus[i] not in token_counts:\n                log_prob = float('-inf')\n            else:\n                prob = token_counts[padded_corpus[i]] / len(token_counts)\n                log_prob = math.log(prob)\n        elif i < N - 1:\n            if padded_corpus[i - N + 1] not in token_counts:\n                log_prob = float('-inf')\n            else:\n                prefix = padded_corpus[i - N + 1]\n                suffix = padded_corpus[i]\n                prob = token_counts[prefix + suffix] / token_counts[prefix]\n                log_prob = math.log(prob)\n        elif padded_corpus[i] not in token_counts:\n            log_prob = float('-inf')\n        else:\n            prob = token_counts[padded_corpus[i]] / len(token_counts)\n            log_prob = math.log(prob)\n        log_probabilities.append(log_prob)\n    total_log_prob = sum(log_probabilities)\n    if total_log_prob < 0:\n        return float('-inf')\n    else:\n        return round(total_log_prob, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples = X.shape[0]\n    d = X.shape[1]\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i == j:\n                W[i, j] = 1.0\n            else:\n                norm_sq = np.sum((X[i] - X[j]) ** 2)\n                W[i, j] = 1.0 / (1 + norm_sq ** 0.5)\n    D = np.diag(np.sum(W, axis=0))\n    L = D - W\n    E = np.linalg.eig(L)[1][:, :k]\n    centroids = E[:k].copy()\n    n_clusters = k\n    iterations = 0\n    best_centroids = centroids.copy()\n    while True:\n        new_centroids = []\n        for i in range(n_samples):\n            distance = np.sqrt(np.sum((centroids[i] - X[i]) ** 2))\n            min_distance = np.min(distance)\n            new_centroids.append(i)\n        centroids = new_centroids\n        empty_clusters = [i for i in range(n_samples) if centroids[i] < 0]\n        if len(empty_clusters) == 0:\n            break\n        if np.array_equal(centroids, best_centroids):\n            break\n        iterations += 1\n        if iterations > 100:\n            break\n    labels = np.cluster_centers_to_labels(centroids, X)\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": ""}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Compute the posterior mean (MAP estimate) of the coefficients in Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP estimate of *b* does not depend on \u03c3\u00b2.\n    \n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a 1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to 4 decimal places.\n    \"\"\"\n    if fit_intercept and X.shape[1] == 1:\n        X = np.insert(X, 0, [mu], axis=1)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, list):\n        V = np.diag(V)\n    elif isinstance(V, tuple):\n        V = np.diag(V)\n    else:\n        V = np.array([V])\n    posterior_cov = np.linalg.inv(V + X @ X.T)\n    mu_b = posterior_cov @ (V @ mu + X @ y)\n    result = np.round(mu_b, 4)\n    return result.tolist()"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"\n    Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns. Each row is a triangular filter defined on the Mel scale.\n    \n    Args:\n        N: Discrete Fourier transform length\n        n_filters: Number of filters to create (default is 20)\n        fs: Sampling frequency (default is 44,000 Hz)\n        min_freq: Lower limit for Mel frequencies (default is 0)\n        max_freq: Upper limit for Mel frequencies (optional; default is Nyquist frequency)\n        normalize: Normalize each filter's weight by its area in Mel space\n\n    Returns:\n        A list of lists of floats: each sublist corresponds to a triangular filter on the Mel scale.\n    \"\"\"\n\n    def f_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_f(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    if max_freq is None:\n        max_freq = fs // 2\n    else:\n        max_freq = max_freq\n    freqs = np.linspace(min_freq, max_freq, num=n_filters + 2)\n    mel_values = f_to_mel(freqs)\n    f_vals = mel_to_f(mel_values)\n    filterbank = np.zeros((n_filters, N // 2 + 1), dtype=np.float64)\n    for k in range(N // 2 + 1):\n        for i in range(n_filters):\n            center_freq = k * fs / N\n            f_i = f_vals[i]\n            f_i_plus_2 = f_vals[i + 1]\n            slope_left = (f_i_plus_2 - f_i) / (f_i_plus_2 - f_i)\n            slope_right = (f_i_plus_2 - f_i) / (f_i_plus_2 - f_i)\n            w_i = 2.0 * (f_i_plus_2 - f_i) / (f_i_plus_2 - f_i)\n            w_i /= f_i_plus_2 - f_i\n            if normalize:\n                w_i *= (f_i_plus_2 - f_i) / (f_i_plus_2 - f_i)\n            filterbank[i][k] = np.clip(w_i, 0, 1)\n    filtered_result = np.round(filterbank, 4)\n    return filtered_result.tolist()"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    N = window_len - 1\n    if not symmetric:\n        window = [a0] * window_len\n        for i in range(1, window_len):\n            window[i] = a0 - a1 * np.cos(2 * np.pi * i / N)\n    else:\n        window = [a0] * window_len\n        for i in range(1, window_len):\n            window[i] = a0 - a1 * np.cos(2 * np.pi * i / N)\n        window[window_len - 1] = window[0]\n    rounded_window = [round(x, 4) for x in window]\n    return rounded_window"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if t < 0 or t >= len(gamma[d]) or d < 0 or (d >= len(gamma)):\n        return 0.0\n    g = gamma[d][t]\n    sum_g = sum(gamma[d])\n\n    def digamma(x):\n        if x <= 1e-06:\n            x = max(6, x)\n            return digamma(x)\n        return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    result = digamma(g) - digamma(sum_g)\n    result_rounded = round(result, 4)\n    return result_rounded"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header_line = '------------------------- DEBUG ------------------\\n'\n    prev_index = max(ix - 1, 0)\n    prev_label = params[prev_index][1]\n    prev_prediction = params[prev_index][0]\n    curr_index = ix\n    curr_label = params[curr_index][1]\n    curr_gold = golds.get(curr_label)\n    curr_prediction = params[curr_index][0]\n    debug_report = f'------------------------- DEBUG ------------------\\nMine ({prev}) [{prev_label}]:\\n{prev_prediction}\\nTheirs ({prev}) [{prev_label}]:\\n{curr_gold}{warn_str} <warn_str>\\nMine ({curr_label}):\\n{curr_prediction}\\nTheirs ({curr_label}):\\n{curr_gold}{warn_str} <warn_str>\\n----------------------- END DEBUG ------------------\\n'\n    return debug_report"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    alpha = 1 / n_estimators\n    predictions = []\n\n    def stump(x, feature, threshold, polarity):\n        return polarity * np.sign(x[feature] - threshold)\n    for _ in range(n_estimators):\n        current_prediction = []\n        for i in range(len(y_train)):\n            if y_train[i] == -1:\n                current_prediction.append(-1)\n            else:\n                current_prediction.append(1)\n        errors = [1 - stump(x, y_train[i], 0, 1) for x in X_train]\n        error_sum = sum(errors)\n        epsilon = error_sum / len(X_train)\n        alpha_m = (1 - math.log(epsilon)) / math.log(epsilon)\n        alpha_m = max(alpha_m, 0)\n        predictions.append(stump(X_test, y_train, 0, 1))\n        predictions.append(alpha_m * stump(X_test, y_train, 0, 1))\n    return predictions"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"\n    Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    num_bins = N\n    if num_bins % 2 == 1:\n        num_bins += 1\n    delta_f = fs / num_bins\n    freq_list = []\n    for i in range(num_bins):\n        if positive_only and i < num_bins // 2:\n            freq_list.append(i * delta_f)\n        else:\n            freq_list.append((i + 1) * delta_f)\n    freq_list = [round(freq, 4) for freq in freq_list]\n    return list(map(float, freq_list))"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    oob_mask = np.array(oob_mask)\n    num_samples_with_OOB = np.sum(np.any(predictions, axis=1) * oob_mask, axis=0)\n    if num_samples_with_OOB == 0:\n        return -1.0\n    avg_predictions = np.mean(predictions[oob_mask], axis=0)\n    oob_mse_value = np.mean((avg_predictions - y_true) ** 2)\n    rounded_value = round(oob_mse_value, 4)\n    return rounded_value"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    items = set()\n    for t in transactions:\n        items.update(t)\n    item_counts = Counter(items)\n    filtered_items = [item for (item, count) in item_counts.items() if count >= min_support]\n    sorted_items = sorted(filtered_items, key=lambda x: (-item_counts[x], x))\n    root = {'support': 0, 'children': {}}\n    for item in sorted_items:\n        current_item_count = 0\n        temp_transactions = []\n        for t in transactions:\n            temp_transactions.extend(set(t))\n        path = []\n        for t in temp_transactions:\n            if t == item:\n                path.append(item)\n                current_item_count += 1\n        for node in path:\n            node['support'] += current_item_count\n        if len(path) > 1:\n            last_node = path[-1]\n            new_child = {'support': 0, 'children': {}}\n            new_child['children'][node] = current_item_count\n            for child in path[1:]:\n                new_child['children'][child] = current_item_count\n            last_node['children'][item] = new_child\n    return root"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"\n    Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n    incompatible shapes (different number of columns).\n    \"\"\"\n    if not isinstance(X, list) and (not isinstance(Y, list)):\n        return -1\n    if not all((isinstance(x, list) for x in [X, Y])):\n        return -1\n    if not (isinstance(X, list) and isinstance(Y, list)):\n        return -1\n    (N, C) = (len(X), len(X[0]))\n    (M, D) = (len(Y), len(Y[0]) if Y else C)\n    if N == 0 or M == 0:\n        return []\n    if C != D:\n        return -1\n    X_np = np.array(X)\n    Y_np = np.array(Y) if Y else X_np\n    K = np.dot(X_np, Y_np.T) + c0\n    K_rounded = round(K, 4)\n    result = []\n    for row in K_rounded:\n        result.append(list(map(lambda x: round(x, 4), row)))\n    return result"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"\n    Perform one Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad: Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as**\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    alpha = lr * 1e-06\n    updated_param = param - alpha * m_hat_t / np.sqrt(v_hat_t + eps)\n    m = m_hat_t\n    v = v_hat_t\n    return [updated_param.tolist(), m.tolist(), v.tolist()]"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list[float], list[float]]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    if isinstance(rewards, list):\n        rewards = rewards[0]\n    num_samples = len(rewards)\n    num_samples_to_keep = int(num_samples * retain_prcnt)\n    selected_theta_samples = theta_samples[:num_samples_to_keep]\n    mean = np.mean(selected_theta_samples, axis=0)\n    variances = np.var(selected_theta_samples, axis=0)\n    mean_rounded = round(mean, 4)\n    variances_rounded = round(variances, 4)\n    return (mean_rounded, variances_rounded)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    counts = Counter(labels)\n    if all((count == 1 for count in counts.values())):\n        return 0.0\n    entropy_value = -sum((p * math.log2(p) for p in counts.values()))\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad: str, dilation: int=0):\n    \"\"\"\n    Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape `(n_ex, in_rows, in_cols, in_ch)`.\n        W: NumPy array of shape `(kernel_rows, kernel_cols, in_ch, out_ch)`.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string `'same'`.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through `numpy.ndarray.tolist()`.\n    \"\"\"\n    if not isinstance(pad, str):\n        pad = pad\n    else:\n        pad = pad.strip()\n    if pad == 'same':\n        pad = (0, 0)\n    elif isinstance(pad, tuple):\n        (pr, pc) = pad\n        pad = (pr, pc)\n    elif isinstance(pad, (int, float)):\n        pad = (pad, pad)\n    else:\n        raise ValueError('Invalid padding specification')\n    if not (isinstance(pad, int) and pad >= 0) or (isinstance(pad, tuple) and all((isinstance(p, int) for p in pad))) or (isinstance(pad, str) and pad in ['same', 'none']):\n        raise ValueError('Invalid padding specification')\n    X_shape = X.shape\n    X = np.reshape(X, (X_shape[0], X_shape[1], X_shape[2], X_shape[3]))\n    W_shape = W.shape\n    W = np.reshape(W, (W_shape[0], W_shape[1], W_shape[2], W_shape[3]))\n    out_rows = X_shape[1] // stride + pad[0]\n    out_cols = X_shape[2] // stride + pad[1]\n    out_channels = W_shape[3]\n    X_col = np.transpose(X, (3, 0, 1, 2))\n    result = np.zeros((X_shape[0], out_rows, out_cols, out_channels), dtype=np.float64)\n    for i in range(X_shape[0]):\n        current_row = X_col[i, :].reshape(-1, out_cols)\n        for j in range(out_channels):\n            result[i, j] += np.dot(current_row, W[:, :, j, :].reshape(-1, out_rows))\n    return result.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean_centralized = np.mean(data, axis=0)\n    standardized_data = data - mean_centralized\n    if solver == 'svd':\n        (eigenvectors, eigenvalues) = np.linalg.svd(standardized_data, full_matrices=False)\n    else:\n        cov_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n        (eigenvectors, eigenvalues) = np.linalg.eigh(cov_matrix)\n    sorted_eigenvectors = eigenvectors[::-1]\n    sorted_eigenvalues = eigenvalues[::-1]\n    scores = []\n    for i in range(n_components):\n        current_eigenvector = sorted_eigenvectors[i]\n        current_variance = sorted_eigenvalues[i]\n        if current_variance > 0:\n            score = current_eigenvector * (-1 if current_eigenvector[0] < 0 else 1)\n            scores.append([score])\n    projected_data = np.dot(standardized_data, scores)\n    scores_rounded = [round(x, 4) for x in scores]\n    explained_variance_ratio_rounded = [round(e, 4) for e in sorted_eigenvalues]\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"\n    Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if isinstance(leaf.value, list) and len(leaf.value) == 1:\n        return int(leaf.value[0])\n    elif classifier:\n        return int(leaf.value[0])\n    else:\n        return float(leaf.value)"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K]\n    for _ in range(max_iters):\n        new_centroids = []\n        for i in range(len(data)):\n            distance = np.sqrt(np.sum((data[i] - centroids[0]) ** 2))\n            min_distance = min(distance, default=1000000000.0)\n            closest_centroid = centroids[np.argmin(distance)]\n            new_centroids.append(closest_centroid)\n        centroids = np.mean(data[new_centroids], axis=0)\n        if np.allclose(centroids, centroids[-1], atol=1e-06):\n            break\n    sorted_centroids = sorted(centroids.round(4))\n    return sorted_centroids"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    if not isinstance(data, (list, np.ndarray)):\n        raise TypeError('Input must be a list or NumPy array')\n    if isinstance(data, np.ndarray):\n        data = np.array(data).astype(float)\n    else:\n        data = np.array(data)\n    for row in data:\n        if sum(row) == 0:\n            return -1\n    row_sums = [sum(row) for row in data]\n    normalized_data = [[x / row_sum for (x, row_sum) in zip(row, row_sums)] for row in data]\n    normalized_data = [round(row, 4) for row in normalized_data]\n    return normalized_data"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: Tuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    cont_action = False\n    cont_obs = False\n    if tuple_action:\n        if isinstance(env.action_space, Tuple):\n            for sub_space in env.action_space.spaces:\n                if not isinstance(sub_space, Box):\n                    cont_action = True\n                    break\n        elif isinstance(env.action_space, Dict):\n            for (key, sub_space) in env.action_space.items():\n                if not isinstance(sub_space, Box):\n                    cont_action = True\n                    break\n        elif isinstance(env.action_space, Box):\n            cont_action = True\n    elif isinstance(env.action_space, Box):\n        cont_action = True\n    if tuple_obs:\n        if isinstance(env.observation_space, Tuple):\n            for sub_space in env.observation_space.spaces:\n                if not isinstance(sub_space, Box):\n                    cont_obs = True\n                    break\n        elif isinstance(env.observation_space, Dict):\n            for (key, sub_space) in env.observation_space.items():\n                if not isinstance(sub_space, Box):\n                    cont_obs = True\n                    break\n        elif isinstance(env.observation_space, Box):\n            cont_obs = True\n    elif isinstance(env.observation_space, Box):\n        cont_obs = True\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"\n    Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for all samples. For regression, the array shape is (n_samples,)\n        for classification, it's (n_samples, n_classes).\n    learning_rate : float\n        The learning-rate hyper-parameter used during training. Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set True for regression problems and False for multi-class classification\n        problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.\n        \u2022 Classification \u2013 1-D array of integers representing the predicted class labels.\n    \"\"\"\n    running_pred = np.zeros(len(updates[0]))\n    for u in updates:\n        running_pred -= learning_rate * u\n        if regression:\n            return running_pred.round(4)\n        else:\n            prob = np.exp(running_pred).reshape(-1, len(u))\n            prob = prob / np.max(prob)\n            return prob.argmax(axis=1).astype(int).round(4)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad: str='same', dilation: int=0) -> list:\n    \"\"\"\n    Perform a 1-D cross-correlation between X and W.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad: 'int', 2-tuple, or \"same\" specifying the amount of zero padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between neighboring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape (n_examples, output_length, out_channels).\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        raise ValueError('X must be a numpy array')\n    if not isinstance(W, np.ndarray):\n        raise ValueError('W must be a numpy array')\n    if not isinstance(pad, str) and (not isinstance(pad, tuple)):\n        raise ValueError(f\"pad should be an integer, 2-tuple, or 'same'\")\n    if not isinstance(dilation, int):\n        raise ValueError('dilation must be a non-negative integer')\n    (n_examples, signal_length, in_channels) = X.shape\n    if len(W.shape) != 3:\n        raise ValueError('W must have shape (kernel_width, in_channels, out_channels)')\n    (kernel_width, out_channels) = W.shape\n    if X.ndim == 3:\n        X = X.reshape((n_examples, signal_length, in_channels))\n    if X.ndim == 4:\n        X = X[0]\n    output_length = ceil(signal_length / stride)\n    total_pad = max(0, (output_length - 1) * stride + kernel_width - signal_length)\n    if pad == 'same':\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        (p_left, p_right) = pad\n    output_shape = (n_examples, output_length, out_channels)\n    result = []\n    for example in range(n_examples):\n        example_array = np.zeros_like(X[example])\n        for i in range(kernel_width):\n            example_array[i] += X[example][i] * W[i]\n        padded_example = np.pad(example_array, ((p_left, p_right), (0, 0)))\n        padded_example = padded_example[dilation:dilation + kernel_width]\n        result.append(padded_example.tolist())\n    return result"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    C = len(y)\n    N = len(y)\n    p = y / N\n    return 1 - np.sum(p ** 2)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a multiple linear regression model using batch gradient descent.\n\n    Args:\n        X: The feature matrix (m x n), where m is the number of samples and n is the number of features.\n        y: The target vector (m elements).\n        learning_rate: Learning rate for gradient descent (default: 0.01).\n        n_iterations: Number of iterations for gradient descent (default: 10000).\n\n    Returns:\n        A tuple containing the trained parameters (weights_list, bias) rounded to four decimal places.\n        If the input data are inconsistent (different number of samples in X and y), return (-1, -1).\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return (-1, -1)\n    weights_list = [0.0] * X.shape[1]\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, weights_list) + bias\n        dw = 2 / X.shape[0] * np.dot(X.T, y_pred - y)\n        db = 2 / X.shape[0] * (y_pred - y)\n        weights_list = weights_list - learning_rate * dw\n        bias = bias - learning_rate * db\n    weights_list_rounded = np.round(weights_list, 4)\n    bias_rounded = np.round(bias, 4)\n    return (weights_list_rounded, bias_rounded)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    n = len(X)\n    if n != len(X[0]):\n        return False\n    arr = np.array(X)\n    return np.allclose(arr.T, arr)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for logistic loss when optimizing a binary classification model.\n    \n    This function uses the rule y' = 2y - 1 to convert true labels to {-1, 1} values. It then computes the negative gradient of the logistic loss with respect to the prediction scores.\n    \n    Args:\n        y: List of binary class labels (0 or 1)\n        f: List of current prediction scores\n    \n    Returns:\n        A list of floats representing the negative gradient for each sample.\n    \"\"\"\n    if not all((0 <= val <= 1 for val in y)):\n        return [-1] * len(f)\n    y_prime = [2 * val - 1 for val in y]\n    result = []\n    for i in range(len(f)):\n        numerator = y_prime[i]\n        denominator = 1.0 + np.exp(numerator * f[i])\n        result.append(round(numerator / denominator, 4))\n    return result"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"\n    Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    if not isinstance(x, (float, list, np.ndarray)):\n        raise TypeError('Input must be a float, list, or NumPy array.')\n    x_array = np.array(x)\n    if order == 0:\n        return np.clip(x_array * np.exp(x_array) - 1.0, 0, 1.0507009873554805)\n    elif order == 1:\n        return np.clip(x_array * np.exp(x_array) - 1.0, 0, 1.0507009873554805)\n    else:\n        alpha = 1.6732632423543772\n        scale = 1.0507009873554805\n        return np.clip(x_array * scale * (np.exp(x_array) - 1.0), 0, 1.0507009873554805)"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"\n    Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    \u0177 = np.mean(y)\n    residuals = y - \u0177\n    for _ in range(n_estimators):\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_y = y[sorted_indices]\n        split_points = []\n        for i in range(1, len(sorted_x)):\n            left = sorted_x[i - 1]\n            right = sorted_x[i]\n            mid = (left + right) / 2\n            r_left = residuals[sorted_indices[:i]]\n            r_right = residuals[sorted_indices[i + 1:]]\n            split_sum = np.sum(r_left ** 2) + np.sum(r_right ** 2)\n            best_split = None\n            min_error = float('inf')\n            for t in range(i):\n                mid_t = (left + sorted_x[t]) / 2\n                r_left_t = residuals[sorted_indices[:t]]\n                r_right_t = residuals[sorted_indices[t + 1:i]]\n                error_t = np.sum(r_left_t ** 2) + np.sum(r_right_t ** 2)\n                if error_t < min_error:\n                    min_error = error_t\n                    best_split = t\n        selected_split = best_split\n        \u0177 += learning_rate * residuals[selected_split]\n    predictions = round(\u0177, 4)\n    return predictions.tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n    \n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple `(w_next, Eg_next)` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    else:\n        pass\n    if Eg is not None:\n        E_g_new = rho * Eg + (1 - rho) * grad ** 2\n    else:\n        E_g_new = (1 - rho) * grad ** 2\n    w_next = w - learning_rate * E_g_new ** 0.5 * (1 / np.sqrt(Eg_new))\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(E_g_new, 4).tolist()\n    return (w_next_rounded, Eg_next_rounded)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"\n    Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If True return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)):\n        raise ValueError('Input must be a list or NumPy array.')\n    result = []\n    if derivative:\n        result = np.array([np.e ** x - 1 + alpha * alpha for x in x])\n        return result.tolist()\n    for val in x:\n        if val >= 0:\n            result.append(val)\n        else:\n            result.append(alpha * (np.exp(val) - 1))\n    rounded_result = [round(num, 4) for num in result]\n    return rounded_result"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    if len(actions) != len(observations):\n        raise ValueError('The number of elements in actions and observations must be equal.')\n    tuples_actions = tuple((tuple(action) for action in actions))\n    tuples_observations = tuple((tuple(observation) for observation in observations))\n    tuple_has_iterable = tuples_actions.count(iterable) > 0 or tuples_observations.count(iterable) > 0\n\n    def check_multidimensional(value):\n        return len(value.shape) > 1\n    multidim_actions = all((check_multidimensional(action) for action in actions))\n    multidim_observations = all((check_multidimensional(observation) for observation in observations))\n\n    def check_continuous(value):\n        return not np.is_integer(value)\n    continuous_actions = any((not check_continuous(action) for action in actions))\n    continuous_observations = any((not check_continuous(observation) for observation in observations))\n    n_actions_per_dim = []\n    n_obs_per_dim = []\n    action_set = set()\n    for action in actions:\n        if isinstance(action, tuple):\n            action_set.update(action)\n        elif isinstance(action, list):\n            action_set.update(action)\n    n_actions_per_dim.append(len(action_set))\n    obs_set = set()\n    for obs in observations:\n        if isinstance(obs, tuple):\n            obs_set.update(obs)\n        elif isinstance(obs, list):\n            obs_set.update(obs)\n    n_obs_per_dim.append(len(obs_set))\n    action_ids = sorted((set(action) for action in actions))\n    obs_ids = sorted((set(obs) for obs in observations))\n    result = {'tuple_actions': tuple_has_iterable, 'tuple_observations': tuple_has_iterable, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': len(action_ids), 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': len(obs_ids), 'action_ids': action_ids, 'obs_ids': obs_ids}\n    return result"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"\n    Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    predictions = np.mean(y_train)\n    for _ in range(n_estimators):\n        residuals = np.square(predictions - y_train) / 2\n        tree = np.zeros_like(residuals)\n        for i in range(max_depth):\n            current_node = tree[i]\n            left = np.where(current_node < 0.5, True, False)\n            right = np.where(current_node > 0.5, True, False)\n            if left:\n                tree[i] += learning_rate * tree[i - 1]\n            elif right:\n                tree[i] -= learning_rate * tree[i + 1]\n        predictions += learning_rate * tree\n    predictions_rounded = np.round(predictions, 4).tolist()\n    return predictions_rounded"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Args:\n        X: A NumPy array with shape (n_samples, n_features)\n        mean: The mean vector of the distribution (length n_features)\n        cov: The covariance matrix (positive-definite and invertible)\n        \n    Returns:\n        A list of floats, each rounded to four decimal places, representing the PDF values for each data point.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape((X.shape[0], 1))\n    d = X.shape[1]\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    pdf = 1 / np.sqrt(2 * np.pi ** d * det_cov) * np.exp(-0.5 * np.dot(X - mean, inv_cov * (X - mean)))\n    result = np.round(pdf, 4)\n    return result.tolist()"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.insert(X, 0, np.ones((X.shape[0], 1)), axis=1)\n    if V is None:\n        V = np.eye(len(X.shape[1]))\n    X_T_X = np.dot(X.T, X)\n    inverse_V = np.linalg.inv(V)\n    mu_p = (inverse_V @ mu + X_T_X @ y) / (np.linalg.inv(X_T_X) + inverse_V)\n    result = np.dot(X_new, mu_p)\n    result_rounded = [round(value, 4) for value in result]\n    return result_rounded"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if not all((x >= 0 for x in actual)) or not all((x >= 0 for x in predicted)):\n        return -1\n    rmsle = np.sqrt(1 / len(actual) * np.sum(((np.log(1 + predicted[i]) - np.log(1 + actual[i])) ** 2 for i in range(len(actual)))))\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"\n    Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an instance of the general cosine-sum windows where the first and last samples smoothly reach zero. When `symmetric` is ``True`` a classical symmetric window is generated; when ``False`` the function instead builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window, ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal places. Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    hann_window = np.hanning(window_len, symmetric=not symmetric)\n    rounded_hann_window = [round(x * 10000, 4) / 10000 for x in hann_window]\n    return rounded_hann_window"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    if len(shape) == 4:\n        out_channels = shape[0]\n        in_channels = shape[1]\n        kernel_height = shape[2]\n        kernel_width = shape[3]\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (fan_in, fan_out)"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n    \n    The model uses linear regression weak learners and squared-error loss. The algorithm proceeds exactly as described in the task description. Every returned value must be rounded to 4 decimal places and packed into a plain Python list.\n    \n    Args:\n        X: A list of lists, where each sublist contains d features (d rows).\n        y: A list of m values (m samples).\n        n_estimators: Number of trees in the ensemble (default 10).\n        learning_rate: Learning rate for each tree (default 0.1).\n    \n    Returns:\n        A list of floats, representing the final prediction vector rounded to 4 decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    current_prediction = np.mean(y_np)\n    result = [current_prediction]\n    for _ in range(n_estimators):\n        residuals = y_np - current_prediction\n        coefficients = np.linalg.lstsq(X_np, residuals, rcond=None)[0]\n        predicted = coefficients @ X_np + current_prediction\n        current_prediction = predicted\n        current_prediction = round(current_prediction, 4)\n        result.append(round(current_prediction, 4))\n    return result"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"\n    Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if not isinstance(x, (float, int, list, np.ndarray)):\n        raise TypeError('Input must be a scalar, list, or NumPy array.')\n    if x == 0:\n        return 0.0\n    if order not in (0, 1, 2):\n        return -1.0\n    if order == 0:\n        return 1 / (1 + np.exp(-x))\n    elif order == 1:\n        return (1 - np.exp(-x)) / (1 + np.exp(-x)) * (1 - np.exp(-x))\n    elif order == 2:\n        return (1 - np.exp(-x)) / (1 + np.exp(-x)) * (1 - np.exp(-x)) * (1 - 2 * (1 - np.exp(-x)))\n    result = round(np.float64(result), 4)\n    return result"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    if num_classes < max(y) + 1:\n        return -1\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    for i in range(len(y)):\n        one_hot[i, y[i]] = 1\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    item_set = set(itertools.chain.from_iterable((transaction for transaction in transactions)))\n    total_transactions = len(transactions)\n    result = []\n    for subset in itertools.chain.from_iterable((itertools.combinations(item_set, k) for k in range(1, len(item_set) + 1))):\n        count = sum((1 for t in transactions if t.issubset(subset)))\n        if count / total_transactions >= min_sup:\n            result.append(tuple(subset))\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    averaged_probabilities = []\n    for i in range(len(predictions[0])):\n        current_avg = np.mean(predictions[i], axis=0)\n        rounded_avg = np.round(current_avg, 4)\n        averaged_probabilities.append(rounded_avg)\n    final_labels = []\n    for avg in averaged_probabilities:\n        label_index = np.argmax(avg)\n        final_labels.append(label_index)\n    return (averaged_probabilities, final_labels)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    if Y is None:\n        X_shape = X.shape[0]\n        Y_shape = X_shape\n    else:\n        (X_shape, Y_shape) = (X.shape, Y.shape)\n    if X_shape[1] != Y_shape[1]:\n        return [-1]\n    if sigma is None:\n        sigma = np.sqrt(X_shape[1] / 2.0)\n    elif not isinstance(sigma, list):\n        return -1\n    if len(sigma) != X_shape[1]:\n        return -1\n    if sigma <= 0:\n        return -1\n    N = X_shape[0]\n    M = Y_shape[0]\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            x = X[i]\n            y = Y[j]\n            dist_sq = sum(((x[k] - y[k]) ** 2 for k in range(X_shape[1])))\n            exp_term = np.exp(-dist_sq / (2 * sigma ** 2))\n            kernel_matrix[i, j] = round(exp_term, 4)\n    return kernel_matrix.tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"\n    Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    if np.array_equal(y, y[-1]):\n        return (-1, None, y[0], y[0])\n\n    def get_entropy(labels):\n        p = np.bincount(labels, 1.0, len(labels))\n        entropy = -p * np.log2(p) + (1 - p) * np.log2(1 - p)\n        return entropy\n    current_entropy = get_entropy(y)\n    n_samples = len(y)\n    n_features = len(X[0])\n    best_split = (-1, None, y[0], y[0])\n    for j in range(n_features):\n        for t in np.unique(X[:, j])[::2]:\n            left_labels = [x[j] <= t for x in X]\n            right_labels = [x[j] > t for x in X]\n            p_left = len(left_labels) / n_samples\n            p_right = (n_samples - len(left_labels)) / n_samples\n            left_entropy = get_entropy(np.where(left_labels == 1).flatten())\n            right_entropy = get_entropy(np.where(right_labels == 1).flatten())\n            gain = current_entropy - p_left * left_entropy - p_right * right_entropy\n            if gain > gain:\n                best_split = (j, t, y[0], y[0])\n            elif gain == gain:\n                if j < best_split[0]:\n                    best_split = (j, t, y[0], y[0])\n                elif t < best_split[1]:\n                    best_split = (j, t, y[0], y[0])\n    best_threshold = round(best_split[1], 4)\n    return (best_split[0], best_threshold, y[np.where(X[:, best_split[0]] <= best_split[1])[0][0]], y[np.where(X[:, best_split[0]] > best_split[1])[0][0]])"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    if isinstance(X, list):\n        X = np.array(X)\n    if X.ndim == 2:\n        X = X[:, feature_i]\n    if isinstance(threshold, int) or isinstance(threshold, float):\n        threshold_value = threshold\n    else:\n        threshold_value = threshold\n    result = []\n    first_subset = X[X >= threshold_value]\n    second_subset = X[X == threshold_value]\n    first_subset_list = first_subset.tolist()\n    second_subset_list = second_subset.tolist()\n    return [first_subset_list, second_subset_list]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"\n    Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next: np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions: list[int]\n        Action index taken in each state.\n    rewards: list[float]\n        Reward received after each action.\n    dones: list[bool]\n        Whether the next state is terminal for each sample.\n    gamma: float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not isinstance(Q, np.ndarray):\n        return -1\n    if not isinstance(Q_next, np.ndarray):\n        return -1\n    if not isinstance(actions, list):\n        return -1\n    if not isinstance(rewards, list):\n        return -1\n    if not isinstance(dones, list):\n        return -1\n    if not all((isinstance(x, bool) for x in dones)):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    y = []\n    for i in range(len(actions)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        y.append([target if j == actions[i] else Q[i][j] for j in range(len(Q))])\n    rounded_y = []\n    for row in y:\n        rounded_row = [round(num, 4) for num in row]\n        rounded_y.append(rounded_row)\n    return rounded_y"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not isinstance(labels, list):\n        raise TypeError('Input must be a list of integers.')\n    for label in labels:\n        if label < 0:\n            return [-1]\n    num_classes = num_classes if num_classes is not None else max(labels) + 1\n    one_hot = np.zeros((len(labels), num_classes), dtype=int)\n    for (i, label) in enumerate(labels):\n        one_hot[i, label] = 1\n    return one_hot.tolist()"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"\n    Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if len(set(x)) != len(x):\n        mean_residual = np.mean(y)\n        return [mean_residual] * len(x)\n    current_prediction = np.mean(y)\n    residuals = y - current_prediction\n    learning_rate_multiplier = learning_rate\n    for _ in range(n_estimators):\n        best_split = None\n        min_sse = float('inf')\n        unique_x = np.unique(x)\n        for t in unique_x:\n            left_size = 1\n            right_size = len(unique_x) - 1\n            left_subset = x <= t\n            right_subset = x > t\n            left_mean_residual = np.mean(residuals[left_subset])\n            right_mean_residual = np.mean(residuals[right_subset])\n            split_sse_left = left_mean_residual ** 2 * (1 / left_size)\n            split_sse_right = right_mean_residual ** 2 * (1 / right_size)\n            if split_sse_left < min_sse or (split_sse_left == min_sse and t < best_split):\n                best_split = t\n                min_sse = split_sse_left\n        current_prediction += learning_rate_multiplier * (np.heaviside(0, 1) * np.array([best_split]))\n        residuals = residuals - current_prediction\n        if np.allclose(residuals, 0.0, atol=1e-06):\n            break\n    final_predictions = np.round(current_prediction, 4).tolist()\n    return final_predictions"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n    \n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward: float\n        Immediate reward received after executing the action.\n    next_state: int | None\n        The successor state *s'.  Use None if the transition ended the episode.\n    epsilon: float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr: float\n        Learning-rate \u03b7.\n    gamma: float\n        Discount factor \u03b3.\n    \n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    if next_state is None:\n        target = 0.0\n    else:\n        if next_state == state:\n            expected_future_value = 0.0\n        else:\n            actions = [a for a in range(len(q_table[next_state]))]\n            greedy_action = max(actions)\n            pi = 1 - epsilon + epsilon / len(q_table[next_state])\n            if pi > 0:\n                expected_future_value = sum((q_table[next_state][a] * pi for a in actions)) / len(actions)\n            else:\n                expected_future_value = sum((q_table[next_state][a] / len(q_table[next_state]) for a in actions))\n        new_q = reward + gamma * expected_future_value\n        q_table[state][action] = new_q\n    rounded_q = [[round(q, 4) for q in row] for row in q_table]\n    return rounded_q"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    cluster_indices = np.arange(m)\n    x_coords = []\n    y_coords = []\n    for i in range(m):\n        class_idx = i\n        x_start = (int(cluster_indices / 2) + 0.1) * 10\n        x_end = (int(cluster_indices / 2) + 0.9) * 10\n        x_vals = np.linspace(x_start, x_end, n_train)\n        y_start = (i % 2 * interval + 0.1) * 10\n        y_end = (i % 2 * interval + 0.9) * 10\n        y_vals = np.linspace(y_start, y_end, n_train)\n        x_coords.extend(x_vals)\n        y_coords.extend(y_vals)\n        label = (class_idx - 0.5) * 2\n        X_class = np.array([x_vals, y_vals]).reshape(n_train, 2)\n        Y_class = np.array([label]).reshape(n_train, 1)\n        X_train = np.vstack((X_train, X_class))\n        X_val = np.vstack((X_val, X_class))\n        Y_train = np.vstack((Y_train, Y_class))\n        Y_val = np.vstack((Y_val, Y_class))\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    Y_train = np.round(Y_train, 4)\n    Y_val = np.round(Y_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n    \n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size \u03b1.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        (w_new, m_new, v_new) where:\n        * w_new \u2013 updated parameters (same shape as ``w``)\n        * m_new \u2013 updated first moment\n        * v_new \u2013 updated second moment\n    \"\"\"\n    if m_prev is None or v_prev is None:\n        m_prev = np.zeros_like(grad)\n        v_prev = np.zeros_like(grad)\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n    v_t = beta2 * v_prev + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    alpha = learning_rate / np.sqrt(v_hat_t + eps)\n    w_new = w - alpha * m_hat_t / (np.sqrt(v_hat_t + eps) + eps)\n    return (w_new, m_hat_t, v_hat_t)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n    \n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n    \n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if not isinstance(rewards, list):\n        raise TypeError('rewards must be a list of lists')\n    num_arms = len(rewards[0])\n    num_steps = len(rewards)\n    estimates = [ev_prior] * num_arms\n    counts = [0] * num_arms\n    if seed is not None:\n        np.random.seed(seed)\n    for t in range(num_steps):\n        selected_arm = np.random.choice(num_arms, p=[epsilon / num_arms] * num_arms)\n        if selected_arm == 0:\n            selected_arm = np.argmax(estimates)\n        r = rewards[t][selected_arm]\n        C = counts[selected_arm] + 1\n        estimates[selected_arm] += (r - estimates[selected_arm]) / C\n        estimates[selected_arm] = round(estimates[selected_arm], 4)\n    return estimates"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Implement DBSCAN from scratch.\n    \n    Parameters:\n    data: 2D NumPy array of shape (n_samples, n_features)\n    eps: Maximum radius for neighbor proximity\n    min_samples: Minimum number of points required to form a cluster\n    \n    Returns:\n    list[int]: Cluster labels for each sample (0-indexed)\n    \"\"\"\n    if not data.shape or len(data.shape) != 2:\n        return []\n    if not data.any():\n        return []\n    clusters = []\n    visited = set()\n    data_copy = data.copy()\n    for i in range(len(data)):\n        if i in visited:\n            continue\n        neighbors = []\n        queue = [i]\n        visited.add(i)\n        while queue:\n            current = queue.pop(0)\n            if len(neighbors) >= min_samples:\n                clusters.append(current)\n            for j in range(len(data_copy[current])):\n                if data_copy[current][j] <= eps and data_copy[current][j] > 0:\n                    neighbors.append(j)\n                    queue.append(j)\n        for neighbor in neighbors:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                clusters.append(neighbor)\n    return clusters"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"\n    Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    if not isinstance(y, np.ndarray) and (not isinstance(y, list)) and (not isinstance(y, tuple)):\n        raise ValueError('Input must be a numpy array, list, or tuple.')\n    if num_classes is None:\n        num_classes = max(np.unique(y)) + 1\n    elif num_classes < 0:\n        raise ValueError('num_classes must be a non-negative integer.')\n    y = np.array(y)\n    y_encoded = np.zeros((y.shape[0], num_classes), dtype=int)\n    for i in range(y.shape[0]):\n        y_encoded[i] = np.eye(num_classes)[y[i]]\n    return y_encoded"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if len(X_train) < 2:\n        return []\n    mean_y_left = np.mean(y_train[:len(X_train) // 2])\n    mean_y_right = np.mean(y_train[len(X_train) // 2:])\n    if mean_y_left < mean_y_right:\n        (X_train, y_train) = (X_train[::2], y_train[::2])\n    else:\n        (X_train, y_train) = (X_train[1:], y_train[1:])\n    return regression_tree_predict(X_train, y_train, X_test, max_depth - 1)"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    arr = np.array(x)\n    if isinstance(arr, np.ndarray):\n        return np.tolist(arr)\n    else:\n        return np.array(x).tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"\n    Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by tuple length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    freq = Counter()\n    for t in transactions:\n        for item in t:\n            freq[item] += 1\n    filtered_items = [item for item in freq if freq[item] >= min_sup]\n    filtered_items.sort(key=lambda x: -freq[x])\n    tree = {}\n    for item in filtered_items:\n        pass\n    result = []\n    for item in filtered_items:\n        result.append((item,))\n    for subset in itertools.chain.from_iterable((itertools.combinations(filtered_items, r) for r in range(1, len(filtered_items)))):\n        result.append(tuple(subset))\n    return sorted(result)"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return [-1]\n    (n_samples, n_features) = (len(X), len(X[0]))\n    result = []\n    for i in range(n_samples):\n        row = [1.0] * n_features\n        for k in combinations_with_replacement(range(n_features + 1), degree + 1):\n            product = 1.0\n            for j in range(len(k)):\n                product *= X[i][k[j]]\n            row[k] = product\n    return row.tolist()"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    mean_y = np.mean(y)\n    squared_distances = (y - mean_y) ** 2\n    mse_value = np.mean(squared_distances)\n    return round(mse_value, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        x = x.tolist()\n    if len(x) == 1:\n        x = [x]\n    y = [slope * xi + intercept for xi in x]\n    grad = [slope] * len(x)\n    grad2 = [0.0] * len(x)\n    y_rounded = [round(val, 4) for val in y]\n    grad_rounded = [round(val, 4) for val in grad]\n    grad2_rounded = [round(val, 4) for val in grad2]\n    return (np.array(y_rounded), np.array(grad_rounded), np.array(grad2_rounded))"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the valid range, return \u22121.\n    \"\"\"\n    if k == 0:\n        return []\n    if k > len(data[0]) or k < 1:\n        return [-1]\n    if k < 1 or k > len(data[0]):\n        return [-1]\n    mean = np.mean(data[:, 0:k])\n    std = np.std(data[:, 0:k], ddof=1)\n    if std == 0:\n        return [-1]\n    standardized_data = (data - mean) / std\n    n_samples = len(standardized_data)\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvectors, eigenvalues) = np.linalg.eig(cov_matrix)\n    (eigenvalues_sorted, eigenvectors_sorted) = (eigenvectors[::-1], eigenvectors[::-1])\n    eigenvectors_sorted = eigenvectors_sorted.copy()\n    for i in range(k):\n        eigenvectors_sorted[i] *= -1\n    projection = np.dot(standardized_data, eigenvectors_sorted[:k])\n    projected_data = round(projection, 4).tolist()\n    return projected_data"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"\n    Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the binary targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n    \n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n    \n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    c = np.mean(y_train)\n    M = n_estimators\n    eta = learning_rate\n    predictions = []\n    for _ in range(M):\n        F = c + eta * np.sum(y_train - np.array([x for x in X_train if x <= 0])) / len(X_train)\n        prediction = F > 0.5\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted to a regular Python list of lists.\n    \"\"\"\n    h0_prob = np.dot(W, np.transpose(X)) + vbias\n    for _ in range(k):\n        pos_grad = np.dot(X.T, h0_prob)\n        neg_grad = np.dot(vbias.T, h0_prob)\n        W_new = W + learning_rate * (pos_grad - neg_grad) / len(X)\n        W = round(W_new, 4).tolist()\n    return W"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"\n    Compute the Chebyshev (also called $L_\\\\infty$ or maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical length.\n    If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the vector lengths differ.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)) or not isinstance(y, (list, np.ndarray)):\n        return -1\n    if not np.array_equal(x, y):\n        return -1\n    differences = np.abs(np.array(x) - np.array(y))\n    max_diff = np.max(differences)\n    result = round(max_diff, 4)\n    return result"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"\n    Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n    \n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n    \n    Returns:\n        float: Average VAE loss rounded to exactly 6 decimal places.\n    \"\"\"\n    y_pred = np.clip(y_pred, np.finfo(float).eps, 1 - np.finfo(float).eps)\n    reconstruction_loss = -np.sum((y & y_pred) * np.log2(y_pred + 1e-15)) / y.shape[0]\n    kl_divergence = -0.5 * (1 + t_log_var - t_mean ** 2 - t_log_var) / y.shape[0]\n    total_loss = reconstruction_loss + kl_divergence\n    rounded_total_loss = round(total_loss, 6)\n    return rounded_total_loss"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    if len(X) == 0 or len(V) == 0:\n        return []\n    (n_samples, n_features) = (len(X), len(X[0]))\n    k = len(V[0])\n    X_array = np.array(X)\n    result = np.dot(w, X_array) + w0\n    for f in range(k):\n        term1 = np.dot(np.sum(X_array[:, f] * V[f]), X_array[:, f])\n        term2 = np.sum(X_array[:, f] ** 2)\n        quadratic_term = (term1 ** 2 - term2) / 2\n        result += quadratic_term\n    result_rounded = np.round(result, 4)\n    return list(map(lambda x: round(x, 4), result_rounded))"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()`'', where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.sinh(z).tolist()\n    elif isinstance(z, (int, float)):\n        return round(np.sigmoid(z), 4)\n    else:\n        return np.array(list(z)).tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        actual_shape = np.shape(args[0])\n        predicted_shape = np.shape(args[1])\n        if actual_shape[1] > 1:\n            actual = np.argmax(actual, axis=1)\n        if predicted_shape[1] > 1:\n            predicted = np.argmax(predicted, axis=1)\n        return function(*args, **kwargs)\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(z, (list, np.ndarray)):\n        return np.array([np.round(x, 4) for x in z])\n    result = np.multiply(z, 1 - z)\n    return np.round(result, 4)"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and -1, the predicted labels of the grid points.\n    \"\"\"\n    min_x = min((x[0] for x in X))\n    max_x = max((x[0] for x in X))\n    min_y = min((x[1] for x in X))\n    max_y = max((x[1] for x in X))\n    x1_plot = np.linspace(min_x, max_x, grid_n)\n    x2_plot = np.linspace(min_y, max_y, grid_n)\n    labels = []\n    for x1 in x1_plot:\n        for x2 in x2_plot:\n            val = W[0] * x1 + W[1] * x2 + b\n            if val >= 0:\n                labels.append(1)\n            else:\n                labels.append(-1)\n    return labels"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"\n    Implements a Gaussian Naive Bayes classifier from scratch.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels (0 or 1).\n        X_test: 2-D NumPy array of shape (m_samples, n_features) containing the data to classify.\n\n    Returns:\n        A Python list of integers where each element is the predicted class label (0 or 1).\n    \"\"\"\n    class_prior = np.bincount(y_train)\n    (n_samples, n_features) = X_train.shape\n    mean_vals = np.zeros((2, n_features))\n    std_vals = np.zeros((2, n_features))\n    for i in range(n_samples):\n        x = X_train[i]\n        y = y_train[i]\n        if y == 0:\n            class_prior[1] += 1\n        else:\n            class_prior[0] += 1\n        mean_vals[y][i] = np.mean(x)\n        std_vals[y][i] = np.std(x)\n    std_vals[:, :] += 1e-09\n    m_samples = X_test.shape[0]\n    result = []\n    for i in range(m_samples):\n        x = X_test[i]\n        y = y_train[i]\n        log_likelihood_0 = -std_vals[0][i] * (np.log(mean_vals[0][i]) - np.log(1.0 + std_vals[0][i]))\n        log_likelihood_1 = -std_vals[1][i] * (np.log(mean_vals[1][i]) - np.log(1.0 + std_vals[1][i]))\n        total_log_prob = log_likelihood_0 + log_likelihood_1\n        if total_log_prob > 0:\n            result.append(0)\n        else:\n            result.append(1)\n    return result"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost for a neural network.\n    \n    Args:\n        AL: Array of shape (m, 1), representing model probabilities.\n        Y: Array of shape (m, 1), representing true labels (0 or 1).\n        \n    Returns:\n        float: The computed cost, rounded to four decimal places.\n    \"\"\"\n    m = len(AL)\n    num_samples = len(Y)\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    log_loss = -np.sum(np.log(AL) + (1 - Y) * np.log(1 - AL)) / m\n    return round(log_loss, 4)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    if t < 0 or t >= len(observations):\n        return []\n    alpha = [0] * len(observations)\n    alpha[observations.index(t)] = 1.0\n    for i in range(len(observations)):\n        if i == observations.index(t):\n            continue\n        current_state = A[i]\n        next_state = A[i + 1]\n        forward_prob = current_state * B[i] * np.exp(-np.log(next_state))\n        alpha[i] = forward_prob\n    beta = [0] * len(observations)\n    beta[observations.index(t)] = 1.0\n    for i in range(len(observations) - 1, -1, -1):\n        if i == observations.index(t):\n            continue\n        current_state = A[i]\n        next_state = A[i + 1]\n        beta[i] = beta[i + 1] * current_state * B[i] * np.exp(-np.log(next_state))\n    gamma = []\n    for i in range(len(observations)):\n        if i == observations.index(t):\n            continue\n        current_state = A[i]\n        next_state = A[i + 1]\n        prob = alpha[i] * beta[i]\n        gamma.append(round(prob, 4))\n    return gamma"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Density-Based Spatial Clustering (DBSCAN) algorithm from scratch.\n\n    Parameters:\n    data: np.ndarray with shape (n_samples, n_features)\n    eps: Radius for the neighborhood\n    min_samples: Minimum number of points required to form a core point\n\n    Returns:\n    list[int]: Cluster labels for each sample. Noise points receive -1.\n    \"\"\"\n    if len(data.shape) != 2:\n        raise ValueError('Data must be a 2D array')\n    X = data.tolist()\n    (n_samples, n_features) = X.shape\n    cluster_labels = [-1] * n_samples\n    distances = np.linalg.norm(X[:, :n_features - 1], axis=1)\n    neighbors = []\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = np.linalg.norm(X[i, :n_features - 1] - X[j, :n_features - 1])\n            neighbors.append((i, j, distance))\n    core_points = []\n    for i in range(n_samples):\n        count = 0\n        for j in range(i + 1, n_samples):\n            if distances[j] < eps:\n                count += 1\n        if count >= min_samples:\n            core_points.append(i)\n    queue = deque()\n    visited = [False] * n_samples\n    for i in core_points:\n        queue.append(i)\n        visited[i] = True\n        cluster_labels[i] = 1\n    while queue:\n        current = queue.popleft()\n        for (neighbor, _, _) in neighbors:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                cluster_labels[neighbor] = cluster_labels[current]\n                queue.append(neighbor)\n    return cluster_labels"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n    \n    Args:\n        data: A 2-D NumPy array containing N samples with D features.\n        k: The number of Gaussian components.\n        max_iter: Maximum number of iterations.\n        epsilon: Tolerance for convergence (change in mixture weights).\n        \n    Returns:\n        A list of integers of length N, where each integer represents the cluster label for the corresponding sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if n_samples == 0:\n        return []\n    mu = np.random.normal(0, 1 / k, size=(n_samples, n_features))\n    sigma = np.random.uniform(0.001, 10, size=(n_samples, n_features))\n    weights = np.ones(k) / k\n    for _ in range(max_iter):\n        log_likelihood = np.log(np.sum(weights * np.exp(-np.dot(mu[:, :], data)) / sigma ** 2))\n        current_labels = [i for i in range(k) if np.argmax(log_likelihood) == i]\n        mu_new = np.mean(data, axis=0) * weights\n        sigma_new = np.std(data, axis=0) * weights\n        weights = np.array([w * (data - mu_new) ** 2 / sigma_new ** 2 for (w, mu, sigma) in zip(weights, mu, sigma)])\n        if np.max(abs(weights)) < epsilon:\n            break\n    sorted_components = sorted(zip(mu, sigma, weights), key=lambda x: x[0])\n    labels = [int(i) for i in sorted_components]\n    return labels"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    (N, D) = data.shape\n    dist_matrix = np.zeros((N, N))\n    for i in range(N):\n        for j in range(i + 1, N):\n            dist_matrix[i, j] = np.sum(data[i, :] ** 2) - 2 * np.dot(data[i, :], data[j, :]) ** 2\n    w = np.exp(-gamma * dist_matrix)\n    D = np.diag(np.sum(w, axis=0))\n    if method == 'unnormalized':\n        L = D - w\n    else:\n        L = np.diag(1 / D) * np.sqrt(D) * w\n    eigenvectors = np.linalg.eig(L)[1][:n_cluster]\n    initial_centroids = data[:n_cluster, :]\n    labels = np.cluster_centers_init(initial_centroids, n_cluster)\n    labels = np.where(labels < n_cluster, 0, 1)\n    return labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    alpha = np.zeros_like(y_data)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated_alpha = alpha.copy()\n        updated_b = b.copy()\n        for i in range(len(y_data)):\n            g = np.sum(alpha * G[i, :])\n            current_value = g + b\n            if current_value <= 0:\n                updated_alpha[i] += eta\n                updated_b += eta * y_data[i]\n        alpha = updated_alpha\n        b = updated_b\n    w = np.dot(alpha, X_data)\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if task_type == 'classification':\n        while root is not None:\n            if root.y is not None:\n                return root.y\n            label = root.label\n            feature_value = features[0]\n            for child in root.child:\n                if child.x == feature_value:\n                    break\n            else:\n                child = root.child[1]\n            root = child\n    elif task_type == 'regression':\n        while root is not None:\n            if root.y is not None:\n                return root.y\n            label = root.label\n            feature_value = features[0]\n            if feature_value <= root.s:\n                child = root.child[0]\n            else:\n                child = root.child[1]\n            root = child\n    return root.y"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"\n    Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    H_y = -np.sum(y * (1.0 / len(y)) * np.log2(1.0 / len(y)))\n    max_information_gain = -math.inf\n    for i in range(len(X.columns)):\n        group1 = X.iloc[:, i].copy()\n        group2 = X.iloc[:, i].copy()\n        y_split = y.copy()\n        y_split[y == group1.values] = 0\n        H_y_split = -np.sum(y_split * (1.0 / len(y_split)) * np.log2(1.0 / len(y_split)))\n        info_gain = H_y - H_y_split\n        if info_gain > max_information_gain:\n            max_information_gain = info_gain\n    return (i + 1, round(max_information_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"\n    Tiny Isolation Forest implementation for anomaly detection.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    if not isinstance(data, np.ndarray):\n        raise ValueError('Input data must be a NumPy array')\n    if len(data.shape) != 2 or len(data.shape[1]) < 2:\n        raise ValueError('Data must have two columns')\n    X = data.reshape(-1, 1)\n    if sample_size > len(X):\n        sample_size = len(X)\n    height_limit = int(math.log2(sample_size))\n    trees = []\n    for _ in range(n_trees):\n        subsample = np.random.choice(len(X), size=sample_size, replace=False)\n        path_lengths = []\n        current_subsample = X[subsample]\n        depth = 0\n        while True:\n            if depth >= height_limit:\n                break\n            new_subsample = []\n            random_feature = np.random.randint(0, len(current_subsample))\n            min_val = current_subsample.min()\n            max_val = current_subsample.max()\n            split_point = np.random.uniform(min_val, max_val)\n            max_leaf_count = 0\n            leaf_index = -1\n            for (i, val) in enumerate(current_subsample):\n                if val == split_point:\n                    leaf_index = i\n                    count = current_subsample[i]\n                    if count > max_leaf_count:\n                        max_leaf_count = count\n                        leaf_index = i\n            if leaf_index == -1:\n                break\n            trees.append({'subsample': current_subsample, 'leaf_index': leaf_index, 'path_length': path_lengths, 'depth': depth + 1})\n            depth += 1\n        scores = []\n        for (idx, x) in enumerate(X):\n            score = 2 ** (-sum((tree['path_length'][idx] for tree in trees)))\n            scores.append(score)\n        avg_h = sum((tree['path_length'][idx] for tree in trees)) / len(trees)\n        phi = 2 * math.log(len(trees) - 1) - 2 * (len(trees) - 1) / len(trees)\n        s_score = 2 ** (-avg_h / phi)\n        outliers_indices = []\n        for (idx, score) in enumerate(scores):\n            if score >= s_score * epsilon:\n                outliers_indices.append(idx)\n        return sorted(outliers_indices)"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Implement a Maximum Entropy (MaxEnt) classifier using Generalized Iterative Scaling (GIS).\n    \n    Parameters:\n    - X_train: Training samples (numpy array)\n    - y_train: Training labels (numpy array)\n    - X_test: Test samples to classify (numpy array)\n    - epsilon: Convergence threshold for weight updates (float, default 1e-3)\n    - n_iter: Number of iterations to perform (int, default 100)\n    \n    Returns: A list of predicted labels for each test sample.\n    \"\"\"\n    feature_values = defaultdict(list)\n    for (x, y) in zip(X_train, y_train):\n        feature_values[x].append(y)\n    weights = np.zeros(len(feature_values))\n    for _ in range(n_iter):\n        new_weights = weights.copy()\n        for i in range(len(feature_values)):\n            current_value = feature_values[i][0]\n            label = feature_values[i][-1]\n            f = np.array([1 if i == feature_index and feature_value == value else 0 for (feature_index, feature_value, y) in zip(range(len(X_train)), X_train, y_train)])\n            log_likelihood = np.sum(weights * f)\n            new_weights[i] = weights[i] + log_likelihood / n_iter * (current_value - label)\n        max_update = max(np.abs(new_weights - weights), key=np.abs)\n        if abs(max_update) < epsilon:\n            break\n        weights = new_weights\n    predicted_labels = []\n    for (x, y) in zip(X_test, y_train):\n        prob = np.exp(np.sum(weights * (x - y)))\n        predicted_label = label_to_int(prob)\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    counts = {}\n    total_documents = len(data)\n    for (label, words) in data:\n        count = Counter(words)\n        for (word, freq) in count.items():\n            counts[word] = freq\n    word_freqs = []\n    for (word, freq) in counts.items():\n        ratio = freq / total_documents\n        word_freqs.append((word, round(ratio, 4)))\n    sorted_words = sorted(word_freqs, key=lambda x: -x[1])\n    if cut_off is None:\n        return (sorted_words, set(sorted_words))\n    elif len(sorted_words) < cut_off:\n        return (sorted_words, set(sorted_words))\n    else:\n        return (sorted_words[:cut_off], set(sorted_words[:cut_off]))"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"\n    Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D Numarray of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X, alpha)\n    b = np.mean(y) - np.dot(alpha, np.array([X[0] if y[0] == -1 else 1 for _ in range(len(X))]))\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Implements the Local Outlier Factor (LOF) algorithm from scratch.\n    \n    Args:\n        data: A 2D NumPy array of shape (n_samples, n_features).\n        k: Integer, the number of nearest neighbors to consider.\n        epsilon: A float, the threshold for considering a sample as an outlier.\n    \n    Returns:\n        tuple: A tuple containing two lists:\n            - The list of LOF scores rounded to four decimal places.\n            - The list of indices of all samples whose LOF score is strictly larger than `epsilon`.\n    \"\"\"\n    n_samples = len(data)\n    n_features = data.shape[1]\n    distances_matrix = np.sqrt(np.sum((data - np.mean(data, axis=0)) ** 2, axis=1))\n    N_k = []\n    for i in range(n_samples):\n        idx = np.argsort(distances_matrix[i])\n        N_k.append(idx[:k])\n        reach_dist = np.max(distances_matrix[i][idx[:k]], distances_matrix[i][idx[k:]])\n        LRD_k = k / np.sum(reach_dist[idx[:k]])\n        LOF_k = sum(LRD_k * reach_dist[idx[:k]] / distances_matrix[i][idx[:k]]) / distances_matrix[i][idx[:k]] / LRD_k\n    scores = np.round(LOF_k, 4)\n    outlier_indices = [i for (i, score) in enumerate(scores) if score > epsilon]\n    return (scores.tolist(), outlier_indices)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    base = 10 * (m // 2) + 5\n    X_train = np.zeros((m * n_train, 2))\n    X_val = np.zeros((m * n_val, 2))\n    for c in range(m):\n        base_c = 10 * (c // 2) + 5\n        x_min = base_c + 1\n        x_max = base_c + 9\n        y_min = base_c + 1\n        y_max = base_c + 9\n        x = np.random.uniform(x_min, x_max, size=(n_train, 1))\n        y = np.random.uniform(y_min, y_max, size=(n_train, 1))\n        X_train[:, 0] = x\n        X_train[:, 1] = y\n        x = np.random.uniform(x_min, x_max, size=(n_val, 1))\n        y = np.random.uniform(y_min, y_max, size=(n_val, 1))\n        X_val[:, 0] = x\n        X_val[:, 1] = y\n    y_train = np.zeros((m * n_train,))\n    y_val = np.zeros((m * n_val,))\n    for i in range(m * n_train):\n        y_train[i] = np.random.randint(0, m)\n    for i in range(m * n_val):\n        y_val[i] = np.random.randint(0, m)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"\n    Cluster the data points in X into k groups using the K-Means algorithm.\n\n    The first k points serve as the initial cluster centers.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    initial_centers = X[:k]\n    initial_centers = np.round(initial_centers, 4)\n    for _ in range(max_iters):\n        new_labels = []\n        for i in range(len(X)):\n            distances = np.linalg.norm(X[i] - initial_centers)\n            min_index = np.argmin(distances)\n            new_labels.append(min_index)\n        updated_centers = []\n        for center_index in range(k):\n            sum_points = np.sum(X[np.where(new_labels == center_index)], axis=0)\n            mean_center = sum_points / len(X)\n            updated_centers.append(np.round(mean_center, 4))\n        changed = False\n        for i in range(len(X)):\n            if new_labels[i] != old_labels[i]:\n                changed = True\n                break\n        if not changed:\n            break\n    old_labels = new_labels.copy()\n    return (old_labels, updated_centers)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"\n    Fits a linear model with Elastic-Net regularisation using batch gradient descent.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a float. Every number must be rounded to four decimal places.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or not X.shape[0] == X.shape[1]:\n        raise ValueError('X must be a 2D numpy array')\n    if not isinstance(y, np.ndarray) or not y.ndim == 1 or len(y) <= 0:\n        raise ValueError('y must be a 1-D numpy array')\n    if not isinstance(iterations, int) or iterations <= 0:\n        return ([0.0] * len(X), 0.0)\n    if not isinstance(l1_penalty, float) or l1_penalty <= 0:\n        return ([0.0] * len(X), 0.0)\n    if not isinstance(l2_penalty, float) or l2_penalty <= 0:\n        return ([0.0] * len(X), 0.0)\n    weights = [0.0] * len(X)\n    bias = 0.0\n    if any((w == 0 for w in weights)) or any((b == 0 for b in [bias])):\n        return ([0.0] * len(X), 0.0)\n    for _ in range(iterations):\n        predictions = np.dot(X, weights)\n        residuals = y - predictions\n        grad_weights = []\n        grad_bias = []\n        for j in range(len(weights)):\n            sign = 1.0 if weights[j] != 0 else -1.0\n            if weights[j] == 0:\n                term1 = 0.0\n                term2 = 0.0\n            else:\n                term1 = -2 * np.dot(X[:, j], residuals)\n                term2 = lambda1 * np.sign(weights[j]) + 2 * lambda2 * weights[j]\n            grad_weights.append((term1 + term2) / len(X))\n        mean_grad = np.mean(grad_weights)\n        for j in range(len(weights)):\n            weights[j] -= learning_rate * mean_grad / len(X)\n        bias -= learning_rate * mean_grad\n        weights_rounded = [round(w, 4) for w in weights]\n        bias_rounded = round(bias, 4)\n    return (weights_rounded, bias_rounded)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x)\n    current_input += 1\n    for layer_idx in range(1, len(weights)):\n        weights_layer = weights[layer_idx]\n        for neuron_idx in range(len(weights_layer[0])):\n            dot_product = np.dot(current_input[neuron_idx], weights_layer[neuron_idx])\n            current_input[neuron_idx] = np.maximum(dot_product, 0)\n    output = current_input[0]\n    output_rounded = round(output, 4)\n    return output_rounded if len(weights) == 1 else [output_rounded]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Implement the K-Means clustering algorithm from scratch.\n    \n    Parameters:\n    X - 2D NumPy array of shape (n_samples \u00d7 n_features)\n    k - Number of clusters\n    max_iters - Maximum number of iterations to perform\n    \n    Returns:\n    list of lists: sorted centroids rounded to 4 decimal places\n    \"\"\"\n    centroids = X[:k]\n    for _ in range(max_iters):\n        distances = np.sqrt(np.sum((X - centroids) ** 2, axis=1))\n        assignments = np.argmin(distances, axis=0)\n        new_centroids = []\n        for i in range(k):\n            new_centroids.append(centroids[assignments[i]])\n        converged = True\n        for i in range(k):\n            if not np.isclose(new_centroids[i], centroids[i], atol=0.0001):\n                converged = False\n                break\n        if converged:\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids, key=lambda x: x)\n    rounded_centroids = [round(c, 4) for c in sorted_centroids]\n    return rounded_centroids"}
